                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _state_switches_PARM_2
                                     12 	.globl _main
                                     13 	.globl _act_by_one_key
                                     14 	.globl _print_help
                                     15 	.globl _printoutbuf
                                     16 	.globl _state_switches
                                     17 	.globl _gpio_setup
                                     18 	.globl _disp_help
                                     19 	.globl _MODIFY_HIRC_166
                                     20 	.globl _conv_manchester2highnibble
                                     21 	.globl _conv_manchester2nibble
                                     22 	.globl _chk_manchester
                                     23 	.globl _pin_interrupt_isr
                                     24 	.globl _Timer0_ISR
                                     25 	.globl _state_machine
                                     26 	.globl _print_char
                                     27 	.globl _print_esc
                                     28 	.globl _print_linefipacket
                                     29 	.globl _send_linefi_packet
                                     30 	.globl _send_octet_to_linefi
                                     31 	.globl _uart_setup
                                     32 	.globl _Receive_Data_From_UART0_nb
                                     33 	.globl _InitialUART1_Timer3
                                     34 	.globl _printf_fast_f
                                     35 	.globl _printf
                                     36 	.globl _MOSI
                                     37 	.globl _P00
                                     38 	.globl _MISO
                                     39 	.globl _P01
                                     40 	.globl _RXD_1
                                     41 	.globl _P02
                                     42 	.globl _P03
                                     43 	.globl _STADC
                                     44 	.globl _P04
                                     45 	.globl _P05
                                     46 	.globl _TXD
                                     47 	.globl _P06
                                     48 	.globl _RXD
                                     49 	.globl _P07
                                     50 	.globl _IT0
                                     51 	.globl _IE0
                                     52 	.globl _IT1
                                     53 	.globl _IE1
                                     54 	.globl _TR0
                                     55 	.globl _TF0
                                     56 	.globl _TR1
                                     57 	.globl _TF1
                                     58 	.globl _P10
                                     59 	.globl _P11
                                     60 	.globl _P12
                                     61 	.globl _SCL
                                     62 	.globl _P13
                                     63 	.globl _SDA
                                     64 	.globl _P14
                                     65 	.globl _P15
                                     66 	.globl _TXD_1
                                     67 	.globl _P16
                                     68 	.globl _P17
                                     69 	.globl _RI
                                     70 	.globl _TI
                                     71 	.globl _RB8
                                     72 	.globl _TB8
                                     73 	.globl _REN
                                     74 	.globl _SM2
                                     75 	.globl _SM1
                                     76 	.globl _FE
                                     77 	.globl _SM0
                                     78 	.globl _P20
                                     79 	.globl _EX0
                                     80 	.globl _ET0
                                     81 	.globl _EX1
                                     82 	.globl _ET1
                                     83 	.globl _ES
                                     84 	.globl _EBOD
                                     85 	.globl _EADC
                                     86 	.globl _EA
                                     87 	.globl _P30
                                     88 	.globl _PX0
                                     89 	.globl _PT0
                                     90 	.globl _PX1
                                     91 	.globl _PT1
                                     92 	.globl _PS
                                     93 	.globl _PBOD
                                     94 	.globl _PADC
                                     95 	.globl _I2CPX
                                     96 	.globl _AA
                                     97 	.globl _SI
                                     98 	.globl _STO
                                     99 	.globl _STA
                                    100 	.globl _I2CEN
                                    101 	.globl _CM_RL2
                                    102 	.globl _TR2
                                    103 	.globl _TF2
                                    104 	.globl _P
                                    105 	.globl _OV
                                    106 	.globl _RS0
                                    107 	.globl _RS1
                                    108 	.globl _F0
                                    109 	.globl _AC
                                    110 	.globl _CY
                                    111 	.globl _CLRPWM
                                    112 	.globl _PWMF
                                    113 	.globl _LOAD
                                    114 	.globl _PWMRUN
                                    115 	.globl _ADCHS0
                                    116 	.globl _ADCHS1
                                    117 	.globl _ADCHS2
                                    118 	.globl _ADCHS3
                                    119 	.globl _ETGSEL0
                                    120 	.globl _ETGSEL1
                                    121 	.globl _ADCS
                                    122 	.globl _ADCF
                                    123 	.globl _RI_1
                                    124 	.globl _TI_1
                                    125 	.globl _RB8_1
                                    126 	.globl _TB8_1
                                    127 	.globl _REN_1
                                    128 	.globl _SM2_1
                                    129 	.globl _SM1_1
                                    130 	.globl _FE_1
                                    131 	.globl _SM0_1
                                    132 	.globl _EIPH1
                                    133 	.globl _EIP1
                                    134 	.globl _PMD
                                    135 	.globl _PMEN
                                    136 	.globl _PDTCNT
                                    137 	.globl _PDTEN
                                    138 	.globl _SCON_1
                                    139 	.globl _EIPH
                                    140 	.globl _AINDIDS
                                    141 	.globl _SPDR
                                    142 	.globl _SPSR
                                    143 	.globl _SPCR2
                                    144 	.globl _SPCR
                                    145 	.globl _CAPCON4
                                    146 	.globl _CAPCON3
                                    147 	.globl _B
                                    148 	.globl _EIP
                                    149 	.globl _C2H
                                    150 	.globl _C2L
                                    151 	.globl _PIF
                                    152 	.globl _PIPEN
                                    153 	.globl _PINEN
                                    154 	.globl _PICON
                                    155 	.globl _ADCCON0
                                    156 	.globl _C1H
                                    157 	.globl _C1L
                                    158 	.globl _C0H
                                    159 	.globl _C0L
                                    160 	.globl _ADCDLY
                                    161 	.globl _ADCCON2
                                    162 	.globl _ADCCON1
                                    163 	.globl _ACC
                                    164 	.globl _PWMCON1
                                    165 	.globl _PIOCON0
                                    166 	.globl _PWM3L
                                    167 	.globl _PWM2L
                                    168 	.globl _PWM1L
                                    169 	.globl _PWM0L
                                    170 	.globl _PWMPL
                                    171 	.globl _PWMCON0
                                    172 	.globl _FBD
                                    173 	.globl _PNP
                                    174 	.globl _PWM3H
                                    175 	.globl _PWM2H
                                    176 	.globl _PWM1H
                                    177 	.globl _PWM0H
                                    178 	.globl _PWMPH
                                    179 	.globl _PSW
                                    180 	.globl _ADCMPH
                                    181 	.globl _ADCMPL
                                    182 	.globl _PWM5L
                                    183 	.globl _TH2
                                    184 	.globl _PWM4L
                                    185 	.globl _TL2
                                    186 	.globl _RCMP2H
                                    187 	.globl _RCMP2L
                                    188 	.globl _T2MOD
                                    189 	.globl _T2CON
                                    190 	.globl _TA
                                    191 	.globl _PIOCON1
                                    192 	.globl _RH3
                                    193 	.globl _PWM5H
                                    194 	.globl _RL3
                                    195 	.globl _PWM4H
                                    196 	.globl _T3CON
                                    197 	.globl _ADCRH
                                    198 	.globl _ADCRL
                                    199 	.globl _I2ADDR
                                    200 	.globl _I2CON
                                    201 	.globl _I2TOC
                                    202 	.globl _I2CLK
                                    203 	.globl _I2STAT
                                    204 	.globl _I2DAT
                                    205 	.globl _SADDR_1
                                    206 	.globl _SADEN_1
                                    207 	.globl _SADEN
                                    208 	.globl _IP
                                    209 	.globl _PWMINTC
                                    210 	.globl _IPH
                                    211 	.globl _P2S
                                    212 	.globl _P1SR
                                    213 	.globl _P1M2
                                    214 	.globl _P1S
                                    215 	.globl _P1M1
                                    216 	.globl _P0SR
                                    217 	.globl _P0M2
                                    218 	.globl _P0S
                                    219 	.globl _P0M1
                                    220 	.globl _P3
                                    221 	.globl _IAPCN
                                    222 	.globl _IAPFD
                                    223 	.globl _P3SR
                                    224 	.globl _P3M2
                                    225 	.globl _P3S
                                    226 	.globl _P3M1
                                    227 	.globl _BODCON1
                                    228 	.globl _WDCON
                                    229 	.globl _SADDR
                                    230 	.globl _IE
                                    231 	.globl _IAPAH
                                    232 	.globl _IAPAL
                                    233 	.globl _IAPUEN
                                    234 	.globl _IAPTRG
                                    235 	.globl _BODCON0
                                    236 	.globl _AUXR1
                                    237 	.globl _P2
                                    238 	.globl _CHPCON
                                    239 	.globl _EIE1
                                    240 	.globl _EIE
                                    241 	.globl _SBUF_1
                                    242 	.globl _SBUF
                                    243 	.globl _SCON
                                    244 	.globl _CKEN
                                    245 	.globl _CKSWT
                                    246 	.globl _CKDIV
                                    247 	.globl _CAPCON2
                                    248 	.globl _CAPCON1
                                    249 	.globl _CAPCON0
                                    250 	.globl _SFRS
                                    251 	.globl _P1
                                    252 	.globl _WKCON
                                    253 	.globl _CKCON
                                    254 	.globl _TH1
                                    255 	.globl _TH0
                                    256 	.globl _TL1
                                    257 	.globl _TL0
                                    258 	.globl _TMOD
                                    259 	.globl _TCON
                                    260 	.globl _PCON
                                    261 	.globl _RWK
                                    262 	.globl _RCTRIM1
                                    263 	.globl _RCTRIM0
                                    264 	.globl _DPH
                                    265 	.globl _DPL
                                    266 	.globl _SP
                                    267 	.globl _P0
                                    268 	.globl _gpu32UartSpeed
                                    269 	.globl _gu16TimeCnt
                                    270 	.globl _gpu8Data2
                                    271 	.globl _gpu8Data
                                    272 	.globl _gcUartInputMode
                                    273 	.globl _act_by_one_key_PARM_3
                                    274 	.globl _act_by_one_key_PARM_2
                                    275 	.globl _printoutbuf_PARM_2
                                    276 	.globl _state_machine_PARM_4
                                    277 	.globl _state_machine_PARM_3
                                    278 	.globl _state_machine_PARM_2
                                    279 	.globl _gu8UART
                                    280 	.globl _putchar
                                    281 ;--------------------------------------------------------
                                    282 ; special function registers
                                    283 ;--------------------------------------------------------
                                    284 	.area RSEG    (ABS,DATA)
      000000                        285 	.org 0x0000
                           000080   286 _P0	=	0x0080
                           000081   287 _SP	=	0x0081
                           000082   288 _DPL	=	0x0082
                           000083   289 _DPH	=	0x0083
                           000084   290 _RCTRIM0	=	0x0084
                           000085   291 _RCTRIM1	=	0x0085
                           000086   292 _RWK	=	0x0086
                           000087   293 _PCON	=	0x0087
                           000088   294 _TCON	=	0x0088
                           000089   295 _TMOD	=	0x0089
                           00008A   296 _TL0	=	0x008a
                           00008B   297 _TL1	=	0x008b
                           00008C   298 _TH0	=	0x008c
                           00008D   299 _TH1	=	0x008d
                           00008E   300 _CKCON	=	0x008e
                           00008F   301 _WKCON	=	0x008f
                           000090   302 _P1	=	0x0090
                           000091   303 _SFRS	=	0x0091
                           000092   304 _CAPCON0	=	0x0092
                           000093   305 _CAPCON1	=	0x0093
                           000094   306 _CAPCON2	=	0x0094
                           000095   307 _CKDIV	=	0x0095
                           000096   308 _CKSWT	=	0x0096
                           000097   309 _CKEN	=	0x0097
                           000098   310 _SCON	=	0x0098
                           000099   311 _SBUF	=	0x0099
                           00009A   312 _SBUF_1	=	0x009a
                           00009B   313 _EIE	=	0x009b
                           00009C   314 _EIE1	=	0x009c
                           00009F   315 _CHPCON	=	0x009f
                           0000A0   316 _P2	=	0x00a0
                           0000A2   317 _AUXR1	=	0x00a2
                           0000A3   318 _BODCON0	=	0x00a3
                           0000A4   319 _IAPTRG	=	0x00a4
                           0000A5   320 _IAPUEN	=	0x00a5
                           0000A6   321 _IAPAL	=	0x00a6
                           0000A7   322 _IAPAH	=	0x00a7
                           0000A8   323 _IE	=	0x00a8
                           0000A9   324 _SADDR	=	0x00a9
                           0000AA   325 _WDCON	=	0x00aa
                           0000AB   326 _BODCON1	=	0x00ab
                           0000AC   327 _P3M1	=	0x00ac
                           0000AC   328 _P3S	=	0x00ac
                           0000AD   329 _P3M2	=	0x00ad
                           0000AD   330 _P3SR	=	0x00ad
                           0000AE   331 _IAPFD	=	0x00ae
                           0000AF   332 _IAPCN	=	0x00af
                           0000B0   333 _P3	=	0x00b0
                           0000B1   334 _P0M1	=	0x00b1
                           0000B1   335 _P0S	=	0x00b1
                           0000B2   336 _P0M2	=	0x00b2
                           0000B2   337 _P0SR	=	0x00b2
                           0000B3   338 _P1M1	=	0x00b3
                           0000B3   339 _P1S	=	0x00b3
                           0000B4   340 _P1M2	=	0x00b4
                           0000B4   341 _P1SR	=	0x00b4
                           0000B5   342 _P2S	=	0x00b5
                           0000B7   343 _IPH	=	0x00b7
                           0000B7   344 _PWMINTC	=	0x00b7
                           0000B8   345 _IP	=	0x00b8
                           0000B9   346 _SADEN	=	0x00b9
                           0000BA   347 _SADEN_1	=	0x00ba
                           0000BB   348 _SADDR_1	=	0x00bb
                           0000BC   349 _I2DAT	=	0x00bc
                           0000BD   350 _I2STAT	=	0x00bd
                           0000BE   351 _I2CLK	=	0x00be
                           0000BF   352 _I2TOC	=	0x00bf
                           0000C0   353 _I2CON	=	0x00c0
                           0000C1   354 _I2ADDR	=	0x00c1
                           0000C2   355 _ADCRL	=	0x00c2
                           0000C3   356 _ADCRH	=	0x00c3
                           0000C4   357 _T3CON	=	0x00c4
                           0000C4   358 _PWM4H	=	0x00c4
                           0000C5   359 _RL3	=	0x00c5
                           0000C5   360 _PWM5H	=	0x00c5
                           0000C6   361 _RH3	=	0x00c6
                           0000C6   362 _PIOCON1	=	0x00c6
                           0000C7   363 _TA	=	0x00c7
                           0000C8   364 _T2CON	=	0x00c8
                           0000C9   365 _T2MOD	=	0x00c9
                           0000CA   366 _RCMP2L	=	0x00ca
                           0000CB   367 _RCMP2H	=	0x00cb
                           0000CC   368 _TL2	=	0x00cc
                           0000CC   369 _PWM4L	=	0x00cc
                           0000CD   370 _TH2	=	0x00cd
                           0000CD   371 _PWM5L	=	0x00cd
                           0000CE   372 _ADCMPL	=	0x00ce
                           0000CF   373 _ADCMPH	=	0x00cf
                           0000D0   374 _PSW	=	0x00d0
                           0000D1   375 _PWMPH	=	0x00d1
                           0000D2   376 _PWM0H	=	0x00d2
                           0000D3   377 _PWM1H	=	0x00d3
                           0000D4   378 _PWM2H	=	0x00d4
                           0000D5   379 _PWM3H	=	0x00d5
                           0000D6   380 _PNP	=	0x00d6
                           0000D7   381 _FBD	=	0x00d7
                           0000D8   382 _PWMCON0	=	0x00d8
                           0000D9   383 _PWMPL	=	0x00d9
                           0000DA   384 _PWM0L	=	0x00da
                           0000DB   385 _PWM1L	=	0x00db
                           0000DC   386 _PWM2L	=	0x00dc
                           0000DD   387 _PWM3L	=	0x00dd
                           0000DE   388 _PIOCON0	=	0x00de
                           0000DF   389 _PWMCON1	=	0x00df
                           0000E0   390 _ACC	=	0x00e0
                           0000E1   391 _ADCCON1	=	0x00e1
                           0000E2   392 _ADCCON2	=	0x00e2
                           0000E3   393 _ADCDLY	=	0x00e3
                           0000E4   394 _C0L	=	0x00e4
                           0000E5   395 _C0H	=	0x00e5
                           0000E6   396 _C1L	=	0x00e6
                           0000E7   397 _C1H	=	0x00e7
                           0000E8   398 _ADCCON0	=	0x00e8
                           0000E9   399 _PICON	=	0x00e9
                           0000EA   400 _PINEN	=	0x00ea
                           0000EB   401 _PIPEN	=	0x00eb
                           0000EC   402 _PIF	=	0x00ec
                           0000ED   403 _C2L	=	0x00ed
                           0000EE   404 _C2H	=	0x00ee
                           0000EF   405 _EIP	=	0x00ef
                           0000F0   406 _B	=	0x00f0
                           0000F1   407 _CAPCON3	=	0x00f1
                           0000F2   408 _CAPCON4	=	0x00f2
                           0000F3   409 _SPCR	=	0x00f3
                           0000F3   410 _SPCR2	=	0x00f3
                           0000F4   411 _SPSR	=	0x00f4
                           0000F5   412 _SPDR	=	0x00f5
                           0000F6   413 _AINDIDS	=	0x00f6
                           0000F7   414 _EIPH	=	0x00f7
                           0000F8   415 _SCON_1	=	0x00f8
                           0000F9   416 _PDTEN	=	0x00f9
                           0000FA   417 _PDTCNT	=	0x00fa
                           0000FB   418 _PMEN	=	0x00fb
                           0000FC   419 _PMD	=	0x00fc
                           0000FE   420 _EIP1	=	0x00fe
                           0000FF   421 _EIPH1	=	0x00ff
                                    422 ;--------------------------------------------------------
                                    423 ; special function bits
                                    424 ;--------------------------------------------------------
                                    425 	.area RSEG    (ABS,DATA)
      000000                        426 	.org 0x0000
                           0000FF   427 _SM0_1	=	0x00ff
                           0000FF   428 _FE_1	=	0x00ff
                           0000FE   429 _SM1_1	=	0x00fe
                           0000FD   430 _SM2_1	=	0x00fd
                           0000FC   431 _REN_1	=	0x00fc
                           0000FB   432 _TB8_1	=	0x00fb
                           0000FA   433 _RB8_1	=	0x00fa
                           0000F9   434 _TI_1	=	0x00f9
                           0000F8   435 _RI_1	=	0x00f8
                           0000EF   436 _ADCF	=	0x00ef
                           0000EE   437 _ADCS	=	0x00ee
                           0000ED   438 _ETGSEL1	=	0x00ed
                           0000EC   439 _ETGSEL0	=	0x00ec
                           0000EB   440 _ADCHS3	=	0x00eb
                           0000EA   441 _ADCHS2	=	0x00ea
                           0000E9   442 _ADCHS1	=	0x00e9
                           0000E8   443 _ADCHS0	=	0x00e8
                           0000DF   444 _PWMRUN	=	0x00df
                           0000DE   445 _LOAD	=	0x00de
                           0000DD   446 _PWMF	=	0x00dd
                           0000DC   447 _CLRPWM	=	0x00dc
                           0000D7   448 _CY	=	0x00d7
                           0000D6   449 _AC	=	0x00d6
                           0000D5   450 _F0	=	0x00d5
                           0000D4   451 _RS1	=	0x00d4
                           0000D3   452 _RS0	=	0x00d3
                           0000D2   453 _OV	=	0x00d2
                           0000D0   454 _P	=	0x00d0
                           0000CF   455 _TF2	=	0x00cf
                           0000CA   456 _TR2	=	0x00ca
                           0000C8   457 _CM_RL2	=	0x00c8
                           0000C6   458 _I2CEN	=	0x00c6
                           0000C5   459 _STA	=	0x00c5
                           0000C4   460 _STO	=	0x00c4
                           0000C3   461 _SI	=	0x00c3
                           0000C2   462 _AA	=	0x00c2
                           0000C0   463 _I2CPX	=	0x00c0
                           0000BE   464 _PADC	=	0x00be
                           0000BD   465 _PBOD	=	0x00bd
                           0000BC   466 _PS	=	0x00bc
                           0000BB   467 _PT1	=	0x00bb
                           0000BA   468 _PX1	=	0x00ba
                           0000B9   469 _PT0	=	0x00b9
                           0000B8   470 _PX0	=	0x00b8
                           0000B0   471 _P30	=	0x00b0
                           0000AF   472 _EA	=	0x00af
                           0000AE   473 _EADC	=	0x00ae
                           0000AD   474 _EBOD	=	0x00ad
                           0000AC   475 _ES	=	0x00ac
                           0000AB   476 _ET1	=	0x00ab
                           0000AA   477 _EX1	=	0x00aa
                           0000A9   478 _ET0	=	0x00a9
                           0000A8   479 _EX0	=	0x00a8
                           0000A0   480 _P20	=	0x00a0
                           00009F   481 _SM0	=	0x009f
                           00009F   482 _FE	=	0x009f
                           00009E   483 _SM1	=	0x009e
                           00009D   484 _SM2	=	0x009d
                           00009C   485 _REN	=	0x009c
                           00009B   486 _TB8	=	0x009b
                           00009A   487 _RB8	=	0x009a
                           000099   488 _TI	=	0x0099
                           000098   489 _RI	=	0x0098
                           000097   490 _P17	=	0x0097
                           000096   491 _P16	=	0x0096
                           000096   492 _TXD_1	=	0x0096
                           000095   493 _P15	=	0x0095
                           000094   494 _P14	=	0x0094
                           000094   495 _SDA	=	0x0094
                           000093   496 _P13	=	0x0093
                           000093   497 _SCL	=	0x0093
                           000092   498 _P12	=	0x0092
                           000091   499 _P11	=	0x0091
                           000090   500 _P10	=	0x0090
                           00008F   501 _TF1	=	0x008f
                           00008E   502 _TR1	=	0x008e
                           00008D   503 _TF0	=	0x008d
                           00008C   504 _TR0	=	0x008c
                           00008B   505 _IE1	=	0x008b
                           00008A   506 _IT1	=	0x008a
                           000089   507 _IE0	=	0x0089
                           000088   508 _IT0	=	0x0088
                           000087   509 _P07	=	0x0087
                           000087   510 _RXD	=	0x0087
                           000086   511 _P06	=	0x0086
                           000086   512 _TXD	=	0x0086
                           000085   513 _P05	=	0x0085
                           000084   514 _P04	=	0x0084
                           000084   515 _STADC	=	0x0084
                           000083   516 _P03	=	0x0083
                           000082   517 _P02	=	0x0082
                           000082   518 _RXD_1	=	0x0082
                           000081   519 _P01	=	0x0081
                           000081   520 _MISO	=	0x0081
                           000080   521 _P00	=	0x0080
                           000080   522 _MOSI	=	0x0080
                                    523 ;--------------------------------------------------------
                                    524 ; overlayable register banks
                                    525 ;--------------------------------------------------------
                                    526 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        527 	.ds 8
                                    528 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        529 	.ds 8
                                    530 ;--------------------------------------------------------
                                    531 ; internal ram data
                                    532 ;--------------------------------------------------------
                                    533 	.area DSEG    (DATA)
      000000                        534 _gu8UART::
      000000                        535 	.ds 1
      000001                        536 _state_machine_PARM_2:
      000001                        537 	.ds 1
      000002                        538 _state_machine_PARM_3:
      000002                        539 	.ds 1
      000003                        540 _state_machine_PARM_4:
      000003                        541 	.ds 1
      000004                        542 _state_switches_su8PrevSW_65536_83:
      000004                        543 	.ds 1
      000005                        544 _printoutbuf_PARM_2:
      000005                        545 	.ds 3
      000008                        546 _act_by_one_key_PARM_2:
      000008                        547 	.ds 3
      00000B                        548 _act_by_one_key_PARM_3:
      00000B                        549 	.ds 3
      00000E                        550 _act_by_one_key_sloc0_1_0:
      00000E                        551 	.ds 3
      000011                        552 _main_u8RxUART_65536_105:
      000011                        553 	.ds 1
      000012                        554 _main_u8LineFiAddr_65536_105:
      000012                        555 	.ds 1
      000013                        556 _main_u8LineFiCmd_65536_105:
      000013                        557 	.ds 1
      000014                        558 _main_u8SwNum_65536_105:
      000014                        559 	.ds 1
      000015                        560 _main_stLineFiPkt_65536_105:
      000015                        561 	.ds 8
                                    562 ;--------------------------------------------------------
                                    563 ; overlayable items in internal ram 
                                    564 ;--------------------------------------------------------
                                    565 	.area	OSEG    (OVR,DATA)
                                    566 	.area	OSEG    (OVR,DATA)
                                    567 	.area	OSEG    (OVR,DATA)
                                    568 	.area	OSEG    (OVR,DATA)
                                    569 	.area	OSEG    (OVR,DATA)
                                    570 	.area	OSEG    (OVR,DATA)
      000000                        571 _state_switches_PARM_2:
      000000                        572 	.ds 3
                                    573 ;--------------------------------------------------------
                                    574 ; Stack segment in internal ram 
                                    575 ;--------------------------------------------------------
                                    576 	.area	SSEG
      000000                        577 __start__stack:
      000000                        578 	.ds	1
                                    579 
                                    580 ;--------------------------------------------------------
                                    581 ; indirectly addressable internal ram data
                                    582 ;--------------------------------------------------------
                                    583 	.area ISEG    (DATA)
                                    584 ;--------------------------------------------------------
                                    585 ; absolute internal ram data
                                    586 ;--------------------------------------------------------
                                    587 	.area IABS    (ABS,DATA)
                                    588 	.area IABS    (ABS,DATA)
                                    589 ;--------------------------------------------------------
                                    590 ; bit data
                                    591 ;--------------------------------------------------------
                                    592 	.area BSEG    (BIT)
                                    593 ;--------------------------------------------------------
                                    594 ; paged external ram data
                                    595 ;--------------------------------------------------------
                                    596 	.area PSEG    (PAG,XDATA)
                                    597 ;--------------------------------------------------------
                                    598 ; external ram data
                                    599 ;--------------------------------------------------------
                                    600 	.area XSEG    (XDATA)
      000000                        601 _gcUartInputMode::
      000000                        602 	.ds 12
      00000C                        603 _gpu8Data::
      00000C                        604 	.ds 20
      000020                        605 _gpu8Data2::
      000020                        606 	.ds 20
      000034                        607 _gu16TimeCnt::
      000034                        608 	.ds 2
      000036                        609 _gpu32UartSpeed::
      000036                        610 	.ds 56
      00006E                        611 _act_by_one_key_u8Data_65536_96:
      00006E                        612 	.ds 1
      00006F                        613 _main_pcBuf_65536_105:
      00006F                        614 	.ds 100
      0000D3                        615 _main_pu8Data_65536_105:
      0000D3                        616 	.ds 10
      0000DD                        617 _main_u8DataIdx_65536_105:
      0000DD                        618 	.ds 1
      0000DE                        619 _main_ucBufIdx_65536_105:
      0000DE                        620 	.ds 1
      0000DF                        621 _main_pstLineFiPkt_65536_105:
      0000DF                        622 	.ds 40
                                    623 ;--------------------------------------------------------
                                    624 ; absolute external ram data
                                    625 ;--------------------------------------------------------
                                    626 	.area XABS    (ABS,XDATA)
                                    627 ;--------------------------------------------------------
                                    628 ; external initialized ram data
                                    629 ;--------------------------------------------------------
                                    630 	.area HOME    (CODE)
                                    631 	.area GSINIT0 (CODE)
                                    632 	.area GSINIT1 (CODE)
                                    633 	.area GSINIT2 (CODE)
                                    634 	.area GSINIT3 (CODE)
                                    635 	.area GSINIT4 (CODE)
                                    636 	.area GSINIT5 (CODE)
                                    637 	.area GSINIT  (CODE)
                                    638 	.area GSFINAL (CODE)
                                    639 	.area CSEG    (CODE)
                                    640 ;--------------------------------------------------------
                                    641 ; interrupt vector 
                                    642 ;--------------------------------------------------------
                                    643 	.area HOME    (CODE)
      000000                        644 __interrupt_vect:
      000000 02r00r00         [24]  645 	ljmp	__sdcc_gsinit_startup
      000003 32               [24]  646 	reti
      000004                        647 	.ds	7
      00000B 02r01r86         [24]  648 	ljmp	_Timer0_ISR
      00000E                        649 	.ds	5
      000013 32               [24]  650 	reti
      000014                        651 	.ds	7
      00001B 32               [24]  652 	reti
      00001C                        653 	.ds	7
      000023 32               [24]  654 	reti
      000024                        655 	.ds	7
      00002B 32               [24]  656 	reti
      00002C                        657 	.ds	7
      000033 32               [24]  658 	reti
      000034                        659 	.ds	7
      00003B 02r01rA9         [24]  660 	ljmp	_pin_interrupt_isr
                                    661 ;--------------------------------------------------------
                                    662 ; global & static initialisations
                                    663 ;--------------------------------------------------------
                                    664 	.area HOME    (CODE)
                                    665 	.area GSINIT  (CODE)
                                    666 	.area GSFINAL (CODE)
                                    667 	.area GSINIT  (CODE)
                                    668 	.globl __sdcc_gsinit_startup
                                    669 	.globl __sdcc_program_startup
                                    670 	.globl __start__stack
                                    671 	.globl __mcs51_genRAMCLEAR
                                    672 ;------------------------------------------------------------
                                    673 ;Allocation info for local variables in function 'state_switches'
                                    674 ;------------------------------------------------------------
                                    675 ;su8PrevSW                 Allocated with name '_state_switches_su8PrevSW_65536_83'
                                    676 ;apu8SwNum                 Allocated with name '_state_switches_PARM_2'
                                    677 ;au8SW                     Allocated to registers r7 
                                    678 ;i                         Allocated to registers r2 
                                    679 ;u8Result                  Allocated to registers r6 
                                    680 ;------------------------------------------------------------
                                    681 ;	src/main.c:430: static UINT8 su8PrevSW = 0;
      000000 75*04 00         [24]  682 	mov	_state_switches_su8PrevSW_65536_83,#0x00
                                    683 ;------------------------------------------------------------
                                    684 ;Allocation info for local variables in function 'act_by_one_key'
                                    685 ;------------------------------------------------------------
                                    686 ;apu8LineFiCmd             Allocated with name '_act_by_one_key_PARM_2'
                                    687 ;apu8LineFiAddr            Allocated with name '_act_by_one_key_PARM_3'
                                    688 ;au8RxUART                 Allocated to registers r7 
                                    689 ;sloc0                     Allocated with name '_act_by_one_key_sloc0_1_0'
                                    690 ;u8Data                    Allocated with name '_act_by_one_key_u8Data_65536_96'
                                    691 ;------------------------------------------------------------
                                    692 ;	src/main.c:599: static UINT8 __xdata u8Data = 0;
      000003 90r00r6E         [24]  693 	mov	dptr,#_act_by_one_key_u8Data_65536_96
      000006 E4               [12]  694 	clr	a
      000007 F0               [24]  695 	movx	@dptr,a
                                    696 ;	src/main.c:123: UINT8 gu8UART = 0;
      000008 75*00 00         [24]  697 	mov	_gu8UART,#0x00
                                    698 ;	src/main.c:72: const char * __xdata  gcUartInputMode[MAX_STATE_UART0_INPUT] = {
      00000B 90r00r00         [24]  699 	mov	dptr,#_gcUartInputMode
      00000E 74rB5            [12]  700 	mov	a,#___str_61
      000010 F0               [24]  701 	movx	@dptr,a
      000011 74s03            [12]  702 	mov	a,#(___str_61 >> 8)
      000013 A3               [24]  703 	inc	dptr
      000014 F0               [24]  704 	movx	@dptr,a
      000015 74 80            [12]  705 	mov	a,#0x80
      000017 A3               [24]  706 	inc	dptr
      000018 F0               [24]  707 	movx	@dptr,a
      000019 90r00r03         [24]  708 	mov	dptr,#(_gcUartInputMode + 0x0003)
      00001C 74rD7            [12]  709 	mov	a,#___str_62
      00001E F0               [24]  710 	movx	@dptr,a
      00001F 74s03            [12]  711 	mov	a,#(___str_62 >> 8)
      000021 A3               [24]  712 	inc	dptr
      000022 F0               [24]  713 	movx	@dptr,a
      000023 74 80            [12]  714 	mov	a,#0x80
      000025 A3               [24]  715 	inc	dptr
      000026 F0               [24]  716 	movx	@dptr,a
      000027 90r00r06         [24]  717 	mov	dptr,#(_gcUartInputMode + 0x0006)
      00002A 74rF6            [12]  718 	mov	a,#___str_63
      00002C F0               [24]  719 	movx	@dptr,a
      00002D 74s03            [12]  720 	mov	a,#(___str_63 >> 8)
      00002F A3               [24]  721 	inc	dptr
      000030 F0               [24]  722 	movx	@dptr,a
      000031 74 80            [12]  723 	mov	a,#0x80
      000033 A3               [24]  724 	inc	dptr
      000034 F0               [24]  725 	movx	@dptr,a
      000035 90r00r09         [24]  726 	mov	dptr,#(_gcUartInputMode + 0x0009)
      000038 74r1D            [12]  727 	mov	a,#___str_64
      00003A F0               [24]  728 	movx	@dptr,a
      00003B 74s04            [12]  729 	mov	a,#(___str_64 >> 8)
      00003D A3               [24]  730 	inc	dptr
      00003E F0               [24]  731 	movx	@dptr,a
      00003F 74 80            [12]  732 	mov	a,#0x80
      000041 A3               [24]  733 	inc	dptr
      000042 F0               [24]  734 	movx	@dptr,a
                                    735 ;	src/main.c:87: UINT8 __xdata gpu8Data[20] = {
      000043 90r00r0C         [24]  736 	mov	dptr,#_gpu8Data
      000046 23               [12]  737 	rl	a
      000047 F0               [24]  738 	movx	@dptr,a
      000048 90r00r0D         [24]  739 	mov	dptr,#(_gpu8Data + 0x0001)
      00004B F0               [24]  740 	movx	@dptr,a
      00004C 90r00r0E         [24]  741 	mov	dptr,#(_gpu8Data + 0x0002)
      00004F F0               [24]  742 	movx	@dptr,a
      000050 90r00r0F         [24]  743 	mov	dptr,#(_gpu8Data + 0x0003)
      000053 F0               [24]  744 	movx	@dptr,a
      000054 90r00r10         [24]  745 	mov	dptr,#(_gpu8Data + 0x0004)
      000057 04               [12]  746 	inc	a
      000058 F0               [24]  747 	movx	@dptr,a
      000059 90r00r11         [24]  748 	mov	dptr,#(_gpu8Data + 0x0005)
      00005C F0               [24]  749 	movx	@dptr,a
      00005D 90r00r12         [24]  750 	mov	dptr,#(_gpu8Data + 0x0006)
      000060 F0               [24]  751 	movx	@dptr,a
      000061 90r00r13         [24]  752 	mov	dptr,#(_gpu8Data + 0x0007)
      000064 F0               [24]  753 	movx	@dptr,a
      000065 90r00r14         [24]  754 	mov	dptr,#(_gpu8Data + 0x0008)
      000068 04               [12]  755 	inc	a
      000069 F0               [24]  756 	movx	@dptr,a
      00006A 90r00r15         [24]  757 	mov	dptr,#(_gpu8Data + 0x0009)
      00006D F0               [24]  758 	movx	@dptr,a
      00006E 90r00r16         [24]  759 	mov	dptr,#(_gpu8Data + 0x000a)
      000071 F0               [24]  760 	movx	@dptr,a
      000072 90r00r17         [24]  761 	mov	dptr,#(_gpu8Data + 0x000b)
      000075 F0               [24]  762 	movx	@dptr,a
      000076 90r00r18         [24]  763 	mov	dptr,#(_gpu8Data + 0x000c)
      000079 04               [12]  764 	inc	a
      00007A F0               [24]  765 	movx	@dptr,a
      00007B 90r00r19         [24]  766 	mov	dptr,#(_gpu8Data + 0x000d)
      00007E F0               [24]  767 	movx	@dptr,a
      00007F 90r00r1A         [24]  768 	mov	dptr,#(_gpu8Data + 0x000e)
      000082 F0               [24]  769 	movx	@dptr,a
      000083 90r00r1B         [24]  770 	mov	dptr,#(_gpu8Data + 0x000f)
      000086 F0               [24]  771 	movx	@dptr,a
      000087 90r00r1C         [24]  772 	mov	dptr,#(_gpu8Data + 0x0010)
      00008A 04               [12]  773 	inc	a
      00008B F0               [24]  774 	movx	@dptr,a
      00008C 90r00r1D         [24]  775 	mov	dptr,#(_gpu8Data + 0x0011)
      00008F F0               [24]  776 	movx	@dptr,a
      000090 90r00r1E         [24]  777 	mov	dptr,#(_gpu8Data + 0x0012)
      000093 F0               [24]  778 	movx	@dptr,a
      000094 90r00r1F         [24]  779 	mov	dptr,#(_gpu8Data + 0x0013)
      000097 F0               [24]  780 	movx	@dptr,a
                                    781 ;	src/main.c:95: UINT8 __xdata gpu8Data2[20] = {
      000098 90r00r20         [24]  782 	mov	dptr,#_gpu8Data2
      00009B 74 02            [12]  783 	mov	a,#0x02
      00009D F0               [24]  784 	movx	@dptr,a
      00009E 90r00r21         [24]  785 	mov	dptr,#(_gpu8Data2 + 0x0001)
      0000A1 F0               [24]  786 	movx	@dptr,a
      0000A2 90r00r22         [24]  787 	mov	dptr,#(_gpu8Data2 + 0x0002)
      0000A5 F0               [24]  788 	movx	@dptr,a
      0000A6 90r00r23         [24]  789 	mov	dptr,#(_gpu8Data2 + 0x0003)
      0000A9 F0               [24]  790 	movx	@dptr,a
      0000AA 90r00r24         [24]  791 	mov	dptr,#(_gpu8Data2 + 0x0004)
      0000AD 14               [12]  792 	dec	a
      0000AE F0               [24]  793 	movx	@dptr,a
      0000AF 90r00r25         [24]  794 	mov	dptr,#(_gpu8Data2 + 0x0005)
      0000B2 F0               [24]  795 	movx	@dptr,a
      0000B3 90r00r26         [24]  796 	mov	dptr,#(_gpu8Data2 + 0x0006)
      0000B6 F0               [24]  797 	movx	@dptr,a
      0000B7 90r00r27         [24]  798 	mov	dptr,#(_gpu8Data2 + 0x0007)
      0000BA F0               [24]  799 	movx	@dptr,a
      0000BB 90r00r28         [24]  800 	mov	dptr,#(_gpu8Data2 + 0x0008)
      0000BE 74 04            [12]  801 	mov	a,#0x04
      0000C0 F0               [24]  802 	movx	@dptr,a
      0000C1 90r00r29         [24]  803 	mov	dptr,#(_gpu8Data2 + 0x0009)
      0000C4 F0               [24]  804 	movx	@dptr,a
      0000C5 90r00r2A         [24]  805 	mov	dptr,#(_gpu8Data2 + 0x000a)
      0000C8 F0               [24]  806 	movx	@dptr,a
      0000C9 90r00r2B         [24]  807 	mov	dptr,#(_gpu8Data2 + 0x000b)
      0000CC F0               [24]  808 	movx	@dptr,a
      0000CD 90r00r2C         [24]  809 	mov	dptr,#(_gpu8Data2 + 0x000c)
      0000D0 14               [12]  810 	dec	a
      0000D1 F0               [24]  811 	movx	@dptr,a
      0000D2 90r00r2D         [24]  812 	mov	dptr,#(_gpu8Data2 + 0x000d)
      0000D5 F0               [24]  813 	movx	@dptr,a
      0000D6 90r00r2E         [24]  814 	mov	dptr,#(_gpu8Data2 + 0x000e)
      0000D9 F0               [24]  815 	movx	@dptr,a
      0000DA 90r00r2F         [24]  816 	mov	dptr,#(_gpu8Data2 + 0x000f)
      0000DD F0               [24]  817 	movx	@dptr,a
      0000DE 90r00r30         [24]  818 	mov	dptr,#(_gpu8Data2 + 0x0010)
      0000E1 74 05            [12]  819 	mov	a,#0x05
      0000E3 F0               [24]  820 	movx	@dptr,a
      0000E4 90r00r31         [24]  821 	mov	dptr,#(_gpu8Data2 + 0x0011)
      0000E7 F0               [24]  822 	movx	@dptr,a
      0000E8 90r00r32         [24]  823 	mov	dptr,#(_gpu8Data2 + 0x0012)
      0000EB F0               [24]  824 	movx	@dptr,a
      0000EC 90r00r33         [24]  825 	mov	dptr,#(_gpu8Data2 + 0x0013)
      0000EF F0               [24]  826 	movx	@dptr,a
                                    827 ;	src/main.c:106: UINT32 __xdata gpu32UartSpeed[] = {
      0000F0 90r00r36         [24]  828 	mov	dptr,#_gpu32UartSpeed
      0000F3 74 60            [12]  829 	mov	a,#0x60
      0000F5 F0               [24]  830 	movx	@dptr,a
      0000F6 74 09            [12]  831 	mov	a,#0x09
      0000F8 A3               [24]  832 	inc	dptr
      0000F9 F0               [24]  833 	movx	@dptr,a
      0000FA E4               [12]  834 	clr	a
      0000FB A3               [24]  835 	inc	dptr
      0000FC F0               [24]  836 	movx	@dptr,a
      0000FD A3               [24]  837 	inc	dptr
      0000FE F0               [24]  838 	movx	@dptr,a
      0000FF 90r00r3A         [24]  839 	mov	dptr,#(_gpu32UartSpeed + 0x0004)
      000102 74 80            [12]  840 	mov	a,#0x80
      000104 F0               [24]  841 	movx	@dptr,a
      000105 74 70            [12]  842 	mov	a,#0x70
      000107 A3               [24]  843 	inc	dptr
      000108 F0               [24]  844 	movx	@dptr,a
      000109 E4               [12]  845 	clr	a
      00010A A3               [24]  846 	inc	dptr
      00010B F0               [24]  847 	movx	@dptr,a
      00010C A3               [24]  848 	inc	dptr
      00010D F0               [24]  849 	movx	@dptr,a
      00010E 90r00r3E         [24]  850 	mov	dptr,#(_gpu32UartSpeed + 0x0008)
      000111 F0               [24]  851 	movx	@dptr,a
      000112 74 96            [12]  852 	mov	a,#0x96
      000114 A3               [24]  853 	inc	dptr
      000115 F0               [24]  854 	movx	@dptr,a
      000116 E4               [12]  855 	clr	a
      000117 A3               [24]  856 	inc	dptr
      000118 F0               [24]  857 	movx	@dptr,a
      000119 A3               [24]  858 	inc	dptr
      00011A F0               [24]  859 	movx	@dptr,a
      00011B 90r00r42         [24]  860 	mov	dptr,#(_gpu32UartSpeed + 0x000c)
      00011E F0               [24]  861 	movx	@dptr,a
      00011F 74 E1            [12]  862 	mov	a,#0xe1
      000121 A3               [24]  863 	inc	dptr
      000122 F0               [24]  864 	movx	@dptr,a
      000123 E4               [12]  865 	clr	a
      000124 A3               [24]  866 	inc	dptr
      000125 F0               [24]  867 	movx	@dptr,a
      000126 A3               [24]  868 	inc	dptr
      000127 F0               [24]  869 	movx	@dptr,a
      000128 90r00r46         [24]  870 	mov	dptr,#(_gpu32UartSpeed + 0x0010)
      00012B F0               [24]  871 	movx	@dptr,a
      00012C 74 C2            [12]  872 	mov	a,#0xc2
      00012E A3               [24]  873 	inc	dptr
      00012F F0               [24]  874 	movx	@dptr,a
      000130 74 01            [12]  875 	mov	a,#0x01
      000132 A3               [24]  876 	inc	dptr
      000133 F0               [24]  877 	movx	@dptr,a
      000134 E4               [12]  878 	clr	a
      000135 A3               [24]  879 	inc	dptr
      000136 F0               [24]  880 	movx	@dptr,a
      000137 90r00r4A         [24]  881 	mov	dptr,#(_gpu32UartSpeed + 0x0014)
      00013A F0               [24]  882 	movx	@dptr,a
      00013B 74 84            [12]  883 	mov	a,#0x84
      00013D A3               [24]  884 	inc	dptr
      00013E F0               [24]  885 	movx	@dptr,a
      00013F 74 03            [12]  886 	mov	a,#0x03
      000141 A3               [24]  887 	inc	dptr
      000142 F0               [24]  888 	movx	@dptr,a
      000143 E4               [12]  889 	clr	a
      000144 A3               [24]  890 	inc	dptr
      000145 F0               [24]  891 	movx	@dptr,a
      000146 90r00r4E         [24]  892 	mov	dptr,#(_gpu32UartSpeed + 0x0018)
      000149 74 E0            [12]  893 	mov	a,#0xe0
      00014B F0               [24]  894 	movx	@dptr,a
      00014C 74 93            [12]  895 	mov	a,#0x93
      00014E A3               [24]  896 	inc	dptr
      00014F F0               [24]  897 	movx	@dptr,a
      000150 74 04            [12]  898 	mov	a,#0x04
      000152 A3               [24]  899 	inc	dptr
      000153 F0               [24]  900 	movx	@dptr,a
      000154 E4               [12]  901 	clr	a
      000155 A3               [24]  902 	inc	dptr
      000156 F0               [24]  903 	movx	@dptr,a
      000157 90r00r52         [24]  904 	mov	dptr,#(_gpu32UartSpeed + 0x001c)
      00015A F0               [24]  905 	movx	@dptr,a
      00015B 74 08            [12]  906 	mov	a,#0x08
      00015D A3               [24]  907 	inc	dptr
      00015E F0               [24]  908 	movx	@dptr,a
      00015F 14               [12]  909 	dec	a
      000160 A3               [24]  910 	inc	dptr
      000161 F0               [24]  911 	movx	@dptr,a
      000162 E4               [12]  912 	clr	a
      000163 A3               [24]  913 	inc	dptr
      000164 F0               [24]  914 	movx	@dptr,a
      000165 90r00r56         [24]  915 	mov	dptr,#(_gpu32UartSpeed + 0x0020)
      000168 74 20            [12]  916 	mov	a,#0x20
      00016A F0               [24]  917 	movx	@dptr,a
      00016B 74 A1            [12]  918 	mov	a,#0xa1
      00016D A3               [24]  919 	inc	dptr
      00016E F0               [24]  920 	movx	@dptr,a
      00016F 74 07            [12]  921 	mov	a,#0x07
      000171 A3               [24]  922 	inc	dptr
      000172 F0               [24]  923 	movx	@dptr,a
      000173 E4               [12]  924 	clr	a
      000174 A3               [24]  925 	inc	dptr
      000175 F0               [24]  926 	movx	@dptr,a
      000176 90r00r5A         [24]  927 	mov	dptr,#(_gpu32UartSpeed + 0x0024)
      000179 74 C0            [12]  928 	mov	a,#0xc0
      00017B F0               [24]  929 	movx	@dptr,a
      00017C 74 27            [12]  930 	mov	a,#0x27
      00017E A3               [24]  931 	inc	dptr
      00017F F0               [24]  932 	movx	@dptr,a
      000180 74 09            [12]  933 	mov	a,#0x09
      000182 A3               [24]  934 	inc	dptr
      000183 F0               [24]  935 	movx	@dptr,a
      000184 E4               [12]  936 	clr	a
      000185 A3               [24]  937 	inc	dptr
      000186 F0               [24]  938 	movx	@dptr,a
      000187 90r00r5E         [24]  939 	mov	dptr,#(_gpu32UartSpeed + 0x0028)
      00018A 74 60            [12]  940 	mov	a,#0x60
      00018C F0               [24]  941 	movx	@dptr,a
      00018D 74 AE            [12]  942 	mov	a,#0xae
      00018F A3               [24]  943 	inc	dptr
      000190 F0               [24]  944 	movx	@dptr,a
      000191 74 0A            [12]  945 	mov	a,#0x0a
      000193 A3               [24]  946 	inc	dptr
      000194 F0               [24]  947 	movx	@dptr,a
      000195 E4               [12]  948 	clr	a
      000196 A3               [24]  949 	inc	dptr
      000197 F0               [24]  950 	movx	@dptr,a
      000198 90r00r62         [24]  951 	mov	dptr,#(_gpu32UartSpeed + 0x002c)
      00019B F0               [24]  952 	movx	@dptr,a
      00019C 74 35            [12]  953 	mov	a,#0x35
      00019E A3               [24]  954 	inc	dptr
      00019F F0               [24]  955 	movx	@dptr,a
      0001A0 74 0C            [12]  956 	mov	a,#0x0c
      0001A2 A3               [24]  957 	inc	dptr
      0001A3 F0               [24]  958 	movx	@dptr,a
      0001A4 E4               [12]  959 	clr	a
      0001A5 A3               [24]  960 	inc	dptr
      0001A6 F0               [24]  961 	movx	@dptr,a
      0001A7 90r00r66         [24]  962 	mov	dptr,#(_gpu32UartSpeed + 0x0030)
      0001AA 74 A0            [12]  963 	mov	a,#0xa0
      0001AC F0               [24]  964 	movx	@dptr,a
      0001AD 74 BB            [12]  965 	mov	a,#0xbb
      0001AF A3               [24]  966 	inc	dptr
      0001B0 F0               [24]  967 	movx	@dptr,a
      0001B1 74 0D            [12]  968 	mov	a,#0x0d
      0001B3 A3               [24]  969 	inc	dptr
      0001B4 F0               [24]  970 	movx	@dptr,a
      0001B5 E4               [12]  971 	clr	a
      0001B6 A3               [24]  972 	inc	dptr
      0001B7 F0               [24]  973 	movx	@dptr,a
      0001B8 90r00r6A         [24]  974 	mov	dptr,#(_gpu32UartSpeed + 0x0034)
      0001BB F0               [24]  975 	movx	@dptr,a
      0001BC 74 10            [12]  976 	mov	a,#0x10
      0001BE A3               [24]  977 	inc	dptr
      0001BF F0               [24]  978 	movx	@dptr,a
      0001C0 74 0E            [12]  979 	mov	a,#0x0e
      0001C2 A3               [24]  980 	inc	dptr
      0001C3 F0               [24]  981 	movx	@dptr,a
      0001C4 E4               [12]  982 	clr	a
      0001C5 A3               [24]  983 	inc	dptr
      0001C6 F0               [24]  984 	movx	@dptr,a
                                    985 	.area GSFINAL (CODE)
      000000 02r00r3E         [24]  986 	ljmp	__sdcc_program_startup
                                    987 ;--------------------------------------------------------
                                    988 ; Home
                                    989 ;--------------------------------------------------------
                                    990 	.area HOME    (CODE)
                                    991 	.area HOME    (CODE)
      00003E                        992 __sdcc_program_startup:
      00003E 02r0Cr25         [24]  993 	ljmp	_main
                                    994 ;	return from main will return to caller
                                    995 ;--------------------------------------------------------
                                    996 ; code
                                    997 ;--------------------------------------------------------
                                    998 	.area CSEG    (CODE)
                                    999 ;------------------------------------------------------------
                                   1000 ;Allocation info for local variables in function 'putchar'
                                   1001 ;------------------------------------------------------------
                                   1002 ;c                         Allocated to registers r6 r7 
                                   1003 ;------------------------------------------------------------
                                   1004 ;	src/main.c:127: int putchar (int c) 
                                   1005 ;	-----------------------------------------
                                   1006 ;	 function putchar
                                   1007 ;	-----------------------------------------
      000000                       1008 _putchar:
                           000007  1009 	ar7 = 0x07
                           000006  1010 	ar6 = 0x06
                           000005  1011 	ar5 = 0x05
                           000004  1012 	ar4 = 0x04
                           000003  1013 	ar3 = 0x03
                           000002  1014 	ar2 = 0x02
                           000001  1015 	ar1 = 0x01
                           000000  1016 	ar0 = 0x00
      000000 AE 82            [24] 1017 	mov	r6,dpl
                                   1018 ;	src/main.c:129: if (gu8UART == 0)  {
      000002 E5*00            [12] 1019 	mov	a,_gu8UART
      000004 70 09            [24] 1020 	jnz	00108$
                                   1021 ;	src/main.c:130: TI = 0;
                                   1022 ;	assignBit
      000006 C2 99            [12] 1023 	clr	_TI
                                   1024 ;	src/main.c:131: SBUF = c;
      000008 8E 99            [24] 1025 	mov	_SBUF,r6
                                   1026 ;	src/main.c:132: while(TI==0);
      00000A                       1027 00101$:
      00000A 20 99 09         [24] 1028 	jb	_TI,00109$
      00000D 80 FB            [24] 1029 	sjmp	00101$
      00000F                       1030 00108$:
                                   1031 ;	src/main.c:135: TI_1 = 0;
                                   1032 ;	assignBit
      00000F C2 F9            [12] 1033 	clr	_TI_1
                                   1034 ;	src/main.c:136: SBUF_1 = c;
      000011 8E 9A            [24] 1035 	mov	_SBUF_1,r6
                                   1036 ;	src/main.c:137: while(TI_1==0);
      000013                       1037 00104$:
      000013 30 F9 FD         [24] 1038 	jnb	_TI_1,00104$
      000016                       1039 00109$:
                                   1040 ;	src/main.c:139: return 0;
      000016 90 00 00         [24] 1041 	mov	dptr,#0x0000
                                   1042 ;	src/main.c:140: }
      000019 22               [24] 1043 	ret
                                   1044 ;------------------------------------------------------------
                                   1045 ;Allocation info for local variables in function 'print_esc'
                                   1046 ;------------------------------------------------------------
                                   1047 ;au8State                  Allocated to registers r7 
                                   1048 ;------------------------------------------------------------
                                   1049 ;	src/main.c:157: void print_esc(UINT8 au8State)
                                   1050 ;	-----------------------------------------
                                   1051 ;	 function print_esc
                                   1052 ;	-----------------------------------------
      00001A                       1053 _print_esc:
      00001A AF 82            [24] 1054 	mov	r7,dpl
                                   1055 ;	src/main.c:159: printf_fast_f("\n\r");
      00001C C0 07            [24] 1056 	push	ar7
      00001E 74r00            [12] 1057 	mov	a,#___str_0
      000020 C0 E0            [24] 1058 	push	acc
      000022 74s00            [12] 1059 	mov	a,#(___str_0 >> 8)
      000024 C0 E0            [24] 1060 	push	acc
      000026 12r00r00         [24] 1061 	lcall	_printf_fast_f
      000029 15 81            [12] 1062 	dec	sp
      00002B 15 81            [12] 1063 	dec	sp
      00002D D0 07            [24] 1064 	pop	ar7
                                   1065 ;	src/main.c:160: switch(au8State) {
      00002F BF 00 02         [24] 1066 	cjne	r7,#0x00,00119$
      000032 80 0A            [24] 1067 	sjmp	00101$
      000034                       1068 00119$:
      000034 BF 01 02         [24] 1069 	cjne	r7,#0x01,00120$
      000037 80 16            [24] 1070 	sjmp	00102$
      000039                       1071 00120$:
                                   1072 ;	src/main.c:161: case STATE_SELF :
      000039 BF 02 33         [24] 1073 	cjne	r7,#0x02,00104$
      00003C 80 22            [24] 1074 	sjmp	00103$
      00003E                       1075 00101$:
                                   1076 ;	src/main.c:162: printf_fast_f("self ");
      00003E 74r03            [12] 1077 	mov	a,#___str_1
      000040 C0 E0            [24] 1078 	push	acc
      000042 74s00            [12] 1079 	mov	a,#(___str_1 >> 8)
      000044 C0 E0            [24] 1080 	push	acc
      000046 12r00r00         [24] 1081 	lcall	_printf_fast_f
      000049 15 81            [12] 1082 	dec	sp
      00004B 15 81            [12] 1083 	dec	sp
                                   1084 ;	src/main.c:163: break;
                                   1085 ;	src/main.c:164: case STATE_CROSS :
      00004D 80 20            [24] 1086 	sjmp	00104$
      00004F                       1087 00102$:
                                   1088 ;	src/main.c:165: printf_fast_f("cross");
      00004F 74r09            [12] 1089 	mov	a,#___str_2
      000051 C0 E0            [24] 1090 	push	acc
      000053 74s00            [12] 1091 	mov	a,#(___str_2 >> 8)
      000055 C0 E0            [24] 1092 	push	acc
      000057 12r00r00         [24] 1093 	lcall	_printf_fast_f
      00005A 15 81            [12] 1094 	dec	sp
      00005C 15 81            [12] 1095 	dec	sp
                                   1096 ;	src/main.c:166: break;
                                   1097 ;	src/main.c:167: case STATE_BOTH :
      00005E 80 0F            [24] 1098 	sjmp	00104$
      000060                       1099 00103$:
                                   1100 ;	src/main.c:168: printf_fast_f("both ");
      000060 74r0F            [12] 1101 	mov	a,#___str_3
      000062 C0 E0            [24] 1102 	push	acc
      000064 74s00            [12] 1103 	mov	a,#(___str_3 >> 8)
      000066 C0 E0            [24] 1104 	push	acc
      000068 12r00r00         [24] 1105 	lcall	_printf_fast_f
      00006B 15 81            [12] 1106 	dec	sp
      00006D 15 81            [12] 1107 	dec	sp
                                   1108 ;	src/main.c:170: }
      00006F                       1109 00104$:
                                   1110 ;	src/main.c:171: printf_fast_f(" output:This is UART%d\n\r", gu8UART);
      00006F AE*00            [24] 1111 	mov	r6,_gu8UART
      000071 7F 00            [12] 1112 	mov	r7,#0x00
      000073 C0 06            [24] 1113 	push	ar6
      000075 C0 07            [24] 1114 	push	ar7
      000077 74r15            [12] 1115 	mov	a,#___str_4
      000079 C0 E0            [24] 1116 	push	acc
      00007B 74s00            [12] 1117 	mov	a,#(___str_4 >> 8)
      00007D C0 E0            [24] 1118 	push	acc
      00007F 12r00r00         [24] 1119 	lcall	_printf_fast_f
      000082 E5 81            [12] 1120 	mov	a,sp
      000084 24 FC            [12] 1121 	add	a,#0xfc
      000086 F5 81            [12] 1122 	mov	sp,a
                                   1123 ;	src/main.c:172: }
      000088 22               [24] 1124 	ret
                                   1125 ;------------------------------------------------------------
                                   1126 ;Allocation info for local variables in function 'print_char'
                                   1127 ;------------------------------------------------------------
                                   1128 ;au8Data                   Allocated to registers r7 
                                   1129 ;------------------------------------------------------------
                                   1130 ;	src/main.c:174: void print_char(char au8Data)
                                   1131 ;	-----------------------------------------
                                   1132 ;	 function print_char
                                   1133 ;	-----------------------------------------
      000089                       1134 _print_char:
      000089 AF 82            [24] 1135 	mov	r7,dpl
                                   1136 ;	src/main.c:176: switch(au8Data) {
      00008B BF 0D 02         [24] 1137 	cjne	r7,#0x0d,00115$
      00008E 80 04            [24] 1138 	sjmp	00102$
      000090                       1139 00115$:
      000090 BF 1B 11         [24] 1140 	cjne	r7,#0x1b,00103$
                                   1141 ;	src/main.c:178: break;
                                   1142 ;	src/main.c:179: case '\r' :
      000093 22               [24] 1143 	ret
      000094                       1144 00102$:
                                   1145 ;	src/main.c:180: printf_fast_f("\r\n");
      000094 74r2E            [12] 1146 	mov	a,#___str_5
      000096 C0 E0            [24] 1147 	push	acc
      000098 74s00            [12] 1148 	mov	a,#(___str_5 >> 8)
      00009A C0 E0            [24] 1149 	push	acc
      00009C 12r00r00         [24] 1150 	lcall	_printf_fast_f
      00009F 15 81            [12] 1151 	dec	sp
      0000A1 15 81            [12] 1152 	dec	sp
                                   1153 ;	src/main.c:181: break;
                                   1154 ;	src/main.c:182: default :
      0000A3 22               [24] 1155 	ret
      0000A4                       1156 00103$:
                                   1157 ;	src/main.c:183: printf_fast_f("%c",au8Data);
      0000A4 7E 00            [12] 1158 	mov	r6,#0x00
      0000A6 C0 07            [24] 1159 	push	ar7
      0000A8 C0 06            [24] 1160 	push	ar6
      0000AA 74r31            [12] 1161 	mov	a,#___str_6
      0000AC C0 E0            [24] 1162 	push	acc
      0000AE 74s00            [12] 1163 	mov	a,#(___str_6 >> 8)
      0000B0 C0 E0            [24] 1164 	push	acc
      0000B2 12r00r00         [24] 1165 	lcall	_printf_fast_f
      0000B5 E5 81            [12] 1166 	mov	a,sp
      0000B7 24 FC            [12] 1167 	add	a,#0xfc
      0000B9 F5 81            [12] 1168 	mov	sp,a
                                   1169 ;	src/main.c:184: }
                                   1170 ;	src/main.c:185: }
      0000BB 22               [24] 1171 	ret
                                   1172 ;------------------------------------------------------------
                                   1173 ;Allocation info for local variables in function 'state_machine'
                                   1174 ;------------------------------------------------------------
                                   1175 ;au8RxUART                 Allocated with name '_state_machine_PARM_2'
                                   1176 ;au8SelfID                 Allocated with name '_state_machine_PARM_3'
                                   1177 ;au8OtherID                Allocated with name '_state_machine_PARM_4'
                                   1178 ;au8State                  Allocated to registers r7 
                                   1179 ;------------------------------------------------------------
                                   1180 ;	src/main.c:187: UINT8 state_machine(UINT8 au8State, UINT8 au8RxUART, UINT8 au8SelfID, UINT8 au8OtherID)
                                   1181 ;	-----------------------------------------
                                   1182 ;	 function state_machine
                                   1183 ;	-----------------------------------------
      0000BC                       1184 _state_machine:
      0000BC AF 82            [24] 1185 	mov	r7,dpl
                                   1186 ;	src/main.c:189: if(au8RxUART == KEY_ESC) {
      0000BE 74 1B            [12] 1187 	mov	a,#0x1b
      0000C0 B5*01 02         [24] 1188 	cjne	a,_state_machine_PARM_2,00142$
      0000C3 80 02            [24] 1189 	sjmp	00143$
      0000C5                       1190 00142$:
      0000C5 80 79            [24] 1191 	sjmp	00110$
      0000C7                       1192 00143$:
                                   1193 ;	src/main.c:190: gu8UART = au8SelfID;
      0000C7 AE*02            [24] 1194 	mov	r6,_state_machine_PARM_3
      0000C9 8E*00            [24] 1195 	mov	_gu8UART,r6
                                   1196 ;	src/main.c:191: printf_fast_f("\r\ninput:This is UART%d", gu8UART);
      0000CB AC*00            [24] 1197 	mov	r4,_gu8UART
      0000CD 7D 00            [12] 1198 	mov	r5,#0x00
      0000CF C0 07            [24] 1199 	push	ar7
      0000D1 C0 06            [24] 1200 	push	ar6
      0000D3 C0 04            [24] 1201 	push	ar4
      0000D5 C0 05            [24] 1202 	push	ar5
      0000D7 74r34            [12] 1203 	mov	a,#___str_7
      0000D9 C0 E0            [24] 1204 	push	acc
      0000DB 74s00            [12] 1205 	mov	a,#(___str_7 >> 8)
      0000DD C0 E0            [24] 1206 	push	acc
      0000DF 12r00r00         [24] 1207 	lcall	_printf_fast_f
      0000E2 E5 81            [12] 1208 	mov	a,sp
      0000E4 24 FC            [12] 1209 	add	a,#0xfc
      0000E6 F5 81            [12] 1210 	mov	sp,a
      0000E8 D0 06            [24] 1211 	pop	ar6
      0000EA D0 07            [24] 1212 	pop	ar7
                                   1213 ;	src/main.c:192: switch(au8State) {
      0000EC BF 00 02         [24] 1214 	cjne	r7,#0x00,00144$
      0000EF 80 0D            [24] 1215 	sjmp	00101$
      0000F1                       1216 00144$:
      0000F1 BF 01 02         [24] 1217 	cjne	r7,#0x01,00145$
      0000F4 80 21            [24] 1218 	sjmp	00102$
      0000F6                       1219 00145$:
      0000F6 BF 02 02         [24] 1220 	cjne	r7,#0x02,00146$
      0000F9 80 35            [24] 1221 	sjmp	00103$
      0000FB                       1222 00146$:
      0000FB 02r01r83         [24] 1223 	ljmp	00111$
                                   1224 ;	src/main.c:193: case STATE_SELF :
      0000FE                       1225 00101$:
                                   1226 ;	src/main.c:194: au8State = STATE_CROSS;
      0000FE 7F 01            [12] 1227 	mov	r7,#0x01
                                   1228 ;	src/main.c:195: gu8UART = au8SelfID;
      000100 8E*00            [24] 1229 	mov	_gu8UART,r6
                                   1230 ;	src/main.c:196: print_esc(au8State);
      000102 75 82 01         [24] 1231 	mov	dpl,#0x01
      000105 C0 07            [24] 1232 	push	ar7
      000107 12r00r1A         [24] 1233 	lcall	_print_esc
                                   1234 ;	src/main.c:197: gu8UART = au8OtherID;
      00010A 85*03*00         [24] 1235 	mov	_gu8UART,_state_machine_PARM_4
                                   1236 ;	src/main.c:198: print_esc(au8State);
      00010D 75 82 01         [24] 1237 	mov	dpl,#0x01
      000110 12r00r1A         [24] 1238 	lcall	_print_esc
      000113 D0 07            [24] 1239 	pop	ar7
                                   1240 ;	src/main.c:199: break;
                                   1241 ;	src/main.c:200: case STATE_CROSS :
      000115 80 6C            [24] 1242 	sjmp	00111$
      000117                       1243 00102$:
                                   1244 ;	src/main.c:201: au8State = STATE_BOTH;
      000117 7F 02            [12] 1245 	mov	r7,#0x02
                                   1246 ;	src/main.c:202: gu8UART = au8SelfID;
      000119 8E*00            [24] 1247 	mov	_gu8UART,r6
                                   1248 ;	src/main.c:203: print_esc(au8State);
      00011B 75 82 02         [24] 1249 	mov	dpl,#0x02
      00011E C0 07            [24] 1250 	push	ar7
      000120 12r00r1A         [24] 1251 	lcall	_print_esc
                                   1252 ;	src/main.c:204: gu8UART = au8OtherID;
      000123 85*03*00         [24] 1253 	mov	_gu8UART,_state_machine_PARM_4
                                   1254 ;	src/main.c:205: print_esc(au8State);
      000126 75 82 02         [24] 1255 	mov	dpl,#0x02
      000129 12r00r1A         [24] 1256 	lcall	_print_esc
      00012C D0 07            [24] 1257 	pop	ar7
                                   1258 ;	src/main.c:206: break;
                                   1259 ;	src/main.c:207: case STATE_BOTH :
      00012E 80 53            [24] 1260 	sjmp	00111$
      000130                       1261 00103$:
                                   1262 ;	src/main.c:208: au8State = STATE_SELF;
      000130 7F 00            [12] 1263 	mov	r7,#0x00
                                   1264 ;	src/main.c:209: gu8UART = au8SelfID;
      000132 8E*00            [24] 1265 	mov	_gu8UART,r6
                                   1266 ;	src/main.c:210: print_esc(au8State);
      000134 75 82 00         [24] 1267 	mov	dpl,#0x00
      000137 C0 07            [24] 1268 	push	ar7
      000139 12r00r1A         [24] 1269 	lcall	_print_esc
      00013C D0 07            [24] 1270 	pop	ar7
                                   1271 ;	src/main.c:212: }
      00013E 80 43            [24] 1272 	sjmp	00111$
      000140                       1273 00110$:
                                   1274 ;	src/main.c:215: switch(au8State) {
      000140 BF 00 02         [24] 1275 	cjne	r7,#0x00,00147$
      000143 80 0A            [24] 1276 	sjmp	00105$
      000145                       1277 00147$:
      000145 BF 01 02         [24] 1278 	cjne	r7,#0x01,00148$
      000148 80 14            [24] 1279 	sjmp	00106$
      00014A                       1280 00148$:
                                   1281 ;	src/main.c:216: case STATE_SELF :
      00014A BF 02 36         [24] 1282 	cjne	r7,#0x02,00111$
      00014D 80 1E            [24] 1283 	sjmp	00107$
      00014F                       1284 00105$:
                                   1285 ;	src/main.c:217: gu8UART = au8SelfID;
      00014F 85*02*00         [24] 1286 	mov	_gu8UART,_state_machine_PARM_3
                                   1287 ;	src/main.c:218: print_char(au8RxUART);
      000152 85*01 82         [24] 1288 	mov	dpl,_state_machine_PARM_2
      000155 C0 07            [24] 1289 	push	ar7
      000157 12r00r89         [24] 1290 	lcall	_print_char
      00015A D0 07            [24] 1291 	pop	ar7
                                   1292 ;	src/main.c:219: break;
                                   1293 ;	src/main.c:220: case STATE_CROSS :
      00015C 80 25            [24] 1294 	sjmp	00111$
      00015E                       1295 00106$:
                                   1296 ;	src/main.c:221: gu8UART = au8OtherID;
      00015E 85*03*00         [24] 1297 	mov	_gu8UART,_state_machine_PARM_4
                                   1298 ;	src/main.c:222: print_char(au8RxUART);
      000161 85*01 82         [24] 1299 	mov	dpl,_state_machine_PARM_2
      000164 C0 07            [24] 1300 	push	ar7
      000166 12r00r89         [24] 1301 	lcall	_print_char
      000169 D0 07            [24] 1302 	pop	ar7
                                   1303 ;	src/main.c:223: break;
                                   1304 ;	src/main.c:224: case STATE_BOTH :
      00016B 80 16            [24] 1305 	sjmp	00111$
      00016D                       1306 00107$:
                                   1307 ;	src/main.c:225: gu8UART = au8SelfID;
      00016D 85*02*00         [24] 1308 	mov	_gu8UART,_state_machine_PARM_3
                                   1309 ;	src/main.c:226: print_char(au8RxUART);
      000170 85*01 82         [24] 1310 	mov	dpl,_state_machine_PARM_2
      000173 C0 07            [24] 1311 	push	ar7
      000175 12r00r89         [24] 1312 	lcall	_print_char
                                   1313 ;	src/main.c:227: gu8UART = au8OtherID;
      000178 85*03*00         [24] 1314 	mov	_gu8UART,_state_machine_PARM_4
                                   1315 ;	src/main.c:228: print_char(au8RxUART);
      00017B 85*01 82         [24] 1316 	mov	dpl,_state_machine_PARM_2
      00017E 12r00r89         [24] 1317 	lcall	_print_char
      000181 D0 07            [24] 1318 	pop	ar7
                                   1319 ;	src/main.c:230: }
      000183                       1320 00111$:
                                   1321 ;	src/main.c:232: return au8State;
      000183 8F 82            [24] 1322 	mov	dpl,r7
                                   1323 ;	src/main.c:233: }
      000185 22               [24] 1324 	ret
                                   1325 ;------------------------------------------------------------
                                   1326 ;Allocation info for local variables in function 'Timer0_ISR'
                                   1327 ;------------------------------------------------------------
                                   1328 ;	src/main.c:235: void Timer0_ISR (void) interrupt(1)  //interrupt address is 0x000B
                                   1329 ;	-----------------------------------------
                                   1330 ;	 function Timer0_ISR
                                   1331 ;	-----------------------------------------
      000186                       1332 _Timer0_ISR:
                           00000F  1333 	ar7 = 0x0f
                           00000E  1334 	ar6 = 0x0e
                           00000D  1335 	ar5 = 0x0d
                           00000C  1336 	ar4 = 0x0c
                           00000B  1337 	ar3 = 0x0b
                           00000A  1338 	ar2 = 0x0a
                           000009  1339 	ar1 = 0x09
                           000008  1340 	ar0 = 0x08
      000186 C0 E0            [24] 1341 	push	acc
      000188 C0 82            [24] 1342 	push	dpl
      00018A C0 83            [24] 1343 	push	dph
      00018C C0 D0            [24] 1344 	push	psw
                                   1345 ;	src/main.c:237: TH0 = TH0_INIT;
      00018E 75 8C D4         [24] 1346 	mov	_TH0,#0xd4
                                   1347 ;	src/main.c:238: TL0 = TL0_INIT;
      000191 75 8A 13         [24] 1348 	mov	_TL0,#0x13
                                   1349 ;	src/main.c:239: gu16TimeCnt++;
      000194 90r00r34         [24] 1350 	mov	dptr,#_gu16TimeCnt
      000197 E0               [24] 1351 	movx	a,@dptr
      000198 24 01            [12] 1352 	add	a,#0x01
      00019A F0               [24] 1353 	movx	@dptr,a
      00019B A3               [24] 1354 	inc	dptr
      00019C E0               [24] 1355 	movx	a,@dptr
      00019D 34 00            [12] 1356 	addc	a,#0x00
      00019F F0               [24] 1357 	movx	@dptr,a
                                   1358 ;	src/main.c:248: } //void Timer0_ISR (void) __interrupt 1  //interrupt address is 0x000B
      0001A0 D0 D0            [24] 1359 	pop	psw
      0001A2 D0 83            [24] 1360 	pop	dph
      0001A4 D0 82            [24] 1361 	pop	dpl
      0001A6 D0 E0            [24] 1362 	pop	acc
      0001A8 32               [24] 1363 	reti
                                   1364 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                   1365 ;	eliminated unneeded push/pop b
                                   1366 ;------------------------------------------------------------
                                   1367 ;Allocation info for local variables in function 'pin_interrupt_isr'
                                   1368 ;------------------------------------------------------------
                                   1369 ;	src/main.c:250: void pin_interrupt_isr(void) interrupt(7)
                                   1370 ;	-----------------------------------------
                                   1371 ;	 function pin_interrupt_isr
                                   1372 ;	-----------------------------------------
      0001A9                       1373 _pin_interrupt_isr:
      0001A9 C0 E0            [24] 1374 	push	acc
                                   1375 ;	src/main.c:252: if (PIF == 0x10) {
      0001AB E5 EC            [12] 1376 	mov	a,_PIF
                                   1377 ;	src/main.c:254: PIF = 0;
      0001AD 75 EC 00         [24] 1378 	mov	_PIF,#0x00
                                   1379 ;	src/main.c:255: }// void pin_interrupt_isr (void) interrupt(7)
      0001B0 D0 E0            [24] 1380 	pop	acc
      0001B2 32               [24] 1381 	reti
                                   1382 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                   1383 ;	eliminated unneeded push/pop psw
                                   1384 ;	eliminated unneeded push/pop dpl
                                   1385 ;	eliminated unneeded push/pop dph
                                   1386 ;	eliminated unneeded push/pop b
                                   1387 ;------------------------------------------------------------
                                   1388 ;Allocation info for local variables in function 'chk_manchester'
                                   1389 ;------------------------------------------------------------
                                   1390 ;c                         Allocated to registers r7 
                                   1391 ;i                         Allocated to registers r6 
                                   1392 ;------------------------------------------------------------
                                   1393 ;	src/main.c:257: UINT8 chk_manchester(UINT8 c)
                                   1394 ;	-----------------------------------------
                                   1395 ;	 function chk_manchester
                                   1396 ;	-----------------------------------------
      0001B3                       1397 _chk_manchester:
                           000007  1398 	ar7 = 0x07
                           000006  1399 	ar6 = 0x06
                           000005  1400 	ar5 = 0x05
                           000004  1401 	ar4 = 0x04
                           000003  1402 	ar3 = 0x03
                           000002  1403 	ar2 = 0x02
                           000001  1404 	ar1 = 0x01
                           000000  1405 	ar0 = 0x00
      0001B3 AF 82            [24] 1406 	mov	r7,dpl
                                   1407 ;	src/main.c:260: for (i=0;i<4;i++) {
      0001B5 7E 00            [12] 1408 	mov	r6,#0x00
      0001B7                       1409 00104$:
                                   1410 ;	src/main.c:261: if (((c>>(2*i)) & 1) == ((c>>((2*i+1)))&1)) {
      0001B7 EE               [12] 1411 	mov	a,r6
      0001B8 2E               [12] 1412 	add	a,r6
      0001B9 FD               [12] 1413 	mov	r5,a
      0001BA 8D F0            [24] 1414 	mov	b,r5
      0001BC 05 F0            [12] 1415 	inc	b
      0001BE EF               [12] 1416 	mov	a,r7
      0001BF 80 02            [24] 1417 	sjmp	00121$
      0001C1                       1418 00120$:
      0001C1 C3               [12] 1419 	clr	c
      0001C2 13               [12] 1420 	rrc	a
      0001C3                       1421 00121$:
      0001C3 D5 F0 FB         [24] 1422 	djnz	b,00120$
      0001C6 FC               [12] 1423 	mov	r4,a
      0001C7 53 04 01         [24] 1424 	anl	ar4,#0x01
      0001CA 7B 00            [12] 1425 	mov	r3,#0x00
      0001CC ED               [12] 1426 	mov	a,r5
      0001CD 04               [12] 1427 	inc	a
      0001CE F5 F0            [12] 1428 	mov	b,a
      0001D0 05 F0            [12] 1429 	inc	b
      0001D2 EF               [12] 1430 	mov	a,r7
      0001D3 80 02            [24] 1431 	sjmp	00123$
      0001D5                       1432 00122$:
      0001D5 C3               [12] 1433 	clr	c
      0001D6 13               [12] 1434 	rrc	a
      0001D7                       1435 00123$:
      0001D7 D5 F0 FB         [24] 1436 	djnz	b,00122$
      0001DA FD               [12] 1437 	mov	r5,a
      0001DB 53 05 01         [24] 1438 	anl	ar5,#0x01
      0001DE 7A 00            [12] 1439 	mov	r2,#0x00
      0001E0 EC               [12] 1440 	mov	a,r4
      0001E1 B5 05 08         [24] 1441 	cjne	a,ar5,00105$
      0001E4 EB               [12] 1442 	mov	a,r3
      0001E5 B5 02 04         [24] 1443 	cjne	a,ar2,00105$
                                   1444 ;	src/main.c:263: return 0;
      0001E8 75 82 00         [24] 1445 	mov	dpl,#0x00
      0001EB 22               [24] 1446 	ret
      0001EC                       1447 00105$:
                                   1448 ;	src/main.c:260: for (i=0;i<4;i++) {
      0001EC 0E               [12] 1449 	inc	r6
      0001ED BE 04 00         [24] 1450 	cjne	r6,#0x04,00126$
      0001F0                       1451 00126$:
      0001F0 40 C5            [24] 1452 	jc	00104$
                                   1453 ;	src/main.c:266: return 1;
      0001F2 75 82 01         [24] 1454 	mov	dpl,#0x01
                                   1455 ;	src/main.c:267: }
      0001F5 22               [24] 1456 	ret
                                   1457 ;------------------------------------------------------------
                                   1458 ;Allocation info for local variables in function 'conv_manchester2nibble'
                                   1459 ;------------------------------------------------------------
                                   1460 ;c                         Allocated to registers r7 
                                   1461 ;i                         Allocated to registers r5 
                                   1462 ;u8Nibble                  Allocated to registers r6 
                                   1463 ;------------------------------------------------------------
                                   1464 ;	src/main.c:269: UINT8 conv_manchester2nibble(UINT8 c)
                                   1465 ;	-----------------------------------------
                                   1466 ;	 function conv_manchester2nibble
                                   1467 ;	-----------------------------------------
      0001F6                       1468 _conv_manchester2nibble:
      0001F6 AF 82            [24] 1469 	mov	r7,dpl
                                   1470 ;	src/main.c:272: UINT8 u8Nibble = 0;
      0001F8 7E 00            [12] 1471 	mov	r6,#0x00
                                   1472 ;	src/main.c:273: for (i=0;i<4;i++) {
      0001FA 7D 04            [12] 1473 	mov	r5,#0x04
      0001FC                       1474 00106$:
                                   1475 ;	src/main.c:274: if (c & 1) {
      0001FC EF               [12] 1476 	mov	a,r7
      0001FD 30 E0 03         [24] 1477 	jnb	acc.0,00102$
                                   1478 ;	src/main.c:275: u8Nibble |= 0x80;
      000200 43 06 80         [24] 1479 	orl	ar6,#0x80
      000203                       1480 00102$:
                                   1481 ;	src/main.c:277: c >>= 2;
      000203 EF               [12] 1482 	mov	a,r7
      000204 03               [12] 1483 	rr	a
      000205 03               [12] 1484 	rr	a
      000206 54 3F            [12] 1485 	anl	a,#0x3f
      000208 FF               [12] 1486 	mov	r7,a
                                   1487 ;	src/main.c:278: u8Nibble >>= 1;
      000209 EE               [12] 1488 	mov	a,r6
      00020A C3               [12] 1489 	clr	c
      00020B 13               [12] 1490 	rrc	a
      00020C FE               [12] 1491 	mov	r6,a
      00020D ED               [12] 1492 	mov	a,r5
      00020E 14               [12] 1493 	dec	a
                                   1494 ;	src/main.c:273: for (i=0;i<4;i++) {
      00020F FD               [12] 1495 	mov	r5,a
      000210 70 EA            [24] 1496 	jnz	00106$
                                   1497 ;	src/main.c:280: return u8Nibble;
      000212 8E 82            [24] 1498 	mov	dpl,r6
                                   1499 ;	src/main.c:281: }
      000214 22               [24] 1500 	ret
                                   1501 ;------------------------------------------------------------
                                   1502 ;Allocation info for local variables in function 'conv_manchester2highnibble'
                                   1503 ;------------------------------------------------------------
                                   1504 ;c                         Allocated to registers r7 
                                   1505 ;i                         Allocated to registers r5 
                                   1506 ;u8Nibble                  Allocated to registers r6 
                                   1507 ;------------------------------------------------------------
                                   1508 ;	src/main.c:283: UINT8 conv_manchester2highnibble(UINT8 c)
                                   1509 ;	-----------------------------------------
                                   1510 ;	 function conv_manchester2highnibble
                                   1511 ;	-----------------------------------------
      000215                       1512 _conv_manchester2highnibble:
      000215 AF 82            [24] 1513 	mov	r7,dpl
                                   1514 ;	src/main.c:286: UINT8 u8Nibble = 0;
      000217 7E 00            [12] 1515 	mov	r6,#0x00
                                   1516 ;	src/main.c:287: for (i=0;i<4;i++) {
      000219 7D 04            [12] 1517 	mov	r5,#0x04
      00021B                       1518 00106$:
                                   1519 ;	src/main.c:288: u8Nibble >>= 1;
      00021B EE               [12] 1520 	mov	a,r6
      00021C C3               [12] 1521 	clr	c
      00021D 13               [12] 1522 	rrc	a
      00021E FE               [12] 1523 	mov	r6,a
                                   1524 ;	src/main.c:289: if (c & 1) {
      00021F EF               [12] 1525 	mov	a,r7
      000220 30 E0 03         [24] 1526 	jnb	acc.0,00102$
                                   1527 ;	src/main.c:290: u8Nibble |= 0x80;
      000223 43 06 80         [24] 1528 	orl	ar6,#0x80
      000226                       1529 00102$:
                                   1530 ;	src/main.c:292: c >>= 2;
      000226 EF               [12] 1531 	mov	a,r7
      000227 03               [12] 1532 	rr	a
      000228 03               [12] 1533 	rr	a
      000229 54 3F            [12] 1534 	anl	a,#0x3f
      00022B FF               [12] 1535 	mov	r7,a
      00022C ED               [12] 1536 	mov	a,r5
      00022D 14               [12] 1537 	dec	a
                                   1538 ;	src/main.c:287: for (i=0;i<4;i++) {
      00022E FD               [12] 1539 	mov	r5,a
      00022F 70 EA            [24] 1540 	jnz	00106$
                                   1541 ;	src/main.c:294: return u8Nibble;
      000231 8E 82            [24] 1542 	mov	dpl,r6
                                   1543 ;	src/main.c:295: }
      000233 22               [24] 1544 	ret
                                   1545 ;------------------------------------------------------------
                                   1546 ;Allocation info for local variables in function 'MODIFY_HIRC_166'
                                   1547 ;------------------------------------------------------------
                                   1548 ;hircmap0                  Allocated to registers r7 
                                   1549 ;hircmap1                  Allocated to registers r6 
                                   1550 ;trimvalue16bit            Allocated to registers r7 r5 
                                   1551 ;------------------------------------------------------------
                                   1552 ;	src/main.c:297: void MODIFY_HIRC_166(void)
                                   1553 ;	-----------------------------------------
                                   1554 ;	 function MODIFY_HIRC_166
                                   1555 ;	-----------------------------------------
      000234                       1556 _MODIFY_HIRC_166:
                                   1557 ;	src/main.c:302: if ((PCON&SET_BIT4)==SET_BIT4) {
      000234 AE 87            [24] 1558 	mov	r6,_PCON
      000236 53 06 10         [24] 1559 	anl	ar6,#0x10
      000239 7F 00            [12] 1560 	mov	r7,#0x00
      00023B BE 10 41         [24] 1561 	cjne	r6,#0x10,00103$
      00023E BF 00 3E         [24] 1562 	cjne	r7,#0x00,00103$
                                   1563 ;	src/main.c:303: hircmap0 = RCTRIM0;
      000241 AF 84            [24] 1564 	mov	r7,_RCTRIM0
                                   1565 ;	src/main.c:304: hircmap1 = RCTRIM1;
      000243 AE 85            [24] 1566 	mov	r6,_RCTRIM1
                                   1567 ;	src/main.c:305: trimvalue16bit = ((hircmap0<<1)+(hircmap1&0x01));
      000245 7D 00            [12] 1568 	mov	r5,#0x00
      000247 EF               [12] 1569 	mov	a,r7
      000248 2F               [12] 1570 	add	a,r7
      000249 FF               [12] 1571 	mov	r7,a
      00024A ED               [12] 1572 	mov	a,r5
      00024B 33               [12] 1573 	rlc	a
      00024C FD               [12] 1574 	mov	r5,a
      00024D 53 06 01         [24] 1575 	anl	ar6,#0x01
      000250 7C 00            [12] 1576 	mov	r4,#0x00
      000252 EE               [12] 1577 	mov	a,r6
      000253 2F               [12] 1578 	add	a,r7
      000254 FF               [12] 1579 	mov	r7,a
      000255 EC               [12] 1580 	mov	a,r4
      000256 3D               [12] 1581 	addc	a,r5
      000257 FD               [12] 1582 	mov	r5,a
                                   1583 ;	src/main.c:306: trimvalue16bit = trimvalue16bit - 15;
      000258 EF               [12] 1584 	mov	a,r7
      000259 24 F1            [12] 1585 	add	a,#0xf1
      00025B FF               [12] 1586 	mov	r7,a
      00025C ED               [12] 1587 	mov	a,r5
      00025D 34 FF            [12] 1588 	addc	a,#0xff
      00025F FD               [12] 1589 	mov	r5,a
                                   1590 ;	src/main.c:307: hircmap1 = trimvalue16bit&0x01;
      000260 8F 06            [24] 1591 	mov	ar6,r7
      000262 53 06 01         [24] 1592 	anl	ar6,#0x01
                                   1593 ;	src/main.c:308: hircmap0 = trimvalue16bit>>1;
      000265 ED               [12] 1594 	mov	a,r5
      000266 C3               [12] 1595 	clr	c
      000267 13               [12] 1596 	rrc	a
      000268 CF               [12] 1597 	xch	a,r7
      000269 13               [12] 1598 	rrc	a
      00026A CF               [12] 1599 	xch	a,r7
      00026B FD               [12] 1600 	mov	r5,a
                                   1601 ;	src/main.c:309: TA=0XAA;
      00026C 75 C7 AA         [24] 1602 	mov	_TA,#0xaa
                                   1603 ;	src/main.c:310: TA=0X55;
      00026F 75 C7 55         [24] 1604 	mov	_TA,#0x55
                                   1605 ;	src/main.c:311: RCTRIM0 = hircmap0;
      000272 8F 84            [24] 1606 	mov	_RCTRIM0,r7
                                   1607 ;	src/main.c:312: TA=0XAA;
      000274 75 C7 AA         [24] 1608 	mov	_TA,#0xaa
                                   1609 ;	src/main.c:313: TA=0X55;
      000277 75 C7 55         [24] 1610 	mov	_TA,#0x55
                                   1611 ;	src/main.c:314: RCTRIM1 = hircmap1;
      00027A 8E 85            [24] 1612 	mov	_RCTRIM1,r6
                                   1613 ;	src/main.c:316: PCON &= CLR_BIT4;
      00027C 53 87 EF         [24] 1614 	anl	_PCON,#0xef
      00027F                       1615 00103$:
                                   1616 ;	src/main.c:318: }
      00027F 22               [24] 1617 	ret
                                   1618 ;------------------------------------------------------------
                                   1619 ;Allocation info for local variables in function 'disp_help'
                                   1620 ;------------------------------------------------------------
                                   1621 ;au8Code                   Allocated to registers r7 
                                   1622 ;------------------------------------------------------------
                                   1623 ;	src/main.c:319: void disp_help(UINT8 au8Code)
                                   1624 ;	-----------------------------------------
                                   1625 ;	 function disp_help
                                   1626 ;	-----------------------------------------
      000280                       1627 _disp_help:
      000280 AF 82            [24] 1628 	mov	r7,dpl
                                   1629 ;	src/main.c:321: gu8UART = 1;
      000282 75*00 01         [24] 1630 	mov	_gu8UART,#0x01
                                   1631 ;	src/main.c:322: switch(au8Code) {
      000285 BF 31 01         [24] 1632 	cjne	r7,#0x31,00165$
      000288 22               [24] 1633 	ret
      000289                       1634 00165$:
      000289 BF 32 01         [24] 1635 	cjne	r7,#0x32,00166$
      00028C 22               [24] 1636 	ret
      00028D                       1637 00166$:
      00028D BF 33 02         [24] 1638 	cjne	r7,#0x33,00167$
      000290 80 32            [24] 1639 	sjmp	00103$
      000292                       1640 00167$:
      000292 BF 34 01         [24] 1641 	cjne	r7,#0x34,00168$
      000295 22               [24] 1642 	ret
      000296                       1643 00168$:
      000296 BF 50 02         [24] 1644 	cjne	r7,#0x50,00169$
      000299 80 49            [24] 1645 	sjmp	00106$
      00029B                       1646 00169$:
      00029B BF 53 03         [24] 1647 	cjne	r7,#0x53,00170$
      00029E 02r03r24         [24] 1648 	ljmp	00110$
      0002A1                       1649 00170$:
      0002A1 BF 54 02         [24] 1650 	cjne	r7,#0x54,00171$
      0002A4 80 5E            [24] 1651 	sjmp	00108$
      0002A6                       1652 00171$:
      0002A6 BF 56 03         [24] 1653 	cjne	r7,#0x56,00172$
      0002A9 02r03r34         [24] 1654 	ljmp	00112$
      0002AC                       1655 00172$:
      0002AC BF 70 02         [24] 1656 	cjne	r7,#0x70,00173$
      0002AF 80 23            [24] 1657 	sjmp	00105$
      0002B1                       1658 00173$:
      0002B1 BF 73 02         [24] 1659 	cjne	r7,#0x73,00174$
      0002B4 80 5E            [24] 1660 	sjmp	00109$
      0002B6                       1661 00174$:
      0002B6 BF 74 02         [24] 1662 	cjne	r7,#0x74,00175$
      0002B9 80 39            [24] 1663 	sjmp	00107$
      0002BB                       1664 00175$:
      0002BB BF 76 03         [24] 1665 	cjne	r7,#0x76,00176$
      0002BE 02r03r34         [24] 1666 	ljmp	00112$
      0002C1                       1667 00176$:
      0002C1 02r03r44         [24] 1668 	ljmp	00113$
                                   1669 ;	src/main.c:327: case '3' :
      0002C4                       1670 00103$:
                                   1671 ;	src/main.c:328: printf_fast_f("Idle preamble on/off\r\n");
      0002C4 74r4B            [12] 1672 	mov	a,#___str_8
      0002C6 C0 E0            [24] 1673 	push	acc
      0002C8 74s00            [12] 1674 	mov	a,#(___str_8 >> 8)
      0002CA C0 E0            [24] 1675 	push	acc
      0002CC 12r00r00         [24] 1676 	lcall	_printf_fast_f
      0002CF 15 81            [12] 1677 	dec	sp
      0002D1 15 81            [12] 1678 	dec	sp
                                   1679 ;	src/main.c:329: break;
      0002D3 22               [24] 1680 	ret
                                   1681 ;	src/main.c:332: case 'p' :
      0002D4                       1682 00105$:
                                   1683 ;	src/main.c:333: printf_fast_f("LineFi Power Off\r\n");
      0002D4 74r62            [12] 1684 	mov	a,#___str_9
      0002D6 C0 E0            [24] 1685 	push	acc
      0002D8 74s00            [12] 1686 	mov	a,#(___str_9 >> 8)
      0002DA C0 E0            [24] 1687 	push	acc
      0002DC 12r00r00         [24] 1688 	lcall	_printf_fast_f
      0002DF 15 81            [12] 1689 	dec	sp
      0002E1 15 81            [12] 1690 	dec	sp
                                   1691 ;	src/main.c:334: break;
      0002E3 22               [24] 1692 	ret
                                   1693 ;	src/main.c:335: case 'P' :
      0002E4                       1694 00106$:
                                   1695 ;	src/main.c:336: printf_fast_f("LineFi Power On\r\n");
      0002E4 74r75            [12] 1696 	mov	a,#___str_10
      0002E6 C0 E0            [24] 1697 	push	acc
      0002E8 74s00            [12] 1698 	mov	a,#(___str_10 >> 8)
      0002EA C0 E0            [24] 1699 	push	acc
      0002EC 12r00r00         [24] 1700 	lcall	_printf_fast_f
      0002EF 15 81            [12] 1701 	dec	sp
      0002F1 15 81            [12] 1702 	dec	sp
                                   1703 ;	src/main.c:337: break;
      0002F3 22               [24] 1704 	ret
                                   1705 ;	src/main.c:338: case 't' :
      0002F4                       1706 00107$:
                                   1707 ;	src/main.c:339: printf_fast_f("LineFi Uart Tx Low\r\n");
      0002F4 74r87            [12] 1708 	mov	a,#___str_11
      0002F6 C0 E0            [24] 1709 	push	acc
      0002F8 74s00            [12] 1710 	mov	a,#(___str_11 >> 8)
      0002FA C0 E0            [24] 1711 	push	acc
      0002FC 12r00r00         [24] 1712 	lcall	_printf_fast_f
      0002FF 15 81            [12] 1713 	dec	sp
      000301 15 81            [12] 1714 	dec	sp
                                   1715 ;	src/main.c:340: break;
      000303 22               [24] 1716 	ret
                                   1717 ;	src/main.c:341: case 'T' :
      000304                       1718 00108$:
                                   1719 ;	src/main.c:342: printf_fast_f("LineFi Uart Tx High\r\n");
      000304 74r9C            [12] 1720 	mov	a,#___str_12
      000306 C0 E0            [24] 1721 	push	acc
      000308 74s00            [12] 1722 	mov	a,#(___str_12 >> 8)
      00030A C0 E0            [24] 1723 	push	acc
      00030C 12r00r00         [24] 1724 	lcall	_printf_fast_f
      00030F 15 81            [12] 1725 	dec	sp
      000311 15 81            [12] 1726 	dec	sp
                                   1727 ;	src/main.c:343: break;
      000313 22               [24] 1728 	ret
                                   1729 ;	src/main.c:344: case 's' :
      000314                       1730 00109$:
                                   1731 ;	src/main.c:345: printf_fast_f("LineFi CSC rx FSM Off\r\n");
      000314 74rB2            [12] 1732 	mov	a,#___str_13
      000316 C0 E0            [24] 1733 	push	acc
      000318 74s00            [12] 1734 	mov	a,#(___str_13 >> 8)
      00031A C0 E0            [24] 1735 	push	acc
      00031C 12r00r00         [24] 1736 	lcall	_printf_fast_f
      00031F 15 81            [12] 1737 	dec	sp
      000321 15 81            [12] 1738 	dec	sp
                                   1739 ;	src/main.c:346: break;
      000323 22               [24] 1740 	ret
                                   1741 ;	src/main.c:347: case 'S' :
      000324                       1742 00110$:
                                   1743 ;	src/main.c:348: printf_fast_f("LineFi CSC rx FSM ON\r\n");
      000324 74rCA            [12] 1744 	mov	a,#___str_14
      000326 C0 E0            [24] 1745 	push	acc
      000328 74s00            [12] 1746 	mov	a,#(___str_14 >> 8)
      00032A C0 E0            [24] 1747 	push	acc
      00032C 12r00r00         [24] 1748 	lcall	_printf_fast_f
      00032F 15 81            [12] 1749 	dec	sp
      000331 15 81            [12] 1750 	dec	sp
                                   1751 ;	src/main.c:349: break;
                                   1752 ;	src/main.c:350: case 'v' : case 'V' :
      000333 22               [24] 1753 	ret
      000334                       1754 00112$:
                                   1755 ;	src/main.c:351: printf_fast_f(__VERSION__);
      000334 74rE1            [12] 1756 	mov	a,#___str_15
      000336 C0 E0            [24] 1757 	push	acc
      000338 74s00            [12] 1758 	mov	a,#(___str_15 >> 8)
      00033A C0 E0            [24] 1759 	push	acc
      00033C 12r00r00         [24] 1760 	lcall	_printf_fast_f
      00033F 15 81            [12] 1761 	dec	sp
      000341 15 81            [12] 1762 	dec	sp
                                   1763 ;	src/main.c:352: break;
                                   1764 ;	src/main.c:353: default :
      000343 22               [24] 1765 	ret
      000344                       1766 00113$:
                                   1767 ;	src/main.c:354: printf_fast_f("1: downlink packet 1\r\n");
      000344 74rFB            [12] 1768 	mov	a,#___str_16
      000346 C0 E0            [24] 1769 	push	acc
      000348 74s00            [12] 1770 	mov	a,#(___str_16 >> 8)
      00034A C0 E0            [24] 1771 	push	acc
      00034C 12r00r00         [24] 1772 	lcall	_printf_fast_f
      00034F 15 81            [12] 1773 	dec	sp
      000351 15 81            [12] 1774 	dec	sp
                                   1775 ;	src/main.c:355: printf_fast_f("2: downlink packet 2\r\n");
      000353 74r12            [12] 1776 	mov	a,#___str_17
      000355 C0 E0            [24] 1777 	push	acc
      000357 74s01            [12] 1778 	mov	a,#(___str_17 >> 8)
      000359 C0 E0            [24] 1779 	push	acc
      00035B 12r00r00         [24] 1780 	lcall	_printf_fast_f
      00035E 15 81            [12] 1781 	dec	sp
      000360 15 81            [12] 1782 	dec	sp
                                   1783 ;	src/main.c:356: printf_fast_f("3: uplink idle preamble on/off\r\n");
      000362 74r29            [12] 1784 	mov	a,#___str_18
      000364 C0 E0            [24] 1785 	push	acc
      000366 74s01            [12] 1786 	mov	a,#(___str_18 >> 8)
      000368 C0 E0            [24] 1787 	push	acc
      00036A 12r00r00         [24] 1788 	lcall	_printf_fast_f
      00036D 15 81            [12] 1789 	dec	sp
      00036F 15 81            [12] 1790 	dec	sp
                                   1791 ;	src/main.c:357: printf_fast_f("p/P: LineFi Power off/on\r\n");
      000371 74r4A            [12] 1792 	mov	a,#___str_19
      000373 C0 E0            [24] 1793 	push	acc
      000375 74s01            [12] 1794 	mov	a,#(___str_19 >> 8)
      000377 C0 E0            [24] 1795 	push	acc
      000379 12r00r00         [24] 1796 	lcall	_printf_fast_f
      00037C 15 81            [12] 1797 	dec	sp
      00037E 15 81            [12] 1798 	dec	sp
                                   1799 ;	src/main.c:358: printf_fast_f("t/T: LineFi Uart Tx Low/High\r\n");
      000380 74r65            [12] 1800 	mov	a,#___str_20
      000382 C0 E0            [24] 1801 	push	acc
      000384 74s01            [12] 1802 	mov	a,#(___str_20 >> 8)
      000386 C0 E0            [24] 1803 	push	acc
      000388 12r00r00         [24] 1804 	lcall	_printf_fast_f
      00038B 15 81            [12] 1805 	dec	sp
      00038D 15 81            [12] 1806 	dec	sp
                                   1807 ;	src/main.c:359: printf_fast_f("s/S: LineFie CSC Rx FSM off/on\r\n");
      00038F 74r84            [12] 1808 	mov	a,#___str_21
      000391 C0 E0            [24] 1809 	push	acc
      000393 74s01            [12] 1810 	mov	a,#(___str_21 >> 8)
      000395 C0 E0            [24] 1811 	push	acc
      000397 12r00r00         [24] 1812 	lcall	_printf_fast_f
      00039A 15 81            [12] 1813 	dec	sp
      00039C 15 81            [12] 1814 	dec	sp
                                   1815 ;	src/main.c:360: printf_fast_f("test procedure: p -> P -> T -> S -> 1 or 2\r\n");
      00039E 74rA5            [12] 1816 	mov	a,#___str_22
      0003A0 C0 E0            [24] 1817 	push	acc
      0003A2 74s01            [12] 1818 	mov	a,#(___str_22 >> 8)
      0003A4 C0 E0            [24] 1819 	push	acc
      0003A6 12r00r00         [24] 1820 	lcall	_printf_fast_f
      0003A9 15 81            [12] 1821 	dec	sp
      0003AB 15 81            [12] 1822 	dec	sp
                                   1823 ;	src/main.c:362: }
                                   1824 ;	src/main.c:363: }
      0003AD 22               [24] 1825 	ret
                                   1826 ;------------------------------------------------------------
                                   1827 ;Allocation info for local variables in function 'gpio_setup'
                                   1828 ;------------------------------------------------------------
                                   1829 ;	src/main.c:365: void gpio_setup()
                                   1830 ;	-----------------------------------------
                                   1831 ;	 function gpio_setup
                                   1832 ;	-----------------------------------------
      0003AE                       1833 _gpio_setup:
                                   1834 ;	src/main.c:393: Set_All_GPIO_Quasi_Mode;
      0003AE 75 B1 00         [24] 1835 	mov	_P0M1,#0x00
      0003B1 75 B2 00         [24] 1836 	mov	_P0M2,#0x00
      0003B4 75 B3 00         [24] 1837 	mov	_P1M1,#0x00
      0003B7 75 B4 00         [24] 1838 	mov	_P1M2,#0x00
      0003BA 75 AC 00         [24] 1839 	mov	_P3M1,#0x00
      0003BD 75 AD 00         [24] 1840 	mov	_P3M2,#0x00
                                   1841 ;	src/main.c:395: P13_Input_Mode;
      0003C0 43 B3 08         [24] 1842 	orl	_P1M1,#0x08
      0003C3 53 B4 F7         [24] 1843 	anl	_P1M2,#0xf7
                                   1844 ;	src/main.c:396: P30_Input_Mode;
      0003C6 43 AC 01         [24] 1845 	orl	_P3M1,#0x01
      0003C9 53 AD FE         [24] 1846 	anl	_P3M2,#0xfe
                                   1847 ;	src/main.c:397: P17_Input_Mode;
      0003CC 43 B3 80         [24] 1848 	orl	_P1M1,#0x80
      0003CF 53 B4 7F         [24] 1849 	anl	_P1M2,#0x7f
                                   1850 ;	src/main.c:398: P00_Input_Mode;
      0003D2 43 B1 01         [24] 1851 	orl	_P0M1,#0x01
      0003D5 53 B2 FE         [24] 1852 	anl	_P0M2,#0xfe
                                   1853 ;	src/main.c:399: P15_Input_Mode;
      0003D8 43 B3 20         [24] 1854 	orl	_P1M1,#0x20
      0003DB 53 B4 DF         [24] 1855 	anl	_P1M2,#0xdf
                                   1856 ;	src/main.c:401: P05_Input_Mode; // rx_level1
      0003DE 43 B1 20         [24] 1857 	orl	_P0M1,#0x20
      0003E1 53 B2 DF         [24] 1858 	anl	_P0M2,#0xdf
                                   1859 ;	src/main.c:402: P04_Input_Mode; // rx_level2
      0003E4 43 B1 10         [24] 1860 	orl	_P0M1,#0x10
      0003E7 53 B2 EF         [24] 1861 	anl	_P0M2,#0xef
                                   1862 ;	src/main.c:404: P10_PushPull_Mode; // line fi enable
      0003EA 53 B3 FE         [24] 1863 	anl	_P1M1,#0xfe
      0003ED 43 B4 01         [24] 1864 	orl	_P1M2,#0x01
                                   1865 ;	src/main.c:405: P11_PushPull_Mode; // line fi enable1
      0003F0 53 B3 FD         [24] 1866 	anl	_P1M1,#0xfd
      0003F3 43 B4 02         [24] 1867 	orl	_P1M2,#0x02
                                   1868 ;	src/main.c:406: P12_PushPull_Mode; // line fi enable2
      0003F6 53 B3 FB         [24] 1869 	anl	_P1M1,#0xfb
      0003F9 43 B4 04         [24] 1870 	orl	_P1M2,#0x04
                                   1871 ;	src/main.c:407: LINEFI_EN0 = 0;
                                   1872 ;	assignBit
      0003FC C2 90            [12] 1873 	clr	_P10
                                   1874 ;	src/main.c:408: LINEFI_EN1 = 0;
                                   1875 ;	assignBit
      0003FE C2 91            [12] 1876 	clr	_P11
                                   1877 ;	src/main.c:409: LINEFI_EN2 = 0;
                                   1878 ;	assignBit
      000400 C2 92            [12] 1879 	clr	_P12
                                   1880 ;	src/main.c:410: }
      000402 22               [24] 1881 	ret
                                   1882 ;------------------------------------------------------------
                                   1883 ;Allocation info for local variables in function 'state_switches'
                                   1884 ;------------------------------------------------------------
                                   1885 ;su8PrevSW                 Allocated with name '_state_switches_su8PrevSW_65536_83'
                                   1886 ;apu8SwNum                 Allocated with name '_state_switches_PARM_2'
                                   1887 ;au8SW                     Allocated to registers r7 
                                   1888 ;i                         Allocated to registers r2 
                                   1889 ;u8Result                  Allocated to registers r6 
                                   1890 ;------------------------------------------------------------
                                   1891 ;	src/main.c:428: UINT8 state_switches(UINT8 au8SW, UINT8 *apu8SwNum)
                                   1892 ;	-----------------------------------------
                                   1893 ;	 function state_switches
                                   1894 ;	-----------------------------------------
      000403                       1895 _state_switches:
      000403 AF 82            [24] 1896 	mov	r7,dpl
                                   1897 ;	src/main.c:433: UINT8 u8Result = SW_NONE;
      000405 7E 04            [12] 1898 	mov	r6,#0x04
                                   1899 ;	src/main.c:434: if (su8PrevSW == au8SW) {
      000407 EF               [12] 1900 	mov	a,r7
      000408 B5*04 14         [24] 1901 	cjne	a,_state_switches_su8PrevSW_65536_83,00102$
                                   1902 ;	src/main.c:435: *apu8SwNum = 0;
      00040B AB*00            [24] 1903 	mov	r3,_state_switches_PARM_2
      00040D AC*01            [24] 1904 	mov	r4,(_state_switches_PARM_2 + 1)
      00040F AD*02            [24] 1905 	mov	r5,(_state_switches_PARM_2 + 2)
      000411 8B 82            [24] 1906 	mov	dpl,r3
      000413 8C 83            [24] 1907 	mov	dph,r4
      000415 8D F0            [24] 1908 	mov	b,r5
      000417 E4               [12] 1909 	clr	a
      000418 12r00r00         [24] 1910 	lcall	__gptrput
                                   1911 ;	src/main.c:436: return SW_NONE;
      00041B 75 82 04         [24] 1912 	mov	dpl,#0x04
      00041E 22               [24] 1913 	ret
      00041F                       1914 00102$:
                                   1915 ;	src/main.c:444: *apu8SwNum = 0;
      00041F AB*00            [24] 1916 	mov	r3,_state_switches_PARM_2
      000421 AC*01            [24] 1917 	mov	r4,(_state_switches_PARM_2 + 1)
      000423 AD*02            [24] 1918 	mov	r5,(_state_switches_PARM_2 + 2)
      000425 8B 82            [24] 1919 	mov	dpl,r3
      000427 8C 83            [24] 1920 	mov	dph,r4
      000429 8D F0            [24] 1921 	mov	b,r5
      00042B E4               [12] 1922 	clr	a
      00042C 12r00r00         [24] 1923 	lcall	__gptrput
                                   1924 ;	src/main.c:446: for (i=0;i<5;i++) {
      00042F 7A 00            [12] 1925 	mov	r2,#0x00
      000431                       1926 00113$:
                                   1927 ;	src/main.c:447: switch((su8PrevSW>>i)&1) {
      000431 8A F0            [24] 1928 	mov	b,r2
      000433 05 F0            [12] 1929 	inc	b
      000435 E5*04            [12] 1930 	mov	a,_state_switches_su8PrevSW_65536_83
      000437 80 02            [24] 1931 	sjmp	00153$
      000439                       1932 00152$:
      000439 C3               [12] 1933 	clr	c
      00043A 13               [12] 1934 	rrc	a
      00043B                       1935 00153$:
      00043B D5 F0 FB         [24] 1936 	djnz	b,00152$
      00043E F8               [12] 1937 	mov	r0,a
      00043F 53 00 01         [24] 1938 	anl	ar0,#0x01
      000442 79 00            [12] 1939 	mov	r1,#0x00
      000444 B8 00 05         [24] 1940 	cjne	r0,#0x00,00154$
      000447 B9 00 02         [24] 1941 	cjne	r1,#0x00,00154$
      00044A 80 55            [24] 1942 	sjmp	00107$
      00044C                       1943 00154$:
      00044C B8 01 05         [24] 1944 	cjne	r0,#0x01,00155$
      00044F B9 00 02         [24] 1945 	cjne	r1,#0x00,00155$
      000452 80 03            [24] 1946 	sjmp	00156$
      000454                       1947 00155$:
      000454 02r04rEC         [24] 1948 	ljmp	00114$
      000457                       1949 00156$:
                                   1950 ;	src/main.c:449: switch((au8SW>>i)&1) {
      000457 8A F0            [24] 1951 	mov	b,r2
      000459 05 F0            [12] 1952 	inc	b
      00045B EF               [12] 1953 	mov	a,r7
      00045C 80 02            [24] 1954 	sjmp	00158$
      00045E                       1955 00157$:
      00045E C3               [12] 1956 	clr	c
      00045F 13               [12] 1957 	rrc	a
      000460                       1958 00158$:
      000460 D5 F0 FB         [24] 1959 	djnz	b,00157$
      000463 F8               [12] 1960 	mov	r0,a
      000464 53 00 01         [24] 1961 	anl	ar0,#0x01
      000467 79 00            [12] 1962 	mov	r1,#0x00
      000469 B8 00 05         [24] 1963 	cjne	r0,#0x00,00159$
      00046C B9 00 02         [24] 1964 	cjne	r1,#0x00,00159$
      00046F 80 03            [24] 1965 	sjmp	00160$
      000471                       1966 00159$:
      000471 02r04rEC         [24] 1967 	ljmp	00114$
      000474                       1968 00160$:
                                   1969 ;	src/main.c:453: su8PrevSW = au8SW;
      000474 8F*04            [24] 1970 	mov	_state_switches_su8PrevSW_65536_83,r7
                                   1971 ;	src/main.c:454: *apu8SwNum |= 1<<i;
      000476 8B 82            [24] 1972 	mov	dpl,r3
      000478 8C 83            [24] 1973 	mov	dph,r4
      00047A 8D F0            [24] 1974 	mov	b,r5
      00047C 12r00r00         [24] 1975 	lcall	__gptrget
      00047F F9               [12] 1976 	mov	r1,a
      000480 8A 00            [24] 1977 	mov	ar0,r2
      000482 88 F0            [24] 1978 	mov	b,r0
      000484 05 F0            [12] 1979 	inc	b
      000486 74 01            [12] 1980 	mov	a,#0x01
      000488 80 02            [24] 1981 	sjmp	00163$
      00048A                       1982 00161$:
      00048A 25 E0            [12] 1983 	add	a,acc
      00048C                       1984 00163$:
      00048C D5 F0 FB         [24] 1985 	djnz	b,00161$
      00048F F8               [12] 1986 	mov	r0,a
      000490 E9               [12] 1987 	mov	a,r1
      000491 42 00            [12] 1988 	orl	ar0,a
      000493 8B 82            [24] 1989 	mov	dpl,r3
      000495 8C 83            [24] 1990 	mov	dph,r4
      000497 8D F0            [24] 1991 	mov	b,r5
      000499 E8               [12] 1992 	mov	a,r0
      00049A 12r00r00         [24] 1993 	lcall	__gptrput
                                   1994 ;	src/main.c:455: u8Result = SW_OFF;
      00049D 7E 00            [12] 1995 	mov	r6,#0x00
                                   1996 ;	src/main.c:459: break;
                                   1997 ;	src/main.c:460: case SW_OFF :
      00049F 80 4B            [24] 1998 	sjmp	00114$
      0004A1                       1999 00107$:
                                   2000 ;	src/main.c:461: switch((au8SW>>i)&1) {
      0004A1 8A F0            [24] 2001 	mov	b,r2
      0004A3 05 F0            [12] 2002 	inc	b
      0004A5 EF               [12] 2003 	mov	a,r7
      0004A6 80 02            [24] 2004 	sjmp	00165$
      0004A8                       2005 00164$:
      0004A8 C3               [12] 2006 	clr	c
      0004A9 13               [12] 2007 	rrc	a
      0004AA                       2008 00165$:
      0004AA D5 F0 FB         [24] 2009 	djnz	b,00164$
      0004AD F8               [12] 2010 	mov	r0,a
      0004AE 53 00 01         [24] 2011 	anl	ar0,#0x01
      0004B1 79 00            [12] 2012 	mov	r1,#0x00
      0004B3 B8 00 05         [24] 2013 	cjne	r0,#0x00,00166$
      0004B6 B9 00 02         [24] 2014 	cjne	r1,#0x00,00166$
      0004B9 80 31            [24] 2015 	sjmp	00114$
      0004BB                       2016 00166$:
      0004BB B8 01 2E         [24] 2017 	cjne	r0,#0x01,00114$
      0004BE B9 00 2B         [24] 2018 	cjne	r1,#0x00,00114$
                                   2019 ;	src/main.c:463: su8PrevSW = au8SW;
      0004C1 8F*04            [24] 2020 	mov	_state_switches_su8PrevSW_65536_83,r7
                                   2021 ;	src/main.c:464: *apu8SwNum |= 1<<i;
      0004C3 8B 82            [24] 2022 	mov	dpl,r3
      0004C5 8C 83            [24] 2023 	mov	dph,r4
      0004C7 8D F0            [24] 2024 	mov	b,r5
      0004C9 12r00r00         [24] 2025 	lcall	__gptrget
      0004CC F9               [12] 2026 	mov	r1,a
      0004CD 8A 00            [24] 2027 	mov	ar0,r2
      0004CF 88 F0            [24] 2028 	mov	b,r0
      0004D1 05 F0            [12] 2029 	inc	b
      0004D3 74 01            [12] 2030 	mov	a,#0x01
      0004D5 80 02            [24] 2031 	sjmp	00171$
      0004D7                       2032 00169$:
      0004D7 25 E0            [12] 2033 	add	a,acc
      0004D9                       2034 00171$:
      0004D9 D5 F0 FB         [24] 2035 	djnz	b,00169$
      0004DC F8               [12] 2036 	mov	r0,a
      0004DD E9               [12] 2037 	mov	a,r1
      0004DE 42 00            [12] 2038 	orl	ar0,a
      0004E0 8B 82            [24] 2039 	mov	dpl,r3
      0004E2 8C 83            [24] 2040 	mov	dph,r4
      0004E4 8D F0            [24] 2041 	mov	b,r5
      0004E6 E8               [12] 2042 	mov	a,r0
      0004E7 12r00r00         [24] 2043 	lcall	__gptrput
                                   2044 ;	src/main.c:465: u8Result = SW_ON;
      0004EA 7E 01            [12] 2045 	mov	r6,#0x01
                                   2046 ;	src/main.c:473: }
      0004EC                       2047 00114$:
                                   2048 ;	src/main.c:446: for (i=0;i<5;i++) {
      0004EC 0A               [12] 2049 	inc	r2
      0004ED BA 05 00         [24] 2050 	cjne	r2,#0x05,00172$
      0004F0                       2051 00172$:
      0004F0 50 03            [24] 2052 	jnc	00173$
      0004F2 02r04r31         [24] 2053 	ljmp	00113$
      0004F5                       2054 00173$:
                                   2055 ;	src/main.c:477: return u8Result;
      0004F5 8E 82            [24] 2056 	mov	dpl,r6
                                   2057 ;	src/main.c:565: }
      0004F7 22               [24] 2058 	ret
                                   2059 ;------------------------------------------------------------
                                   2060 ;Allocation info for local variables in function 'printoutbuf'
                                   2061 ;------------------------------------------------------------
                                   2062 ;apcBuf                    Allocated with name '_printoutbuf_PARM_2'
                                   2063 ;aucBufIdx                 Allocated to registers r7 
                                   2064 ;i                         Allocated with name '_printoutbuf_i_65536_91'
                                   2065 ;------------------------------------------------------------
                                   2066 ;	src/main.c:569: void printoutbuf(uint8 aucBufIdx, char * apcBuf)
                                   2067 ;	-----------------------------------------
                                   2068 ;	 function printoutbuf
                                   2069 ;	-----------------------------------------
      0004F8                       2070 _printoutbuf:
      0004F8 AF 82            [24] 2071 	mov	r7,dpl
                                   2072 ;	src/main.c:572: for (i=0;i<aucBufIdx;i++) {
      0004FA AC*05            [24] 2073 	mov	r4,_printoutbuf_PARM_2
      0004FC AD*06            [24] 2074 	mov	r5,(_printoutbuf_PARM_2 + 1)
      0004FE AE*07            [24] 2075 	mov	r6,(_printoutbuf_PARM_2 + 2)
      000500 7B 00            [12] 2076 	mov	r3,#0x00
      000502                       2077 00103$:
      000502 C3               [12] 2078 	clr	c
      000503 EB               [12] 2079 	mov	a,r3
      000504 9F               [12] 2080 	subb	a,r7
      000505 50 3F            [24] 2081 	jnc	00101$
                                   2082 ;	src/main.c:573: printf_fast_f("%c", *apcBuf++);
      000507 8C 82            [24] 2083 	mov	dpl,r4
      000509 8D 83            [24] 2084 	mov	dph,r5
      00050B 8E F0            [24] 2085 	mov	b,r6
      00050D 12r00r00         [24] 2086 	lcall	__gptrget
      000510 FA               [12] 2087 	mov	r2,a
      000511 A3               [24] 2088 	inc	dptr
      000512 AC 82            [24] 2089 	mov	r4,dpl
      000514 AD 83            [24] 2090 	mov	r5,dph
      000516 8A 01            [24] 2091 	mov	ar1,r2
      000518 7A 00            [12] 2092 	mov	r2,#0x00
      00051A C0 07            [24] 2093 	push	ar7
      00051C C0 06            [24] 2094 	push	ar6
      00051E C0 05            [24] 2095 	push	ar5
      000520 C0 04            [24] 2096 	push	ar4
      000522 C0 03            [24] 2097 	push	ar3
      000524 C0 01            [24] 2098 	push	ar1
      000526 C0 02            [24] 2099 	push	ar2
      000528 74r31            [12] 2100 	mov	a,#___str_6
      00052A C0 E0            [24] 2101 	push	acc
      00052C 74s00            [12] 2102 	mov	a,#(___str_6 >> 8)
      00052E C0 E0            [24] 2103 	push	acc
      000530 12r00r00         [24] 2104 	lcall	_printf_fast_f
      000533 E5 81            [12] 2105 	mov	a,sp
      000535 24 FC            [12] 2106 	add	a,#0xfc
      000537 F5 81            [12] 2107 	mov	sp,a
      000539 D0 03            [24] 2108 	pop	ar3
      00053B D0 04            [24] 2109 	pop	ar4
      00053D D0 05            [24] 2110 	pop	ar5
      00053F D0 06            [24] 2111 	pop	ar6
      000541 D0 07            [24] 2112 	pop	ar7
                                   2113 ;	src/main.c:572: for (i=0;i<aucBufIdx;i++) {
      000543 0B               [12] 2114 	inc	r3
      000544 80 BC            [24] 2115 	sjmp	00103$
      000546                       2116 00101$:
                                   2117 ;	src/main.c:575: printf_fast_f("\r\n");
      000546 74r2E            [12] 2118 	mov	a,#___str_5
      000548 C0 E0            [24] 2119 	push	acc
      00054A 74s00            [12] 2120 	mov	a,#(___str_5 >> 8)
      00054C C0 E0            [24] 2121 	push	acc
      00054E 12r00r00         [24] 2122 	lcall	_printf_fast_f
      000551 15 81            [12] 2123 	dec	sp
      000553 15 81            [12] 2124 	dec	sp
                                   2125 ;	src/main.c:576: }
      000555 22               [24] 2126 	ret
                                   2127 ;------------------------------------------------------------
                                   2128 ;Allocation info for local variables in function 'print_help'
                                   2129 ;------------------------------------------------------------
                                   2130 ;	src/main.c:579: void print_help()
                                   2131 ;	-----------------------------------------
                                   2132 ;	 function print_help
                                   2133 ;	-----------------------------------------
      000556                       2134 _print_help:
                                   2135 ;	src/main.c:581: printf_fast_f("t: timer\r\n");
      000556 74rD2            [12] 2136 	mov	a,#___str_23
      000558 C0 E0            [24] 2137 	push	acc
      00055A 74s01            [12] 2138 	mov	a,#(___str_23 >> 8)
      00055C C0 E0            [24] 2139 	push	acc
      00055E 12r00r00         [24] 2140 	lcall	_printf_fast_f
      000561 15 81            [12] 2141 	dec	sp
      000563 15 81            [12] 2142 	dec	sp
                                   2143 ;	src/main.c:582: printf_fast_f("0: LineFi EN0,1,2 off\r\n");
      000565 74rDD            [12] 2144 	mov	a,#___str_24
      000567 C0 E0            [24] 2145 	push	acc
      000569 74s01            [12] 2146 	mov	a,#(___str_24 >> 8)
      00056B C0 E0            [24] 2147 	push	acc
      00056D 12r00r00         [24] 2148 	lcall	_printf_fast_f
      000570 15 81            [12] 2149 	dec	sp
      000572 15 81            [12] 2150 	dec	sp
                                   2151 ;	src/main.c:583: printf_fast_f("1: LineFi EN0 = 1\r\n");
      000574 74rF5            [12] 2152 	mov	a,#___str_25
      000576 C0 E0            [24] 2153 	push	acc
      000578 74s01            [12] 2154 	mov	a,#(___str_25 >> 8)
      00057A C0 E0            [24] 2155 	push	acc
      00057C 12r00r00         [24] 2156 	lcall	_printf_fast_f
      00057F 15 81            [12] 2157 	dec	sp
      000581 15 81            [12] 2158 	dec	sp
                                   2159 ;	src/main.c:584: printf_fast_f("2:\r\n");
      000583 74r09            [12] 2160 	mov	a,#___str_26
      000585 C0 E0            [24] 2161 	push	acc
      000587 74s02            [12] 2162 	mov	a,#(___str_26 >> 8)
      000589 C0 E0            [24] 2163 	push	acc
      00058B 12r00r00         [24] 2164 	lcall	_printf_fast_f
      00058E 15 81            [12] 2165 	dec	sp
      000590 15 81            [12] 2166 	dec	sp
                                   2167 ;	src/main.c:585: printf_fast_f("3:\r\n");
      000592 74r0E            [12] 2168 	mov	a,#___str_27
      000594 C0 E0            [24] 2169 	push	acc
      000596 74s02            [12] 2170 	mov	a,#(___str_27 >> 8)
      000598 C0 E0            [24] 2171 	push	acc
      00059A 12r00r00         [24] 2172 	lcall	_printf_fast_f
      00059D 15 81            [12] 2173 	dec	sp
      00059F 15 81            [12] 2174 	dec	sp
                                   2175 ;	src/main.c:586: printf_fast_f("4:\r\n");
      0005A1 74r13            [12] 2176 	mov	a,#___str_28
      0005A3 C0 E0            [24] 2177 	push	acc
      0005A5 74s02            [12] 2178 	mov	a,#(___str_28 >> 8)
      0005A7 C0 E0            [24] 2179 	push	acc
      0005A9 12r00r00         [24] 2180 	lcall	_printf_fast_f
      0005AC 15 81            [12] 2181 	dec	sp
      0005AE 15 81            [12] 2182 	dec	sp
                                   2183 ;	src/main.c:587: printf_fast_f("5:\r\n");
      0005B0 74r18            [12] 2184 	mov	a,#___str_29
      0005B2 C0 E0            [24] 2185 	push	acc
      0005B4 74s02            [12] 2186 	mov	a,#(___str_29 >> 8)
      0005B6 C0 E0            [24] 2187 	push	acc
      0005B8 12r00r00         [24] 2188 	lcall	_printf_fast_f
      0005BB 15 81            [12] 2189 	dec	sp
      0005BD 15 81            [12] 2190 	dec	sp
                                   2191 ;	src/main.c:588: printf_fast_f("6:\r\n");
      0005BF 74r1D            [12] 2192 	mov	a,#___str_30
      0005C1 C0 E0            [24] 2193 	push	acc
      0005C3 74s02            [12] 2194 	mov	a,#(___str_30 >> 8)
      0005C5 C0 E0            [24] 2195 	push	acc
      0005C7 12r00r00         [24] 2196 	lcall	_printf_fast_f
      0005CA 15 81            [12] 2197 	dec	sp
      0005CC 15 81            [12] 2198 	dec	sp
                                   2199 ;	src/main.c:589: printf_fast_f("7:\r\n");
      0005CE 74r22            [12] 2200 	mov	a,#___str_31
      0005D0 C0 E0            [24] 2201 	push	acc
      0005D2 74s02            [12] 2202 	mov	a,#(___str_31 >> 8)
      0005D4 C0 E0            [24] 2203 	push	acc
      0005D6 12r00r00         [24] 2204 	lcall	_printf_fast_f
      0005D9 15 81            [12] 2205 	dec	sp
      0005DB 15 81            [12] 2206 	dec	sp
                                   2207 ;	src/main.c:590: printf_fast_f("h: Addr--\r\n");
      0005DD 74r27            [12] 2208 	mov	a,#___str_32
      0005DF C0 E0            [24] 2209 	push	acc
      0005E1 74s02            [12] 2210 	mov	a,#(___str_32 >> 8)
      0005E3 C0 E0            [24] 2211 	push	acc
      0005E5 12r00r00         [24] 2212 	lcall	_printf_fast_f
      0005E8 15 81            [12] 2213 	dec	sp
      0005EA 15 81            [12] 2214 	dec	sp
                                   2215 ;	src/main.c:591: printf_fast_f("j: Cmd--\r\n");
      0005EC 74r33            [12] 2216 	mov	a,#___str_33
      0005EE C0 E0            [24] 2217 	push	acc
      0005F0 74s02            [12] 2218 	mov	a,#(___str_33 >> 8)
      0005F2 C0 E0            [24] 2219 	push	acc
      0005F4 12r00r00         [24] 2220 	lcall	_printf_fast_f
      0005F7 15 81            [12] 2221 	dec	sp
      0005F9 15 81            [12] 2222 	dec	sp
                                   2223 ;	src/main.c:592: printf_fast_f("k: Cmd++\r\n");
      0005FB 74r3E            [12] 2224 	mov	a,#___str_34
      0005FD C0 E0            [24] 2225 	push	acc
      0005FF 74s02            [12] 2226 	mov	a,#(___str_34 >> 8)
      000601 C0 E0            [24] 2227 	push	acc
      000603 12r00r00         [24] 2228 	lcall	_printf_fast_f
      000606 15 81            [12] 2229 	dec	sp
      000608 15 81            [12] 2230 	dec	sp
                                   2231 ;	src/main.c:593: printf_fast_f("l: Addr++\r\n");
      00060A 74r49            [12] 2232 	mov	a,#___str_35
      00060C C0 E0            [24] 2233 	push	acc
      00060E 74s02            [12] 2234 	mov	a,#(___str_35 >> 8)
      000610 C0 E0            [24] 2235 	push	acc
      000612 12r00r00         [24] 2236 	lcall	_printf_fast_f
      000615 15 81            [12] 2237 	dec	sp
      000617 15 81            [12] 2238 	dec	sp
                                   2239 ;	src/main.c:594: printf_fast_f("s: sending\r\n");
      000619 74r55            [12] 2240 	mov	a,#___str_36
      00061B C0 E0            [24] 2241 	push	acc
      00061D 74s02            [12] 2242 	mov	a,#(___str_36 >> 8)
      00061F C0 E0            [24] 2243 	push	acc
      000621 12r00r00         [24] 2244 	lcall	_printf_fast_f
      000624 15 81            [12] 2245 	dec	sp
      000626 15 81            [12] 2246 	dec	sp
                                   2247 ;	src/main.c:595: }
      000628 22               [24] 2248 	ret
                                   2249 ;------------------------------------------------------------
                                   2250 ;Allocation info for local variables in function 'act_by_one_key'
                                   2251 ;------------------------------------------------------------
                                   2252 ;apu8LineFiCmd             Allocated with name '_act_by_one_key_PARM_2'
                                   2253 ;apu8LineFiAddr            Allocated with name '_act_by_one_key_PARM_3'
                                   2254 ;au8RxUART                 Allocated to registers r7 
                                   2255 ;sloc0                     Allocated with name '_act_by_one_key_sloc0_1_0'
                                   2256 ;u8Data                    Allocated with name '_act_by_one_key_u8Data_65536_96'
                                   2257 ;------------------------------------------------------------
                                   2258 ;	src/main.c:597: void act_by_one_key(uint8 au8RxUART, uint8 * apu8LineFiCmd, uint8 * apu8LineFiAddr)
                                   2259 ;	-----------------------------------------
                                   2260 ;	 function act_by_one_key
                                   2261 ;	-----------------------------------------
      000629                       2262 _act_by_one_key:
      000629 AF 82            [24] 2263 	mov	r7,dpl
                                   2264 ;	src/main.c:600: switch(au8RxUART) {
      00062B BF 2B 03         [24] 2265 	cjne	r7,#0x2b,00246$
      00062E 02r0BrCA         [24] 2266 	ljmp	00129$
      000631                       2267 00246$:
      000631 BF 2D 03         [24] 2268 	cjne	r7,#0x2d,00247$
      000634 02r0BrEF         [24] 2269 	ljmp	00130$
      000637                       2270 00247$:
      000637 BF 30 03         [24] 2271 	cjne	r7,#0x30,00248$
      00063A 02r06rD2         [24] 2272 	ljmp	00102$
      00063D                       2273 00248$:
      00063D BF 31 03         [24] 2274 	cjne	r7,#0x31,00249$
      000640 02r06rEB         [24] 2275 	ljmp	00103$
      000643                       2276 00249$:
      000643 BF 32 03         [24] 2277 	cjne	r7,#0x32,00250$
      000646 02r07r00         [24] 2278 	ljmp	00104$
      000649                       2279 00250$:
      000649 BF 33 03         [24] 2280 	cjne	r7,#0x33,00251$
      00064C 02r07r15         [24] 2281 	ljmp	00105$
      00064F                       2282 00251$:
      00064F BF 34 03         [24] 2283 	cjne	r7,#0x34,00252$
      000652 02r07r2A         [24] 2284 	ljmp	00106$
      000655                       2285 00252$:
      000655 BF 35 03         [24] 2286 	cjne	r7,#0x35,00253$
      000658 02r07r4C         [24] 2287 	ljmp	00107$
      00065B                       2288 00253$:
      00065B BF 36 03         [24] 2289 	cjne	r7,#0x36,00254$
      00065E 02r07r82         [24] 2290 	ljmp	00110$
      000661                       2291 00254$:
      000661 BF 37 03         [24] 2292 	cjne	r7,#0x37,00255$
      000664 02r07rB0         [24] 2293 	ljmp	00111$
      000667                       2294 00255$:
      000667 BF 48 03         [24] 2295 	cjne	r7,#0x48,00256$
      00066A 02r05r56         [24] 2296 	ljmp	_print_help
      00066D                       2297 00256$:
      00066D BF 53 03         [24] 2298 	cjne	r7,#0x53,00257$
      000670 02r0BrA0         [24] 2299 	ljmp	00128$
      000673                       2300 00257$:
      000673 BF 61 03         [24] 2301 	cjne	r7,#0x61,00258$
      000676 02r0Cr13         [24] 2302 	ljmp	00131$
      000679                       2303 00258$:
      000679 BF 62 03         [24] 2304 	cjne	r7,#0x62,00259$
      00067C 02r0Cr19         [24] 2305 	ljmp	00132$
      00067F                       2306 00259$:
      00067F BF 63 03         [24] 2307 	cjne	r7,#0x63,00260$
      000682 02r0Cr1F         [24] 2308 	ljmp	00133$
      000685                       2309 00260$:
      000685 BF 68 03         [24] 2310 	cjne	r7,#0x68,00261$
      000688 02r07rDE         [24] 2311 	ljmp	00112$
      00068B                       2312 00261$:
      00068B BF 6A 03         [24] 2313 	cjne	r7,#0x6a,00262$
      00068E 02r08r6A         [24] 2314 	ljmp	00116$
      000691                       2315 00262$:
      000691 BF 6B 03         [24] 2316 	cjne	r7,#0x6b,00263$
      000694 02r08r9D         [24] 2317 	ljmp	00117$
      000697                       2318 00263$:
      000697 BF 6C 03         [24] 2319 	cjne	r7,#0x6c,00264$
      00069A 02r08rD0         [24] 2320 	ljmp	00118$
      00069D                       2321 00264$:
      00069D BF 73 03         [24] 2322 	cjne	r7,#0x73,00265$
      0006A0 02r09r5C         [24] 2323 	ljmp	00122$
      0006A3                       2324 00265$:
      0006A3 BF 74 02         [24] 2325 	cjne	r7,#0x74,00266$
      0006A6 80 07            [24] 2326 	sjmp	00101$
      0006A8                       2327 00266$:
      0006A8 BF 75 03         [24] 2328 	cjne	r7,#0x75,00267$
      0006AB 02r0Br29         [24] 2329 	ljmp	00127$
      0006AE                       2330 00267$:
      0006AE 22               [24] 2331 	ret
                                   2332 ;	src/main.c:601: case 't' : // 1msec 카운터 확인, 5초에 40,000
      0006AF                       2333 00101$:
                                   2334 ;	src/main.c:602: printf_fast_f("%u\n\r", gu16TimeCnt);
      0006AF 90r00r34         [24] 2335 	mov	dptr,#_gu16TimeCnt
      0006B2 E0               [24] 2336 	movx	a,@dptr
      0006B3 C0 E0            [24] 2337 	push	acc
      0006B5 A3               [24] 2338 	inc	dptr
      0006B6 E0               [24] 2339 	movx	a,@dptr
      0006B7 C0 E0            [24] 2340 	push	acc
      0006B9 74r62            [12] 2341 	mov	a,#___str_37
      0006BB C0 E0            [24] 2342 	push	acc
      0006BD 74s02            [12] 2343 	mov	a,#(___str_37 >> 8)
      0006BF C0 E0            [24] 2344 	push	acc
      0006C1 12r00r00         [24] 2345 	lcall	_printf_fast_f
      0006C4 E5 81            [12] 2346 	mov	a,sp
      0006C6 24 FC            [12] 2347 	add	a,#0xfc
      0006C8 F5 81            [12] 2348 	mov	sp,a
                                   2349 ;	src/main.c:603: gu16TimeCnt = 0;
      0006CA 90r00r34         [24] 2350 	mov	dptr,#_gu16TimeCnt
      0006CD E4               [12] 2351 	clr	a
      0006CE F0               [24] 2352 	movx	@dptr,a
      0006CF A3               [24] 2353 	inc	dptr
      0006D0 F0               [24] 2354 	movx	@dptr,a
                                   2355 ;	src/main.c:604: break;
      0006D1 22               [24] 2356 	ret
                                   2357 ;	src/main.c:605: case '0' :
      0006D2                       2358 00102$:
                                   2359 ;	src/main.c:606: gu8UART = 0;
      0006D2 75*00 00         [24] 2360 	mov	_gu8UART,#0x00
                                   2361 ;	src/main.c:607: LINEFI_EN0 = 0;
                                   2362 ;	assignBit
      0006D5 C2 90            [12] 2363 	clr	_P10
                                   2364 ;	src/main.c:608: LINEFI_EN1 = 0;
                                   2365 ;	assignBit
      0006D7 C2 91            [12] 2366 	clr	_P11
                                   2367 ;	src/main.c:609: LINEFI_EN2 = 0;
                                   2368 ;	assignBit
      0006D9 C2 92            [12] 2369 	clr	_P12
                                   2370 ;	src/main.c:610: printf_fast_f("LINEFI_EN0=0\n\r");
      0006DB 74r67            [12] 2371 	mov	a,#___str_38
      0006DD C0 E0            [24] 2372 	push	acc
      0006DF 74s02            [12] 2373 	mov	a,#(___str_38 >> 8)
      0006E1 C0 E0            [24] 2374 	push	acc
      0006E3 12r00r00         [24] 2375 	lcall	_printf_fast_f
      0006E6 15 81            [12] 2376 	dec	sp
      0006E8 15 81            [12] 2377 	dec	sp
                                   2378 ;	src/main.c:611: break;
      0006EA 22               [24] 2379 	ret
                                   2380 ;	src/main.c:612: case '1' :
      0006EB                       2381 00103$:
                                   2382 ;	src/main.c:613: gu8UART = 0;
      0006EB 75*00 00         [24] 2383 	mov	_gu8UART,#0x00
                                   2384 ;	src/main.c:614: LINEFI_EN0 = 1;
                                   2385 ;	assignBit
      0006EE D2 90            [12] 2386 	setb	_P10
                                   2387 ;	src/main.c:615: printf_fast_f("LINEFI_EN0=1\n\r");
      0006F0 74r76            [12] 2388 	mov	a,#___str_39
      0006F2 C0 E0            [24] 2389 	push	acc
      0006F4 74s02            [12] 2390 	mov	a,#(___str_39 >> 8)
      0006F6 C0 E0            [24] 2391 	push	acc
      0006F8 12r00r00         [24] 2392 	lcall	_printf_fast_f
      0006FB 15 81            [12] 2393 	dec	sp
      0006FD 15 81            [12] 2394 	dec	sp
                                   2395 ;	src/main.c:616: break;
      0006FF 22               [24] 2396 	ret
                                   2397 ;	src/main.c:617: case '2' :
      000700                       2398 00104$:
                                   2399 ;	src/main.c:618: gu8UART = 0;
      000700 75*00 00         [24] 2400 	mov	_gu8UART,#0x00
                                   2401 ;	src/main.c:619: LINEFI_TX = 0;
                                   2402 ;	assignBit
      000703 C2 96            [12] 2403 	clr	_P16
                                   2404 ;	src/main.c:620: printf_fast_f("LINEFI_TX=0\n\r");
      000705 74r85            [12] 2405 	mov	a,#___str_40
      000707 C0 E0            [24] 2406 	push	acc
      000709 74s02            [12] 2407 	mov	a,#(___str_40 >> 8)
      00070B C0 E0            [24] 2408 	push	acc
      00070D 12r00r00         [24] 2409 	lcall	_printf_fast_f
      000710 15 81            [12] 2410 	dec	sp
      000712 15 81            [12] 2411 	dec	sp
                                   2412 ;	src/main.c:621: break;
      000714 22               [24] 2413 	ret
                                   2414 ;	src/main.c:622: case '3' :
      000715                       2415 00105$:
                                   2416 ;	src/main.c:623: gu8UART = 0;
      000715 75*00 00         [24] 2417 	mov	_gu8UART,#0x00
                                   2418 ;	src/main.c:624: LINEFI_TX = 1;
                                   2419 ;	assignBit
      000718 D2 96            [12] 2420 	setb	_P16
                                   2421 ;	src/main.c:625: printf_fast_f("LINEFI_TX=1\n\r");
      00071A 74r93            [12] 2422 	mov	a,#___str_41
      00071C C0 E0            [24] 2423 	push	acc
      00071E 74s02            [12] 2424 	mov	a,#(___str_41 >> 8)
      000720 C0 E0            [24] 2425 	push	acc
      000722 12r00r00         [24] 2426 	lcall	_printf_fast_f
      000725 15 81            [12] 2427 	dec	sp
      000727 15 81            [12] 2428 	dec	sp
                                   2429 ;	src/main.c:626: break;
      000729 22               [24] 2430 	ret
                                   2431 ;	src/main.c:627: case '4' :
      00072A                       2432 00106$:
                                   2433 ;	src/main.c:628: gu8UART = 0;
      00072A 75*00 00         [24] 2434 	mov	_gu8UART,#0x00
                                   2435 ;	src/main.c:629: TOGGLE(LINEFI_TX);
      00072D B2 96            [12] 2436 	cpl	_P16
                                   2437 ;	src/main.c:630: printf_fast_f("LINEFI_TX=%d\n\r", LINEFI_TX);
      00072F A2 96            [12] 2438 	mov	c,_P16
      000731 E4               [12] 2439 	clr	a
      000732 33               [12] 2440 	rlc	a
      000733 FE               [12] 2441 	mov	r6,a
      000734 7F 00            [12] 2442 	mov	r7,#0x00
      000736 C0 06            [24] 2443 	push	ar6
      000738 C0 07            [24] 2444 	push	ar7
      00073A 74rA1            [12] 2445 	mov	a,#___str_42
      00073C C0 E0            [24] 2446 	push	acc
      00073E 74s02            [12] 2447 	mov	a,#(___str_42 >> 8)
      000740 C0 E0            [24] 2448 	push	acc
      000742 12r00r00         [24] 2449 	lcall	_printf_fast_f
      000745 E5 81            [12] 2450 	mov	a,sp
      000747 24 FC            [12] 2451 	add	a,#0xfc
      000749 F5 81            [12] 2452 	mov	sp,a
                                   2453 ;	src/main.c:631: break;
      00074B 22               [24] 2454 	ret
                                   2455 ;	src/main.c:632: case '5' :
      00074C                       2456 00107$:
                                   2457 ;	src/main.c:633: gu8UART = 0;
      00074C 75*00 00         [24] 2458 	mov	_gu8UART,#0x00
                                   2459 ;	src/main.c:634: if (LINEFI_EN0 == 0) {
      00074F 20 90 02         [24] 2460 	jb	_P10,00109$
                                   2461 ;	src/main.c:635: LINEFI_TX = 1;
                                   2462 ;	assignBit
      000752 D2 96            [12] 2463 	setb	_P16
      000754                       2464 00109$:
                                   2465 ;	src/main.c:637: TOGGLE(LINEFI_EN0);
      000754 B2 90            [12] 2466 	cpl	_P10
                                   2467 ;	src/main.c:638: printf_fast_f("LINEFI_EN0=");
      000756 74rB0            [12] 2468 	mov	a,#___str_43
      000758 C0 E0            [24] 2469 	push	acc
      00075A 74s02            [12] 2470 	mov	a,#(___str_43 >> 8)
      00075C C0 E0            [24] 2471 	push	acc
      00075E 12r00r00         [24] 2472 	lcall	_printf_fast_f
      000761 15 81            [12] 2473 	dec	sp
      000763 15 81            [12] 2474 	dec	sp
                                   2475 ;	src/main.c:639: printf_fast_f("%d\n\r", LINEFI_EN0);
      000765 A2 90            [12] 2476 	mov	c,_P10
      000767 E4               [12] 2477 	clr	a
      000768 33               [12] 2478 	rlc	a
      000769 FE               [12] 2479 	mov	r6,a
      00076A 7F 00            [12] 2480 	mov	r7,#0x00
      00076C C0 06            [24] 2481 	push	ar6
      00076E C0 07            [24] 2482 	push	ar7
      000770 74rBC            [12] 2483 	mov	a,#___str_44
      000772 C0 E0            [24] 2484 	push	acc
      000774 74s02            [12] 2485 	mov	a,#(___str_44 >> 8)
      000776 C0 E0            [24] 2486 	push	acc
      000778 12r00r00         [24] 2487 	lcall	_printf_fast_f
      00077B E5 81            [12] 2488 	mov	a,sp
      00077D 24 FC            [12] 2489 	add	a,#0xfc
      00077F F5 81            [12] 2490 	mov	sp,a
                                   2491 ;	src/main.c:640: break;
      000781 22               [24] 2492 	ret
                                   2493 ;	src/main.c:641: case '6' :
      000782                       2494 00110$:
                                   2495 ;	src/main.c:642: TOGGLE(LINEFI_EN1);
      000782 B2 91            [12] 2496 	cpl	_P11
                                   2497 ;	src/main.c:643: printf_fast_f("LINEFI_EN1=");
      000784 74rC1            [12] 2498 	mov	a,#___str_45
      000786 C0 E0            [24] 2499 	push	acc
      000788 74s02            [12] 2500 	mov	a,#(___str_45 >> 8)
      00078A C0 E0            [24] 2501 	push	acc
      00078C 12r00r00         [24] 2502 	lcall	_printf_fast_f
      00078F 15 81            [12] 2503 	dec	sp
      000791 15 81            [12] 2504 	dec	sp
                                   2505 ;	src/main.c:644: printf_fast_f("%d\n\r", LINEFI_EN1);
      000793 A2 91            [12] 2506 	mov	c,_P11
      000795 E4               [12] 2507 	clr	a
      000796 33               [12] 2508 	rlc	a
      000797 FE               [12] 2509 	mov	r6,a
      000798 7F 00            [12] 2510 	mov	r7,#0x00
      00079A C0 06            [24] 2511 	push	ar6
      00079C C0 07            [24] 2512 	push	ar7
      00079E 74rBC            [12] 2513 	mov	a,#___str_44
      0007A0 C0 E0            [24] 2514 	push	acc
      0007A2 74s02            [12] 2515 	mov	a,#(___str_44 >> 8)
      0007A4 C0 E0            [24] 2516 	push	acc
      0007A6 12r00r00         [24] 2517 	lcall	_printf_fast_f
      0007A9 E5 81            [12] 2518 	mov	a,sp
      0007AB 24 FC            [12] 2519 	add	a,#0xfc
      0007AD F5 81            [12] 2520 	mov	sp,a
                                   2521 ;	src/main.c:645: break;
      0007AF 22               [24] 2522 	ret
                                   2523 ;	src/main.c:646: case '7' :
      0007B0                       2524 00111$:
                                   2525 ;	src/main.c:647: TOGGLE(LINEFI_EN2);
      0007B0 B2 92            [12] 2526 	cpl	_P12
                                   2527 ;	src/main.c:648: printf_fast_f("LINEFI_EN2=");
      0007B2 74rCD            [12] 2528 	mov	a,#___str_46
      0007B4 C0 E0            [24] 2529 	push	acc
      0007B6 74s02            [12] 2530 	mov	a,#(___str_46 >> 8)
      0007B8 C0 E0            [24] 2531 	push	acc
      0007BA 12r00r00         [24] 2532 	lcall	_printf_fast_f
      0007BD 15 81            [12] 2533 	dec	sp
      0007BF 15 81            [12] 2534 	dec	sp
                                   2535 ;	src/main.c:649: printf_fast_f("%d\n\r", LINEFI_EN2);
      0007C1 A2 92            [12] 2536 	mov	c,_P12
      0007C3 E4               [12] 2537 	clr	a
      0007C4 33               [12] 2538 	rlc	a
      0007C5 FE               [12] 2539 	mov	r6,a
      0007C6 7F 00            [12] 2540 	mov	r7,#0x00
      0007C8 C0 06            [24] 2541 	push	ar6
      0007CA C0 07            [24] 2542 	push	ar7
      0007CC 74rBC            [12] 2543 	mov	a,#___str_44
      0007CE C0 E0            [24] 2544 	push	acc
      0007D0 74s02            [12] 2545 	mov	a,#(___str_44 >> 8)
      0007D2 C0 E0            [24] 2546 	push	acc
      0007D4 12r00r00         [24] 2547 	lcall	_printf_fast_f
      0007D7 E5 81            [12] 2548 	mov	a,sp
      0007D9 24 FC            [12] 2549 	add	a,#0xfc
      0007DB F5 81            [12] 2550 	mov	sp,a
                                   2551 ;	src/main.c:650: break;
      0007DD 22               [24] 2552 	ret
                                   2553 ;	src/main.c:654: case 'h' : // <<
      0007DE                       2554 00112$:
                                   2555 ;	src/main.c:655: (*apu8LineFiAddr)--;
      0007DE AD*0B            [24] 2556 	mov	r5,_act_by_one_key_PARM_3
      0007E0 AE*0C            [24] 2557 	mov	r6,(_act_by_one_key_PARM_3 + 1)
      0007E2 AF*0D            [24] 2558 	mov	r7,(_act_by_one_key_PARM_3 + 2)
      0007E4 8D 82            [24] 2559 	mov	dpl,r5
      0007E6 8E 83            [24] 2560 	mov	dph,r6
      0007E8 8F F0            [24] 2561 	mov	b,r7
      0007EA 12r00r00         [24] 2562 	lcall	__gptrget
      0007ED FC               [12] 2563 	mov	r4,a
      0007EE 1C               [12] 2564 	dec	r4
      0007EF 8D 82            [24] 2565 	mov	dpl,r5
      0007F1 8E 83            [24] 2566 	mov	dph,r6
      0007F3 8F F0            [24] 2567 	mov	b,r7
      0007F5 EC               [12] 2568 	mov	a,r4
      0007F6 12r00r00         [24] 2569 	lcall	__gptrput
                                   2570 ;	src/main.c:656: if (*apu8LineFiCmd == 1) {
      0007F9 AA*08            [24] 2571 	mov	r2,_act_by_one_key_PARM_2
      0007FB AB*09            [24] 2572 	mov	r3,(_act_by_one_key_PARM_2 + 1)
      0007FD AC*0A            [24] 2573 	mov	r4,(_act_by_one_key_PARM_2 + 2)
      0007FF 8A 82            [24] 2574 	mov	dpl,r2
      000801 8B 83            [24] 2575 	mov	dph,r3
      000803 8C F0            [24] 2576 	mov	b,r4
      000805 12r00r00         [24] 2577 	lcall	__gptrget
      000808 FA               [12] 2578 	mov	r2,a
      000809 BA 01 3C         [24] 2579 	cjne	r2,#0x01,00114$
                                   2580 ;	src/main.c:657: printf_fast_f("uart speed: %lu:\n\r", gpu32UartSpeed[*apu8LineFiAddr]);
      00080C 8D 82            [24] 2581 	mov	dpl,r5
      00080E 8E 83            [24] 2582 	mov	dph,r6
      000810 8F F0            [24] 2583 	mov	b,r7
      000812 12r00r00         [24] 2584 	lcall	__gptrget
      000815 75 F0 04         [24] 2585 	mov	b,#0x04
      000818 A4               [48] 2586 	mul	ab
      000819 24r36            [12] 2587 	add	a,#_gpu32UartSpeed
      00081B F5 82            [12] 2588 	mov	dpl,a
      00081D 74s00            [12] 2589 	mov	a,#(_gpu32UartSpeed >> 8)
      00081F 35 F0            [12] 2590 	addc	a,b
      000821 F5 83            [12] 2591 	mov	dph,a
      000823 E0               [24] 2592 	movx	a,@dptr
      000824 F9               [12] 2593 	mov	r1,a
      000825 A3               [24] 2594 	inc	dptr
      000826 E0               [24] 2595 	movx	a,@dptr
      000827 FA               [12] 2596 	mov	r2,a
      000828 A3               [24] 2597 	inc	dptr
      000829 E0               [24] 2598 	movx	a,@dptr
      00082A FB               [12] 2599 	mov	r3,a
      00082B A3               [24] 2600 	inc	dptr
      00082C E0               [24] 2601 	movx	a,@dptr
      00082D FC               [12] 2602 	mov	r4,a
      00082E C0 01            [24] 2603 	push	ar1
      000830 C0 02            [24] 2604 	push	ar2
      000832 C0 03            [24] 2605 	push	ar3
      000834 C0 04            [24] 2606 	push	ar4
      000836 74rD9            [12] 2607 	mov	a,#___str_47
      000838 C0 E0            [24] 2608 	push	acc
      00083A 74s02            [12] 2609 	mov	a,#(___str_47 >> 8)
      00083C C0 E0            [24] 2610 	push	acc
      00083E 12r00r00         [24] 2611 	lcall	_printf_fast_f
      000841 E5 81            [12] 2612 	mov	a,sp
      000843 24 FA            [12] 2613 	add	a,#0xfa
      000845 F5 81            [12] 2614 	mov	sp,a
      000847 22               [24] 2615 	ret
      000848                       2616 00114$:
                                   2617 ;	src/main.c:660: printf_fast_f("address: %d\n\r", *apu8LineFiAddr);
      000848 8D 82            [24] 2618 	mov	dpl,r5
      00084A 8E 83            [24] 2619 	mov	dph,r6
      00084C 8F F0            [24] 2620 	mov	b,r7
      00084E 12r00r00         [24] 2621 	lcall	__gptrget
      000851 FD               [12] 2622 	mov	r5,a
      000852 7F 00            [12] 2623 	mov	r7,#0x00
      000854 C0 05            [24] 2624 	push	ar5
      000856 C0 07            [24] 2625 	push	ar7
      000858 74rEC            [12] 2626 	mov	a,#___str_48
      00085A C0 E0            [24] 2627 	push	acc
      00085C 74s02            [12] 2628 	mov	a,#(___str_48 >> 8)
      00085E C0 E0            [24] 2629 	push	acc
      000860 12r00r00         [24] 2630 	lcall	_printf_fast_f
      000863 E5 81            [12] 2631 	mov	a,sp
      000865 24 FC            [12] 2632 	add	a,#0xfc
      000867 F5 81            [12] 2633 	mov	sp,a
                                   2634 ;	src/main.c:662: break;
      000869 22               [24] 2635 	ret
                                   2636 ;	src/main.c:663: case 'j' : //  down
      00086A                       2637 00116$:
                                   2638 ;	src/main.c:664: (*apu8LineFiCmd)--;
      00086A AD*08            [24] 2639 	mov	r5,_act_by_one_key_PARM_2
      00086C AE*09            [24] 2640 	mov	r6,(_act_by_one_key_PARM_2 + 1)
      00086E AF*0A            [24] 2641 	mov	r7,(_act_by_one_key_PARM_2 + 2)
      000870 8D 82            [24] 2642 	mov	dpl,r5
      000872 8E 83            [24] 2643 	mov	dph,r6
      000874 8F F0            [24] 2644 	mov	b,r7
      000876 12r00r00         [24] 2645 	lcall	__gptrget
      000879 FC               [12] 2646 	mov	r4,a
      00087A 1C               [12] 2647 	dec	r4
      00087B 8D 82            [24] 2648 	mov	dpl,r5
      00087D 8E 83            [24] 2649 	mov	dph,r6
      00087F 8F F0            [24] 2650 	mov	b,r7
      000881 EC               [12] 2651 	mov	a,r4
      000882 12r00r00         [24] 2652 	lcall	__gptrput
                                   2653 ;	src/main.c:665: printf_fast_f("command: %d\n\r", *apu8LineFiCmd);
      000885 7F 00            [12] 2654 	mov	r7,#0x00
      000887 C0 04            [24] 2655 	push	ar4
      000889 C0 07            [24] 2656 	push	ar7
      00088B 74rFA            [12] 2657 	mov	a,#___str_49
      00088D C0 E0            [24] 2658 	push	acc
      00088F 74s02            [12] 2659 	mov	a,#(___str_49 >> 8)
      000891 C0 E0            [24] 2660 	push	acc
      000893 12r00r00         [24] 2661 	lcall	_printf_fast_f
      000896 E5 81            [12] 2662 	mov	a,sp
      000898 24 FC            [12] 2663 	add	a,#0xfc
      00089A F5 81            [12] 2664 	mov	sp,a
                                   2665 ;	src/main.c:666: break;
      00089C 22               [24] 2666 	ret
                                   2667 ;	src/main.c:667: case 'k' : // up
      00089D                       2668 00117$:
                                   2669 ;	src/main.c:668: (*apu8LineFiCmd)++;
      00089D AD*08            [24] 2670 	mov	r5,_act_by_one_key_PARM_2
      00089F AE*09            [24] 2671 	mov	r6,(_act_by_one_key_PARM_2 + 1)
      0008A1 AF*0A            [24] 2672 	mov	r7,(_act_by_one_key_PARM_2 + 2)
      0008A3 8D 82            [24] 2673 	mov	dpl,r5
      0008A5 8E 83            [24] 2674 	mov	dph,r6
      0008A7 8F F0            [24] 2675 	mov	b,r7
      0008A9 12r00r00         [24] 2676 	lcall	__gptrget
      0008AC FC               [12] 2677 	mov	r4,a
      0008AD 0C               [12] 2678 	inc	r4
      0008AE 8D 82            [24] 2679 	mov	dpl,r5
      0008B0 8E 83            [24] 2680 	mov	dph,r6
      0008B2 8F F0            [24] 2681 	mov	b,r7
      0008B4 EC               [12] 2682 	mov	a,r4
      0008B5 12r00r00         [24] 2683 	lcall	__gptrput
                                   2684 ;	src/main.c:669: printf_fast_f("command: %d\n\r", *apu8LineFiCmd);
      0008B8 7F 00            [12] 2685 	mov	r7,#0x00
      0008BA C0 04            [24] 2686 	push	ar4
      0008BC C0 07            [24] 2687 	push	ar7
      0008BE 74rFA            [12] 2688 	mov	a,#___str_49
      0008C0 C0 E0            [24] 2689 	push	acc
      0008C2 74s02            [12] 2690 	mov	a,#(___str_49 >> 8)
      0008C4 C0 E0            [24] 2691 	push	acc
      0008C6 12r00r00         [24] 2692 	lcall	_printf_fast_f
      0008C9 E5 81            [12] 2693 	mov	a,sp
      0008CB 24 FC            [12] 2694 	add	a,#0xfc
      0008CD F5 81            [12] 2695 	mov	sp,a
                                   2696 ;	src/main.c:670: break;
      0008CF 22               [24] 2697 	ret
                                   2698 ;	src/main.c:671: case 'l' : // >>
      0008D0                       2699 00118$:
                                   2700 ;	src/main.c:672: (*apu8LineFiAddr)++;
      0008D0 AD*0B            [24] 2701 	mov	r5,_act_by_one_key_PARM_3
      0008D2 AE*0C            [24] 2702 	mov	r6,(_act_by_one_key_PARM_3 + 1)
      0008D4 AF*0D            [24] 2703 	mov	r7,(_act_by_one_key_PARM_3 + 2)
      0008D6 8D 82            [24] 2704 	mov	dpl,r5
      0008D8 8E 83            [24] 2705 	mov	dph,r6
      0008DA 8F F0            [24] 2706 	mov	b,r7
      0008DC 12r00r00         [24] 2707 	lcall	__gptrget
      0008DF FC               [12] 2708 	mov	r4,a
      0008E0 0C               [12] 2709 	inc	r4
      0008E1 8D 82            [24] 2710 	mov	dpl,r5
      0008E3 8E 83            [24] 2711 	mov	dph,r6
      0008E5 8F F0            [24] 2712 	mov	b,r7
      0008E7 EC               [12] 2713 	mov	a,r4
      0008E8 12r00r00         [24] 2714 	lcall	__gptrput
                                   2715 ;	src/main.c:673: if (*apu8LineFiCmd == 1) {
      0008EB AA*08            [24] 2716 	mov	r2,_act_by_one_key_PARM_2
      0008ED AB*09            [24] 2717 	mov	r3,(_act_by_one_key_PARM_2 + 1)
      0008EF AC*0A            [24] 2718 	mov	r4,(_act_by_one_key_PARM_2 + 2)
      0008F1 8A 82            [24] 2719 	mov	dpl,r2
      0008F3 8B 83            [24] 2720 	mov	dph,r3
      0008F5 8C F0            [24] 2721 	mov	b,r4
      0008F7 12r00r00         [24] 2722 	lcall	__gptrget
      0008FA FA               [12] 2723 	mov	r2,a
      0008FB BA 01 3C         [24] 2724 	cjne	r2,#0x01,00120$
                                   2725 ;	src/main.c:674: printf_fast_f("uart speed: %lu:\n\r", gpu32UartSpeed[*apu8LineFiAddr]);
      0008FE 8D 82            [24] 2726 	mov	dpl,r5
      000900 8E 83            [24] 2727 	mov	dph,r6
      000902 8F F0            [24] 2728 	mov	b,r7
      000904 12r00r00         [24] 2729 	lcall	__gptrget
      000907 75 F0 04         [24] 2730 	mov	b,#0x04
      00090A A4               [48] 2731 	mul	ab
      00090B 24r36            [12] 2732 	add	a,#_gpu32UartSpeed
      00090D F5 82            [12] 2733 	mov	dpl,a
      00090F 74s00            [12] 2734 	mov	a,#(_gpu32UartSpeed >> 8)
      000911 35 F0            [12] 2735 	addc	a,b
      000913 F5 83            [12] 2736 	mov	dph,a
      000915 E0               [24] 2737 	movx	a,@dptr
      000916 F9               [12] 2738 	mov	r1,a
      000917 A3               [24] 2739 	inc	dptr
      000918 E0               [24] 2740 	movx	a,@dptr
      000919 FA               [12] 2741 	mov	r2,a
      00091A A3               [24] 2742 	inc	dptr
      00091B E0               [24] 2743 	movx	a,@dptr
      00091C FB               [12] 2744 	mov	r3,a
      00091D A3               [24] 2745 	inc	dptr
      00091E E0               [24] 2746 	movx	a,@dptr
      00091F FC               [12] 2747 	mov	r4,a
      000920 C0 01            [24] 2748 	push	ar1
      000922 C0 02            [24] 2749 	push	ar2
      000924 C0 03            [24] 2750 	push	ar3
      000926 C0 04            [24] 2751 	push	ar4
      000928 74rD9            [12] 2752 	mov	a,#___str_47
      00092A C0 E0            [24] 2753 	push	acc
      00092C 74s02            [12] 2754 	mov	a,#(___str_47 >> 8)
      00092E C0 E0            [24] 2755 	push	acc
      000930 12r00r00         [24] 2756 	lcall	_printf_fast_f
      000933 E5 81            [12] 2757 	mov	a,sp
      000935 24 FA            [12] 2758 	add	a,#0xfa
      000937 F5 81            [12] 2759 	mov	sp,a
      000939 22               [24] 2760 	ret
      00093A                       2761 00120$:
                                   2762 ;	src/main.c:677: printf_fast_f("address: %d\n\r", *apu8LineFiAddr);
      00093A 8D 82            [24] 2763 	mov	dpl,r5
      00093C 8E 83            [24] 2764 	mov	dph,r6
      00093E 8F F0            [24] 2765 	mov	b,r7
      000940 12r00r00         [24] 2766 	lcall	__gptrget
      000943 FD               [12] 2767 	mov	r5,a
      000944 7F 00            [12] 2768 	mov	r7,#0x00
      000946 C0 05            [24] 2769 	push	ar5
      000948 C0 07            [24] 2770 	push	ar7
      00094A 74rEC            [12] 2771 	mov	a,#___str_48
      00094C C0 E0            [24] 2772 	push	acc
      00094E 74s02            [12] 2773 	mov	a,#(___str_48 >> 8)
      000950 C0 E0            [24] 2774 	push	acc
      000952 12r00r00         [24] 2775 	lcall	_printf_fast_f
      000955 E5 81            [12] 2776 	mov	a,sp
      000957 24 FC            [12] 2777 	add	a,#0xfc
      000959 F5 81            [12] 2778 	mov	sp,a
                                   2779 ;	src/main.c:679: break;
      00095B 22               [24] 2780 	ret
                                   2781 ;	src/main.c:680: case 's' :
      00095C                       2782 00122$:
                                   2783 ;	src/main.c:681: switch (*apu8LineFiCmd) {
      00095C AD*08            [24] 2784 	mov	r5,_act_by_one_key_PARM_2
      00095E AE*09            [24] 2785 	mov	r6,(_act_by_one_key_PARM_2 + 1)
      000960 AF*0A            [24] 2786 	mov	r7,(_act_by_one_key_PARM_2 + 2)
      000962 8D 82            [24] 2787 	mov	dpl,r5
      000964 8E 83            [24] 2788 	mov	dph,r6
      000966 8F F0            [24] 2789 	mov	b,r7
      000968 12r00r00         [24] 2790 	lcall	__gptrget
      00096B FC               [12] 2791 	mov	r4,a
      00096C 60 09            [24] 2792 	jz	00123$
      00096E BC 01 03         [24] 2793 	cjne	r4,#0x01,00274$
      000971 02r0Ar0A         [24] 2794 	ljmp	00124$
      000974                       2795 00274$:
      000974 02r0ArB7         [24] 2796 	ljmp	00125$
                                   2797 ;	src/main.c:682: case 0 : // address setting
      000977                       2798 00123$:
                                   2799 ;	src/main.c:683: send_octet_to_linefi((((*apu8LineFiAddr)<<4)&0xF0) | (*apu8LineFiCmd)&0x0F);
      000977 85*0B*0E         [24] 2800 	mov	_act_by_one_key_sloc0_1_0,_act_by_one_key_PARM_3
      00097A 85*0C*0F         [24] 2801 	mov	(_act_by_one_key_sloc0_1_0 + 1),(_act_by_one_key_PARM_3 + 1)
      00097D 85*0D*10         [24] 2802 	mov	(_act_by_one_key_sloc0_1_0 + 2),(_act_by_one_key_PARM_3 + 2)
      000980 85*0E 82         [24] 2803 	mov	dpl,_act_by_one_key_sloc0_1_0
      000983 85*0F 83         [24] 2804 	mov	dph,(_act_by_one_key_sloc0_1_0 + 1)
      000986 85*10 F0         [24] 2805 	mov	b,(_act_by_one_key_sloc0_1_0 + 2)
      000989 12r00r00         [24] 2806 	lcall	__gptrget
      00098C C4               [12] 2807 	swap	a
      00098D 54 F0            [12] 2808 	anl	a,#0xf0
      00098F F8               [12] 2809 	mov	r0,a
      000990 53 00 F0         [24] 2810 	anl	ar0,#0xf0
      000993 74 0F            [12] 2811 	mov	a,#0x0f
      000995 5C               [12] 2812 	anl	a,r4
      000996 48               [12] 2813 	orl	a,r0
      000997 F5 82            [12] 2814 	mov	dpl,a
      000999 C0 07            [24] 2815 	push	ar7
      00099B C0 06            [24] 2816 	push	ar6
      00099D C0 05            [24] 2817 	push	ar5
      00099F 12r00r00         [24] 2818 	lcall	_send_octet_to_linefi
      0009A2 D0 05            [24] 2819 	pop	ar5
      0009A4 D0 06            [24] 2820 	pop	ar6
      0009A6 D0 07            [24] 2821 	pop	ar7
                                   2822 ;	src/main.c:684: printf_fast_f("LineFi Sending: 0x%x:\n\r", ((*apu8LineFiAddr)<<4) | *apu8LineFiCmd);
      0009A8 85*0E 82         [24] 2823 	mov	dpl,_act_by_one_key_sloc0_1_0
      0009AB 85*0F 83         [24] 2824 	mov	dph,(_act_by_one_key_sloc0_1_0 + 1)
      0009AE 85*10 F0         [24] 2825 	mov	b,(_act_by_one_key_sloc0_1_0 + 2)
      0009B1 12r00r00         [24] 2826 	lcall	__gptrget
      0009B4 F8               [12] 2827 	mov	r0,a
      0009B5 E4               [12] 2828 	clr	a
      0009B6 C8               [12] 2829 	xch	a,r0
      0009B7 C4               [12] 2830 	swap	a
      0009B8 C8               [12] 2831 	xch	a,r0
      0009B9 68               [12] 2832 	xrl	a,r0
      0009BA C8               [12] 2833 	xch	a,r0
      0009BB 54 F0            [12] 2834 	anl	a,#0xf0
      0009BD C8               [12] 2835 	xch	a,r0
      0009BE 68               [12] 2836 	xrl	a,r0
      0009BF FB               [12] 2837 	mov	r3,a
      0009C0 8D 82            [24] 2838 	mov	dpl,r5
      0009C2 8E 83            [24] 2839 	mov	dph,r6
      0009C4 8F F0            [24] 2840 	mov	b,r7
      0009C6 12r00r00         [24] 2841 	lcall	__gptrget
      0009C9 7A 00            [12] 2842 	mov	r2,#0x00
      0009CB 42 00            [12] 2843 	orl	ar0,a
      0009CD EA               [12] 2844 	mov	a,r2
      0009CE 42 03            [12] 2845 	orl	ar3,a
      0009D0 C0 00            [24] 2846 	push	ar0
      0009D2 C0 03            [24] 2847 	push	ar3
      0009D4 74r08            [12] 2848 	mov	a,#___str_50
      0009D6 C0 E0            [24] 2849 	push	acc
      0009D8 74s03            [12] 2850 	mov	a,#(___str_50 >> 8)
      0009DA C0 E0            [24] 2851 	push	acc
      0009DC 12r00r00         [24] 2852 	lcall	_printf_fast_f
      0009DF E5 81            [12] 2853 	mov	a,sp
      0009E1 24 FC            [12] 2854 	add	a,#0xfc
      0009E3 F5 81            [12] 2855 	mov	sp,a
                                   2856 ;	src/main.c:685: printf_fast_f("address: 0x%d:\n\r", *apu8LineFiAddr);
      0009E5 85*0E 82         [24] 2857 	mov	dpl,_act_by_one_key_sloc0_1_0
      0009E8 85*0F 83         [24] 2858 	mov	dph,(_act_by_one_key_sloc0_1_0 + 1)
      0009EB 85*10 F0         [24] 2859 	mov	b,(_act_by_one_key_sloc0_1_0 + 2)
      0009EE 12r00r00         [24] 2860 	lcall	__gptrget
      0009F1 FB               [12] 2861 	mov	r3,a
      0009F2 7A 00            [12] 2862 	mov	r2,#0x00
      0009F4 C0 03            [24] 2863 	push	ar3
      0009F6 C0 02            [24] 2864 	push	ar2
      0009F8 74r20            [12] 2865 	mov	a,#___str_51
      0009FA C0 E0            [24] 2866 	push	acc
      0009FC 74s03            [12] 2867 	mov	a,#(___str_51 >> 8)
      0009FE C0 E0            [24] 2868 	push	acc
      000A00 12r00r00         [24] 2869 	lcall	_printf_fast_f
      000A03 E5 81            [12] 2870 	mov	a,sp
      000A05 24 FC            [12] 2871 	add	a,#0xfc
      000A07 F5 81            [12] 2872 	mov	sp,a
                                   2873 ;	src/main.c:686: break;
      000A09 22               [24] 2874 	ret
                                   2875 ;	src/main.c:687: case 1 : // uart speed setting
      000A0A                       2876 00124$:
                                   2877 ;	src/main.c:688: send_octet_to_linefi((((*apu8LineFiAddr)<<4)&0xF0) | (*apu8LineFiCmd)&0x0F);
      000A0A 85*0B*0E         [24] 2878 	mov	_act_by_one_key_sloc0_1_0,_act_by_one_key_PARM_3
      000A0D 85*0C*0F         [24] 2879 	mov	(_act_by_one_key_sloc0_1_0 + 1),(_act_by_one_key_PARM_3 + 1)
      000A10 85*0D*10         [24] 2880 	mov	(_act_by_one_key_sloc0_1_0 + 2),(_act_by_one_key_PARM_3 + 2)
      000A13 85*0E 82         [24] 2881 	mov	dpl,_act_by_one_key_sloc0_1_0
      000A16 85*0F 83         [24] 2882 	mov	dph,(_act_by_one_key_sloc0_1_0 + 1)
      000A19 85*10 F0         [24] 2883 	mov	b,(_act_by_one_key_sloc0_1_0 + 2)
      000A1C 12r00r00         [24] 2884 	lcall	__gptrget
      000A1F C4               [12] 2885 	swap	a
      000A20 54 F0            [12] 2886 	anl	a,#0xf0
      000A22 F8               [12] 2887 	mov	r0,a
      000A23 53 00 F0         [24] 2888 	anl	ar0,#0xf0
      000A26 74 0F            [12] 2889 	mov	a,#0x0f
      000A28 5C               [12] 2890 	anl	a,r4
      000A29 48               [12] 2891 	orl	a,r0
      000A2A F5 82            [12] 2892 	mov	dpl,a
      000A2C C0 07            [24] 2893 	push	ar7
      000A2E C0 06            [24] 2894 	push	ar6
      000A30 C0 05            [24] 2895 	push	ar5
      000A32 12r00r00         [24] 2896 	lcall	_send_octet_to_linefi
      000A35 D0 05            [24] 2897 	pop	ar5
      000A37 D0 06            [24] 2898 	pop	ar6
      000A39 D0 07            [24] 2899 	pop	ar7
                                   2900 ;	src/main.c:689: printf_fast_f("LineFi Sending: 0x%x:\n\r", ((*apu8LineFiAddr)<<4) | *apu8LineFiCmd);
      000A3B 85*0E 82         [24] 2901 	mov	dpl,_act_by_one_key_sloc0_1_0
      000A3E 85*0F 83         [24] 2902 	mov	dph,(_act_by_one_key_sloc0_1_0 + 1)
      000A41 85*10 F0         [24] 2903 	mov	b,(_act_by_one_key_sloc0_1_0 + 2)
      000A44 12r00r00         [24] 2904 	lcall	__gptrget
      000A47 F8               [12] 2905 	mov	r0,a
      000A48 E4               [12] 2906 	clr	a
      000A49 C8               [12] 2907 	xch	a,r0
      000A4A C4               [12] 2908 	swap	a
      000A4B C8               [12] 2909 	xch	a,r0
      000A4C 68               [12] 2910 	xrl	a,r0
      000A4D C8               [12] 2911 	xch	a,r0
      000A4E 54 F0            [12] 2912 	anl	a,#0xf0
      000A50 C8               [12] 2913 	xch	a,r0
      000A51 68               [12] 2914 	xrl	a,r0
      000A52 FB               [12] 2915 	mov	r3,a
      000A53 8D 82            [24] 2916 	mov	dpl,r5
      000A55 8E 83            [24] 2917 	mov	dph,r6
      000A57 8F F0            [24] 2918 	mov	b,r7
      000A59 12r00r00         [24] 2919 	lcall	__gptrget
      000A5C 7A 00            [12] 2920 	mov	r2,#0x00
      000A5E 42 00            [12] 2921 	orl	ar0,a
      000A60 EA               [12] 2922 	mov	a,r2
      000A61 42 03            [12] 2923 	orl	ar3,a
      000A63 C0 00            [24] 2924 	push	ar0
      000A65 C0 03            [24] 2925 	push	ar3
      000A67 74r08            [12] 2926 	mov	a,#___str_50
      000A69 C0 E0            [24] 2927 	push	acc
      000A6B 74s03            [12] 2928 	mov	a,#(___str_50 >> 8)
      000A6D C0 E0            [24] 2929 	push	acc
      000A6F 12r00r00         [24] 2930 	lcall	_printf_fast_f
      000A72 E5 81            [12] 2931 	mov	a,sp
      000A74 24 FC            [12] 2932 	add	a,#0xfc
      000A76 F5 81            [12] 2933 	mov	sp,a
                                   2934 ;	src/main.c:690: printf_fast_f("uart speed: %lu:\n\r", gpu32UartSpeed[*apu8LineFiAddr]);
      000A78 85*0E 82         [24] 2935 	mov	dpl,_act_by_one_key_sloc0_1_0
      000A7B 85*0F 83         [24] 2936 	mov	dph,(_act_by_one_key_sloc0_1_0 + 1)
      000A7E 85*10 F0         [24] 2937 	mov	b,(_act_by_one_key_sloc0_1_0 + 2)
      000A81 12r00r00         [24] 2938 	lcall	__gptrget
      000A84 75 F0 04         [24] 2939 	mov	b,#0x04
      000A87 A4               [48] 2940 	mul	ab
      000A88 24r36            [12] 2941 	add	a,#_gpu32UartSpeed
      000A8A F5 82            [12] 2942 	mov	dpl,a
      000A8C 74s00            [12] 2943 	mov	a,#(_gpu32UartSpeed >> 8)
      000A8E 35 F0            [12] 2944 	addc	a,b
      000A90 F5 83            [12] 2945 	mov	dph,a
      000A92 E0               [24] 2946 	movx	a,@dptr
      000A93 F8               [12] 2947 	mov	r0,a
      000A94 A3               [24] 2948 	inc	dptr
      000A95 E0               [24] 2949 	movx	a,@dptr
      000A96 F9               [12] 2950 	mov	r1,a
      000A97 A3               [24] 2951 	inc	dptr
      000A98 E0               [24] 2952 	movx	a,@dptr
      000A99 FA               [12] 2953 	mov	r2,a
      000A9A A3               [24] 2954 	inc	dptr
      000A9B E0               [24] 2955 	movx	a,@dptr
      000A9C FB               [12] 2956 	mov	r3,a
      000A9D C0 00            [24] 2957 	push	ar0
      000A9F C0 01            [24] 2958 	push	ar1
      000AA1 C0 02            [24] 2959 	push	ar2
      000AA3 C0 03            [24] 2960 	push	ar3
      000AA5 74rD9            [12] 2961 	mov	a,#___str_47
      000AA7 C0 E0            [24] 2962 	push	acc
      000AA9 74s02            [12] 2963 	mov	a,#(___str_47 >> 8)
      000AAB C0 E0            [24] 2964 	push	acc
      000AAD 12r00r00         [24] 2965 	lcall	_printf_fast_f
      000AB0 E5 81            [12] 2966 	mov	a,sp
      000AB2 24 FA            [12] 2967 	add	a,#0xfa
      000AB4 F5 81            [12] 2968 	mov	sp,a
                                   2969 ;	src/main.c:691: break;
      000AB6 22               [24] 2970 	ret
                                   2971 ;	src/main.c:692: default :
      000AB7                       2972 00125$:
                                   2973 ;	src/main.c:693: send_octet_to_linefi((((*apu8LineFiAddr)<<4)&0xF0) | (*apu8LineFiCmd)&0x0F);
      000AB7 A9*0B            [24] 2974 	mov	r1,_act_by_one_key_PARM_3
      000AB9 AA*0C            [24] 2975 	mov	r2,(_act_by_one_key_PARM_3 + 1)
      000ABB AB*0D            [24] 2976 	mov	r3,(_act_by_one_key_PARM_3 + 2)
      000ABD 89 82            [24] 2977 	mov	dpl,r1
      000ABF 8A 83            [24] 2978 	mov	dph,r2
      000AC1 8B F0            [24] 2979 	mov	b,r3
      000AC3 12r00r00         [24] 2980 	lcall	__gptrget
      000AC6 C4               [12] 2981 	swap	a
      000AC7 54 F0            [12] 2982 	anl	a,#0xf0
      000AC9 F8               [12] 2983 	mov	r0,a
      000ACA 53 00 F0         [24] 2984 	anl	ar0,#0xf0
      000ACD 74 0F            [12] 2985 	mov	a,#0x0f
      000ACF 5C               [12] 2986 	anl	a,r4
      000AD0 48               [12] 2987 	orl	a,r0
      000AD1 F5 82            [12] 2988 	mov	dpl,a
      000AD3 C0 07            [24] 2989 	push	ar7
      000AD5 C0 06            [24] 2990 	push	ar6
      000AD7 C0 05            [24] 2991 	push	ar5
      000AD9 C0 03            [24] 2992 	push	ar3
      000ADB C0 02            [24] 2993 	push	ar2
      000ADD C0 01            [24] 2994 	push	ar1
      000ADF 12r00r00         [24] 2995 	lcall	_send_octet_to_linefi
      000AE2 D0 01            [24] 2996 	pop	ar1
      000AE4 D0 02            [24] 2997 	pop	ar2
      000AE6 D0 03            [24] 2998 	pop	ar3
      000AE8 D0 05            [24] 2999 	pop	ar5
      000AEA D0 06            [24] 3000 	pop	ar6
      000AEC D0 07            [24] 3001 	pop	ar7
                                   3002 ;	src/main.c:694: printf_fast_f("LineFi Sending: 0x%x:\n\r", ((*apu8LineFiAddr)<<4) | *apu8LineFiCmd);
      000AEE 89 82            [24] 3003 	mov	dpl,r1
      000AF0 8A 83            [24] 3004 	mov	dph,r2
      000AF2 8B F0            [24] 3005 	mov	b,r3
      000AF4 12r00r00         [24] 3006 	lcall	__gptrget
      000AF7 F9               [12] 3007 	mov	r1,a
      000AF8 E4               [12] 3008 	clr	a
      000AF9 C9               [12] 3009 	xch	a,r1
      000AFA C4               [12] 3010 	swap	a
      000AFB C9               [12] 3011 	xch	a,r1
      000AFC 69               [12] 3012 	xrl	a,r1
      000AFD C9               [12] 3013 	xch	a,r1
      000AFE 54 F0            [12] 3014 	anl	a,#0xf0
      000B00 C9               [12] 3015 	xch	a,r1
      000B01 69               [12] 3016 	xrl	a,r1
      000B02 FC               [12] 3017 	mov	r4,a
      000B03 8D 82            [24] 3018 	mov	dpl,r5
      000B05 8E 83            [24] 3019 	mov	dph,r6
      000B07 8F F0            [24] 3020 	mov	b,r7
      000B09 12r00r00         [24] 3021 	lcall	__gptrget
      000B0C 7F 00            [12] 3022 	mov	r7,#0x00
      000B0E 42 01            [12] 3023 	orl	ar1,a
      000B10 EF               [12] 3024 	mov	a,r7
      000B11 42 04            [12] 3025 	orl	ar4,a
      000B13 C0 01            [24] 3026 	push	ar1
      000B15 C0 04            [24] 3027 	push	ar4
      000B17 74r08            [12] 3028 	mov	a,#___str_50
      000B19 C0 E0            [24] 3029 	push	acc
      000B1B 74s03            [12] 3030 	mov	a,#(___str_50 >> 8)
      000B1D C0 E0            [24] 3031 	push	acc
      000B1F 12r00r00         [24] 3032 	lcall	_printf_fast_f
      000B22 E5 81            [12] 3033 	mov	a,sp
      000B24 24 FC            [12] 3034 	add	a,#0xfc
      000B26 F5 81            [12] 3035 	mov	sp,a
                                   3036 ;	src/main.c:697: break;
      000B28 22               [24] 3037 	ret
                                   3038 ;	src/main.c:698: case 'u' :
      000B29                       3039 00127$:
                                   3040 ;	src/main.c:699: printf_fast_f("uart speed: %lu:\n\r", gpu32UartSpeed[*apu8LineFiAddr]);
      000B29 AD*0B            [24] 3041 	mov	r5,_act_by_one_key_PARM_3
      000B2B AE*0C            [24] 3042 	mov	r6,(_act_by_one_key_PARM_3 + 1)
      000B2D AF*0D            [24] 3043 	mov	r7,(_act_by_one_key_PARM_3 + 2)
      000B2F 8D 82            [24] 3044 	mov	dpl,r5
      000B31 8E 83            [24] 3045 	mov	dph,r6
      000B33 8F F0            [24] 3046 	mov	b,r7
      000B35 12r00r00         [24] 3047 	lcall	__gptrget
      000B38 75 F0 04         [24] 3048 	mov	b,#0x04
      000B3B A4               [48] 3049 	mul	ab
      000B3C 24r36            [12] 3050 	add	a,#_gpu32UartSpeed
      000B3E F5 82            [12] 3051 	mov	dpl,a
      000B40 74s00            [12] 3052 	mov	a,#(_gpu32UartSpeed >> 8)
      000B42 35 F0            [12] 3053 	addc	a,b
      000B44 F5 83            [12] 3054 	mov	dph,a
      000B46 E0               [24] 3055 	movx	a,@dptr
      000B47 F9               [12] 3056 	mov	r1,a
      000B48 A3               [24] 3057 	inc	dptr
      000B49 E0               [24] 3058 	movx	a,@dptr
      000B4A FA               [12] 3059 	mov	r2,a
      000B4B A3               [24] 3060 	inc	dptr
      000B4C E0               [24] 3061 	movx	a,@dptr
      000B4D FB               [12] 3062 	mov	r3,a
      000B4E A3               [24] 3063 	inc	dptr
      000B4F E0               [24] 3064 	movx	a,@dptr
      000B50 FC               [12] 3065 	mov	r4,a
      000B51 C0 07            [24] 3066 	push	ar7
      000B53 C0 06            [24] 3067 	push	ar6
      000B55 C0 05            [24] 3068 	push	ar5
      000B57 C0 01            [24] 3069 	push	ar1
      000B59 C0 02            [24] 3070 	push	ar2
      000B5B C0 03            [24] 3071 	push	ar3
      000B5D C0 04            [24] 3072 	push	ar4
      000B5F 74rD9            [12] 3073 	mov	a,#___str_47
      000B61 C0 E0            [24] 3074 	push	acc
      000B63 74s02            [12] 3075 	mov	a,#(___str_47 >> 8)
      000B65 C0 E0            [24] 3076 	push	acc
      000B67 12r00r00         [24] 3077 	lcall	_printf_fast_f
      000B6A E5 81            [12] 3078 	mov	a,sp
      000B6C 24 FA            [12] 3079 	add	a,#0xfa
      000B6E F5 81            [12] 3080 	mov	sp,a
      000B70 D0 05            [24] 3081 	pop	ar5
      000B72 D0 06            [24] 3082 	pop	ar6
      000B74 D0 07            [24] 3083 	pop	ar7
                                   3084 ;	src/main.c:700: InitialUART1_Timer3(gpu32UartSpeed[*apu8LineFiAddr]);
      000B76 8D 82            [24] 3085 	mov	dpl,r5
      000B78 8E 83            [24] 3086 	mov	dph,r6
      000B7A 8F F0            [24] 3087 	mov	b,r7
      000B7C 12r00r00         [24] 3088 	lcall	__gptrget
      000B7F 75 F0 04         [24] 3089 	mov	b,#0x04
      000B82 A4               [48] 3090 	mul	ab
      000B83 24r36            [12] 3091 	add	a,#_gpu32UartSpeed
      000B85 F5 82            [12] 3092 	mov	dpl,a
      000B87 74s00            [12] 3093 	mov	a,#(_gpu32UartSpeed >> 8)
      000B89 35 F0            [12] 3094 	addc	a,b
      000B8B F5 83            [12] 3095 	mov	dph,a
      000B8D E0               [24] 3096 	movx	a,@dptr
      000B8E FC               [12] 3097 	mov	r4,a
      000B8F A3               [24] 3098 	inc	dptr
      000B90 E0               [24] 3099 	movx	a,@dptr
      000B91 FD               [12] 3100 	mov	r5,a
      000B92 A3               [24] 3101 	inc	dptr
      000B93 E0               [24] 3102 	movx	a,@dptr
      000B94 FE               [12] 3103 	mov	r6,a
      000B95 A3               [24] 3104 	inc	dptr
      000B96 E0               [24] 3105 	movx	a,@dptr
      000B97 8C 82            [24] 3106 	mov	dpl,r4
      000B99 8D 83            [24] 3107 	mov	dph,r5
      000B9B 8E F0            [24] 3108 	mov	b,r6
                                   3109 ;	src/main.c:701: break;
      000B9D 02r00r00         [24] 3110 	ljmp	_InitialUART1_Timer3
                                   3111 ;	src/main.c:703: case 'S' :
      000BA0                       3112 00128$:
                                   3113 ;	src/main.c:704: send_octet_to_linefi(u8Data);
      000BA0 90r00r6E         [24] 3114 	mov	dptr,#_act_by_one_key_u8Data_65536_96
      000BA3 E0               [24] 3115 	movx	a,@dptr
      000BA4 F5 82            [12] 3116 	mov	dpl,a
      000BA6 12r00r00         [24] 3117 	lcall	_send_octet_to_linefi
                                   3118 ;	src/main.c:705: printf_fast_f("LineFi Sending: %d(0x%x)\n\r", u8Data, u8Data);
      000BA9 90r00r6E         [24] 3119 	mov	dptr,#_act_by_one_key_u8Data_65536_96
      000BAC E0               [24] 3120 	movx	a,@dptr
      000BAD FF               [12] 3121 	mov	r7,a
      000BAE 7E 00            [12] 3122 	mov	r6,#0x00
      000BB0 C0 07            [24] 3123 	push	ar7
      000BB2 C0 06            [24] 3124 	push	ar6
      000BB4 C0 07            [24] 3125 	push	ar7
      000BB6 C0 06            [24] 3126 	push	ar6
      000BB8 74r31            [12] 3127 	mov	a,#___str_52
      000BBA C0 E0            [24] 3128 	push	acc
      000BBC 74s03            [12] 3129 	mov	a,#(___str_52 >> 8)
      000BBE C0 E0            [24] 3130 	push	acc
      000BC0 12r00r00         [24] 3131 	lcall	_printf_fast_f
      000BC3 E5 81            [12] 3132 	mov	a,sp
      000BC5 24 FA            [12] 3133 	add	a,#0xfa
      000BC7 F5 81            [12] 3134 	mov	sp,a
                                   3135 ;	src/main.c:706: break;
                                   3136 ;	src/main.c:707: case '+' :
      000BC9 22               [24] 3137 	ret
      000BCA                       3138 00129$:
                                   3139 ;	src/main.c:708: u8Data++;
      000BCA 90r00r6E         [24] 3140 	mov	dptr,#_act_by_one_key_u8Data_65536_96
      000BCD E0               [24] 3141 	movx	a,@dptr
      000BCE 24 01            [12] 3142 	add	a,#0x01
      000BD0 F0               [24] 3143 	movx	@dptr,a
                                   3144 ;	src/main.c:709: printf_fast_f("send data %d(0x%x)\n\r", u8Data, u8Data);
      000BD1 E0               [24] 3145 	movx	a,@dptr
      000BD2 FF               [12] 3146 	mov	r7,a
      000BD3 7E 00            [12] 3147 	mov	r6,#0x00
      000BD5 C0 07            [24] 3148 	push	ar7
      000BD7 C0 06            [24] 3149 	push	ar6
      000BD9 C0 07            [24] 3150 	push	ar7
      000BDB C0 06            [24] 3151 	push	ar6
      000BDD 74r4C            [12] 3152 	mov	a,#___str_53
      000BDF C0 E0            [24] 3153 	push	acc
      000BE1 74s03            [12] 3154 	mov	a,#(___str_53 >> 8)
      000BE3 C0 E0            [24] 3155 	push	acc
      000BE5 12r00r00         [24] 3156 	lcall	_printf_fast_f
      000BE8 E5 81            [12] 3157 	mov	a,sp
      000BEA 24 FA            [12] 3158 	add	a,#0xfa
      000BEC F5 81            [12] 3159 	mov	sp,a
                                   3160 ;	src/main.c:710: break;
                                   3161 ;	src/main.c:711: case '-' :
      000BEE 22               [24] 3162 	ret
      000BEF                       3163 00130$:
                                   3164 ;	src/main.c:712: u8Data--;
      000BEF 90r00r6E         [24] 3165 	mov	dptr,#_act_by_one_key_u8Data_65536_96
      000BF2 E0               [24] 3166 	movx	a,@dptr
      000BF3 14               [12] 3167 	dec	a
      000BF4 F0               [24] 3168 	movx	@dptr,a
                                   3169 ;	src/main.c:713: printf_fast_f("send data %d(0x%x)\n\r", u8Data, u8Data);
      000BF5 E0               [24] 3170 	movx	a,@dptr
      000BF6 FF               [12] 3171 	mov	r7,a
      000BF7 7E 00            [12] 3172 	mov	r6,#0x00
      000BF9 C0 07            [24] 3173 	push	ar7
      000BFB C0 06            [24] 3174 	push	ar6
      000BFD C0 07            [24] 3175 	push	ar7
      000BFF C0 06            [24] 3176 	push	ar6
      000C01 74r4C            [12] 3177 	mov	a,#___str_53
      000C03 C0 E0            [24] 3178 	push	acc
      000C05 74s03            [12] 3179 	mov	a,#(___str_53 >> 8)
      000C07 C0 E0            [24] 3180 	push	acc
      000C09 12r00r00         [24] 3181 	lcall	_printf_fast_f
      000C0C E5 81            [12] 3182 	mov	a,sp
      000C0E 24 FA            [12] 3183 	add	a,#0xfa
      000C10 F5 81            [12] 3184 	mov	sp,a
                                   3185 ;	src/main.c:714: break;
                                   3186 ;	src/main.c:716: case 'a' :
      000C12 22               [24] 3187 	ret
      000C13                       3188 00131$:
                                   3189 ;	src/main.c:717: send_octet_to_linefi(0x11);
      000C13 75 82 11         [24] 3190 	mov	dpl,#0x11
                                   3191 ;	src/main.c:718: break;
                                   3192 ;	src/main.c:719: case 'b' :
      000C16 02r00r00         [24] 3193 	ljmp	_send_octet_to_linefi
      000C19                       3194 00132$:
                                   3195 ;	src/main.c:720: send_octet_to_linefi(0x12);
      000C19 75 82 12         [24] 3196 	mov	dpl,#0x12
                                   3197 ;	src/main.c:721: break;
                                   3198 ;	src/main.c:722: case 'c' :
      000C1C 02r00r00         [24] 3199 	ljmp	_send_octet_to_linefi
      000C1F                       3200 00133$:
                                   3201 ;	src/main.c:723: send_octet_to_linefi(0x13);
      000C1F 75 82 13         [24] 3202 	mov	dpl,#0x13
                                   3203 ;	src/main.c:724: break;
                                   3204 ;	src/main.c:725: case 'H' :
                                   3205 ;	src/main.c:726: print_help();
                                   3206 ;	src/main.c:728: } //switch(au8RxUART)
                                   3207 ;	src/main.c:729: }
      000C22 02r00r00         [24] 3208 	ljmp	_send_octet_to_linefi
                                   3209 ;------------------------------------------------------------
                                   3210 ;Allocation info for local variables in function 'main'
                                   3211 ;------------------------------------------------------------
                                   3212 ;su8SW                     Allocated to registers 
                                   3213 ;u8EnCnt                   Allocated to registers 
                                   3214 ;u8RxUART                  Allocated with name '_main_u8RxUART_65536_105'
                                   3215 ;u16Cnt                    Allocated to registers r4 r5 
                                   3216 ;u8OutputState             Allocated to registers 
                                   3217 ;u8StateRxCSC              Allocated to registers 
                                   3218 ;u8LineFiAddr              Allocated with name '_main_u8LineFiAddr_65536_105'
                                   3219 ;u8LineFiSpeed             Allocated to registers 
                                   3220 ;u8LineFiCmd               Allocated with name '_main_u8LineFiCmd_65536_105'
                                   3221 ;u8PwrOnFirstFlag          Allocated to registers r7 
                                   3222 ;u8SwNum                   Allocated with name '_main_u8SwNum_65536_105'
                                   3223 ;u8StateUart0InputMode     Allocated to registers r6 
                                   3224 ;stLineFiPkt               Allocated with name '_main_stLineFiPkt_65536_105'
                                   3225 ;u8RxBufIdx                Allocated to registers 
                                   3226 ;u8Count2                  Allocated to registers 
                                   3227 ;u8RxPktCnt                Allocated to registers 
                                   3228 ;u8PreambleCnt             Allocated to registers 
                                   3229 ;i                         Allocated to registers r5 
                                   3230 ;pcBuf                     Allocated with name '_main_pcBuf_65536_105'
                                   3231 ;pu8Data                   Allocated with name '_main_pu8Data_65536_105'
                                   3232 ;u8DataIdx                 Allocated with name '_main_u8DataIdx_65536_105'
                                   3233 ;ucBufIdx                  Allocated with name '_main_ucBufIdx_65536_105'
                                   3234 ;pstLineFiPkt              Allocated with name '_main_pstLineFiPkt_65536_105'
                                   3235 ;------------------------------------------------------------
                                   3236 ;	src/main.c:734: void main (void)
                                   3237 ;	-----------------------------------------
                                   3238 ;	 function main
                                   3239 ;	-----------------------------------------
      000C25                       3240 _main:
                                   3241 ;	src/main.c:742: UINT8 u8LineFiAddr = 1;
      000C25 75*12 01         [24] 3242 	mov	_main_u8LineFiAddr_65536_105,#0x01
                                   3243 ;	src/main.c:744: UINT8 u8LineFiCmd = 1;
      000C28 75*13 01         [24] 3244 	mov	_main_u8LineFiCmd_65536_105,#0x01
                                   3245 ;	src/main.c:745: UINT8 u8PwrOnFirstFlag = 1;
      000C2B 7F 01            [12] 3246 	mov	r7,#0x01
                                   3247 ;	src/main.c:748: uint8 u8StateUart0InputMode = UART0_INPUT_MODE0;
      000C2D 7E 00            [12] 3248 	mov	r6,#0x00
                                   3249 ;	src/main.c:752: unsigned char __xdata pu8Data[MAX_DATA] = {0,0,0,0,0,0,0,0,0,0};
      000C2F 90r00rD3         [24] 3250 	mov	dptr,#_main_pu8Data_65536_105
      000C32 E4               [12] 3251 	clr	a
      000C33 F0               [24] 3252 	movx	@dptr,a
      000C34 90r00rD4         [24] 3253 	mov	dptr,#(_main_pu8Data_65536_105 + 0x0001)
      000C37 F0               [24] 3254 	movx	@dptr,a
      000C38 90r00rD5         [24] 3255 	mov	dptr,#(_main_pu8Data_65536_105 + 0x0002)
      000C3B F0               [24] 3256 	movx	@dptr,a
      000C3C 90r00rD6         [24] 3257 	mov	dptr,#(_main_pu8Data_65536_105 + 0x0003)
      000C3F F0               [24] 3258 	movx	@dptr,a
      000C40 90r00rD7         [24] 3259 	mov	dptr,#(_main_pu8Data_65536_105 + 0x0004)
      000C43 F0               [24] 3260 	movx	@dptr,a
      000C44 90r00rD8         [24] 3261 	mov	dptr,#(_main_pu8Data_65536_105 + 0x0005)
      000C47 F0               [24] 3262 	movx	@dptr,a
      000C48 90r00rD9         [24] 3263 	mov	dptr,#(_main_pu8Data_65536_105 + 0x0006)
      000C4B F0               [24] 3264 	movx	@dptr,a
      000C4C 90r00rDA         [24] 3265 	mov	dptr,#(_main_pu8Data_65536_105 + 0x0007)
      000C4F F0               [24] 3266 	movx	@dptr,a
      000C50 90r00rDB         [24] 3267 	mov	dptr,#(_main_pu8Data_65536_105 + 0x0008)
      000C53 F0               [24] 3268 	movx	@dptr,a
      000C54 90r00rDC         [24] 3269 	mov	dptr,#(_main_pu8Data_65536_105 + 0x0009)
      000C57 F0               [24] 3270 	movx	@dptr,a
                                   3271 ;	src/main.c:753: unsigned char __xdata u8DataIdx = 0;
      000C58 90r00rDD         [24] 3272 	mov	dptr,#_main_u8DataIdx_65536_105
      000C5B F0               [24] 3273 	movx	@dptr,a
                                   3274 ;	src/main.c:754: uint8  __xdata ucBufIdx = 0;
      000C5C 90r00rDE         [24] 3275 	mov	dptr,#_main_ucBufIdx_65536_105
      000C5F F0               [24] 3276 	movx	@dptr,a
                                   3277 ;	src/main.c:756: linefi_packet_t __xdata pstLineFiPkt[] = {
      000C60 90r00rDF         [24] 3278 	mov	dptr,#_main_pstLineFiPkt_65536_105
      000C63 04               [12] 3279 	inc	a
      000C64 F0               [24] 3280 	movx	@dptr,a
      000C65 90r00rE0         [24] 3281 	mov	dptr,#(_main_pstLineFiPkt_65536_105 + 0x0001)
      000C68 04               [12] 3282 	inc	a
      000C69 F0               [24] 3283 	movx	@dptr,a
      000C6A 90r00rE1         [24] 3284 	mov	dptr,#(_main_pstLineFiPkt_65536_105 + 0x0002)
      000C6D 14               [12] 3285 	dec	a
      000C6E F0               [24] 3286 	movx	@dptr,a
      000C6F 90r00rE2         [24] 3287 	mov	dptr,#(_main_pstLineFiPkt_65536_105 + 0x0003)
      000C72 74 0A            [12] 3288 	mov	a,#0x0a
      000C74 F0               [24] 3289 	movx	@dptr,a
      000C75 90r00rE3         [24] 3290 	mov	dptr,#(_main_pstLineFiPkt_65536_105 + 0x0004)
      000C78 03               [12] 3291 	rr	a
      000C79 F0               [24] 3292 	movx	@dptr,a
      000C7A 90r00rE4         [24] 3293 	mov	dptr,#(_main_pstLineFiPkt_65536_105 + 0x0005)
      000C7D 74r0C            [12] 3294 	mov	a,#_gpu8Data
      000C7F F0               [24] 3295 	movx	@dptr,a
      000C80 74s00            [12] 3296 	mov	a,#(_gpu8Data >> 8)
      000C82 A3               [24] 3297 	inc	dptr
      000C83 F0               [24] 3298 	movx	@dptr,a
      000C84 E4               [12] 3299 	clr	a
      000C85 A3               [24] 3300 	inc	dptr
      000C86 F0               [24] 3301 	movx	@dptr,a
      000C87 90r00rE7         [24] 3302 	mov	dptr,#(_main_pstLineFiPkt_65536_105 + 0x0008)
      000C8A 04               [12] 3303 	inc	a
      000C8B F0               [24] 3304 	movx	@dptr,a
      000C8C 90r00rE8         [24] 3305 	mov	dptr,#(_main_pstLineFiPkt_65536_105 + 0x0009)
      000C8F 04               [12] 3306 	inc	a
      000C90 F0               [24] 3307 	movx	@dptr,a
      000C91 90r00rE9         [24] 3308 	mov	dptr,#(_main_pstLineFiPkt_65536_105 + 0x000a)
      000C94 F0               [24] 3309 	movx	@dptr,a
      000C95 90r00rEA         [24] 3310 	mov	dptr,#(_main_pstLineFiPkt_65536_105 + 0x000b)
      000C98 74 0A            [12] 3311 	mov	a,#0x0a
      000C9A F0               [24] 3312 	movx	@dptr,a
      000C9B 90r00rEB         [24] 3313 	mov	dptr,#(_main_pstLineFiPkt_65536_105 + 0x000c)
      000C9E 03               [12] 3314 	rr	a
      000C9F F0               [24] 3315 	movx	@dptr,a
      000CA0 90r00rEC         [24] 3316 	mov	dptr,#(_main_pstLineFiPkt_65536_105 + 0x000d)
      000CA3 74r0C            [12] 3317 	mov	a,#_gpu8Data
      000CA5 F0               [24] 3318 	movx	@dptr,a
      000CA6 74s00            [12] 3319 	mov	a,#(_gpu8Data >> 8)
      000CA8 A3               [24] 3320 	inc	dptr
      000CA9 F0               [24] 3321 	movx	@dptr,a
      000CAA E4               [12] 3322 	clr	a
      000CAB A3               [24] 3323 	inc	dptr
      000CAC F0               [24] 3324 	movx	@dptr,a
      000CAD 90r00rEF         [24] 3325 	mov	dptr,#(_main_pstLineFiPkt_65536_105 + 0x0010)
      000CB0 04               [12] 3326 	inc	a
      000CB1 F0               [24] 3327 	movx	@dptr,a
      000CB2 90r00rF0         [24] 3328 	mov	dptr,#(_main_pstLineFiPkt_65536_105 + 0x0011)
      000CB5 04               [12] 3329 	inc	a
      000CB6 F0               [24] 3330 	movx	@dptr,a
      000CB7 90r00rF1         [24] 3331 	mov	dptr,#(_main_pstLineFiPkt_65536_105 + 0x0012)
      000CBA 04               [12] 3332 	inc	a
      000CBB F0               [24] 3333 	movx	@dptr,a
      000CBC 90r00rF2         [24] 3334 	mov	dptr,#(_main_pstLineFiPkt_65536_105 + 0x0013)
      000CBF 74 0A            [12] 3335 	mov	a,#0x0a
      000CC1 F0               [24] 3336 	movx	@dptr,a
      000CC2 90r00rF3         [24] 3337 	mov	dptr,#(_main_pstLineFiPkt_65536_105 + 0x0014)
      000CC5 03               [12] 3338 	rr	a
      000CC6 F0               [24] 3339 	movx	@dptr,a
      000CC7 90r00rF4         [24] 3340 	mov	dptr,#(_main_pstLineFiPkt_65536_105 + 0x0015)
      000CCA 74r0C            [12] 3341 	mov	a,#_gpu8Data
      000CCC F0               [24] 3342 	movx	@dptr,a
      000CCD 74s00            [12] 3343 	mov	a,#(_gpu8Data >> 8)
      000CCF A3               [24] 3344 	inc	dptr
      000CD0 F0               [24] 3345 	movx	@dptr,a
      000CD1 E4               [12] 3346 	clr	a
      000CD2 A3               [24] 3347 	inc	dptr
      000CD3 F0               [24] 3348 	movx	@dptr,a
      000CD4 90r00rF7         [24] 3349 	mov	dptr,#(_main_pstLineFiPkt_65536_105 + 0x0018)
      000CD7 04               [12] 3350 	inc	a
      000CD8 F0               [24] 3351 	movx	@dptr,a
      000CD9 90r00rF8         [24] 3352 	mov	dptr,#(_main_pstLineFiPkt_65536_105 + 0x0019)
      000CDC 04               [12] 3353 	inc	a
      000CDD F0               [24] 3354 	movx	@dptr,a
      000CDE 90r00rF9         [24] 3355 	mov	dptr,#(_main_pstLineFiPkt_65536_105 + 0x001a)
      000CE1 23               [12] 3356 	rl	a
      000CE2 F0               [24] 3357 	movx	@dptr,a
      000CE3 90r00rFA         [24] 3358 	mov	dptr,#(_main_pstLineFiPkt_65536_105 + 0x001b)
      000CE6 74 0A            [12] 3359 	mov	a,#0x0a
      000CE8 F0               [24] 3360 	movx	@dptr,a
      000CE9 90r00rFB         [24] 3361 	mov	dptr,#(_main_pstLineFiPkt_65536_105 + 0x001c)
      000CEC 03               [12] 3362 	rr	a
      000CED F0               [24] 3363 	movx	@dptr,a
      000CEE 90r00rFC         [24] 3364 	mov	dptr,#(_main_pstLineFiPkt_65536_105 + 0x001d)
      000CF1 74r0C            [12] 3365 	mov	a,#_gpu8Data
      000CF3 F0               [24] 3366 	movx	@dptr,a
      000CF4 74s00            [12] 3367 	mov	a,#(_gpu8Data >> 8)
      000CF6 A3               [24] 3368 	inc	dptr
      000CF7 F0               [24] 3369 	movx	@dptr,a
      000CF8 E4               [12] 3370 	clr	a
      000CF9 A3               [24] 3371 	inc	dptr
      000CFA F0               [24] 3372 	movx	@dptr,a
      000CFB 90r00rFF         [24] 3373 	mov	dptr,#(_main_pstLineFiPkt_65536_105 + 0x0020)
      000CFE 04               [12] 3374 	inc	a
      000CFF F0               [24] 3375 	movx	@dptr,a
      000D00 90r01r00         [24] 3376 	mov	dptr,#(_main_pstLineFiPkt_65536_105 + 0x0021)
      000D03 04               [12] 3377 	inc	a
      000D04 F0               [24] 3378 	movx	@dptr,a
      000D05 90r01r01         [24] 3379 	mov	dptr,#(_main_pstLineFiPkt_65536_105 + 0x0022)
      000D08 74 05            [12] 3380 	mov	a,#0x05
      000D0A F0               [24] 3381 	movx	@dptr,a
      000D0B 90r01r02         [24] 3382 	mov	dptr,#(_main_pstLineFiPkt_65536_105 + 0x0023)
      000D0E 23               [12] 3383 	rl	a
      000D0F F0               [24] 3384 	movx	@dptr,a
      000D10 90r01r03         [24] 3385 	mov	dptr,#(_main_pstLineFiPkt_65536_105 + 0x0024)
      000D13 03               [12] 3386 	rr	a
      000D14 F0               [24] 3387 	movx	@dptr,a
      000D15 90r01r04         [24] 3388 	mov	dptr,#(_main_pstLineFiPkt_65536_105 + 0x0025)
      000D18 74r0C            [12] 3389 	mov	a,#_gpu8Data
      000D1A F0               [24] 3390 	movx	@dptr,a
      000D1B 74s00            [12] 3391 	mov	a,#(_gpu8Data >> 8)
      000D1D A3               [24] 3392 	inc	dptr
      000D1E F0               [24] 3393 	movx	@dptr,a
      000D1F E4               [12] 3394 	clr	a
      000D20 A3               [24] 3395 	inc	dptr
      000D21 F0               [24] 3396 	movx	@dptr,a
                                   3397 ;	src/main.c:764: linefi_packet_t stLineFiPkt = {
                                   3398 ;	1-genFromRTrack replaced	mov	_main_stLineFiPkt_65536_105,#0x01
      000D22 8F*15            [24] 3399 	mov	_main_stLineFiPkt_65536_105,r7
      000D24 75*16 02         [24] 3400 	mov	(_main_stLineFiPkt_65536_105 + 0x0001),#0x02
      000D27 75*17 03         [24] 3401 	mov	(_main_stLineFiPkt_65536_105 + 0x0002),#0x03
      000D2A 75*18 0A         [24] 3402 	mov	(_main_stLineFiPkt_65536_105 + 0x0003),#0x0a
      000D2D 75*19 05         [24] 3403 	mov	(_main_stLineFiPkt_65536_105 + 0x0004),#0x05
      000D30 75*1Ar0C         [24] 3404 	mov	((_main_stLineFiPkt_65536_105 + 0x0005) + 0),#_gpu8Data
      000D33 75*1Bs00         [24] 3405 	mov	((_main_stLineFiPkt_65536_105 + 0x0005) + 1),#(_gpu8Data >> 8)
                                   3406 ;	1-genFromRTrack replaced	mov	((_main_stLineFiPkt_65536_105 + 0x0005) + 2),#0x00
      000D36 F5*1C            [12] 3407 	mov	((_main_stLineFiPkt_65536_105 + 0x0005) + 2),a
                                   3408 ;	src/main.c:773: gpio_setup();
      000D38 C0 07            [24] 3409 	push	ar7
      000D3A C0 06            [24] 3410 	push	ar6
      000D3C 12r03rAE         [24] 3411 	lcall	_gpio_setup
                                   3412 ;	src/main.c:774: uart_setup();
      000D3F 12r00r00         [24] 3413 	lcall	_uart_setup
                                   3414 ;	src/main.c:776: MODIFY_HIRC_166();
      000D42 12r02r34         [24] 3415 	lcall	_MODIFY_HIRC_166
                                   3416 ;	src/main.c:778: clr_T0M;// 16/12 MHz
      000D45 53 8E F7         [24] 3417 	anl	_CKCON,#0xf7
                                   3418 ;	src/main.c:781: set_ET0;                                    //enable Timer0 interrupt
                                   3419 ;	assignBit
      000D48 D2 A9            [12] 3420 	setb	_ET0
                                   3421 ;	src/main.c:782: set_TR0;                                    //Timer0 run
                                   3422 ;	assignBit
      000D4A D2 8C            [12] 3423 	setb	_TR0
                                   3424 ;	src/main.c:784: gu8UART = 0;
      000D4C 75*00 00         [24] 3425 	mov	_gu8UART,#0x00
                                   3426 ;	src/main.c:785: printf_fast_f("This is UART0\n\r");
      000D4F 74r61            [12] 3427 	mov	a,#___str_54
      000D51 C0 E0            [24] 3428 	push	acc
      000D53 74s03            [12] 3429 	mov	a,#(___str_54 >> 8)
      000D55 C0 E0            [24] 3430 	push	acc
      000D57 12r00r00         [24] 3431 	lcall	_printf_fast_f
      000D5A 15 81            [12] 3432 	dec	sp
      000D5C 15 81            [12] 3433 	dec	sp
                                   3434 ;	src/main.c:786: printf_fast_f("LineFi Master\n\r");
      000D5E 74r71            [12] 3435 	mov	a,#___str_55
      000D60 C0 E0            [24] 3436 	push	acc
      000D62 74s03            [12] 3437 	mov	a,#(___str_55 >> 8)
      000D64 C0 E0            [24] 3438 	push	acc
      000D66 12r00r00         [24] 3439 	lcall	_printf_fast_f
      000D69 15 81            [12] 3440 	dec	sp
      000D6B 15 81            [12] 3441 	dec	sp
                                   3442 ;	src/main.c:787: gu8UART = 1;
      000D6D 75*00 01         [24] 3443 	mov	_gu8UART,#0x01
                                   3444 ;	src/main.c:788: printf_fast_f("This is UART1\n\r");
      000D70 74r81            [12] 3445 	mov	a,#___str_56
      000D72 C0 E0            [24] 3446 	push	acc
      000D74 74s03            [12] 3447 	mov	a,#(___str_56 >> 8)
      000D76 C0 E0            [24] 3448 	push	acc
      000D78 12r00r00         [24] 3449 	lcall	_printf_fast_f
      000D7B 15 81            [12] 3450 	dec	sp
      000D7D 15 81            [12] 3451 	dec	sp
      000D7F D0 06            [24] 3452 	pop	ar6
      000D81 D0 07            [24] 3453 	pop	ar7
                                   3454 ;	src/main.c:795: for (u16Cnt = 0 ; u16Cnt < 30000; u16Cnt++) {
      000D83 7C 30            [12] 3455 	mov	r4,#0x30
      000D85 7D 75            [12] 3456 	mov	r5,#0x75
      000D87                       3457 00197$:
                                   3458 ;	src/main.c:796: nop; nop; nop; nop; nop;
      000D87 00               [12] 3459 	NOP
      000D88 00               [12] 3460 	NOP
      000D89 00               [12] 3461 	NOP
      000D8A 00               [12] 3462 	NOP
      000D8B 00               [12] 3463 	NOP
      000D8C 1C               [12] 3464 	dec	r4
      000D8D BC FF 01         [24] 3465 	cjne	r4,#0xff,00421$
      000D90 1D               [12] 3466 	dec	r5
      000D91                       3467 00421$:
                                   3468 ;	src/main.c:795: for (u16Cnt = 0 ; u16Cnt < 30000; u16Cnt++) {
      000D91 EC               [12] 3469 	mov	a,r4
      000D92 4D               [12] 3470 	orl	a,r5
      000D93 70 F2            [24] 3471 	jnz	00197$
                                   3472 ;	src/main.c:798: LINEFI_TX = 1;
                                   3473 ;	assignBit
      000D95 D2 96            [12] 3474 	setb	_P16
                                   3475 ;	src/main.c:799: LINEFI_EN0 = 0;
                                   3476 ;	assignBit
      000D97 C2 90            [12] 3477 	clr	_P10
                                   3478 ;	src/main.c:800: gu8UART = 0;
      000D99 75*00 00         [24] 3479 	mov	_gu8UART,#0x00
                                   3480 ;	src/main.c:804: InitialUART1_Timer3(gpu32UartSpeed[0]);
      000D9C 90r00r36         [24] 3481 	mov	dptr,#_gpu32UartSpeed
      000D9F E0               [24] 3482 	movx	a,@dptr
      000DA0 FA               [12] 3483 	mov	r2,a
      000DA1 A3               [24] 3484 	inc	dptr
      000DA2 E0               [24] 3485 	movx	a,@dptr
      000DA3 FB               [12] 3486 	mov	r3,a
      000DA4 A3               [24] 3487 	inc	dptr
      000DA5 E0               [24] 3488 	movx	a,@dptr
      000DA6 FC               [12] 3489 	mov	r4,a
      000DA7 A3               [24] 3490 	inc	dptr
      000DA8 E0               [24] 3491 	movx	a,@dptr
      000DA9 8A 82            [24] 3492 	mov	dpl,r2
      000DAB 8B 83            [24] 3493 	mov	dph,r3
      000DAD 8C F0            [24] 3494 	mov	b,r4
      000DAF C0 07            [24] 3495 	push	ar7
      000DB1 C0 06            [24] 3496 	push	ar6
      000DB3 12r00r00         [24] 3497 	lcall	_InitialUART1_Timer3
                                   3498 ;	src/main.c:805: send_octet_to_linefi(((LINEFI_DEFAULT_RATE<<4)&0xF0) | (1)&0x0F);
      000DB6 75 82 31         [24] 3499 	mov	dpl,#0x31
      000DB9 12r00r00         [24] 3500 	lcall	_send_octet_to_linefi
      000DBC D0 06            [24] 3501 	pop	ar6
      000DBE D0 07            [24] 3502 	pop	ar7
                                   3503 ;	src/main.c:807: for (u16Cnt = 0 ; u16Cnt < 30000; u16Cnt++) {
      000DC0 7C 30            [12] 3504 	mov	r4,#0x30
      000DC2 7D 75            [12] 3505 	mov	r5,#0x75
      000DC4                       3506 00200$:
                                   3507 ;	src/main.c:808: nop; nop; nop; nop; nop;
      000DC4 00               [12] 3508 	NOP
      000DC5 00               [12] 3509 	NOP
      000DC6 00               [12] 3510 	NOP
      000DC7 00               [12] 3511 	NOP
      000DC8 00               [12] 3512 	NOP
      000DC9 1C               [12] 3513 	dec	r4
      000DCA BC FF 01         [24] 3514 	cjne	r4,#0xff,00423$
      000DCD 1D               [12] 3515 	dec	r5
      000DCE                       3516 00423$:
                                   3517 ;	src/main.c:807: for (u16Cnt = 0 ; u16Cnt < 30000; u16Cnt++) {
      000DCE EC               [12] 3518 	mov	a,r4
      000DCF 4D               [12] 3519 	orl	a,r5
      000DD0 70 F2            [24] 3520 	jnz	00200$
                                   3521 ;	src/main.c:811: InitialUART1_Timer3(gpu32UartSpeed[LINEFI_DEFAULT_RATE]);
      000DD2 90r00r42         [24] 3522 	mov	dptr,#(_gpu32UartSpeed + 0x000c)
      000DD5 E0               [24] 3523 	movx	a,@dptr
      000DD6 FA               [12] 3524 	mov	r2,a
      000DD7 A3               [24] 3525 	inc	dptr
      000DD8 E0               [24] 3526 	movx	a,@dptr
      000DD9 FB               [12] 3527 	mov	r3,a
      000DDA A3               [24] 3528 	inc	dptr
      000DDB E0               [24] 3529 	movx	a,@dptr
      000DDC FC               [12] 3530 	mov	r4,a
      000DDD A3               [24] 3531 	inc	dptr
      000DDE E0               [24] 3532 	movx	a,@dptr
      000DDF 8A 82            [24] 3533 	mov	dpl,r2
      000DE1 8B 83            [24] 3534 	mov	dph,r3
      000DE3 8C F0            [24] 3535 	mov	b,r4
      000DE5 C0 07            [24] 3536 	push	ar7
      000DE7 C0 06            [24] 3537 	push	ar6
      000DE9 12r00r00         [24] 3538 	lcall	_InitialUART1_Timer3
      000DEC D0 06            [24] 3539 	pop	ar6
      000DEE D0 07            [24] 3540 	pop	ar7
                                   3541 ;	src/main.c:813: for (u16Cnt = 0 ; u16Cnt < 30000; u16Cnt++) {
      000DF0 7C 30            [12] 3542 	mov	r4,#0x30
      000DF2 7D 75            [12] 3543 	mov	r5,#0x75
      000DF4                       3544 00203$:
                                   3545 ;	src/main.c:814: nop; nop; nop; nop; nop;
      000DF4 00               [12] 3546 	NOP
      000DF5 00               [12] 3547 	NOP
      000DF6 00               [12] 3548 	NOP
      000DF7 00               [12] 3549 	NOP
      000DF8 00               [12] 3550 	NOP
      000DF9 1C               [12] 3551 	dec	r4
      000DFA BC FF 01         [24] 3552 	cjne	r4,#0xff,00425$
      000DFD 1D               [12] 3553 	dec	r5
      000DFE                       3554 00425$:
                                   3555 ;	src/main.c:813: for (u16Cnt = 0 ; u16Cnt < 30000; u16Cnt++) {
      000DFE EC               [12] 3556 	mov	a,r4
      000DFF 4D               [12] 3557 	orl	a,r5
      000E00 70 F2            [24] 3558 	jnz	00203$
                                   3559 ;	src/main.c:816: LINEFI_TX = 1;
                                   3560 ;	assignBit
      000E02 D2 96            [12] 3561 	setb	_P16
                                   3562 ;	src/main.c:818: LINEFI_EN0 = 0;
                                   3563 ;	assignBit
      000E04 C2 90            [12] 3564 	clr	_P10
                                   3565 ;	src/main.c:819: LINEFI_EN1 = 1;
                                   3566 ;	assignBit
      000E06 D2 91            [12] 3567 	setb	_P11
                                   3568 ;	src/main.c:820: LINEFI_EN2 = 0;
                                   3569 ;	assignBit
      000E08 C2 92            [12] 3570 	clr	_P12
                                   3571 ;	src/main.c:821: printf("%s\r\n", gcUartInputMode[u8StateUart0InputMode]);
      000E0A 90r00r00         [24] 3572 	mov	dptr,#_gcUartInputMode
      000E0D E0               [24] 3573 	movx	a,@dptr
      000E0E FB               [12] 3574 	mov	r3,a
      000E0F A3               [24] 3575 	inc	dptr
      000E10 E0               [24] 3576 	movx	a,@dptr
      000E11 FC               [12] 3577 	mov	r4,a
      000E12 A3               [24] 3578 	inc	dptr
      000E13 E0               [24] 3579 	movx	a,@dptr
      000E14 FD               [12] 3580 	mov	r5,a
      000E15 C0 07            [24] 3581 	push	ar7
      000E17 C0 06            [24] 3582 	push	ar6
      000E19 C0 03            [24] 3583 	push	ar3
      000E1B C0 04            [24] 3584 	push	ar4
      000E1D C0 05            [24] 3585 	push	ar5
      000E1F 74r91            [12] 3586 	mov	a,#___str_57
      000E21 C0 E0            [24] 3587 	push	acc
      000E23 74s03            [12] 3588 	mov	a,#(___str_57 >> 8)
      000E25 C0 E0            [24] 3589 	push	acc
      000E27 74 80            [12] 3590 	mov	a,#0x80
      000E29 C0 E0            [24] 3591 	push	acc
      000E2B 12r00r00         [24] 3592 	lcall	_printf
      000E2E E5 81            [12] 3593 	mov	a,sp
      000E30 24 FA            [12] 3594 	add	a,#0xfa
      000E32 F5 81            [12] 3595 	mov	sp,a
      000E34 D0 06            [24] 3596 	pop	ar6
      000E36 D0 07            [24] 3597 	pop	ar7
                                   3598 ;	src/main.c:823: while(1) {
      000E38                       3599 00193$:
                                   3600 ;	src/main.c:826: if (Receive_Data_From_UART0_nb(&u8RxUART)) { // 유아트 입력이 있을 때
      000E38 90r00r11         [24] 3601 	mov	dptr,#_main_u8RxUART_65536_105
      000E3B 75 F0 40         [24] 3602 	mov	b,#0x40
      000E3E C0 07            [24] 3603 	push	ar7
      000E40 C0 06            [24] 3604 	push	ar6
      000E42 12r00r00         [24] 3605 	lcall	_Receive_Data_From_UART0_nb
      000E45 E5 82            [12] 3606 	mov	a,dpl
      000E47 D0 06            [24] 3607 	pop	ar6
      000E49 D0 07            [24] 3608 	pop	ar7
      000E4B 70 03            [24] 3609 	jnz	00427$
      000E4D 02r10rF6         [24] 3610 	ljmp	00160$
      000E50                       3611 00427$:
                                   3612 ;	src/main.c:827: switch(u8RxUART) {
      000E50 74 1B            [12] 3613 	mov	a,#0x1b
      000E52 B5*11 43         [24] 3614 	cjne	a,_main_u8RxUART_65536_105,00107$
                                   3615 ;	src/main.c:829: u8StateUart0InputMode++;
      000E55 0E               [12] 3616 	inc	r6
                                   3617 ;	src/main.c:830: if (u8StateUart0InputMode == MAX_STATE_UART0_INPUT) {
      000E56 BE 04 02         [24] 3618 	cjne	r6,#0x04,00106$
                                   3619 ;	src/main.c:831: u8StateUart0InputMode = 0;
      000E59 7E 00            [12] 3620 	mov	r6,#0x00
      000E5B                       3621 00106$:
                                   3622 ;	src/main.c:833: printf("drchoi %s\r\n", gcUartInputMode[u8StateUart0InputMode]);
      000E5B EE               [12] 3623 	mov	a,r6
      000E5C 75 F0 03         [24] 3624 	mov	b,#0x03
      000E5F A4               [48] 3625 	mul	ab
      000E60 24r00            [12] 3626 	add	a,#_gcUartInputMode
      000E62 F5 82            [12] 3627 	mov	dpl,a
      000E64 74s00            [12] 3628 	mov	a,#(_gcUartInputMode >> 8)
      000E66 35 F0            [12] 3629 	addc	a,b
      000E68 F5 83            [12] 3630 	mov	dph,a
      000E6A E0               [24] 3631 	movx	a,@dptr
      000E6B FB               [12] 3632 	mov	r3,a
      000E6C A3               [24] 3633 	inc	dptr
      000E6D E0               [24] 3634 	movx	a,@dptr
      000E6E FC               [12] 3635 	mov	r4,a
      000E6F A3               [24] 3636 	inc	dptr
      000E70 E0               [24] 3637 	movx	a,@dptr
      000E71 FD               [12] 3638 	mov	r5,a
      000E72 C0 07            [24] 3639 	push	ar7
      000E74 C0 06            [24] 3640 	push	ar6
      000E76 C0 03            [24] 3641 	push	ar3
      000E78 C0 04            [24] 3642 	push	ar4
      000E7A C0 05            [24] 3643 	push	ar5
      000E7C 74r96            [12] 3644 	mov	a,#___str_58
      000E7E C0 E0            [24] 3645 	push	acc
      000E80 74s03            [12] 3646 	mov	a,#(___str_58 >> 8)
      000E82 C0 E0            [24] 3647 	push	acc
      000E84 74 80            [12] 3648 	mov	a,#0x80
      000E86 C0 E0            [24] 3649 	push	acc
      000E88 12r00r00         [24] 3650 	lcall	_printf
      000E8B E5 81            [12] 3651 	mov	a,sp
      000E8D 24 FA            [12] 3652 	add	a,#0xfa
      000E8F F5 81            [12] 3653 	mov	sp,a
      000E91 D0 06            [24] 3654 	pop	ar6
      000E93 D0 07            [24] 3655 	pop	ar7
                                   3656 ;	src/main.c:834: break;
      000E95 02r11r3E         [24] 3657 	ljmp	00161$
                                   3658 ;	src/main.c:835: default :
      000E98                       3659 00107$:
                                   3660 ;	src/main.c:836: switch(u8StateUart0InputMode) {
      000E98 EE               [12] 3661 	mov	a,r6
      000E99 24 FB            [12] 3662 	add	a,#0xff - 0x04
      000E9B 50 03            [24] 3663 	jnc	00432$
      000E9D 02r11r3E         [24] 3664 	ljmp	00161$
      000EA0                       3665 00432$:
      000EA0 EE               [12] 3666 	mov	a,r6
      000EA1 2E               [12] 3667 	add	a,r6
      000EA2 2E               [12] 3668 	add	a,r6
      000EA3 90r0ErA7         [24] 3669 	mov	dptr,#00433$
      000EA6 73               [24] 3670 	jmp	@a+dptr
      000EA7                       3671 00433$:
      000EA7 02r0ErB6         [24] 3672 	ljmp	00108$
      000EAA 02r0ErD9         [24] 3673 	ljmp	00109$
      000EAD 02r0ErF7         [24] 3674 	ljmp	00110$
      000EB0 02r0FrE8         [24] 3675 	ljmp	00131$
      000EB3 02r11r3E         [24] 3676 	ljmp	00161$
                                   3677 ;	src/main.c:837: case UART0_INPUT_MODE0 :
      000EB6                       3678 00108$:
                                   3679 ;	src/main.c:838: act_by_one_key(u8RxUART, &u8LineFiCmd, &u8LineFiAddr);
      000EB6 75*08r13         [24] 3680 	mov	_act_by_one_key_PARM_2,#_main_u8LineFiCmd_65536_105
      000EB9 75*09 00         [24] 3681 	mov	(_act_by_one_key_PARM_2 + 1),#0x00
      000EBC 75*0A 40         [24] 3682 	mov	(_act_by_one_key_PARM_2 + 2),#0x40
      000EBF 75*0Br12         [24] 3683 	mov	_act_by_one_key_PARM_3,#_main_u8LineFiAddr_65536_105
      000EC2 75*0C 00         [24] 3684 	mov	(_act_by_one_key_PARM_3 + 1),#0x00
      000EC5 75*0D 40         [24] 3685 	mov	(_act_by_one_key_PARM_3 + 2),#0x40
      000EC8 85*11 82         [24] 3686 	mov	dpl,_main_u8RxUART_65536_105
      000ECB C0 07            [24] 3687 	push	ar7
      000ECD C0 06            [24] 3688 	push	ar6
      000ECF 12r06r29         [24] 3689 	lcall	_act_by_one_key
      000ED2 D0 06            [24] 3690 	pop	ar6
      000ED4 D0 07            [24] 3691 	pop	ar7
                                   3692 ;	src/main.c:839: break;
      000ED6 02r11r3E         [24] 3693 	ljmp	00161$
                                   3694 ;	src/main.c:840: case UART0_INPUT_MODE1 :
      000ED9                       3695 00109$:
                                   3696 ;	src/main.c:841: gu16TimeCnt = 0;
      000ED9 90r00r34         [24] 3697 	mov	dptr,#_gu16TimeCnt
      000EDC E4               [12] 3698 	clr	a
      000EDD F0               [24] 3699 	movx	@dptr,a
      000EDE A3               [24] 3700 	inc	dptr
      000EDF F0               [24] 3701 	movx	@dptr,a
                                   3702 ;	src/main.c:842: pcBuf[ucBufIdx++] = u8RxUART;
      000EE0 90r00rDE         [24] 3703 	mov	dptr,#_main_ucBufIdx_65536_105
      000EE3 E0               [24] 3704 	movx	a,@dptr
      000EE4 FD               [12] 3705 	mov	r5,a
      000EE5 04               [12] 3706 	inc	a
      000EE6 F0               [24] 3707 	movx	@dptr,a
      000EE7 ED               [12] 3708 	mov	a,r5
      000EE8 24r6F            [12] 3709 	add	a,#_main_pcBuf_65536_105
      000EEA F5 82            [12] 3710 	mov	dpl,a
      000EEC E4               [12] 3711 	clr	a
      000EED 34s00            [12] 3712 	addc	a,#(_main_pcBuf_65536_105 >> 8)
      000EEF F5 83            [12] 3713 	mov	dph,a
      000EF1 E5*11            [12] 3714 	mov	a,_main_u8RxUART_65536_105
      000EF3 F0               [24] 3715 	movx	@dptr,a
                                   3716 ;	src/main.c:844: break;
      000EF4 02r11r3E         [24] 3717 	ljmp	00161$
                                   3718 ;	src/main.c:845: case UART0_INPUT_MODE2 : // mimic 5keys on board
      000EF7                       3719 00110$:
                                   3720 ;	src/main.c:846: switch(u8RxUART) {
      000EF7 74 66            [12] 3721 	mov	a,#0x66
      000EF9 B5*11 02         [24] 3722 	cjne	a,_main_u8RxUART_65536_105,00434$
      000EFC 80 1F            [24] 3723 	sjmp	00111$
      000EFE                       3724 00434$:
      000EFE 74 67            [12] 3725 	mov	a,#0x67
      000F00 B5*11 02         [24] 3726 	cjne	a,_main_u8RxUART_65536_105,00435$
      000F03 80 26            [24] 3727 	sjmp	00114$
      000F05                       3728 00435$:
      000F05 74 68            [12] 3729 	mov	a,#0x68
      000F07 B5*11 02         [24] 3730 	cjne	a,_main_u8RxUART_65536_105,00436$
      000F0A 80 27            [24] 3731 	sjmp	00117$
      000F0C                       3732 00436$:
      000F0C 74 6A            [12] 3733 	mov	a,#0x6a
      000F0E B5*11 02         [24] 3734 	cjne	a,_main_u8RxUART_65536_105,00437$
      000F11 80 3C            [24] 3735 	sjmp	00118$
      000F13                       3736 00437$:
      000F13 74 6B            [12] 3737 	mov	a,#0x6b
      000F15 B5*11 02         [24] 3738 	cjne	a,_main_u8RxUART_65536_105,00438$
      000F18 80 62            [24] 3739 	sjmp	00121$
      000F1A                       3740 00438$:
      000F1A 02r0FrA7         [24] 3741 	ljmp	00124$
                                   3742 ;	src/main.c:847: case 'f' : // down SW1
      000F1D                       3743 00111$:
                                   3744 ;	src/main.c:848: u8LineFiAddr--;
      000F1D 15*12            [12] 3745 	dec	_main_u8LineFiAddr_65536_105
                                   3746 ;	src/main.c:849: if (u8LineFiAddr == 0) {
      000F1F E5*12            [12] 3747 	mov	a,_main_u8LineFiAddr_65536_105
      000F21 60 03            [24] 3748 	jz	00439$
      000F23 02r0FrA7         [24] 3749 	ljmp	00124$
      000F26                       3750 00439$:
                                   3751 ;	src/main.c:850: u8LineFiAddr = 1;
      000F26 75*12 01         [24] 3752 	mov	_main_u8LineFiAddr_65536_105,#0x01
                                   3753 ;	src/main.c:852: break;
                                   3754 ;	src/main.c:853: case 'g' : // right SW2
      000F29 80 7C            [24] 3755 	sjmp	00124$
      000F2B                       3756 00114$:
                                   3757 ;	src/main.c:854: u8LineFiCmd--;
                                   3758 ;	src/main.c:855: if (u8LineFiCmd == 0) {
      000F2B D5*13 79         [24] 3759 	djnz	_main_u8LineFiCmd_65536_105,00124$
                                   3760 ;	src/main.c:856: u8LineFiCmd = 1;
      000F2E 75*13 01         [24] 3761 	mov	_main_u8LineFiCmd_65536_105,#0x01
                                   3762 ;	src/main.c:858: break;
                                   3763 ;	src/main.c:859: case 'h' : // center SW3
      000F31 80 74            [24] 3764 	sjmp	00124$
      000F33                       3765 00117$:
                                   3766 ;	src/main.c:860: stLineFiPkt.pu8Data = pu8Data;
      000F33 75*1ArD3         [24] 3767 	mov	((_main_stLineFiPkt_65536_105 + 0x0005) + 0),#_main_pu8Data_65536_105
      000F36 75*1Bs00         [24] 3768 	mov	((_main_stLineFiPkt_65536_105 + 0x0005) + 1),#(_main_pu8Data_65536_105 >> 8)
      000F39 75*1C 00         [24] 3769 	mov	((_main_stLineFiPkt_65536_105 + 0x0005) + 2),#0x00
                                   3770 ;	src/main.c:861: send_linefi_packet(&stLineFiPkt);
      000F3C 90r00r15         [24] 3771 	mov	dptr,#_main_stLineFiPkt_65536_105
      000F3F 75 F0 40         [24] 3772 	mov	b,#0x40
      000F42 C0 07            [24] 3773 	push	ar7
      000F44 C0 06            [24] 3774 	push	ar6
      000F46 12r00r00         [24] 3775 	lcall	_send_linefi_packet
      000F49 D0 06            [24] 3776 	pop	ar6
      000F4B D0 07            [24] 3777 	pop	ar7
                                   3778 ;	src/main.c:862: break;
                                   3779 ;	src/main.c:864: case 'j' : //  left SW4
      000F4D 80 58            [24] 3780 	sjmp	00124$
      000F4F                       3781 00118$:
                                   3782 ;	src/main.c:865: u8LineFiCmd++;
      000F4F 05*13            [12] 3783 	inc	_main_u8LineFiCmd_65536_105
                                   3784 ;	src/main.c:866: if (u8LineFiCmd == 101) {
      000F51 74 65            [12] 3785 	mov	a,#0x65
      000F53 B5*13 03         [24] 3786 	cjne	a,_main_u8LineFiCmd_65536_105,00120$
                                   3787 ;	src/main.c:867: u8LineFiCmd = 100;
      000F56 75*13 64         [24] 3788 	mov	_main_u8LineFiCmd_65536_105,#0x64
      000F59                       3789 00120$:
                                   3790 ;	src/main.c:869: printf_fast_f("command: %d\n\r", u8LineFiCmd);
      000F59 AC*13            [24] 3791 	mov	r4,_main_u8LineFiCmd_65536_105
      000F5B 7D 00            [12] 3792 	mov	r5,#0x00
      000F5D C0 07            [24] 3793 	push	ar7
      000F5F C0 06            [24] 3794 	push	ar6
      000F61 C0 04            [24] 3795 	push	ar4
      000F63 C0 05            [24] 3796 	push	ar5
      000F65 74rFA            [12] 3797 	mov	a,#___str_49
      000F67 C0 E0            [24] 3798 	push	acc
      000F69 74s02            [12] 3799 	mov	a,#(___str_49 >> 8)
      000F6B C0 E0            [24] 3800 	push	acc
      000F6D 12r00r00         [24] 3801 	lcall	_printf_fast_f
      000F70 E5 81            [12] 3802 	mov	a,sp
      000F72 24 FC            [12] 3803 	add	a,#0xfc
      000F74 F5 81            [12] 3804 	mov	sp,a
      000F76 D0 06            [24] 3805 	pop	ar6
      000F78 D0 07            [24] 3806 	pop	ar7
                                   3807 ;	src/main.c:870: break;
                                   3808 ;	src/main.c:871: case 'k' : // up SW5
      000F7A 80 2B            [24] 3809 	sjmp	00124$
      000F7C                       3810 00121$:
                                   3811 ;	src/main.c:872: u8LineFiAddr++;
      000F7C 05*12            [12] 3812 	inc	_main_u8LineFiAddr_65536_105
                                   3813 ;	src/main.c:873: if (u8LineFiAddr == 16) {
      000F7E 74 10            [12] 3814 	mov	a,#0x10
      000F80 B5*12 03         [24] 3815 	cjne	a,_main_u8LineFiAddr_65536_105,00123$
                                   3816 ;	src/main.c:874: u8LineFiAddr = 15;
      000F83 75*12 0F         [24] 3817 	mov	_main_u8LineFiAddr_65536_105,#0x0f
      000F86                       3818 00123$:
                                   3819 ;	src/main.c:876: printf_fast_f("address: %d\n\r", u8LineFiAddr);
      000F86 AC*12            [24] 3820 	mov	r4,_main_u8LineFiAddr_65536_105
      000F88 7D 00            [12] 3821 	mov	r5,#0x00
      000F8A C0 07            [24] 3822 	push	ar7
      000F8C C0 06            [24] 3823 	push	ar6
      000F8E C0 04            [24] 3824 	push	ar4
      000F90 C0 05            [24] 3825 	push	ar5
      000F92 74rEC            [12] 3826 	mov	a,#___str_48
      000F94 C0 E0            [24] 3827 	push	acc
      000F96 74s02            [12] 3828 	mov	a,#(___str_48 >> 8)
      000F98 C0 E0            [24] 3829 	push	acc
      000F9A 12r00r00         [24] 3830 	lcall	_printf_fast_f
      000F9D E5 81            [12] 3831 	mov	a,sp
      000F9F 24 FC            [12] 3832 	add	a,#0xfc
      000FA1 F5 81            [12] 3833 	mov	sp,a
      000FA3 D0 06            [24] 3834 	pop	ar6
      000FA5 D0 07            [24] 3835 	pop	ar7
                                   3836 ;	src/main.c:878: }
      000FA7                       3837 00124$:
                                   3838 ;	src/main.c:880: switch(u8RxUART) {
      000FA7 74 66            [12] 3839 	mov	a,#0x66
      000FA9 B5*11 02         [24] 3840 	cjne	a,_main_u8RxUART_65536_105,00445$
      000FAC 80 20            [24] 3841 	sjmp	00128$
      000FAE                       3842 00445$:
      000FAE 74 67            [12] 3843 	mov	a,#0x67
      000FB0 B5*11 02         [24] 3844 	cjne	a,_main_u8RxUART_65536_105,00446$
      000FB3 80 19            [24] 3845 	sjmp	00128$
      000FB5                       3846 00446$:
      000FB5 74 68            [12] 3847 	mov	a,#0x68
      000FB7 B5*11 03         [24] 3848 	cjne	a,_main_u8RxUART_65536_105,00447$
      000FBA 02r11r3E         [24] 3849 	ljmp	00161$
      000FBD                       3850 00447$:
      000FBD 74 6A            [12] 3851 	mov	a,#0x6a
      000FBF B5*11 02         [24] 3852 	cjne	a,_main_u8RxUART_65536_105,00448$
      000FC2 80 0A            [24] 3853 	sjmp	00128$
      000FC4                       3854 00448$:
      000FC4 74 6B            [12] 3855 	mov	a,#0x6b
      000FC6 B5*11 02         [24] 3856 	cjne	a,_main_u8RxUART_65536_105,00449$
      000FC9 80 03            [24] 3857 	sjmp	00450$
      000FCB                       3858 00449$:
      000FCB 02r11r3E         [24] 3859 	ljmp	00161$
      000FCE                       3860 00450$:
                                   3861 ;	src/main.c:884: case 'k' : // up SW5
      000FCE                       3862 00128$:
                                   3863 ;	src/main.c:885: stLineFiPkt.u8Addr = u8LineFiAddr;
      000FCE 85*12*17         [24] 3864 	mov	(_main_stLineFiPkt_65536_105 + 0x0002),_main_u8LineFiAddr_65536_105
                                   3865 ;	src/main.c:886: stLineFiPkt.u8Type = u8LineFiCmd;
      000FD1 85*13*16         [24] 3866 	mov	(_main_stLineFiPkt_65536_105 + 0x0001),_main_u8LineFiCmd_65536_105
                                   3867 ;	src/main.c:887: print_linefipacket(&stLineFiPkt);
      000FD4 90r00r15         [24] 3868 	mov	dptr,#_main_stLineFiPkt_65536_105
      000FD7 75 F0 40         [24] 3869 	mov	b,#0x40
      000FDA C0 07            [24] 3870 	push	ar7
      000FDC C0 06            [24] 3871 	push	ar6
      000FDE 12r00r00         [24] 3872 	lcall	_print_linefipacket
      000FE1 D0 06            [24] 3873 	pop	ar6
      000FE3 D0 07            [24] 3874 	pop	ar7
                                   3875 ;	src/main.c:888: break;
      000FE5 02r11r3E         [24] 3876 	ljmp	00161$
                                   3877 ;	src/main.c:895: case UART0_INPUT_MODE3 : // slave gpio pin setting
      000FE8                       3878 00131$:
                                   3879 ;	src/main.c:896: switch(u8RxUART) {
      000FE8 74 68            [12] 3880 	mov	a,#0x68
      000FEA B5*11 02         [24] 3881 	cjne	a,_main_u8RxUART_65536_105,00451$
      000FED 80 15            [24] 3882 	sjmp	00132$
      000FEF                       3883 00451$:
      000FEF 74 6A            [12] 3884 	mov	a,#0x6a
      000FF1 B5*11 02         [24] 3885 	cjne	a,_main_u8RxUART_65536_105,00452$
      000FF4 80 20            [24] 3886 	sjmp	00135$
      000FF6                       3887 00452$:
      000FF6 74 6B            [12] 3888 	mov	a,#0x6b
      000FF8 B5*11 02         [24] 3889 	cjne	a,_main_u8RxUART_65536_105,00453$
      000FFB 80 33            [24] 3890 	sjmp	00136$
      000FFD                       3891 00453$:
      000FFD 74 6C            [12] 3892 	mov	a,#0x6c
                                   3893 ;	src/main.c:897: case 'h' : // left
      000FFF B5*11 5A         [24] 3894 	cjne	a,_main_u8RxUART_65536_105,00140$
      001002 80 46            [24] 3895 	sjmp	00137$
      001004                       3896 00132$:
                                   3897 ;	src/main.c:898: u8DataIdx--;
      001004 90r00rDD         [24] 3898 	mov	dptr,#_main_u8DataIdx_65536_105
      001007 E0               [24] 3899 	movx	a,@dptr
      001008 14               [12] 3900 	dec	a
      001009 F0               [24] 3901 	movx	@dptr,a
                                   3902 ;	src/main.c:899: if (u8DataIdx == 255) {
      00100A E0               [24] 3903 	movx	a,@dptr
      00100B FD               [12] 3904 	mov	r5,a
      00100C BD FF 4D         [24] 3905 	cjne	r5,#0xff,00140$
                                   3906 ;	src/main.c:900: u8DataIdx = 0;
      00100F 90r00rDD         [24] 3907 	mov	dptr,#_main_u8DataIdx_65536_105
      001012 E4               [12] 3908 	clr	a
      001013 F0               [24] 3909 	movx	@dptr,a
                                   3910 ;	src/main.c:902: break;
                                   3911 ;	src/main.c:903: case 'j' : // down 
      001014 80 46            [24] 3912 	sjmp	00140$
      001016                       3913 00135$:
                                   3914 ;	src/main.c:904: pu8Data[u8DataIdx]--;
      001016 90r00rDD         [24] 3915 	mov	dptr,#_main_u8DataIdx_65536_105
      001019 E0               [24] 3916 	movx	a,@dptr
      00101A 24rD3            [12] 3917 	add	a,#_main_pu8Data_65536_105
      00101C FD               [12] 3918 	mov	r5,a
      00101D E4               [12] 3919 	clr	a
      00101E 34s00            [12] 3920 	addc	a,#(_main_pu8Data_65536_105 >> 8)
      001020 FC               [12] 3921 	mov	r4,a
      001021 8D 82            [24] 3922 	mov	dpl,r5
      001023 8C 83            [24] 3923 	mov	dph,r4
      001025 E0               [24] 3924 	movx	a,@dptr
      001026 FB               [12] 3925 	mov	r3,a
      001027 1B               [12] 3926 	dec	r3
      001028 8D 82            [24] 3927 	mov	dpl,r5
      00102A 8C 83            [24] 3928 	mov	dph,r4
      00102C EB               [12] 3929 	mov	a,r3
      00102D F0               [24] 3930 	movx	@dptr,a
                                   3931 ;	src/main.c:905: break;
                                   3932 ;	src/main.c:906: case 'k' : // up 
      00102E 80 2C            [24] 3933 	sjmp	00140$
      001030                       3934 00136$:
                                   3935 ;	src/main.c:907: pu8Data[u8DataIdx]++;
      001030 90r00rDD         [24] 3936 	mov	dptr,#_main_u8DataIdx_65536_105
      001033 E0               [24] 3937 	movx	a,@dptr
      001034 24rD3            [12] 3938 	add	a,#_main_pu8Data_65536_105
      001036 FD               [12] 3939 	mov	r5,a
      001037 E4               [12] 3940 	clr	a
      001038 34s00            [12] 3941 	addc	a,#(_main_pu8Data_65536_105 >> 8)
      00103A FC               [12] 3942 	mov	r4,a
      00103B 8D 82            [24] 3943 	mov	dpl,r5
      00103D 8C 83            [24] 3944 	mov	dph,r4
      00103F E0               [24] 3945 	movx	a,@dptr
      001040 FB               [12] 3946 	mov	r3,a
      001041 0B               [12] 3947 	inc	r3
      001042 8D 82            [24] 3948 	mov	dpl,r5
      001044 8C 83            [24] 3949 	mov	dph,r4
      001046 EB               [12] 3950 	mov	a,r3
      001047 F0               [24] 3951 	movx	@dptr,a
                                   3952 ;	src/main.c:908: break;
                                   3953 ;	src/main.c:909: case 'l' : // right 
      001048 80 12            [24] 3954 	sjmp	00140$
      00104A                       3955 00137$:
                                   3956 ;	src/main.c:910: u8DataIdx++;
      00104A 90r00rDD         [24] 3957 	mov	dptr,#_main_u8DataIdx_65536_105
      00104D E0               [24] 3958 	movx	a,@dptr
      00104E 24 01            [12] 3959 	add	a,#0x01
      001050 F0               [24] 3960 	movx	@dptr,a
                                   3961 ;	src/main.c:911: if (u8DataIdx == MAX_DATA) {
      001051 E0               [24] 3962 	movx	a,@dptr
      001052 FD               [12] 3963 	mov	r5,a
      001053 BD 0A 06         [24] 3964 	cjne	r5,#0x0a,00140$
                                   3965 ;	src/main.c:912: u8DataIdx--;;
      001056 ED               [12] 3966 	mov	a,r5
      001057 14               [12] 3967 	dec	a
      001058 90r00rDD         [24] 3968 	mov	dptr,#_main_u8DataIdx_65536_105
      00105B F0               [24] 3969 	movx	@dptr,a
                                   3970 ;	src/main.c:915: }
      00105C                       3971 00140$:
                                   3972 ;	src/main.c:916: switch(u8RxUART) {
      00105C 74 68            [12] 3973 	mov	a,#0x68
      00105E B5*11 02         [24] 3974 	cjne	a,_main_u8RxUART_65536_105,00459$
      001061 80 18            [24] 3975 	sjmp	00142$
      001063                       3976 00459$:
      001063 74 6A            [12] 3977 	mov	a,#0x6a
      001065 B5*11 02         [24] 3978 	cjne	a,_main_u8RxUART_65536_105,00460$
      001068 80 38            [24] 3979 	sjmp	00240$
      00106A                       3980 00460$:
      00106A 74 6B            [12] 3981 	mov	a,#0x6b
      00106C B5*11 02         [24] 3982 	cjne	a,_main_u8RxUART_65536_105,00461$
      00106F 80 31            [24] 3983 	sjmp	00240$
      001071                       3984 00461$:
      001071 74 6C            [12] 3985 	mov	a,#0x6c
      001073 B5*11 02         [24] 3986 	cjne	a,_main_u8RxUART_65536_105,00462$
      001076 80 03            [24] 3987 	sjmp	00463$
      001078                       3988 00462$:
      001078 02r11r3E         [24] 3989 	ljmp	00161$
      00107B                       3990 00463$:
                                   3991 ;	src/main.c:918: case 'l' : // right
      00107B                       3992 00142$:
                                   3993 ;	src/main.c:919: printf_fast_f("DataIdx:%d\r\n", u8DataIdx);
      00107B 90r00rDD         [24] 3994 	mov	dptr,#_main_u8DataIdx_65536_105
      00107E E0               [24] 3995 	movx	a,@dptr
      00107F FD               [12] 3996 	mov	r5,a
      001080 7C 00            [12] 3997 	mov	r4,#0x00
      001082 C0 07            [24] 3998 	push	ar7
      001084 C0 06            [24] 3999 	push	ar6
      001086 C0 05            [24] 4000 	push	ar5
      001088 C0 04            [24] 4001 	push	ar4
      00108A 74rA2            [12] 4002 	mov	a,#___str_59
      00108C C0 E0            [24] 4003 	push	acc
      00108E 74s03            [12] 4004 	mov	a,#(___str_59 >> 8)
      001090 C0 E0            [24] 4005 	push	acc
      001092 12r00r00         [24] 4006 	lcall	_printf_fast_f
      001095 E5 81            [12] 4007 	mov	a,sp
      001097 24 FC            [12] 4008 	add	a,#0xfc
      001099 F5 81            [12] 4009 	mov	sp,a
      00109B D0 06            [24] 4010 	pop	ar6
      00109D D0 07            [24] 4011 	pop	ar7
                                   4012 ;	src/main.c:920: break;
      00109F 02r11r3E         [24] 4013 	ljmp	00161$
                                   4014 ;	src/main.c:925: for (i=0;i<MAX_DATA;i++) {
      0010A2                       4015 00240$:
      0010A2 7D 00            [12] 4016 	mov	r5,#0x00
      0010A4                       4017 00204$:
                                   4018 ;	src/main.c:926: printf("0x%x ", pu8Data[i]);
      0010A4 ED               [12] 4019 	mov	a,r5
      0010A5 24rD3            [12] 4020 	add	a,#_main_pu8Data_65536_105
      0010A7 F5 82            [12] 4021 	mov	dpl,a
      0010A9 E4               [12] 4022 	clr	a
      0010AA 34s00            [12] 4023 	addc	a,#(_main_pu8Data_65536_105 >> 8)
      0010AC F5 83            [12] 4024 	mov	dph,a
      0010AE E0               [24] 4025 	movx	a,@dptr
      0010AF FC               [12] 4026 	mov	r4,a
      0010B0 7B 00            [12] 4027 	mov	r3,#0x00
      0010B2 C0 07            [24] 4028 	push	ar7
      0010B4 C0 06            [24] 4029 	push	ar6
      0010B6 C0 05            [24] 4030 	push	ar5
      0010B8 C0 04            [24] 4031 	push	ar4
      0010BA C0 03            [24] 4032 	push	ar3
      0010BC 74rAF            [12] 4033 	mov	a,#___str_60
      0010BE C0 E0            [24] 4034 	push	acc
      0010C0 74s03            [12] 4035 	mov	a,#(___str_60 >> 8)
      0010C2 C0 E0            [24] 4036 	push	acc
      0010C4 74 80            [12] 4037 	mov	a,#0x80
      0010C6 C0 E0            [24] 4038 	push	acc
      0010C8 12r00r00         [24] 4039 	lcall	_printf
      0010CB E5 81            [12] 4040 	mov	a,sp
      0010CD 24 FB            [12] 4041 	add	a,#0xfb
      0010CF F5 81            [12] 4042 	mov	sp,a
      0010D1 D0 05            [24] 4043 	pop	ar5
      0010D3 D0 06            [24] 4044 	pop	ar6
      0010D5 D0 07            [24] 4045 	pop	ar7
                                   4046 ;	src/main.c:925: for (i=0;i<MAX_DATA;i++) {
      0010D7 0D               [12] 4047 	inc	r5
      0010D8 BD 0A 00         [24] 4048 	cjne	r5,#0x0a,00464$
      0010DB                       4049 00464$:
      0010DB 40 C7            [24] 4050 	jc	00204$
                                   4051 ;	src/main.c:928: printf_fast_f("\r\n");
      0010DD C0 07            [24] 4052 	push	ar7
      0010DF C0 06            [24] 4053 	push	ar6
      0010E1 74r2E            [12] 4054 	mov	a,#___str_5
      0010E3 C0 E0            [24] 4055 	push	acc
      0010E5 74s00            [12] 4056 	mov	a,#(___str_5 >> 8)
      0010E7 C0 E0            [24] 4057 	push	acc
      0010E9 12r00r00         [24] 4058 	lcall	_printf_fast_f
      0010EC 15 81            [12] 4059 	dec	sp
      0010EE 15 81            [12] 4060 	dec	sp
      0010F0 D0 06            [24] 4061 	pop	ar6
      0010F2 D0 07            [24] 4062 	pop	ar7
                                   4063 ;	src/main.c:936: } //switch(u8RxUART)
      0010F4 80 48            [24] 4064 	sjmp	00161$
      0010F6                       4065 00160$:
                                   4066 ;	src/main.c:939: switch(u8StateUart0InputMode) {
      0010F6 EE               [12] 4067 	mov	a,r6
      0010F7 24 FB            [12] 4068 	add	a,#0xff - 0x04
      0010F9 40 43            [24] 4069 	jc	00161$
      0010FB EE               [12] 4070 	mov	a,r6
      0010FC 2E               [12] 4071 	add	a,r6
                                   4072 ;	src/main.c:942: case UART0_INPUT_MODE1 :
      0010FD 90r11r01         [24] 4073 	mov	dptr,#00467$
      001100 73               [24] 4074 	jmp	@a+dptr
      001101                       4075 00467$:
      001101 80 3B            [24] 4076 	sjmp	00161$
      001103 80 06            [24] 4077 	sjmp	00151$
      001105 80 37            [24] 4078 	sjmp	00161$
      001107 80 35            [24] 4079 	sjmp	00161$
      001109 80 33            [24] 4080 	sjmp	00161$
      00110B                       4081 00151$:
                                   4082 ;	src/main.c:943: if (gu16TimeCnt > 10 && ucBufIdx != 0) {
      00110B 90r00r34         [24] 4083 	mov	dptr,#_gu16TimeCnt
      00110E E0               [24] 4084 	movx	a,@dptr
      00110F FC               [12] 4085 	mov	r4,a
      001110 A3               [24] 4086 	inc	dptr
      001111 E0               [24] 4087 	movx	a,@dptr
      001112 FD               [12] 4088 	mov	r5,a
      001113 C3               [12] 4089 	clr	c
      001114 74 0A            [12] 4090 	mov	a,#0x0a
      001116 9C               [12] 4091 	subb	a,r4
      001117 E4               [12] 4092 	clr	a
      001118 9D               [12] 4093 	subb	a,r5
      001119 50 23            [24] 4094 	jnc	00161$
      00111B 90r00rDE         [24] 4095 	mov	dptr,#_main_ucBufIdx_65536_105
      00111E E0               [24] 4096 	movx	a,@dptr
      00111F FD               [12] 4097 	mov	r5,a
      001120 E0               [24] 4098 	movx	a,@dptr
      001121 60 1B            [24] 4099 	jz	00161$
                                   4100 ;	src/main.c:944: printoutbuf(ucBufIdx, pcBuf);
      001123 75*05r6F         [24] 4101 	mov	_printoutbuf_PARM_2,#_main_pcBuf_65536_105
      001126 75*06s00         [24] 4102 	mov	(_printoutbuf_PARM_2 + 1),#(_main_pcBuf_65536_105 >> 8)
      001129 75*07 00         [24] 4103 	mov	(_printoutbuf_PARM_2 + 2),#0x00
      00112C 8D 82            [24] 4104 	mov	dpl,r5
      00112E C0 07            [24] 4105 	push	ar7
      001130 C0 06            [24] 4106 	push	ar6
      001132 12r04rF8         [24] 4107 	lcall	_printoutbuf
      001135 D0 06            [24] 4108 	pop	ar6
      001137 D0 07            [24] 4109 	pop	ar7
                                   4110 ;	src/main.c:945: ucBufIdx = 0;
      001139 90r00rDE         [24] 4111 	mov	dptr,#_main_ucBufIdx_65536_105
      00113C E4               [12] 4112 	clr	a
      00113D F0               [24] 4113 	movx	@dptr,a
                                   4114 ;	src/main.c:954: } //switch(u8StateUart0InputMode)
      00113E                       4115 00161$:
                                   4116 ;	src/main.c:962: if (u8PwrOnFirstFlag) { // 전원 켜진 후, 한 번만 동작
      00113E EF               [12] 4117 	mov	a,r7
      00113F 70 03            [24] 4118 	jnz	00470$
      001141 02r12r2A         [24] 4119 	ljmp	00190$
      001144                       4120 00470$:
                                   4121 ;	src/main.c:963: switch (state_switches((SW_U<<0)| (SW_R<<1)| (SW_L<<2)| (SW_D<<3) | (SW_C<<4), &u8SwNum)) {
      001144 A2 95            [12] 4122 	mov	c,_P15
      001146 E4               [12] 4123 	clr	a
      001147 33               [12] 4124 	rlc	a
      001148 FD               [12] 4125 	mov	r5,a
      001149 A2 B0            [12] 4126 	mov	c,_P30
      00114B E4               [12] 4127 	clr	a
      00114C 33               [12] 4128 	rlc	a
      00114D 25 E0            [12] 4129 	add	a,acc
      00114F 42 05            [12] 4130 	orl	ar5,a
      001151 A2 80            [12] 4131 	mov	c,_P00
      001153 E4               [12] 4132 	clr	a
      001154 33               [12] 4133 	rlc	a
      001155 25 E0            [12] 4134 	add	a,acc
      001157 25 E0            [12] 4135 	add	a,acc
      001159 42 05            [12] 4136 	orl	ar5,a
      00115B A2 93            [12] 4137 	mov	c,_P13
      00115D E4               [12] 4138 	clr	a
      00115E 33               [12] 4139 	rlc	a
      00115F C4               [12] 4140 	swap	a
      001160 03               [12] 4141 	rr	a
      001161 54 F8            [12] 4142 	anl	a,#0xf8
      001163 42 05            [12] 4143 	orl	ar5,a
      001165 A2 97            [12] 4144 	mov	c,_P17
      001167 E4               [12] 4145 	clr	a
      001168 33               [12] 4146 	rlc	a
      001169 C4               [12] 4147 	swap	a
      00116A 54 F0            [12] 4148 	anl	a,#0xf0
      00116C 4D               [12] 4149 	orl	a,r5
      00116D F5 82            [12] 4150 	mov	dpl,a
      00116F 75*00r14         [24] 4151 	mov	_state_switches_PARM_2,#_main_u8SwNum_65536_105
      001172 75*01 00         [24] 4152 	mov	(_state_switches_PARM_2 + 1),#0x00
      001175 75*02 40         [24] 4153 	mov	(_state_switches_PARM_2 + 2),#0x40
      001178 C0 07            [24] 4154 	push	ar7
      00117A C0 06            [24] 4155 	push	ar6
      00117C 12r04r03         [24] 4156 	lcall	_state_switches
      00117F AD 82            [24] 4157 	mov	r5,dpl
      001181 D0 06            [24] 4158 	pop	ar6
      001183 D0 07            [24] 4159 	pop	ar7
      001185 BD 01 02         [24] 4160 	cjne	r5,#0x01,00471$
      001188 80 03            [24] 4161 	sjmp	00472$
      00118A                       4162 00471$:
      00118A 02r0Er38         [24] 4163 	ljmp	00193$
      00118D                       4164 00472$:
                                   4165 ;	src/main.c:965: switch(u8PwrOnFirstFlag) {
      00118D EF               [12] 4166 	mov	a,r7
      00118E 24 FA            [12] 4167 	add	a,#0xff - 0x05
      001190 50 03            [24] 4168 	jnc	00473$
      001192 02r0Er38         [24] 4169 	ljmp	00193$
      001195                       4170 00473$:
      001195 EF               [12] 4171 	mov	a,r7
      001196 2F               [12] 4172 	add	a,r7
      001197 2F               [12] 4173 	add	a,r7
      001198 90r11r9C         [24] 4174 	mov	dptr,#00474$
      00119B 73               [24] 4175 	jmp	@a+dptr
      00119C                       4176 00474$:
      00119C 02r0Er38         [24] 4177 	ljmp	00193$
      00119F 02r11rAE         [24] 4178 	ljmp	00163$
      0011A2 02r11rB6         [24] 4179 	ljmp	00164$
      0011A5 02r12r1E         [24] 4180 	ljmp	00165$
      0011A8 02r12r22         [24] 4181 	ljmp	00166$
      0011AB 02r12r26         [24] 4182 	ljmp	00167$
                                   4183 ;	src/main.c:966: case 1 :
      0011AE                       4184 00163$:
                                   4185 ;	src/main.c:967: LINEFI_TX = 1;
                                   4186 ;	assignBit
      0011AE D2 96            [12] 4187 	setb	_P16
                                   4188 ;	src/main.c:968: LINEFI_EN0 = 1;
                                   4189 ;	assignBit
      0011B0 D2 90            [12] 4190 	setb	_P10
                                   4191 ;	src/main.c:969: u8PwrOnFirstFlag++;
      0011B2 0F               [12] 4192 	inc	r7
                                   4193 ;	src/main.c:970: break;
      0011B3 02r0Er38         [24] 4194 	ljmp	00193$
                                   4195 ;	src/main.c:971: case 2 :
      0011B6                       4196 00164$:
                                   4197 ;	src/main.c:972: InitialUART1_Timer3(gpu32UartSpeed[0]);
      0011B6 90r00r36         [24] 4198 	mov	dptr,#_gpu32UartSpeed
      0011B9 E0               [24] 4199 	movx	a,@dptr
      0011BA FA               [12] 4200 	mov	r2,a
      0011BB A3               [24] 4201 	inc	dptr
      0011BC E0               [24] 4202 	movx	a,@dptr
      0011BD FB               [12] 4203 	mov	r3,a
      0011BE A3               [24] 4204 	inc	dptr
      0011BF E0               [24] 4205 	movx	a,@dptr
      0011C0 FC               [12] 4206 	mov	r4,a
      0011C1 A3               [24] 4207 	inc	dptr
      0011C2 E0               [24] 4208 	movx	a,@dptr
      0011C3 8A 82            [24] 4209 	mov	dpl,r2
      0011C5 8B 83            [24] 4210 	mov	dph,r3
      0011C7 8C F0            [24] 4211 	mov	b,r4
      0011C9 C0 06            [24] 4212 	push	ar6
      0011CB 12r00r00         [24] 4213 	lcall	_InitialUART1_Timer3
                                   4214 ;	src/main.c:973: send_octet_to_linefi(((LINEFI_DEFAULT_RATE<<4)&0xF0) | (1)&0x0F);
      0011CE 75 82 31         [24] 4215 	mov	dpl,#0x31
      0011D1 12r00r00         [24] 4216 	lcall	_send_octet_to_linefi
                                   4217 ;	src/main.c:974: printf_fast_f("uart speed: %lu:\n\r", gpu32UartSpeed[LINEFI_DEFAULT_RATE]);
      0011D4 90r00r42         [24] 4218 	mov	dptr,#(_gpu32UartSpeed + 0x000c)
      0011D7 E0               [24] 4219 	movx	a,@dptr
      0011D8 FA               [12] 4220 	mov	r2,a
      0011D9 A3               [24] 4221 	inc	dptr
      0011DA E0               [24] 4222 	movx	a,@dptr
      0011DB FB               [12] 4223 	mov	r3,a
      0011DC A3               [24] 4224 	inc	dptr
      0011DD E0               [24] 4225 	movx	a,@dptr
      0011DE FC               [12] 4226 	mov	r4,a
      0011DF A3               [24] 4227 	inc	dptr
      0011E0 E0               [24] 4228 	movx	a,@dptr
      0011E1 FD               [12] 4229 	mov	r5,a
      0011E2 C0 02            [24] 4230 	push	ar2
      0011E4 C0 03            [24] 4231 	push	ar3
      0011E6 C0 04            [24] 4232 	push	ar4
      0011E8 C0 05            [24] 4233 	push	ar5
      0011EA 74rD9            [12] 4234 	mov	a,#___str_47
      0011EC C0 E0            [24] 4235 	push	acc
      0011EE 74s02            [12] 4236 	mov	a,#(___str_47 >> 8)
      0011F0 C0 E0            [24] 4237 	push	acc
      0011F2 12r00r00         [24] 4238 	lcall	_printf_fast_f
      0011F5 E5 81            [12] 4239 	mov	a,sp
      0011F7 24 FA            [12] 4240 	add	a,#0xfa
      0011F9 F5 81            [12] 4241 	mov	sp,a
                                   4242 ;	src/main.c:975: InitialUART1_Timer3(gpu32UartSpeed[LINEFI_DEFAULT_RATE]);
      0011FB 90r00r42         [24] 4243 	mov	dptr,#(_gpu32UartSpeed + 0x000c)
      0011FE E0               [24] 4244 	movx	a,@dptr
      0011FF FA               [12] 4245 	mov	r2,a
      001200 A3               [24] 4246 	inc	dptr
      001201 E0               [24] 4247 	movx	a,@dptr
      001202 FB               [12] 4248 	mov	r3,a
      001203 A3               [24] 4249 	inc	dptr
      001204 E0               [24] 4250 	movx	a,@dptr
      001205 FC               [12] 4251 	mov	r4,a
      001206 A3               [24] 4252 	inc	dptr
      001207 E0               [24] 4253 	movx	a,@dptr
      001208 8A 82            [24] 4254 	mov	dpl,r2
      00120A 8B 83            [24] 4255 	mov	dph,r3
      00120C 8C F0            [24] 4256 	mov	b,r4
      00120E 12r00r00         [24] 4257 	lcall	_InitialUART1_Timer3
      001211 D0 06            [24] 4258 	pop	ar6
                                   4259 ;	src/main.c:977: u8LineFiCmd = 2;
      001213 75*13 02         [24] 4260 	mov	_main_u8LineFiCmd_65536_105,#0x02
                                   4261 ;	src/main.c:978: u8LineFiAddr = 1;
      001216 75*12 01         [24] 4262 	mov	_main_u8LineFiAddr_65536_105,#0x01
                                   4263 ;	src/main.c:979: u8PwrOnFirstFlag = 0;
      001219 7F 00            [12] 4264 	mov	r7,#0x00
                                   4265 ;	src/main.c:980: break;
      00121B 02r0Er38         [24] 4266 	ljmp	00193$
                                   4267 ;	src/main.c:981: case 3 :
      00121E                       4268 00165$:
                                   4269 ;	src/main.c:982: u8PwrOnFirstFlag++;
      00121E 0F               [12] 4270 	inc	r7
                                   4271 ;	src/main.c:983: break;
      00121F 02r0Er38         [24] 4272 	ljmp	00193$
                                   4273 ;	src/main.c:984: case 4 :
      001222                       4274 00166$:
                                   4275 ;	src/main.c:985: u8PwrOnFirstFlag++;
      001222 0F               [12] 4276 	inc	r7
                                   4277 ;	src/main.c:986: break;
      001223 02r0Er38         [24] 4278 	ljmp	00193$
                                   4279 ;	src/main.c:987: case 5 :
      001226                       4280 00167$:
                                   4281 ;	src/main.c:988: u8PwrOnFirstFlag++;
      001226 0F               [12] 4282 	inc	r7
                                   4283 ;	src/main.c:1020: } //switch (state_switches((SW1<<0)| (SW2<<1)| (SW3<<2)| (SW4<<3) | (SW5<<4), &u8SwNum))
      001227 02r0Er38         [24] 4284 	ljmp	00193$
      00122A                       4285 00190$:
                                   4286 ;	src/main.c:1023: switch (state_switches((SW_U<<0)| (SW_R<<1)| (SW_L<<2)| (SW_D<<3) | (SW_C<<4), &u8SwNum)) {
      00122A A2 95            [12] 4287 	mov	c,_P15
      00122C E4               [12] 4288 	clr	a
      00122D 33               [12] 4289 	rlc	a
      00122E FD               [12] 4290 	mov	r5,a
      00122F A2 B0            [12] 4291 	mov	c,_P30
      001231 E4               [12] 4292 	clr	a
      001232 33               [12] 4293 	rlc	a
      001233 25 E0            [12] 4294 	add	a,acc
      001235 42 05            [12] 4295 	orl	ar5,a
      001237 A2 80            [12] 4296 	mov	c,_P00
      001239 E4               [12] 4297 	clr	a
      00123A 33               [12] 4298 	rlc	a
      00123B 25 E0            [12] 4299 	add	a,acc
      00123D 25 E0            [12] 4300 	add	a,acc
      00123F 42 05            [12] 4301 	orl	ar5,a
      001241 A2 93            [12] 4302 	mov	c,_P13
      001243 E4               [12] 4303 	clr	a
      001244 33               [12] 4304 	rlc	a
      001245 C4               [12] 4305 	swap	a
      001246 03               [12] 4306 	rr	a
      001247 54 F8            [12] 4307 	anl	a,#0xf8
      001249 42 05            [12] 4308 	orl	ar5,a
      00124B A2 97            [12] 4309 	mov	c,_P17
      00124D E4               [12] 4310 	clr	a
      00124E 33               [12] 4311 	rlc	a
      00124F C4               [12] 4312 	swap	a
      001250 54 F0            [12] 4313 	anl	a,#0xf0
      001252 4D               [12] 4314 	orl	a,r5
      001253 F5 82            [12] 4315 	mov	dpl,a
      001255 75*00r14         [24] 4316 	mov	_state_switches_PARM_2,#_main_u8SwNum_65536_105
      001258 75*01 00         [24] 4317 	mov	(_state_switches_PARM_2 + 1),#0x00
      00125B 75*02 40         [24] 4318 	mov	(_state_switches_PARM_2 + 2),#0x40
      00125E C0 07            [24] 4319 	push	ar7
      001260 C0 06            [24] 4320 	push	ar6
      001262 12r04r03         [24] 4321 	lcall	_state_switches
      001265 AD 82            [24] 4322 	mov	r5,dpl
      001267 D0 06            [24] 4323 	pop	ar6
      001269 D0 07            [24] 4324 	pop	ar7
      00126B BD 01 02         [24] 4325 	cjne	r5,#0x01,00475$
      00126E 80 03            [24] 4326 	sjmp	00476$
      001270                       4327 00475$:
      001270 02r0Er38         [24] 4328 	ljmp	00193$
      001273                       4329 00476$:
                                   4330 ;	src/main.c:1106: switch(u8SwNum) {
      001273 AD*14            [24] 4331 	mov	r5,_main_u8SwNum_65536_105
      001275 BD 01 03         [24] 4332 	cjne	r5,#0x01,00477$
      001278 02r13r50         [24] 4333 	ljmp	00184$
      00127B                       4334 00477$:
      00127B 74 02            [12] 4335 	mov	a,#0x02
      00127D B5*14 02         [24] 4336 	cjne	a,_main_u8SwNum_65536_105,00478$
      001280 80 43            [24] 4337 	sjmp	00174$
      001282                       4338 00478$:
      001282 74 04            [12] 4339 	mov	a,#0x04
      001284 B5*14 03         [24] 4340 	cjne	a,_main_u8SwNum_65536_105,00479$
      001287 02r13r22         [24] 4341 	ljmp	00181$
      00128A                       4342 00479$:
      00128A 74 08            [12] 4343 	mov	a,#0x08
      00128C B5*14 02         [24] 4344 	cjne	a,_main_u8SwNum_65536_105,00480$
      00128F 80 0A            [24] 4345 	sjmp	00171$
      001291                       4346 00480$:
      001291 74 10            [12] 4347 	mov	a,#0x10
      001293 B5*14 02         [24] 4348 	cjne	a,_main_u8SwNum_65536_105,00481$
      001296 80 57            [24] 4349 	sjmp	00177$
      001298                       4350 00481$:
      001298 02r0Er38         [24] 4351 	ljmp	00193$
                                   4352 ;	src/main.c:1107: case (1<<3) : // down SW1
      00129B                       4353 00171$:
                                   4354 ;	src/main.c:1108: u8LineFiAddr--;
                                   4355 ;	src/main.c:1109: if (u8LineFiAddr == 0) {
      00129B D5*12 03         [24] 4356 	djnz	_main_u8LineFiAddr_65536_105,00173$
                                   4357 ;	src/main.c:1110: u8LineFiAddr = 1;
      00129E 75*12 01         [24] 4358 	mov	_main_u8LineFiAddr_65536_105,#0x01
      0012A1                       4359 00173$:
                                   4360 ;	src/main.c:1113: printf_fast_f("address: %d\n\r", u8LineFiAddr);
      0012A1 AC*12            [24] 4361 	mov	r4,_main_u8LineFiAddr_65536_105
      0012A3 7D 00            [12] 4362 	mov	r5,#0x00
      0012A5 C0 07            [24] 4363 	push	ar7
      0012A7 C0 06            [24] 4364 	push	ar6
      0012A9 C0 04            [24] 4365 	push	ar4
      0012AB C0 05            [24] 4366 	push	ar5
      0012AD 74rEC            [12] 4367 	mov	a,#___str_48
      0012AF C0 E0            [24] 4368 	push	acc
      0012B1 74s02            [12] 4369 	mov	a,#(___str_48 >> 8)
      0012B3 C0 E0            [24] 4370 	push	acc
      0012B5 12r00r00         [24] 4371 	lcall	_printf_fast_f
      0012B8 E5 81            [12] 4372 	mov	a,sp
      0012BA 24 FC            [12] 4373 	add	a,#0xfc
      0012BC F5 81            [12] 4374 	mov	sp,a
      0012BE D0 06            [24] 4375 	pop	ar6
      0012C0 D0 07            [24] 4376 	pop	ar7
                                   4377 ;	src/main.c:1114: break;
      0012C2 02r0Er38         [24] 4378 	ljmp	00193$
                                   4379 ;	src/main.c:1115: case (1<<1) : // right SW2
      0012C5                       4380 00174$:
                                   4381 ;	src/main.c:1116: u8LineFiCmd--;
                                   4382 ;	src/main.c:1117: if (u8LineFiCmd == 0) {
      0012C5 D5*13 03         [24] 4383 	djnz	_main_u8LineFiCmd_65536_105,00176$
                                   4384 ;	src/main.c:1118: u8LineFiCmd = 1;
      0012C8 75*13 01         [24] 4385 	mov	_main_u8LineFiCmd_65536_105,#0x01
      0012CB                       4386 00176$:
                                   4387 ;	src/main.c:1122: printf_fast_f("command: %d\n\r", u8LineFiCmd);
      0012CB AC*13            [24] 4388 	mov	r4,_main_u8LineFiCmd_65536_105
      0012CD 7D 00            [12] 4389 	mov	r5,#0x00
      0012CF C0 07            [24] 4390 	push	ar7
      0012D1 C0 06            [24] 4391 	push	ar6
      0012D3 C0 04            [24] 4392 	push	ar4
      0012D5 C0 05            [24] 4393 	push	ar5
      0012D7 74rFA            [12] 4394 	mov	a,#___str_49
      0012D9 C0 E0            [24] 4395 	push	acc
      0012DB 74s02            [12] 4396 	mov	a,#(___str_49 >> 8)
      0012DD C0 E0            [24] 4397 	push	acc
      0012DF 12r00r00         [24] 4398 	lcall	_printf_fast_f
      0012E2 E5 81            [12] 4399 	mov	a,sp
      0012E4 24 FC            [12] 4400 	add	a,#0xfc
      0012E6 F5 81            [12] 4401 	mov	sp,a
      0012E8 D0 06            [24] 4402 	pop	ar6
      0012EA D0 07            [24] 4403 	pop	ar7
                                   4404 ;	src/main.c:1123: break;
      0012EC 02r0Er38         [24] 4405 	ljmp	00193$
                                   4406 ;	src/main.c:1125: case (1<<4) : // center SW3
      0012EF                       4407 00177$:
                                   4408 ;	src/main.c:1126: stLineFiPkt.u8Addr = u8LineFiAddr;
      0012EF 85*12*17         [24] 4409 	mov	(_main_stLineFiPkt_65536_105 + 0x0002),_main_u8LineFiAddr_65536_105
                                   4410 ;	src/main.c:1127: stLineFiPkt.u8Type = u8LineFiCmd;
      0012F2 85*13*16         [24] 4411 	mov	(_main_stLineFiPkt_65536_105 + 0x0001),_main_u8LineFiCmd_65536_105
                                   4412 ;	src/main.c:1128: if (u8LineFiAddr&1) {
      0012F5 E5*12            [12] 4413 	mov	a,_main_u8LineFiAddr_65536_105
      0012F7 30 E0 0B         [24] 4414 	jnb	acc.0,00179$
                                   4415 ;	src/main.c:1129: stLineFiPkt.pu8Data = gpu8Data;
      0012FA 75*1Ar0C         [24] 4416 	mov	((_main_stLineFiPkt_65536_105 + 0x0005) + 0),#_gpu8Data
      0012FD 75*1Bs00         [24] 4417 	mov	((_main_stLineFiPkt_65536_105 + 0x0005) + 1),#(_gpu8Data >> 8)
      001300 75*1C 00         [24] 4418 	mov	((_main_stLineFiPkt_65536_105 + 0x0005) + 2),#0x00
      001303 80 09            [24] 4419 	sjmp	00180$
      001305                       4420 00179$:
                                   4421 ;	src/main.c:1132: stLineFiPkt.pu8Data = gpu8Data2;
      001305 75*1Ar20         [24] 4422 	mov	((_main_stLineFiPkt_65536_105 + 0x0005) + 0),#_gpu8Data2
      001308 75*1Bs00         [24] 4423 	mov	((_main_stLineFiPkt_65536_105 + 0x0005) + 1),#(_gpu8Data2 >> 8)
      00130B 75*1C 00         [24] 4424 	mov	((_main_stLineFiPkt_65536_105 + 0x0005) + 2),#0x00
      00130E                       4425 00180$:
                                   4426 ;	src/main.c:1134: send_linefi_packet(&stLineFiPkt);
      00130E 90r00r15         [24] 4427 	mov	dptr,#_main_stLineFiPkt_65536_105
      001311 75 F0 40         [24] 4428 	mov	b,#0x40
      001314 C0 07            [24] 4429 	push	ar7
      001316 C0 06            [24] 4430 	push	ar6
      001318 12r00r00         [24] 4431 	lcall	_send_linefi_packet
      00131B D0 06            [24] 4432 	pop	ar6
      00131D D0 07            [24] 4433 	pop	ar7
                                   4434 ;	src/main.c:1135: break;
      00131F 02r0Er38         [24] 4435 	ljmp	00193$
                                   4436 ;	src/main.c:1137: case (1<<2) : //  left SW4
      001322                       4437 00181$:
                                   4438 ;	src/main.c:1138: u8LineFiCmd++;
      001322 05*13            [12] 4439 	inc	_main_u8LineFiCmd_65536_105
                                   4440 ;	src/main.c:1139: if (u8LineFiCmd == 101) {
      001324 74 65            [12] 4441 	mov	a,#0x65
      001326 B5*13 03         [24] 4442 	cjne	a,_main_u8LineFiCmd_65536_105,00183$
                                   4443 ;	src/main.c:1140: u8LineFiCmd = 100;
      001329 75*13 64         [24] 4444 	mov	_main_u8LineFiCmd_65536_105,#0x64
      00132C                       4445 00183$:
                                   4446 ;	src/main.c:1142: printf_fast_f("command: %d\n\r", u8LineFiCmd);
      00132C AC*13            [24] 4447 	mov	r4,_main_u8LineFiCmd_65536_105
      00132E 7D 00            [12] 4448 	mov	r5,#0x00
      001330 C0 07            [24] 4449 	push	ar7
      001332 C0 06            [24] 4450 	push	ar6
      001334 C0 04            [24] 4451 	push	ar4
      001336 C0 05            [24] 4452 	push	ar5
      001338 74rFA            [12] 4453 	mov	a,#___str_49
      00133A C0 E0            [24] 4454 	push	acc
      00133C 74s02            [12] 4455 	mov	a,#(___str_49 >> 8)
      00133E C0 E0            [24] 4456 	push	acc
      001340 12r00r00         [24] 4457 	lcall	_printf_fast_f
      001343 E5 81            [12] 4458 	mov	a,sp
      001345 24 FC            [12] 4459 	add	a,#0xfc
      001347 F5 81            [12] 4460 	mov	sp,a
      001349 D0 06            [24] 4461 	pop	ar6
      00134B D0 07            [24] 4462 	pop	ar7
                                   4463 ;	src/main.c:1145: break;
      00134D 02r0Er38         [24] 4464 	ljmp	00193$
                                   4465 ;	src/main.c:1146: case (1<<0) : // up SW5
      001350                       4466 00184$:
                                   4467 ;	src/main.c:1147: u8LineFiAddr++;
      001350 05*12            [12] 4468 	inc	_main_u8LineFiAddr_65536_105
                                   4469 ;	src/main.c:1148: if (u8LineFiAddr == 16) {
      001352 74 10            [12] 4470 	mov	a,#0x10
      001354 B5*12 03         [24] 4471 	cjne	a,_main_u8LineFiAddr_65536_105,00186$
                                   4472 ;	src/main.c:1149: u8LineFiAddr = 15;
      001357 75*12 0F         [24] 4473 	mov	_main_u8LineFiAddr_65536_105,#0x0f
      00135A                       4474 00186$:
                                   4475 ;	src/main.c:1151: printf_fast_f("address: %d\n\r", u8LineFiAddr);
      00135A AC*12            [24] 4476 	mov	r4,_main_u8LineFiAddr_65536_105
      00135C 7D 00            [12] 4477 	mov	r5,#0x00
      00135E C0 07            [24] 4478 	push	ar7
      001360 C0 06            [24] 4479 	push	ar6
      001362 C0 04            [24] 4480 	push	ar4
      001364 C0 05            [24] 4481 	push	ar5
      001366 74rEC            [12] 4482 	mov	a,#___str_48
      001368 C0 E0            [24] 4483 	push	acc
      00136A 74s02            [12] 4484 	mov	a,#(___str_48 >> 8)
      00136C C0 E0            [24] 4485 	push	acc
      00136E 12r00r00         [24] 4486 	lcall	_printf_fast_f
      001371 E5 81            [12] 4487 	mov	a,sp
      001373 24 FC            [12] 4488 	add	a,#0xfc
      001375 F5 81            [12] 4489 	mov	sp,a
      001377 D0 06            [24] 4490 	pop	ar6
      001379 D0 07            [24] 4491 	pop	ar7
                                   4492 ;	src/main.c:1155: } //switch (state_switches((SW_U<<0)| (SW_R<<1)| (SW_L<<2)| (SW_D<<3) | (SW_C<<4), &u8SwNum))
                                   4493 ;	src/main.c:1181: }
      00137B 02r0Er38         [24] 4494 	ljmp	00193$
                                   4495 	.area CSEG    (CODE)
                                   4496 	.area CONST   (CODE)
                                   4497 	.area CONST   (CODE)
      000000                       4498 ___str_0:
      000000 0A                    4499 	.db 0x0a
      000001 0D                    4500 	.db 0x0d
      000002 00                    4501 	.db 0x00
                                   4502 	.area CSEG    (CODE)
                                   4503 	.area CONST   (CODE)
      000003                       4504 ___str_1:
      000003 73 65 6C 66 20        4505 	.ascii "self "
      000008 00                    4506 	.db 0x00
                                   4507 	.area CSEG    (CODE)
                                   4508 	.area CONST   (CODE)
      000009                       4509 ___str_2:
      000009 63 72 6F 73 73        4510 	.ascii "cross"
      00000E 00                    4511 	.db 0x00
                                   4512 	.area CSEG    (CODE)
                                   4513 	.area CONST   (CODE)
      00000F                       4514 ___str_3:
      00000F 62 6F 74 68 20        4515 	.ascii "both "
      000014 00                    4516 	.db 0x00
                                   4517 	.area CSEG    (CODE)
                                   4518 	.area CONST   (CODE)
      000015                       4519 ___str_4:
      000015 20 6F 75 74 70 75 74  4520 	.ascii " output:This is UART%d"
             3A 54 68 69 73 20 69
             73 20 55 41 52 54 25
             64
      00002B 0A                    4521 	.db 0x0a
      00002C 0D                    4522 	.db 0x0d
      00002D 00                    4523 	.db 0x00
                                   4524 	.area CSEG    (CODE)
                                   4525 	.area CONST   (CODE)
      00002E                       4526 ___str_5:
      00002E 0D                    4527 	.db 0x0d
      00002F 0A                    4528 	.db 0x0a
      000030 00                    4529 	.db 0x00
                                   4530 	.area CSEG    (CODE)
                                   4531 	.area CONST   (CODE)
      000031                       4532 ___str_6:
      000031 25 63                 4533 	.ascii "%c"
      000033 00                    4534 	.db 0x00
                                   4535 	.area CSEG    (CODE)
                                   4536 	.area CONST   (CODE)
      000034                       4537 ___str_7:
      000034 0D                    4538 	.db 0x0d
      000035 0A                    4539 	.db 0x0a
      000036 69 6E 70 75 74 3A 54  4540 	.ascii "input:This is UART%d"
             68 69 73 20 69 73 20
             55 41 52 54 25 64
      00004A 00                    4541 	.db 0x00
                                   4542 	.area CSEG    (CODE)
                                   4543 	.area CONST   (CODE)
      00004B                       4544 ___str_8:
      00004B 49 64 6C 65 20 70 72  4545 	.ascii "Idle preamble on/off"
             65 61 6D 62 6C 65 20
             6F 6E 2F 6F 66 66
      00005F 0D                    4546 	.db 0x0d
      000060 0A                    4547 	.db 0x0a
      000061 00                    4548 	.db 0x00
                                   4549 	.area CSEG    (CODE)
                                   4550 	.area CONST   (CODE)
      000062                       4551 ___str_9:
      000062 4C 69 6E 65 46 69 20  4552 	.ascii "LineFi Power Off"
             50 6F 77 65 72 20 4F
             66 66
      000072 0D                    4553 	.db 0x0d
      000073 0A                    4554 	.db 0x0a
      000074 00                    4555 	.db 0x00
                                   4556 	.area CSEG    (CODE)
                                   4557 	.area CONST   (CODE)
      000075                       4558 ___str_10:
      000075 4C 69 6E 65 46 69 20  4559 	.ascii "LineFi Power On"
             50 6F 77 65 72 20 4F
             6E
      000084 0D                    4560 	.db 0x0d
      000085 0A                    4561 	.db 0x0a
      000086 00                    4562 	.db 0x00
                                   4563 	.area CSEG    (CODE)
                                   4564 	.area CONST   (CODE)
      000087                       4565 ___str_11:
      000087 4C 69 6E 65 46 69 20  4566 	.ascii "LineFi Uart Tx Low"
             55 61 72 74 20 54 78
             20 4C 6F 77
      000099 0D                    4567 	.db 0x0d
      00009A 0A                    4568 	.db 0x0a
      00009B 00                    4569 	.db 0x00
                                   4570 	.area CSEG    (CODE)
                                   4571 	.area CONST   (CODE)
      00009C                       4572 ___str_12:
      00009C 4C 69 6E 65 46 69 20  4573 	.ascii "LineFi Uart Tx High"
             55 61 72 74 20 54 78
             20 48 69 67 68
      0000AF 0D                    4574 	.db 0x0d
      0000B0 0A                    4575 	.db 0x0a
      0000B1 00                    4576 	.db 0x00
                                   4577 	.area CSEG    (CODE)
                                   4578 	.area CONST   (CODE)
      0000B2                       4579 ___str_13:
      0000B2 4C 69 6E 65 46 69 20  4580 	.ascii "LineFi CSC rx FSM Off"
             43 53 43 20 72 78 20
             46 53 4D 20 4F 66 66
      0000C7 0D                    4581 	.db 0x0d
      0000C8 0A                    4582 	.db 0x0a
      0000C9 00                    4583 	.db 0x00
                                   4584 	.area CSEG    (CODE)
                                   4585 	.area CONST   (CODE)
      0000CA                       4586 ___str_14:
      0000CA 4C 69 6E 65 46 69 20  4587 	.ascii "LineFi CSC rx FSM ON"
             43 53 43 20 72 78 20
             46 53 4D 20 4F 4E
      0000DE 0D                    4588 	.db 0x0d
      0000DF 0A                    4589 	.db 0x0a
      0000E0 00                    4590 	.db 0x00
                                   4591 	.area CSEG    (CODE)
                                   4592 	.area CONST   (CODE)
      0000E1                       4593 ___str_15:
      0000E1 56 65 72 73 69 6F 6E  4594 	.ascii "Version 1.4 on 20231026"
             20 31 2E 34 20 6F 6E
             20 32 30 32 33 31 30
             32 36
      0000F8 0D                    4595 	.db 0x0d
      0000F9 0A                    4596 	.db 0x0a
      0000FA 00                    4597 	.db 0x00
                                   4598 	.area CSEG    (CODE)
                                   4599 	.area CONST   (CODE)
      0000FB                       4600 ___str_16:
      0000FB 31 3A 20 64 6F 77 6E  4601 	.ascii "1: downlink packet 1"
             6C 69 6E 6B 20 70 61
             63 6B 65 74 20 31
      00010F 0D                    4602 	.db 0x0d
      000110 0A                    4603 	.db 0x0a
      000111 00                    4604 	.db 0x00
                                   4605 	.area CSEG    (CODE)
                                   4606 	.area CONST   (CODE)
      000112                       4607 ___str_17:
      000112 32 3A 20 64 6F 77 6E  4608 	.ascii "2: downlink packet 2"
             6C 69 6E 6B 20 70 61
             63 6B 65 74 20 32
      000126 0D                    4609 	.db 0x0d
      000127 0A                    4610 	.db 0x0a
      000128 00                    4611 	.db 0x00
                                   4612 	.area CSEG    (CODE)
                                   4613 	.area CONST   (CODE)
      000129                       4614 ___str_18:
      000129 33 3A 20 75 70 6C 69  4615 	.ascii "3: uplink idle preamble on/off"
             6E 6B 20 69 64 6C 65
             20 70 72 65 61 6D 62
             6C 65 20 6F 6E 2F 6F
             66 66
      000147 0D                    4616 	.db 0x0d
      000148 0A                    4617 	.db 0x0a
      000149 00                    4618 	.db 0x00
                                   4619 	.area CSEG    (CODE)
                                   4620 	.area CONST   (CODE)
      00014A                       4621 ___str_19:
      00014A 70 2F 50 3A 20 4C 69  4622 	.ascii "p/P: LineFi Power off/on"
             6E 65 46 69 20 50 6F
             77 65 72 20 6F 66 66
             2F 6F 6E
      000162 0D                    4623 	.db 0x0d
      000163 0A                    4624 	.db 0x0a
      000164 00                    4625 	.db 0x00
                                   4626 	.area CSEG    (CODE)
                                   4627 	.area CONST   (CODE)
      000165                       4628 ___str_20:
      000165 74 2F 54 3A 20 4C 69  4629 	.ascii "t/T: LineFi Uart Tx Low/High"
             6E 65 46 69 20 55 61
             72 74 20 54 78 20 4C
             6F 77 2F 48 69 67 68
      000181 0D                    4630 	.db 0x0d
      000182 0A                    4631 	.db 0x0a
      000183 00                    4632 	.db 0x00
                                   4633 	.area CSEG    (CODE)
                                   4634 	.area CONST   (CODE)
      000184                       4635 ___str_21:
      000184 73 2F 53 3A 20 4C 69  4636 	.ascii "s/S: LineFie CSC Rx FSM off/on"
             6E 65 46 69 65 20 43
             53 43 20 52 78 20 46
             53 4D 20 6F 66 66 2F
             6F 6E
      0001A2 0D                    4637 	.db 0x0d
      0001A3 0A                    4638 	.db 0x0a
      0001A4 00                    4639 	.db 0x00
                                   4640 	.area CSEG    (CODE)
                                   4641 	.area CONST   (CODE)
      0001A5                       4642 ___str_22:
      0001A5 74 65 73 74 20 70 72  4643 	.ascii "test procedure: p -> P -> T -> S -> 1 or 2"
             6F 63 65 64 75 72 65
             3A 20 70 20 2D 3E 20
             50 20 2D 3E 20 54 20
             2D 3E 20 53 20 2D 3E
             20 31 20 6F 72 20 32
      0001CF 0D                    4644 	.db 0x0d
      0001D0 0A                    4645 	.db 0x0a
      0001D1 00                    4646 	.db 0x00
                                   4647 	.area CSEG    (CODE)
                                   4648 	.area CONST   (CODE)
      0001D2                       4649 ___str_23:
      0001D2 74 3A 20 74 69 6D 65  4650 	.ascii "t: timer"
             72
      0001DA 0D                    4651 	.db 0x0d
      0001DB 0A                    4652 	.db 0x0a
      0001DC 00                    4653 	.db 0x00
                                   4654 	.area CSEG    (CODE)
                                   4655 	.area CONST   (CODE)
      0001DD                       4656 ___str_24:
      0001DD 30 3A 20 4C 69 6E 65  4657 	.ascii "0: LineFi EN0,1,2 off"
             46 69 20 45 4E 30 2C
             31 2C 32 20 6F 66 66
      0001F2 0D                    4658 	.db 0x0d
      0001F3 0A                    4659 	.db 0x0a
      0001F4 00                    4660 	.db 0x00
                                   4661 	.area CSEG    (CODE)
                                   4662 	.area CONST   (CODE)
      0001F5                       4663 ___str_25:
      0001F5 31 3A 20 4C 69 6E 65  4664 	.ascii "1: LineFi EN0 = 1"
             46 69 20 45 4E 30 20
             3D 20 31
      000206 0D                    4665 	.db 0x0d
      000207 0A                    4666 	.db 0x0a
      000208 00                    4667 	.db 0x00
                                   4668 	.area CSEG    (CODE)
                                   4669 	.area CONST   (CODE)
      000209                       4670 ___str_26:
      000209 32 3A                 4671 	.ascii "2:"
      00020B 0D                    4672 	.db 0x0d
      00020C 0A                    4673 	.db 0x0a
      00020D 00                    4674 	.db 0x00
                                   4675 	.area CSEG    (CODE)
                                   4676 	.area CONST   (CODE)
      00020E                       4677 ___str_27:
      00020E 33 3A                 4678 	.ascii "3:"
      000210 0D                    4679 	.db 0x0d
      000211 0A                    4680 	.db 0x0a
      000212 00                    4681 	.db 0x00
                                   4682 	.area CSEG    (CODE)
                                   4683 	.area CONST   (CODE)
      000213                       4684 ___str_28:
      000213 34 3A                 4685 	.ascii "4:"
      000215 0D                    4686 	.db 0x0d
      000216 0A                    4687 	.db 0x0a
      000217 00                    4688 	.db 0x00
                                   4689 	.area CSEG    (CODE)
                                   4690 	.area CONST   (CODE)
      000218                       4691 ___str_29:
      000218 35 3A                 4692 	.ascii "5:"
      00021A 0D                    4693 	.db 0x0d
      00021B 0A                    4694 	.db 0x0a
      00021C 00                    4695 	.db 0x00
                                   4696 	.area CSEG    (CODE)
                                   4697 	.area CONST   (CODE)
      00021D                       4698 ___str_30:
      00021D 36 3A                 4699 	.ascii "6:"
      00021F 0D                    4700 	.db 0x0d
      000220 0A                    4701 	.db 0x0a
      000221 00                    4702 	.db 0x00
                                   4703 	.area CSEG    (CODE)
                                   4704 	.area CONST   (CODE)
      000222                       4705 ___str_31:
      000222 37 3A                 4706 	.ascii "7:"
      000224 0D                    4707 	.db 0x0d
      000225 0A                    4708 	.db 0x0a
      000226 00                    4709 	.db 0x00
                                   4710 	.area CSEG    (CODE)
                                   4711 	.area CONST   (CODE)
      000227                       4712 ___str_32:
      000227 68 3A 20 41 64 64 72  4713 	.ascii "h: Addr--"
             2D 2D
      000230 0D                    4714 	.db 0x0d
      000231 0A                    4715 	.db 0x0a
      000232 00                    4716 	.db 0x00
                                   4717 	.area CSEG    (CODE)
                                   4718 	.area CONST   (CODE)
      000233                       4719 ___str_33:
      000233 6A 3A 20 43 6D 64 2D  4720 	.ascii "j: Cmd--"
             2D
      00023B 0D                    4721 	.db 0x0d
      00023C 0A                    4722 	.db 0x0a
      00023D 00                    4723 	.db 0x00
                                   4724 	.area CSEG    (CODE)
                                   4725 	.area CONST   (CODE)
      00023E                       4726 ___str_34:
      00023E 6B 3A 20 43 6D 64 2B  4727 	.ascii "k: Cmd++"
             2B
      000246 0D                    4728 	.db 0x0d
      000247 0A                    4729 	.db 0x0a
      000248 00                    4730 	.db 0x00
                                   4731 	.area CSEG    (CODE)
                                   4732 	.area CONST   (CODE)
      000249                       4733 ___str_35:
      000249 6C 3A 20 41 64 64 72  4734 	.ascii "l: Addr++"
             2B 2B
      000252 0D                    4735 	.db 0x0d
      000253 0A                    4736 	.db 0x0a
      000254 00                    4737 	.db 0x00
                                   4738 	.area CSEG    (CODE)
                                   4739 	.area CONST   (CODE)
      000255                       4740 ___str_36:
      000255 73 3A 20 73 65 6E 64  4741 	.ascii "s: sending"
             69 6E 67
      00025F 0D                    4742 	.db 0x0d
      000260 0A                    4743 	.db 0x0a
      000261 00                    4744 	.db 0x00
                                   4745 	.area CSEG    (CODE)
                                   4746 	.area CONST   (CODE)
      000262                       4747 ___str_37:
      000262 25 75                 4748 	.ascii "%u"
      000264 0A                    4749 	.db 0x0a
      000265 0D                    4750 	.db 0x0d
      000266 00                    4751 	.db 0x00
                                   4752 	.area CSEG    (CODE)
                                   4753 	.area CONST   (CODE)
      000267                       4754 ___str_38:
      000267 4C 49 4E 45 46 49 5F  4755 	.ascii "LINEFI_EN0=0"
             45 4E 30 3D 30
      000273 0A                    4756 	.db 0x0a
      000274 0D                    4757 	.db 0x0d
      000275 00                    4758 	.db 0x00
                                   4759 	.area CSEG    (CODE)
                                   4760 	.area CONST   (CODE)
      000276                       4761 ___str_39:
      000276 4C 49 4E 45 46 49 5F  4762 	.ascii "LINEFI_EN0=1"
             45 4E 30 3D 31
      000282 0A                    4763 	.db 0x0a
      000283 0D                    4764 	.db 0x0d
      000284 00                    4765 	.db 0x00
                                   4766 	.area CSEG    (CODE)
                                   4767 	.area CONST   (CODE)
      000285                       4768 ___str_40:
      000285 4C 49 4E 45 46 49 5F  4769 	.ascii "LINEFI_TX=0"
             54 58 3D 30
      000290 0A                    4770 	.db 0x0a
      000291 0D                    4771 	.db 0x0d
      000292 00                    4772 	.db 0x00
                                   4773 	.area CSEG    (CODE)
                                   4774 	.area CONST   (CODE)
      000293                       4775 ___str_41:
      000293 4C 49 4E 45 46 49 5F  4776 	.ascii "LINEFI_TX=1"
             54 58 3D 31
      00029E 0A                    4777 	.db 0x0a
      00029F 0D                    4778 	.db 0x0d
      0002A0 00                    4779 	.db 0x00
                                   4780 	.area CSEG    (CODE)
                                   4781 	.area CONST   (CODE)
      0002A1                       4782 ___str_42:
      0002A1 4C 49 4E 45 46 49 5F  4783 	.ascii "LINEFI_TX=%d"
             54 58 3D 25 64
      0002AD 0A                    4784 	.db 0x0a
      0002AE 0D                    4785 	.db 0x0d
      0002AF 00                    4786 	.db 0x00
                                   4787 	.area CSEG    (CODE)
                                   4788 	.area CONST   (CODE)
      0002B0                       4789 ___str_43:
      0002B0 4C 49 4E 45 46 49 5F  4790 	.ascii "LINEFI_EN0="
             45 4E 30 3D
      0002BB 00                    4791 	.db 0x00
                                   4792 	.area CSEG    (CODE)
                                   4793 	.area CONST   (CODE)
      0002BC                       4794 ___str_44:
      0002BC 25 64                 4795 	.ascii "%d"
      0002BE 0A                    4796 	.db 0x0a
      0002BF 0D                    4797 	.db 0x0d
      0002C0 00                    4798 	.db 0x00
                                   4799 	.area CSEG    (CODE)
                                   4800 	.area CONST   (CODE)
      0002C1                       4801 ___str_45:
      0002C1 4C 49 4E 45 46 49 5F  4802 	.ascii "LINEFI_EN1="
             45 4E 31 3D
      0002CC 00                    4803 	.db 0x00
                                   4804 	.area CSEG    (CODE)
                                   4805 	.area CONST   (CODE)
      0002CD                       4806 ___str_46:
      0002CD 4C 49 4E 45 46 49 5F  4807 	.ascii "LINEFI_EN2="
             45 4E 32 3D
      0002D8 00                    4808 	.db 0x00
                                   4809 	.area CSEG    (CODE)
                                   4810 	.area CONST   (CODE)
      0002D9                       4811 ___str_47:
      0002D9 75 61 72 74 20 73 70  4812 	.ascii "uart speed: %lu:"
             65 65 64 3A 20 25 6C
             75 3A
      0002E9 0A                    4813 	.db 0x0a
      0002EA 0D                    4814 	.db 0x0d
      0002EB 00                    4815 	.db 0x00
                                   4816 	.area CSEG    (CODE)
                                   4817 	.area CONST   (CODE)
      0002EC                       4818 ___str_48:
      0002EC 61 64 64 72 65 73 73  4819 	.ascii "address: %d"
             3A 20 25 64
      0002F7 0A                    4820 	.db 0x0a
      0002F8 0D                    4821 	.db 0x0d
      0002F9 00                    4822 	.db 0x00
                                   4823 	.area CSEG    (CODE)
                                   4824 	.area CONST   (CODE)
      0002FA                       4825 ___str_49:
      0002FA 63 6F 6D 6D 61 6E 64  4826 	.ascii "command: %d"
             3A 20 25 64
      000305 0A                    4827 	.db 0x0a
      000306 0D                    4828 	.db 0x0d
      000307 00                    4829 	.db 0x00
                                   4830 	.area CSEG    (CODE)
                                   4831 	.area CONST   (CODE)
      000308                       4832 ___str_50:
      000308 4C 69 6E 65 46 69 20  4833 	.ascii "LineFi Sending: 0x%x:"
             53 65 6E 64 69 6E 67
             3A 20 30 78 25 78 3A
      00031D 0A                    4834 	.db 0x0a
      00031E 0D                    4835 	.db 0x0d
      00031F 00                    4836 	.db 0x00
                                   4837 	.area CSEG    (CODE)
                                   4838 	.area CONST   (CODE)
      000320                       4839 ___str_51:
      000320 61 64 64 72 65 73 73  4840 	.ascii "address: 0x%d:"
             3A 20 30 78 25 64 3A
      00032E 0A                    4841 	.db 0x0a
      00032F 0D                    4842 	.db 0x0d
      000330 00                    4843 	.db 0x00
                                   4844 	.area CSEG    (CODE)
                                   4845 	.area CONST   (CODE)
      000331                       4846 ___str_52:
      000331 4C 69 6E 65 46 69 20  4847 	.ascii "LineFi Sending: %d(0x%x)"
             53 65 6E 64 69 6E 67
             3A 20 25 64 28 30 78
             25 78 29
      000349 0A                    4848 	.db 0x0a
      00034A 0D                    4849 	.db 0x0d
      00034B 00                    4850 	.db 0x00
                                   4851 	.area CSEG    (CODE)
                                   4852 	.area CONST   (CODE)
      00034C                       4853 ___str_53:
      00034C 73 65 6E 64 20 64 61  4854 	.ascii "send data %d(0x%x)"
             74 61 20 25 64 28 30
             78 25 78 29
      00035E 0A                    4855 	.db 0x0a
      00035F 0D                    4856 	.db 0x0d
      000360 00                    4857 	.db 0x00
                                   4858 	.area CSEG    (CODE)
                                   4859 	.area CONST   (CODE)
      000361                       4860 ___str_54:
      000361 54 68 69 73 20 69 73  4861 	.ascii "This is UART0"
             20 55 41 52 54 30
      00036E 0A                    4862 	.db 0x0a
      00036F 0D                    4863 	.db 0x0d
      000370 00                    4864 	.db 0x00
                                   4865 	.area CSEG    (CODE)
                                   4866 	.area CONST   (CODE)
      000371                       4867 ___str_55:
      000371 4C 69 6E 65 46 69 20  4868 	.ascii "LineFi Master"
             4D 61 73 74 65 72
      00037E 0A                    4869 	.db 0x0a
      00037F 0D                    4870 	.db 0x0d
      000380 00                    4871 	.db 0x00
                                   4872 	.area CSEG    (CODE)
                                   4873 	.area CONST   (CODE)
      000381                       4874 ___str_56:
      000381 54 68 69 73 20 69 73  4875 	.ascii "This is UART1"
             20 55 41 52 54 31
      00038E 0A                    4876 	.db 0x0a
      00038F 0D                    4877 	.db 0x0d
      000390 00                    4878 	.db 0x00
                                   4879 	.area CSEG    (CODE)
                                   4880 	.area CONST   (CODE)
      000391                       4881 ___str_57:
      000391 25 73                 4882 	.ascii "%s"
      000393 0D                    4883 	.db 0x0d
      000394 0A                    4884 	.db 0x0a
      000395 00                    4885 	.db 0x00
                                   4886 	.area CSEG    (CODE)
                                   4887 	.area CONST   (CODE)
      000396                       4888 ___str_58:
      000396 64 72 63 68 6F 69 20  4889 	.ascii "drchoi %s"
             25 73
      00039F 0D                    4890 	.db 0x0d
      0003A0 0A                    4891 	.db 0x0a
      0003A1 00                    4892 	.db 0x00
                                   4893 	.area CSEG    (CODE)
                                   4894 	.area CONST   (CODE)
      0003A2                       4895 ___str_59:
      0003A2 44 61 74 61 49 64 78  4896 	.ascii "DataIdx:%d"
             3A 25 64
      0003AC 0D                    4897 	.db 0x0d
      0003AD 0A                    4898 	.db 0x0a
      0003AE 00                    4899 	.db 0x00
                                   4900 	.area CSEG    (CODE)
                                   4901 	.area CONST   (CODE)
      0003AF                       4902 ___str_60:
      0003AF 30 78 25 78 20        4903 	.ascii "0x%x "
      0003B4 00                    4904 	.db 0x00
                                   4905 	.area CSEG    (CODE)
                                   4906 	.area CONST   (CODE)
      0003B5                       4907 ___str_61:
      0003B5 55 41 52 54 30 5F 49  4908 	.ascii "UART0_INPUT_MODE0:one key control"
             4E 50 55 54 5F 4D 4F
             44 45 30 3A 6F 6E 65
             20 6B 65 79 20 63 6F
             6E 74 72 6F 6C
      0003D6 00                    4909 	.db 0x00
                                   4910 	.area CSEG    (CODE)
                                   4911 	.area CONST   (CODE)
      0003D7                       4912 ___str_62:
      0003D7 55 41 52 54 30 5F 49  4913 	.ascii "UART0_INPUT_MODE1:string input"
             4E 50 55 54 5F 4D 4F
             44 45 31 3A 73 74 72
             69 6E 67 20 69 6E 70
             75 74
      0003F5 00                    4914 	.db 0x00
                                   4915 	.area CSEG    (CODE)
                                   4916 	.area CONST   (CODE)
      0003F6                       4917 ___str_63:
      0003F6 55 41 52 54 30 5F 49  4918 	.ascii "UART0_INPUT_MODE2:mimic 5keys on board"
             4E 50 55 54 5F 4D 4F
             44 45 32 3A 6D 69 6D
             69 63 20 35 6B 65 79
             73 20 6F 6E 20 62 6F
             61 72 64
      00041C 00                    4919 	.db 0x00
                                   4920 	.area CSEG    (CODE)
                                   4921 	.area CONST   (CODE)
      00041D                       4922 ___str_64:
      00041D 55 41 52 54 30 5F 49  4923 	.ascii "UART0_INPUT_MODE3:data setting"
             4E 50 55 54 5F 4D 4F
             44 45 33 3A 64 61 74
             61 20 73 65 74 74 69
             6E 67
      00043B 00                    4924 	.db 0x00
                                   4925 	.area CSEG    (CODE)
                                   4926 	.area CABS    (ABS,CODE)
