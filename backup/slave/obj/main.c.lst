                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _chk_my_addr_PARM_2
                                     12 	.globl _state_switches_PARM_2
                                     13 	.globl _gpcEEPROM
                                     14 	.globl _main
                                     15 	.globl _process_all_packet
                                     16 	.globl _process_my_packet
                                     17 	.globl _chk_my_addr
                                     18 	.globl _ctrl_rgbled_motor
                                     19 	.globl _state_switches
                                     20 	.globl _gpio_setup
                                     21 	.globl _disp_help
                                     22 	.globl _MODIFY_HIRC_166
                                     23 	.globl _conv_manchester2highnibble
                                     24 	.globl _conv_manchester2nibble
                                     25 	.globl _chk_manchester
                                     26 	.globl _pin_interrupt_isr
                                     27 	.globl _Timer0_ISR
                                     28 	.globl _state_machine
                                     29 	.globl _print_char
                                     30 	.globl _print_esc
                                     31 	.globl _preamble
                                     32 	.globl _putchar_manchester
                                     33 	.globl _conv_nibble2manchester
                                     34 	.globl _Write_APROM_BYTE
                                     35 	.globl _Erase_APROM_Page
                                     36 	.globl _cp_buf2linefipacket
                                     37 	.globl _get_octet_from_linefi
                                     38 	.globl _uart_setup
                                     39 	.globl _Receive_Data_From_UART0_nb
                                     40 	.globl _InitialUART1_Timer3
                                     41 	.globl _printf_fast_f
                                     42 	.globl _MOSI
                                     43 	.globl _P00
                                     44 	.globl _MISO
                                     45 	.globl _P01
                                     46 	.globl _RXD_1
                                     47 	.globl _P02
                                     48 	.globl _P03
                                     49 	.globl _STADC
                                     50 	.globl _P04
                                     51 	.globl _P05
                                     52 	.globl _TXD
                                     53 	.globl _P06
                                     54 	.globl _RXD
                                     55 	.globl _P07
                                     56 	.globl _IT0
                                     57 	.globl _IE0
                                     58 	.globl _IT1
                                     59 	.globl _IE1
                                     60 	.globl _TR0
                                     61 	.globl _TF0
                                     62 	.globl _TR1
                                     63 	.globl _TF1
                                     64 	.globl _P10
                                     65 	.globl _P11
                                     66 	.globl _P12
                                     67 	.globl _SCL
                                     68 	.globl _P13
                                     69 	.globl _SDA
                                     70 	.globl _P14
                                     71 	.globl _P15
                                     72 	.globl _TXD_1
                                     73 	.globl _P16
                                     74 	.globl _P17
                                     75 	.globl _RI
                                     76 	.globl _TI
                                     77 	.globl _RB8
                                     78 	.globl _TB8
                                     79 	.globl _REN
                                     80 	.globl _SM2
                                     81 	.globl _SM1
                                     82 	.globl _FE
                                     83 	.globl _SM0
                                     84 	.globl _P20
                                     85 	.globl _EX0
                                     86 	.globl _ET0
                                     87 	.globl _EX1
                                     88 	.globl _ET1
                                     89 	.globl _ES
                                     90 	.globl _EBOD
                                     91 	.globl _EADC
                                     92 	.globl _EA
                                     93 	.globl _P30
                                     94 	.globl _PX0
                                     95 	.globl _PT0
                                     96 	.globl _PX1
                                     97 	.globl _PT1
                                     98 	.globl _PS
                                     99 	.globl _PBOD
                                    100 	.globl _PADC
                                    101 	.globl _I2CPX
                                    102 	.globl _AA
                                    103 	.globl _SI
                                    104 	.globl _STO
                                    105 	.globl _STA
                                    106 	.globl _I2CEN
                                    107 	.globl _CM_RL2
                                    108 	.globl _TR2
                                    109 	.globl _TF2
                                    110 	.globl _P
                                    111 	.globl _OV
                                    112 	.globl _RS0
                                    113 	.globl _RS1
                                    114 	.globl _F0
                                    115 	.globl _AC
                                    116 	.globl _CY
                                    117 	.globl _CLRPWM
                                    118 	.globl _PWMF
                                    119 	.globl _LOAD
                                    120 	.globl _PWMRUN
                                    121 	.globl _ADCHS0
                                    122 	.globl _ADCHS1
                                    123 	.globl _ADCHS2
                                    124 	.globl _ADCHS3
                                    125 	.globl _ETGSEL0
                                    126 	.globl _ETGSEL1
                                    127 	.globl _ADCS
                                    128 	.globl _ADCF
                                    129 	.globl _RI_1
                                    130 	.globl _TI_1
                                    131 	.globl _RB8_1
                                    132 	.globl _TB8_1
                                    133 	.globl _REN_1
                                    134 	.globl _SM2_1
                                    135 	.globl _SM1_1
                                    136 	.globl _FE_1
                                    137 	.globl _SM0_1
                                    138 	.globl _EIPH1
                                    139 	.globl _EIP1
                                    140 	.globl _PMD
                                    141 	.globl _PMEN
                                    142 	.globl _PDTCNT
                                    143 	.globl _PDTEN
                                    144 	.globl _SCON_1
                                    145 	.globl _EIPH
                                    146 	.globl _AINDIDS
                                    147 	.globl _SPDR
                                    148 	.globl _SPSR
                                    149 	.globl _SPCR2
                                    150 	.globl _SPCR
                                    151 	.globl _CAPCON4
                                    152 	.globl _CAPCON3
                                    153 	.globl _B
                                    154 	.globl _EIP
                                    155 	.globl _C2H
                                    156 	.globl _C2L
                                    157 	.globl _PIF
                                    158 	.globl _PIPEN
                                    159 	.globl _PINEN
                                    160 	.globl _PICON
                                    161 	.globl _ADCCON0
                                    162 	.globl _C1H
                                    163 	.globl _C1L
                                    164 	.globl _C0H
                                    165 	.globl _C0L
                                    166 	.globl _ADCDLY
                                    167 	.globl _ADCCON2
                                    168 	.globl _ADCCON1
                                    169 	.globl _ACC
                                    170 	.globl _PWMCON1
                                    171 	.globl _PIOCON0
                                    172 	.globl _PWM3L
                                    173 	.globl _PWM2L
                                    174 	.globl _PWM1L
                                    175 	.globl _PWM0L
                                    176 	.globl _PWMPL
                                    177 	.globl _PWMCON0
                                    178 	.globl _FBD
                                    179 	.globl _PNP
                                    180 	.globl _PWM3H
                                    181 	.globl _PWM2H
                                    182 	.globl _PWM1H
                                    183 	.globl _PWM0H
                                    184 	.globl _PWMPH
                                    185 	.globl _PSW
                                    186 	.globl _ADCMPH
                                    187 	.globl _ADCMPL
                                    188 	.globl _PWM5L
                                    189 	.globl _TH2
                                    190 	.globl _PWM4L
                                    191 	.globl _TL2
                                    192 	.globl _RCMP2H
                                    193 	.globl _RCMP2L
                                    194 	.globl _T2MOD
                                    195 	.globl _T2CON
                                    196 	.globl _TA
                                    197 	.globl _PIOCON1
                                    198 	.globl _RH3
                                    199 	.globl _PWM5H
                                    200 	.globl _RL3
                                    201 	.globl _PWM4H
                                    202 	.globl _T3CON
                                    203 	.globl _ADCRH
                                    204 	.globl _ADCRL
                                    205 	.globl _I2ADDR
                                    206 	.globl _I2CON
                                    207 	.globl _I2TOC
                                    208 	.globl _I2CLK
                                    209 	.globl _I2STAT
                                    210 	.globl _I2DAT
                                    211 	.globl _SADDR_1
                                    212 	.globl _SADEN_1
                                    213 	.globl _SADEN
                                    214 	.globl _IP
                                    215 	.globl _PWMINTC
                                    216 	.globl _IPH
                                    217 	.globl _P2S
                                    218 	.globl _P1SR
                                    219 	.globl _P1M2
                                    220 	.globl _P1S
                                    221 	.globl _P1M1
                                    222 	.globl _P0SR
                                    223 	.globl _P0M2
                                    224 	.globl _P0S
                                    225 	.globl _P0M1
                                    226 	.globl _P3
                                    227 	.globl _IAPCN
                                    228 	.globl _IAPFD
                                    229 	.globl _P3SR
                                    230 	.globl _P3M2
                                    231 	.globl _P3S
                                    232 	.globl _P3M1
                                    233 	.globl _BODCON1
                                    234 	.globl _WDCON
                                    235 	.globl _SADDR
                                    236 	.globl _IE
                                    237 	.globl _IAPAH
                                    238 	.globl _IAPAL
                                    239 	.globl _IAPUEN
                                    240 	.globl _IAPTRG
                                    241 	.globl _BODCON0
                                    242 	.globl _AUXR1
                                    243 	.globl _P2
                                    244 	.globl _CHPCON
                                    245 	.globl _EIE1
                                    246 	.globl _EIE
                                    247 	.globl _SBUF_1
                                    248 	.globl _SBUF
                                    249 	.globl _SCON
                                    250 	.globl _CKEN
                                    251 	.globl _CKSWT
                                    252 	.globl _CKDIV
                                    253 	.globl _CAPCON2
                                    254 	.globl _CAPCON1
                                    255 	.globl _CAPCON0
                                    256 	.globl _SFRS
                                    257 	.globl _P1
                                    258 	.globl _WKCON
                                    259 	.globl _CKCON
                                    260 	.globl _TH1
                                    261 	.globl _TH0
                                    262 	.globl _TL1
                                    263 	.globl _TL0
                                    264 	.globl _TMOD
                                    265 	.globl _TCON
                                    266 	.globl _PCON
                                    267 	.globl _RWK
                                    268 	.globl _RCTRIM1
                                    269 	.globl _RCTRIM0
                                    270 	.globl _DPH
                                    271 	.globl _DPL
                                    272 	.globl _SP
                                    273 	.globl _P0
                                    274 	.globl _gpu32UartSpeed
                                    275 	.globl _gu8MotorState
                                    276 	.globl _gpu8Data
                                    277 	.globl _state_machine_PARM_4
                                    278 	.globl _state_machine_PARM_3
                                    279 	.globl _state_machine_PARM_2
                                    280 	.globl _gu16TimeCnt
                                    281 	.globl _gu8UART
                                    282 	.globl _gu8MyAddr
                                    283 	.globl _putchar
                                    284 ;--------------------------------------------------------
                                    285 ; special function registers
                                    286 ;--------------------------------------------------------
                                    287 	.area RSEG    (ABS,DATA)
      000000                        288 	.org 0x0000
                           000080   289 _P0	=	0x0080
                           000081   290 _SP	=	0x0081
                           000082   291 _DPL	=	0x0082
                           000083   292 _DPH	=	0x0083
                           000084   293 _RCTRIM0	=	0x0084
                           000085   294 _RCTRIM1	=	0x0085
                           000086   295 _RWK	=	0x0086
                           000087   296 _PCON	=	0x0087
                           000088   297 _TCON	=	0x0088
                           000089   298 _TMOD	=	0x0089
                           00008A   299 _TL0	=	0x008a
                           00008B   300 _TL1	=	0x008b
                           00008C   301 _TH0	=	0x008c
                           00008D   302 _TH1	=	0x008d
                           00008E   303 _CKCON	=	0x008e
                           00008F   304 _WKCON	=	0x008f
                           000090   305 _P1	=	0x0090
                           000091   306 _SFRS	=	0x0091
                           000092   307 _CAPCON0	=	0x0092
                           000093   308 _CAPCON1	=	0x0093
                           000094   309 _CAPCON2	=	0x0094
                           000095   310 _CKDIV	=	0x0095
                           000096   311 _CKSWT	=	0x0096
                           000097   312 _CKEN	=	0x0097
                           000098   313 _SCON	=	0x0098
                           000099   314 _SBUF	=	0x0099
                           00009A   315 _SBUF_1	=	0x009a
                           00009B   316 _EIE	=	0x009b
                           00009C   317 _EIE1	=	0x009c
                           00009F   318 _CHPCON	=	0x009f
                           0000A0   319 _P2	=	0x00a0
                           0000A2   320 _AUXR1	=	0x00a2
                           0000A3   321 _BODCON0	=	0x00a3
                           0000A4   322 _IAPTRG	=	0x00a4
                           0000A5   323 _IAPUEN	=	0x00a5
                           0000A6   324 _IAPAL	=	0x00a6
                           0000A7   325 _IAPAH	=	0x00a7
                           0000A8   326 _IE	=	0x00a8
                           0000A9   327 _SADDR	=	0x00a9
                           0000AA   328 _WDCON	=	0x00aa
                           0000AB   329 _BODCON1	=	0x00ab
                           0000AC   330 _P3M1	=	0x00ac
                           0000AC   331 _P3S	=	0x00ac
                           0000AD   332 _P3M2	=	0x00ad
                           0000AD   333 _P3SR	=	0x00ad
                           0000AE   334 _IAPFD	=	0x00ae
                           0000AF   335 _IAPCN	=	0x00af
                           0000B0   336 _P3	=	0x00b0
                           0000B1   337 _P0M1	=	0x00b1
                           0000B1   338 _P0S	=	0x00b1
                           0000B2   339 _P0M2	=	0x00b2
                           0000B2   340 _P0SR	=	0x00b2
                           0000B3   341 _P1M1	=	0x00b3
                           0000B3   342 _P1S	=	0x00b3
                           0000B4   343 _P1M2	=	0x00b4
                           0000B4   344 _P1SR	=	0x00b4
                           0000B5   345 _P2S	=	0x00b5
                           0000B7   346 _IPH	=	0x00b7
                           0000B7   347 _PWMINTC	=	0x00b7
                           0000B8   348 _IP	=	0x00b8
                           0000B9   349 _SADEN	=	0x00b9
                           0000BA   350 _SADEN_1	=	0x00ba
                           0000BB   351 _SADDR_1	=	0x00bb
                           0000BC   352 _I2DAT	=	0x00bc
                           0000BD   353 _I2STAT	=	0x00bd
                           0000BE   354 _I2CLK	=	0x00be
                           0000BF   355 _I2TOC	=	0x00bf
                           0000C0   356 _I2CON	=	0x00c0
                           0000C1   357 _I2ADDR	=	0x00c1
                           0000C2   358 _ADCRL	=	0x00c2
                           0000C3   359 _ADCRH	=	0x00c3
                           0000C4   360 _T3CON	=	0x00c4
                           0000C4   361 _PWM4H	=	0x00c4
                           0000C5   362 _RL3	=	0x00c5
                           0000C5   363 _PWM5H	=	0x00c5
                           0000C6   364 _RH3	=	0x00c6
                           0000C6   365 _PIOCON1	=	0x00c6
                           0000C7   366 _TA	=	0x00c7
                           0000C8   367 _T2CON	=	0x00c8
                           0000C9   368 _T2MOD	=	0x00c9
                           0000CA   369 _RCMP2L	=	0x00ca
                           0000CB   370 _RCMP2H	=	0x00cb
                           0000CC   371 _TL2	=	0x00cc
                           0000CC   372 _PWM4L	=	0x00cc
                           0000CD   373 _TH2	=	0x00cd
                           0000CD   374 _PWM5L	=	0x00cd
                           0000CE   375 _ADCMPL	=	0x00ce
                           0000CF   376 _ADCMPH	=	0x00cf
                           0000D0   377 _PSW	=	0x00d0
                           0000D1   378 _PWMPH	=	0x00d1
                           0000D2   379 _PWM0H	=	0x00d2
                           0000D3   380 _PWM1H	=	0x00d3
                           0000D4   381 _PWM2H	=	0x00d4
                           0000D5   382 _PWM3H	=	0x00d5
                           0000D6   383 _PNP	=	0x00d6
                           0000D7   384 _FBD	=	0x00d7
                           0000D8   385 _PWMCON0	=	0x00d8
                           0000D9   386 _PWMPL	=	0x00d9
                           0000DA   387 _PWM0L	=	0x00da
                           0000DB   388 _PWM1L	=	0x00db
                           0000DC   389 _PWM2L	=	0x00dc
                           0000DD   390 _PWM3L	=	0x00dd
                           0000DE   391 _PIOCON0	=	0x00de
                           0000DF   392 _PWMCON1	=	0x00df
                           0000E0   393 _ACC	=	0x00e0
                           0000E1   394 _ADCCON1	=	0x00e1
                           0000E2   395 _ADCCON2	=	0x00e2
                           0000E3   396 _ADCDLY	=	0x00e3
                           0000E4   397 _C0L	=	0x00e4
                           0000E5   398 _C0H	=	0x00e5
                           0000E6   399 _C1L	=	0x00e6
                           0000E7   400 _C1H	=	0x00e7
                           0000E8   401 _ADCCON0	=	0x00e8
                           0000E9   402 _PICON	=	0x00e9
                           0000EA   403 _PINEN	=	0x00ea
                           0000EB   404 _PIPEN	=	0x00eb
                           0000EC   405 _PIF	=	0x00ec
                           0000ED   406 _C2L	=	0x00ed
                           0000EE   407 _C2H	=	0x00ee
                           0000EF   408 _EIP	=	0x00ef
                           0000F0   409 _B	=	0x00f0
                           0000F1   410 _CAPCON3	=	0x00f1
                           0000F2   411 _CAPCON4	=	0x00f2
                           0000F3   412 _SPCR	=	0x00f3
                           0000F3   413 _SPCR2	=	0x00f3
                           0000F4   414 _SPSR	=	0x00f4
                           0000F5   415 _SPDR	=	0x00f5
                           0000F6   416 _AINDIDS	=	0x00f6
                           0000F7   417 _EIPH	=	0x00f7
                           0000F8   418 _SCON_1	=	0x00f8
                           0000F9   419 _PDTEN	=	0x00f9
                           0000FA   420 _PDTCNT	=	0x00fa
                           0000FB   421 _PMEN	=	0x00fb
                           0000FC   422 _PMD	=	0x00fc
                           0000FE   423 _EIP1	=	0x00fe
                           0000FF   424 _EIPH1	=	0x00ff
                                    425 ;--------------------------------------------------------
                                    426 ; special function bits
                                    427 ;--------------------------------------------------------
                                    428 	.area RSEG    (ABS,DATA)
      000000                        429 	.org 0x0000
                           0000FF   430 _SM0_1	=	0x00ff
                           0000FF   431 _FE_1	=	0x00ff
                           0000FE   432 _SM1_1	=	0x00fe
                           0000FD   433 _SM2_1	=	0x00fd
                           0000FC   434 _REN_1	=	0x00fc
                           0000FB   435 _TB8_1	=	0x00fb
                           0000FA   436 _RB8_1	=	0x00fa
                           0000F9   437 _TI_1	=	0x00f9
                           0000F8   438 _RI_1	=	0x00f8
                           0000EF   439 _ADCF	=	0x00ef
                           0000EE   440 _ADCS	=	0x00ee
                           0000ED   441 _ETGSEL1	=	0x00ed
                           0000EC   442 _ETGSEL0	=	0x00ec
                           0000EB   443 _ADCHS3	=	0x00eb
                           0000EA   444 _ADCHS2	=	0x00ea
                           0000E9   445 _ADCHS1	=	0x00e9
                           0000E8   446 _ADCHS0	=	0x00e8
                           0000DF   447 _PWMRUN	=	0x00df
                           0000DE   448 _LOAD	=	0x00de
                           0000DD   449 _PWMF	=	0x00dd
                           0000DC   450 _CLRPWM	=	0x00dc
                           0000D7   451 _CY	=	0x00d7
                           0000D6   452 _AC	=	0x00d6
                           0000D5   453 _F0	=	0x00d5
                           0000D4   454 _RS1	=	0x00d4
                           0000D3   455 _RS0	=	0x00d3
                           0000D2   456 _OV	=	0x00d2
                           0000D0   457 _P	=	0x00d0
                           0000CF   458 _TF2	=	0x00cf
                           0000CA   459 _TR2	=	0x00ca
                           0000C8   460 _CM_RL2	=	0x00c8
                           0000C6   461 _I2CEN	=	0x00c6
                           0000C5   462 _STA	=	0x00c5
                           0000C4   463 _STO	=	0x00c4
                           0000C3   464 _SI	=	0x00c3
                           0000C2   465 _AA	=	0x00c2
                           0000C0   466 _I2CPX	=	0x00c0
                           0000BE   467 _PADC	=	0x00be
                           0000BD   468 _PBOD	=	0x00bd
                           0000BC   469 _PS	=	0x00bc
                           0000BB   470 _PT1	=	0x00bb
                           0000BA   471 _PX1	=	0x00ba
                           0000B9   472 _PT0	=	0x00b9
                           0000B8   473 _PX0	=	0x00b8
                           0000B0   474 _P30	=	0x00b0
                           0000AF   475 _EA	=	0x00af
                           0000AE   476 _EADC	=	0x00ae
                           0000AD   477 _EBOD	=	0x00ad
                           0000AC   478 _ES	=	0x00ac
                           0000AB   479 _ET1	=	0x00ab
                           0000AA   480 _EX1	=	0x00aa
                           0000A9   481 _ET0	=	0x00a9
                           0000A8   482 _EX0	=	0x00a8
                           0000A0   483 _P20	=	0x00a0
                           00009F   484 _SM0	=	0x009f
                           00009F   485 _FE	=	0x009f
                           00009E   486 _SM1	=	0x009e
                           00009D   487 _SM2	=	0x009d
                           00009C   488 _REN	=	0x009c
                           00009B   489 _TB8	=	0x009b
                           00009A   490 _RB8	=	0x009a
                           000099   491 _TI	=	0x0099
                           000098   492 _RI	=	0x0098
                           000097   493 _P17	=	0x0097
                           000096   494 _P16	=	0x0096
                           000096   495 _TXD_1	=	0x0096
                           000095   496 _P15	=	0x0095
                           000094   497 _P14	=	0x0094
                           000094   498 _SDA	=	0x0094
                           000093   499 _P13	=	0x0093
                           000093   500 _SCL	=	0x0093
                           000092   501 _P12	=	0x0092
                           000091   502 _P11	=	0x0091
                           000090   503 _P10	=	0x0090
                           00008F   504 _TF1	=	0x008f
                           00008E   505 _TR1	=	0x008e
                           00008D   506 _TF0	=	0x008d
                           00008C   507 _TR0	=	0x008c
                           00008B   508 _IE1	=	0x008b
                           00008A   509 _IT1	=	0x008a
                           000089   510 _IE0	=	0x0089
                           000088   511 _IT0	=	0x0088
                           000087   512 _P07	=	0x0087
                           000087   513 _RXD	=	0x0087
                           000086   514 _P06	=	0x0086
                           000086   515 _TXD	=	0x0086
                           000085   516 _P05	=	0x0085
                           000084   517 _P04	=	0x0084
                           000084   518 _STADC	=	0x0084
                           000083   519 _P03	=	0x0083
                           000082   520 _P02	=	0x0082
                           000082   521 _RXD_1	=	0x0082
                           000081   522 _P01	=	0x0081
                           000081   523 _MISO	=	0x0081
                           000080   524 _P00	=	0x0080
                           000080   525 _MOSI	=	0x0080
                                    526 ;--------------------------------------------------------
                                    527 ; overlayable register banks
                                    528 ;--------------------------------------------------------
                                    529 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        530 	.ds 8
                                    531 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        532 	.ds 8
                                    533 ;--------------------------------------------------------
                                    534 ; internal ram data
                                    535 ;--------------------------------------------------------
                                    536 	.area DSEG    (DATA)
      000000                        537 _gu8MyAddr::
      000000                        538 	.ds 1
      000001                        539 _gu8UART::
      000001                        540 	.ds 1
      000002                        541 _gu16TimeCnt::
      000002                        542 	.ds 2
      000004                        543 _state_machine_PARM_2:
      000004                        544 	.ds 1
      000005                        545 _state_machine_PARM_3:
      000005                        546 	.ds 1
      000006                        547 _state_machine_PARM_4:
      000006                        548 	.ds 1
      000007                        549 _state_switches_su8PrevSW_65536_96:
      000007                        550 	.ds 1
      000008                        551 _process_my_packet_sloc0_1_0:
      000008                        552 	.ds 3
      00000B                        553 _main_su8Cnt_262145_134:
      00000B                        554 	.ds 1
      00000C                        555 _main_u8RxUART_65536_124:
      00000C                        556 	.ds 1
      00000D                        557 _main_pu8RxUART_65536_124:
      00000D                        558 	.ds 30
      00002B                        559 _main_stLineFiPkt_65536_124:
      00002B                        560 	.ds 8
      000033                        561 _main_u8RxBufIdx_65536_124:
      000033                        562 	.ds 1
      000034                        563 _main_pu8LineFiRx_65536_124:
      000034                        564 	.ds 10
                                    565 ;--------------------------------------------------------
                                    566 ; overlayable items in internal ram
                                    567 ;--------------------------------------------------------
                                    568 	.area	OSEG    (OVR,DATA)
                                    569 	.area	OSEG    (OVR,DATA)
                                    570 	.area	OSEG    (OVR,DATA)
                                    571 	.area	OSEG    (OVR,DATA)
                                    572 	.area	OSEG    (OVR,DATA)
                                    573 	.area	OSEG    (OVR,DATA)
                                    574 	.area	OSEG    (OVR,DATA)
      000000                        575 _state_switches_PARM_2:
      000000                        576 	.ds 3
                                    577 	.area	OSEG    (OVR,DATA)
                                    578 	.area	OSEG    (OVR,DATA)
      000000                        579 _chk_my_addr_PARM_2:
      000000                        580 	.ds 1
                                    581 ;--------------------------------------------------------
                                    582 ; Stack segment in internal ram
                                    583 ;--------------------------------------------------------
                                    584 	.area	SSEG
      000000                        585 __start__stack:
      000000                        586 	.ds	1
                                    587 
                                    588 ;--------------------------------------------------------
                                    589 ; indirectly addressable internal ram data
                                    590 ;--------------------------------------------------------
                                    591 	.area ISEG    (DATA)
                                    592 ;--------------------------------------------------------
                                    593 ; absolute internal ram data
                                    594 ;--------------------------------------------------------
                                    595 	.area IABS    (ABS,DATA)
                                    596 	.area IABS    (ABS,DATA)
                                    597 ;--------------------------------------------------------
                                    598 ; bit data
                                    599 ;--------------------------------------------------------
                                    600 	.area BSEG    (BIT)
                                    601 ;--------------------------------------------------------
                                    602 ; paged external ram data
                                    603 ;--------------------------------------------------------
                                    604 	.area PSEG    (PAG,XDATA)
                                    605 ;--------------------------------------------------------
                                    606 ; external ram data
                                    607 ;--------------------------------------------------------
                                    608 	.area XSEG    (XDATA)
      000000                        609 _gpu8Data::
      000000                        610 	.ds 20
      000014                        611 _gu8MotorState::
      000014                        612 	.ds 1
      000015                        613 _gpu32UartSpeed::
      000015                        614 	.ds 56
                                    615 ;--------------------------------------------------------
                                    616 ; absolute external ram data
                                    617 ;--------------------------------------------------------
                                    618 	.area XABS    (ABS,XDATA)
                                    619 ;--------------------------------------------------------
                                    620 ; external initialized ram data
                                    621 ;--------------------------------------------------------
                                    622 	.area HOME    (CODE)
                                    623 	.area GSINIT0 (CODE)
                                    624 	.area GSINIT1 (CODE)
                                    625 	.area GSINIT2 (CODE)
                                    626 	.area GSINIT3 (CODE)
                                    627 	.area GSINIT4 (CODE)
                                    628 	.area GSINIT5 (CODE)
                                    629 	.area GSINIT  (CODE)
                                    630 	.area GSFINAL (CODE)
                                    631 	.area CSEG    (CODE)
                                    632 ;--------------------------------------------------------
                                    633 ; interrupt vector
                                    634 ;--------------------------------------------------------
                                    635 	.area HOME    (CODE)
      000000                        636 __interrupt_vect:
      000000 02r00r00         [24]  637 	ljmp	__sdcc_gsinit_startup
      000003 32               [24]  638 	reti
      000004                        639 	.ds	7
      00000B 02r01rE0         [24]  640 	ljmp	_Timer0_ISR
      00000E                        641 	.ds	5
      000013 32               [24]  642 	reti
      000014                        643 	.ds	7
      00001B 32               [24]  644 	reti
      00001C                        645 	.ds	7
      000023 32               [24]  646 	reti
      000024                        647 	.ds	7
      00002B 32               [24]  648 	reti
      00002C                        649 	.ds	7
      000033 32               [24]  650 	reti
      000034                        651 	.ds	7
      00003B 02r01rF7         [24]  652 	ljmp	_pin_interrupt_isr
                                    653 ;--------------------------------------------------------
                                    654 ; global & static initialisations
                                    655 ;--------------------------------------------------------
                                    656 	.area HOME    (CODE)
                                    657 	.area GSINIT  (CODE)
                                    658 	.area GSFINAL (CODE)
                                    659 	.area GSINIT  (CODE)
                                    660 	.globl __sdcc_gsinit_startup
                                    661 	.globl __sdcc_program_startup
                                    662 	.globl __start__stack
                                    663 	.globl __mcs51_genRAMCLEAR
                                    664 ;------------------------------------------------------------
                                    665 ;Allocation info for local variables in function 'state_switches'
                                    666 ;------------------------------------------------------------
                                    667 ;su8PrevSW                 Allocated with name '_state_switches_su8PrevSW_65536_96'
                                    668 ;apu8SwNum                 Allocated with name '_state_switches_PARM_2'
                                    669 ;au8SW                     Allocated to registers r7 
                                    670 ;i                         Allocated to registers r2 
                                    671 ;u8Result                  Allocated to registers r6 
                                    672 ;------------------------------------------------------------
                                    673 ;	src/main.c:473: static UINT8 su8PrevSW = 0;
      000000 75*07 00         [24]  674 	mov	_state_switches_su8PrevSW_65536_96,#0x00
                                    675 ;------------------------------------------------------------
                                    676 ;Allocation info for local variables in function 'main'
                                    677 ;------------------------------------------------------------
                                    678 ;su8Cnt                    Allocated with name '_main_su8Cnt_262145_134'
                                    679 ;u8PrevSwitch              Allocated to registers r4 
                                    680 ;u8UartRx                  Allocated to registers 
                                    681 ;u8RotSense                Allocated to registers 
                                    682 ;u8RxUART                  Allocated with name '_main_u8RxUART_65536_124'
                                    683 ;u16Cnt                    Allocated to registers r3 r4 
                                    684 ;u8OutputState             Allocated to registers 
                                    685 ;u8StateRxCSC              Allocated to registers 
                                    686 ;u8LineFiAddr              Allocated to registers 
                                    687 ;u8LineFiSpeed             Allocated to registers 
                                    688 ;u8Data                    Allocated to registers 
                                    689 ;u8LineFiCmd               Allocated to registers 
                                    690 ;u8PwrOnFirstFlag          Allocated to registers 
                                    691 ;u8StateRxPkt              Allocated to registers r7 
                                    692 ;pu8RxUART                 Allocated with name '_main_pu8RxUART_65536_124'
                                    693 ;stLineFiPkt               Allocated with name '_main_stLineFiPkt_65536_124'
                                    694 ;u8MotorState              Allocated to registers 
                                    695 ;u8RxBufIdx                Allocated with name '_main_u8RxBufIdx_65536_124'
                                    696 ;u8RxLineFiLen             Allocated to registers r5 
                                    697 ;pu8LineFiRx               Allocated with name '_main_pu8LineFiRx_65536_124'
                                    698 ;u8LineFiRxIdx             Allocated to registers 
                                    699 ;u8Count2                  Allocated to registers 
                                    700 ;u8RxPktCnt                Allocated to registers 
                                    701 ;u8PreambleCnt             Allocated to registers 
                                    702 ;i                         Allocated to registers r3 
                                    703 ;------------------------------------------------------------
                                    704 ;	src/main.c:856: static uint8 su8Cnt = 0;
      000003 75*0B 00         [24]  705 	mov	_main_su8Cnt_262145_134,#0x00
                                    706 ;	src/main.c:108: UINT8 gu8UART = 0;
      000006 75*01 00         [24]  707 	mov	_gu8UART,#0x00
                                    708 ;	src/main.c:109: UINT16 gu16TimeCnt = 0;
      000009 E4               [12]  709 	clr	a
      00000A F5*02            [12]  710 	mov	_gu16TimeCnt,a
      00000C F5*03            [12]  711 	mov	(_gu16TimeCnt + 1),a
                                    712 ;	src/main.c:89: UINT8 __xdata gu8MotorState = 0;
      00000E 90r00r14         [24]  713 	mov	dptr,#_gu8MotorState
      000011 F0               [24]  714 	movx	@dptr,a
                                    715 ;	src/main.c:91: UINT32 __xdata gpu32UartSpeed[] = {
      000012 90r00r15         [24]  716 	mov	dptr,#_gpu32UartSpeed
      000015 74 60            [12]  717 	mov	a,#0x60
      000017 F0               [24]  718 	movx	@dptr,a
      000018 74 09            [12]  719 	mov	a,#0x09
      00001A A3               [24]  720 	inc	dptr
      00001B F0               [24]  721 	movx	@dptr,a
      00001C E4               [12]  722 	clr	a
      00001D A3               [24]  723 	inc	dptr
      00001E F0               [24]  724 	movx	@dptr,a
      00001F A3               [24]  725 	inc	dptr
      000020 F0               [24]  726 	movx	@dptr,a
      000021 90r00r19         [24]  727 	mov	dptr,#(_gpu32UartSpeed + 0x0004)
      000024 74 80            [12]  728 	mov	a,#0x80
      000026 F0               [24]  729 	movx	@dptr,a
      000027 74 70            [12]  730 	mov	a,#0x70
      000029 A3               [24]  731 	inc	dptr
      00002A F0               [24]  732 	movx	@dptr,a
      00002B E4               [12]  733 	clr	a
      00002C A3               [24]  734 	inc	dptr
      00002D F0               [24]  735 	movx	@dptr,a
      00002E A3               [24]  736 	inc	dptr
      00002F F0               [24]  737 	movx	@dptr,a
      000030 90r00r1D         [24]  738 	mov	dptr,#(_gpu32UartSpeed + 0x0008)
      000033 F0               [24]  739 	movx	@dptr,a
      000034 74 96            [12]  740 	mov	a,#0x96
      000036 A3               [24]  741 	inc	dptr
      000037 F0               [24]  742 	movx	@dptr,a
      000038 E4               [12]  743 	clr	a
      000039 A3               [24]  744 	inc	dptr
      00003A F0               [24]  745 	movx	@dptr,a
      00003B A3               [24]  746 	inc	dptr
      00003C F0               [24]  747 	movx	@dptr,a
      00003D 90r00r21         [24]  748 	mov	dptr,#(_gpu32UartSpeed + 0x000c)
      000040 F0               [24]  749 	movx	@dptr,a
      000041 74 E1            [12]  750 	mov	a,#0xe1
      000043 A3               [24]  751 	inc	dptr
      000044 F0               [24]  752 	movx	@dptr,a
      000045 E4               [12]  753 	clr	a
      000046 A3               [24]  754 	inc	dptr
      000047 F0               [24]  755 	movx	@dptr,a
      000048 A3               [24]  756 	inc	dptr
      000049 F0               [24]  757 	movx	@dptr,a
      00004A 90r00r25         [24]  758 	mov	dptr,#(_gpu32UartSpeed + 0x0010)
      00004D F0               [24]  759 	movx	@dptr,a
      00004E 74 C2            [12]  760 	mov	a,#0xc2
      000050 A3               [24]  761 	inc	dptr
      000051 F0               [24]  762 	movx	@dptr,a
      000052 74 01            [12]  763 	mov	a,#0x01
      000054 A3               [24]  764 	inc	dptr
      000055 F0               [24]  765 	movx	@dptr,a
      000056 E4               [12]  766 	clr	a
      000057 A3               [24]  767 	inc	dptr
      000058 F0               [24]  768 	movx	@dptr,a
      000059 90r00r29         [24]  769 	mov	dptr,#(_gpu32UartSpeed + 0x0014)
      00005C F0               [24]  770 	movx	@dptr,a
      00005D 74 84            [12]  771 	mov	a,#0x84
      00005F A3               [24]  772 	inc	dptr
      000060 F0               [24]  773 	movx	@dptr,a
      000061 74 03            [12]  774 	mov	a,#0x03
      000063 A3               [24]  775 	inc	dptr
      000064 F0               [24]  776 	movx	@dptr,a
      000065 E4               [12]  777 	clr	a
      000066 A3               [24]  778 	inc	dptr
      000067 F0               [24]  779 	movx	@dptr,a
      000068 90r00r2D         [24]  780 	mov	dptr,#(_gpu32UartSpeed + 0x0018)
      00006B 74 E0            [12]  781 	mov	a,#0xe0
      00006D F0               [24]  782 	movx	@dptr,a
      00006E 74 93            [12]  783 	mov	a,#0x93
      000070 A3               [24]  784 	inc	dptr
      000071 F0               [24]  785 	movx	@dptr,a
      000072 74 04            [12]  786 	mov	a,#0x04
      000074 A3               [24]  787 	inc	dptr
      000075 F0               [24]  788 	movx	@dptr,a
      000076 E4               [12]  789 	clr	a
      000077 A3               [24]  790 	inc	dptr
      000078 F0               [24]  791 	movx	@dptr,a
      000079 90r00r31         [24]  792 	mov	dptr,#(_gpu32UartSpeed + 0x001c)
      00007C F0               [24]  793 	movx	@dptr,a
      00007D 74 08            [12]  794 	mov	a,#0x08
      00007F A3               [24]  795 	inc	dptr
      000080 F0               [24]  796 	movx	@dptr,a
      000081 14               [12]  797 	dec	a
      000082 A3               [24]  798 	inc	dptr
      000083 F0               [24]  799 	movx	@dptr,a
      000084 E4               [12]  800 	clr	a
      000085 A3               [24]  801 	inc	dptr
      000086 F0               [24]  802 	movx	@dptr,a
      000087 90r00r35         [24]  803 	mov	dptr,#(_gpu32UartSpeed + 0x0020)
      00008A 74 20            [12]  804 	mov	a,#0x20
      00008C F0               [24]  805 	movx	@dptr,a
      00008D 74 A1            [12]  806 	mov	a,#0xa1
      00008F A3               [24]  807 	inc	dptr
      000090 F0               [24]  808 	movx	@dptr,a
      000091 74 07            [12]  809 	mov	a,#0x07
      000093 A3               [24]  810 	inc	dptr
      000094 F0               [24]  811 	movx	@dptr,a
      000095 E4               [12]  812 	clr	a
      000096 A3               [24]  813 	inc	dptr
      000097 F0               [24]  814 	movx	@dptr,a
      000098 90r00r39         [24]  815 	mov	dptr,#(_gpu32UartSpeed + 0x0024)
      00009B 74 C0            [12]  816 	mov	a,#0xc0
      00009D F0               [24]  817 	movx	@dptr,a
      00009E 74 27            [12]  818 	mov	a,#0x27
      0000A0 A3               [24]  819 	inc	dptr
      0000A1 F0               [24]  820 	movx	@dptr,a
      0000A2 74 09            [12]  821 	mov	a,#0x09
      0000A4 A3               [24]  822 	inc	dptr
      0000A5 F0               [24]  823 	movx	@dptr,a
      0000A6 E4               [12]  824 	clr	a
      0000A7 A3               [24]  825 	inc	dptr
      0000A8 F0               [24]  826 	movx	@dptr,a
      0000A9 90r00r3D         [24]  827 	mov	dptr,#(_gpu32UartSpeed + 0x0028)
      0000AC 74 60            [12]  828 	mov	a,#0x60
      0000AE F0               [24]  829 	movx	@dptr,a
      0000AF 74 AE            [12]  830 	mov	a,#0xae
      0000B1 A3               [24]  831 	inc	dptr
      0000B2 F0               [24]  832 	movx	@dptr,a
      0000B3 74 0A            [12]  833 	mov	a,#0x0a
      0000B5 A3               [24]  834 	inc	dptr
      0000B6 F0               [24]  835 	movx	@dptr,a
      0000B7 E4               [12]  836 	clr	a
      0000B8 A3               [24]  837 	inc	dptr
      0000B9 F0               [24]  838 	movx	@dptr,a
      0000BA 90r00r41         [24]  839 	mov	dptr,#(_gpu32UartSpeed + 0x002c)
      0000BD F0               [24]  840 	movx	@dptr,a
      0000BE 74 35            [12]  841 	mov	a,#0x35
      0000C0 A3               [24]  842 	inc	dptr
      0000C1 F0               [24]  843 	movx	@dptr,a
      0000C2 74 0C            [12]  844 	mov	a,#0x0c
      0000C4 A3               [24]  845 	inc	dptr
      0000C5 F0               [24]  846 	movx	@dptr,a
      0000C6 E4               [12]  847 	clr	a
      0000C7 A3               [24]  848 	inc	dptr
      0000C8 F0               [24]  849 	movx	@dptr,a
      0000C9 90r00r45         [24]  850 	mov	dptr,#(_gpu32UartSpeed + 0x0030)
      0000CC 74 A0            [12]  851 	mov	a,#0xa0
      0000CE F0               [24]  852 	movx	@dptr,a
      0000CF 74 BB            [12]  853 	mov	a,#0xbb
      0000D1 A3               [24]  854 	inc	dptr
      0000D2 F0               [24]  855 	movx	@dptr,a
      0000D3 74 0D            [12]  856 	mov	a,#0x0d
      0000D5 A3               [24]  857 	inc	dptr
      0000D6 F0               [24]  858 	movx	@dptr,a
      0000D7 E4               [12]  859 	clr	a
      0000D8 A3               [24]  860 	inc	dptr
      0000D9 F0               [24]  861 	movx	@dptr,a
      0000DA 90r00r49         [24]  862 	mov	dptr,#(_gpu32UartSpeed + 0x0034)
      0000DD F0               [24]  863 	movx	@dptr,a
      0000DE 74 10            [12]  864 	mov	a,#0x10
      0000E0 A3               [24]  865 	inc	dptr
      0000E1 F0               [24]  866 	movx	@dptr,a
      0000E2 74 0E            [12]  867 	mov	a,#0x0e
      0000E4 A3               [24]  868 	inc	dptr
      0000E5 F0               [24]  869 	movx	@dptr,a
      0000E6 E4               [12]  870 	clr	a
      0000E7 A3               [24]  871 	inc	dptr
      0000E8 F0               [24]  872 	movx	@dptr,a
                                    873 	.area GSFINAL (CODE)
      000000 02r00r3E         [24]  874 	ljmp	__sdcc_program_startup
                                    875 ;--------------------------------------------------------
                                    876 ; Home
                                    877 ;--------------------------------------------------------
                                    878 	.area HOME    (CODE)
                                    879 	.area HOME    (CODE)
      00003E                        880 __sdcc_program_startup:
      00003E 02r07r7E         [24]  881 	ljmp	_main
                                    882 ;	return from main will return to caller
                                    883 ;--------------------------------------------------------
                                    884 ; code
                                    885 ;--------------------------------------------------------
                                    886 	.area CSEG    (CODE)
                                    887 ;------------------------------------------------------------
                                    888 ;Allocation info for local variables in function 'putchar'
                                    889 ;------------------------------------------------------------
                                    890 ;c                         Allocated to registers r7 
                                    891 ;------------------------------------------------------------
                                    892 ;	src/main.c:112: void putchar (char c) 
                                    893 ;	-----------------------------------------
                                    894 ;	 function putchar
                                    895 ;	-----------------------------------------
      000000                        896 _putchar:
                           000007   897 	ar7 = 0x07
                           000006   898 	ar6 = 0x06
                           000005   899 	ar5 = 0x05
                           000004   900 	ar4 = 0x04
                           000003   901 	ar3 = 0x03
                           000002   902 	ar2 = 0x02
                           000001   903 	ar1 = 0x01
                           000000   904 	ar0 = 0x00
      000000 AF 82            [24]  905 	mov	r7,dpl
                                    906 ;	src/main.c:114: if (gu8UART == 0)  {
      000002 E5*01            [12]  907 	mov	a,_gu8UART
      000004 70 09            [24]  908 	jnz	00108$
                                    909 ;	src/main.c:115: TI = 0;
                                    910 ;	assignBit
      000006 C2 99            [12]  911 	clr	_TI
                                    912 ;	src/main.c:116: SBUF = c;
      000008 8F 99            [24]  913 	mov	_SBUF,r7
                                    914 ;	src/main.c:117: while(TI==0);
      00000A                        915 00101$:
      00000A 20 99 09         [24]  916 	jb	_TI,00110$
      00000D 80 FB            [24]  917 	sjmp	00101$
      00000F                        918 00108$:
                                    919 ;	src/main.c:120: TI_1 = 0;
                                    920 ;	assignBit
      00000F C2 F9            [12]  921 	clr	_TI_1
                                    922 ;	src/main.c:121: SBUF_1 = c;
      000011 8F 9A            [24]  923 	mov	_SBUF_1,r7
                                    924 ;	src/main.c:122: while(TI_1==0);
      000013                        925 00104$:
      000013 30 F9 FD         [24]  926 	jnb	_TI_1,00104$
      000016                        927 00110$:
                                    928 ;	src/main.c:124: }
      000016 22               [24]  929 	ret
                                    930 ;------------------------------------------------------------
                                    931 ;Allocation info for local variables in function 'conv_nibble2manchester'
                                    932 ;------------------------------------------------------------
                                    933 ;c                         Allocated to registers r7 
                                    934 ;i                         Allocated to registers r5 
                                    935 ;u8Manch                   Allocated to registers r4 
                                    936 ;------------------------------------------------------------
                                    937 ;	src/main.c:126: UINT8 conv_nibble2manchester (UINT8 c)
                                    938 ;	-----------------------------------------
                                    939 ;	 function conv_nibble2manchester
                                    940 ;	-----------------------------------------
      000017                        941 _conv_nibble2manchester:
      000017 AF 82            [24]  942 	mov	r7,dpl
                                    943 ;	src/main.c:136: UINT8 u8Manch = 0;
      000019 7E 00            [12]  944 	mov	r6,#0x00
                                    945 ;	src/main.c:137: for (i=0;i<4;i++) {
      00001B 7D 00            [12]  946 	mov	r5,#0x00
      00001D                        947 00105$:
                                    948 ;	src/main.c:138: u8Manch >>=2;
      00001D EE               [12]  949 	mov	a,r6
      00001E 03               [12]  950 	rr	a
      00001F 03               [12]  951 	rr	a
      000020 54 3F            [12]  952 	anl	a,#0x3f
      000022 FC               [12]  953 	mov	r4,a
                                    954 ;	src/main.c:139: if (c&1) {
      000023 EF               [12]  955 	mov	a,r7
      000024 30 E0 06         [24]  956 	jnb	acc.0,00102$
                                    957 ;	src/main.c:140: u8Manch |= 0x40; // 1 -> 0
      000027 74 40            [12]  958 	mov	a,#0x40
      000029 4C               [12]  959 	orl	a,r4
      00002A FE               [12]  960 	mov	r6,a
      00002B 80 04            [24]  961 	sjmp	00103$
      00002D                        962 00102$:
                                    963 ;	src/main.c:143: u8Manch |= 0x80; // 0 -> 1
      00002D 74 80            [12]  964 	mov	a,#0x80
      00002F 4C               [12]  965 	orl	a,r4
      000030 FE               [12]  966 	mov	r6,a
      000031                        967 00103$:
                                    968 ;	src/main.c:145: c >>= 1;
      000031 EF               [12]  969 	mov	a,r7
      000032 C3               [12]  970 	clr	c
      000033 13               [12]  971 	rrc	a
      000034 FF               [12]  972 	mov	r7,a
                                    973 ;	src/main.c:137: for (i=0;i<4;i++) {
      000035 0D               [12]  974 	inc	r5
      000036 BD 04 00         [24]  975 	cjne	r5,#0x04,00126$
      000039                        976 00126$:
      000039 40 E2            [24]  977 	jc	00105$
                                    978 ;	src/main.c:147: return u8Manch;
      00003B 8E 82            [24]  979 	mov	dpl,r6
                                    980 ;	src/main.c:148: }
      00003D 22               [24]  981 	ret
                                    982 ;------------------------------------------------------------
                                    983 ;Allocation info for local variables in function 'putchar_manchester'
                                    984 ;------------------------------------------------------------
                                    985 ;c                         Allocated to registers r7 
                                    986 ;------------------------------------------------------------
                                    987 ;	src/main.c:150: void putchar_manchester (char c) 
                                    988 ;	-----------------------------------------
                                    989 ;	 function putchar_manchester
                                    990 ;	-----------------------------------------
      00003E                        991 _putchar_manchester:
                                    992 ;	src/main.c:152: gu8UART = 1;
                                    993 ;	src/main.c:153: putchar(conv_nibble2manchester(c));
      00003E AF 82            [24]  994 	mov	r7,dpl
      000040 75*01 01         [24]  995 	mov	_gu8UART,#0x01
      000043 C0 07            [24]  996 	push	ar7
      000045 12r00r17         [24]  997 	lcall	_conv_nibble2manchester
      000048 12r00r00         [24]  998 	lcall	_putchar
      00004B D0 07            [24]  999 	pop	ar7
                                   1000 ;	src/main.c:154: putchar(conv_nibble2manchester(c>>4));
      00004D EF               [12] 1001 	mov	a,r7
      00004E C4               [12] 1002 	swap	a
      00004F 54 0F            [12] 1003 	anl	a,#0x0f
      000051 F5 82            [12] 1004 	mov	dpl,a
      000053 12r00r17         [24] 1005 	lcall	_conv_nibble2manchester
                                   1006 ;	src/main.c:155: return;
                                   1007 ;	src/main.c:156: }
      000056 02r00r00         [24] 1008 	ljmp	_putchar
                                   1009 ;------------------------------------------------------------
                                   1010 ;Allocation info for local variables in function 'preamble'
                                   1011 ;------------------------------------------------------------
                                   1012 ;	src/main.c:158: void preamble() 
                                   1013 ;	-----------------------------------------
                                   1014 ;	 function preamble
                                   1015 ;	-----------------------------------------
      000059                       1016 _preamble:
                                   1017 ;	src/main.c:160: gu8UART = 1;
      000059 75*01 01         [24] 1018 	mov	_gu8UART,#0x01
                                   1019 ;	src/main.c:161: putchar(0xF0);
      00005C 75 82 F0         [24] 1020 	mov	dpl,#0xf0
      00005F 12r00r00         [24] 1021 	lcall	_putchar
                                   1022 ;	src/main.c:162: putchar(0xF0);
      000062 75 82 F0         [24] 1023 	mov	dpl,#0xf0
      000065 12r00r00         [24] 1024 	lcall	_putchar
                                   1025 ;	src/main.c:163: putchar(0xF0);
      000068 75 82 F0         [24] 1026 	mov	dpl,#0xf0
      00006B 12r00r00         [24] 1027 	lcall	_putchar
                                   1028 ;	src/main.c:164: putchar(0xF0);
      00006E 75 82 F0         [24] 1029 	mov	dpl,#0xf0
                                   1030 ;	src/main.c:165: }
      000071 02r00r00         [24] 1031 	ljmp	_putchar
                                   1032 ;------------------------------------------------------------
                                   1033 ;Allocation info for local variables in function 'print_esc'
                                   1034 ;------------------------------------------------------------
                                   1035 ;au8State                  Allocated to registers r7 
                                   1036 ;------------------------------------------------------------
                                   1037 ;	src/main.c:199: void print_esc(UINT8 au8State)
                                   1038 ;	-----------------------------------------
                                   1039 ;	 function print_esc
                                   1040 ;	-----------------------------------------
      000074                       1041 _print_esc:
      000074 AF 82            [24] 1042 	mov	r7,dpl
                                   1043 ;	src/main.c:201: printf_fast_f("\n\r");
      000076 C0 07            [24] 1044 	push	ar7
      000078 74r00            [12] 1045 	mov	a,#___str_0
      00007A C0 E0            [24] 1046 	push	acc
      00007C 74s00            [12] 1047 	mov	a,#(___str_0 >> 8)
      00007E C0 E0            [24] 1048 	push	acc
      000080 12r00r00         [24] 1049 	lcall	_printf_fast_f
      000083 15 81            [12] 1050 	dec	sp
      000085 15 81            [12] 1051 	dec	sp
      000087 D0 07            [24] 1052 	pop	ar7
                                   1053 ;	src/main.c:202: switch(au8State) {
      000089 BF 00 02         [24] 1054 	cjne	r7,#0x00,00119$
      00008C 80 0A            [24] 1055 	sjmp	00101$
      00008E                       1056 00119$:
      00008E BF 01 02         [24] 1057 	cjne	r7,#0x01,00120$
      000091 80 16            [24] 1058 	sjmp	00102$
      000093                       1059 00120$:
                                   1060 ;	src/main.c:203: case STATE_SELF :
      000093 BF 02 33         [24] 1061 	cjne	r7,#0x02,00104$
      000096 80 22            [24] 1062 	sjmp	00103$
      000098                       1063 00101$:
                                   1064 ;	src/main.c:204: printf_fast_f("self ");
      000098 74r03            [12] 1065 	mov	a,#___str_1
      00009A C0 E0            [24] 1066 	push	acc
      00009C 74s00            [12] 1067 	mov	a,#(___str_1 >> 8)
      00009E C0 E0            [24] 1068 	push	acc
      0000A0 12r00r00         [24] 1069 	lcall	_printf_fast_f
      0000A3 15 81            [12] 1070 	dec	sp
      0000A5 15 81            [12] 1071 	dec	sp
                                   1072 ;	src/main.c:205: break;
                                   1073 ;	src/main.c:206: case STATE_CROSS :
      0000A7 80 20            [24] 1074 	sjmp	00104$
      0000A9                       1075 00102$:
                                   1076 ;	src/main.c:207: printf_fast_f("cross");
      0000A9 74r09            [12] 1077 	mov	a,#___str_2
      0000AB C0 E0            [24] 1078 	push	acc
      0000AD 74s00            [12] 1079 	mov	a,#(___str_2 >> 8)
      0000AF C0 E0            [24] 1080 	push	acc
      0000B1 12r00r00         [24] 1081 	lcall	_printf_fast_f
      0000B4 15 81            [12] 1082 	dec	sp
      0000B6 15 81            [12] 1083 	dec	sp
                                   1084 ;	src/main.c:208: break;
                                   1085 ;	src/main.c:209: case STATE_BOTH :
      0000B8 80 0F            [24] 1086 	sjmp	00104$
      0000BA                       1087 00103$:
                                   1088 ;	src/main.c:210: printf_fast_f("both ");
      0000BA 74r0F            [12] 1089 	mov	a,#___str_3
      0000BC C0 E0            [24] 1090 	push	acc
      0000BE 74s00            [12] 1091 	mov	a,#(___str_3 >> 8)
      0000C0 C0 E0            [24] 1092 	push	acc
      0000C2 12r00r00         [24] 1093 	lcall	_printf_fast_f
      0000C5 15 81            [12] 1094 	dec	sp
      0000C7 15 81            [12] 1095 	dec	sp
                                   1096 ;	src/main.c:212: }
      0000C9                       1097 00104$:
                                   1098 ;	src/main.c:213: printf_fast_f(" output:This is UART%d\n\r", gu8UART);
      0000C9 AE*01            [24] 1099 	mov	r6,_gu8UART
      0000CB 7F 00            [12] 1100 	mov	r7,#0x00
      0000CD C0 06            [24] 1101 	push	ar6
      0000CF C0 07            [24] 1102 	push	ar7
      0000D1 74r15            [12] 1103 	mov	a,#___str_4
      0000D3 C0 E0            [24] 1104 	push	acc
      0000D5 74s00            [12] 1105 	mov	a,#(___str_4 >> 8)
      0000D7 C0 E0            [24] 1106 	push	acc
      0000D9 12r00r00         [24] 1107 	lcall	_printf_fast_f
      0000DC E5 81            [12] 1108 	mov	a,sp
      0000DE 24 FC            [12] 1109 	add	a,#0xfc
      0000E0 F5 81            [12] 1110 	mov	sp,a
                                   1111 ;	src/main.c:214: }
      0000E2 22               [24] 1112 	ret
                                   1113 ;------------------------------------------------------------
                                   1114 ;Allocation info for local variables in function 'print_char'
                                   1115 ;------------------------------------------------------------
                                   1116 ;au8Data                   Allocated to registers r7 
                                   1117 ;------------------------------------------------------------
                                   1118 ;	src/main.c:216: void print_char(char au8Data)
                                   1119 ;	-----------------------------------------
                                   1120 ;	 function print_char
                                   1121 ;	-----------------------------------------
      0000E3                       1122 _print_char:
      0000E3 AF 82            [24] 1123 	mov	r7,dpl
                                   1124 ;	src/main.c:218: switch(au8Data) {
      0000E5 BF 0D 02         [24] 1125 	cjne	r7,#0x0d,00115$
      0000E8 80 04            [24] 1126 	sjmp	00102$
      0000EA                       1127 00115$:
      0000EA BF 1B 11         [24] 1128 	cjne	r7,#0x1b,00103$
                                   1129 ;	src/main.c:220: break;
                                   1130 ;	src/main.c:221: case '\r' :
      0000ED 22               [24] 1131 	ret
      0000EE                       1132 00102$:
                                   1133 ;	src/main.c:222: printf_fast_f("\r\n");
      0000EE 74r2E            [12] 1134 	mov	a,#___str_5
      0000F0 C0 E0            [24] 1135 	push	acc
      0000F2 74s00            [12] 1136 	mov	a,#(___str_5 >> 8)
      0000F4 C0 E0            [24] 1137 	push	acc
      0000F6 12r00r00         [24] 1138 	lcall	_printf_fast_f
      0000F9 15 81            [12] 1139 	dec	sp
      0000FB 15 81            [12] 1140 	dec	sp
                                   1141 ;	src/main.c:223: break;
                                   1142 ;	src/main.c:224: default :
      0000FD 22               [24] 1143 	ret
      0000FE                       1144 00103$:
                                   1145 ;	src/main.c:225: printf_fast_f("%c",au8Data);
      0000FE 7E 00            [12] 1146 	mov	r6,#0x00
      000100 C0 07            [24] 1147 	push	ar7
      000102 C0 06            [24] 1148 	push	ar6
      000104 74r31            [12] 1149 	mov	a,#___str_6
      000106 C0 E0            [24] 1150 	push	acc
      000108 74s00            [12] 1151 	mov	a,#(___str_6 >> 8)
      00010A C0 E0            [24] 1152 	push	acc
      00010C 12r00r00         [24] 1153 	lcall	_printf_fast_f
      00010F E5 81            [12] 1154 	mov	a,sp
      000111 24 FC            [12] 1155 	add	a,#0xfc
      000113 F5 81            [12] 1156 	mov	sp,a
                                   1157 ;	src/main.c:226: }
                                   1158 ;	src/main.c:227: }
      000115 22               [24] 1159 	ret
                                   1160 ;------------------------------------------------------------
                                   1161 ;Allocation info for local variables in function 'state_machine'
                                   1162 ;------------------------------------------------------------
                                   1163 ;au8RxUART                 Allocated with name '_state_machine_PARM_2'
                                   1164 ;au8SelfID                 Allocated with name '_state_machine_PARM_3'
                                   1165 ;au8OtherID                Allocated with name '_state_machine_PARM_4'
                                   1166 ;au8State                  Allocated to registers r7 
                                   1167 ;------------------------------------------------------------
                                   1168 ;	src/main.c:229: UINT8 state_machine(UINT8 au8State, UINT8 au8RxUART, UINT8 au8SelfID, UINT8 au8OtherID)
                                   1169 ;	-----------------------------------------
                                   1170 ;	 function state_machine
                                   1171 ;	-----------------------------------------
      000116                       1172 _state_machine:
      000116 AF 82            [24] 1173 	mov	r7,dpl
                                   1174 ;	src/main.c:231: if(au8RxUART == KEY_ESC) {
      000118 74 1B            [12] 1175 	mov	a,#0x1b
      00011A B5*04 02         [24] 1176 	cjne	a,_state_machine_PARM_2,00142$
      00011D 80 02            [24] 1177 	sjmp	00143$
      00011F                       1178 00142$:
      00011F 80 79            [24] 1179 	sjmp	00110$
      000121                       1180 00143$:
                                   1181 ;	src/main.c:232: gu8UART = au8SelfID;
      000121 AE*05            [24] 1182 	mov	r6,_state_machine_PARM_3
      000123 8E*01            [24] 1183 	mov	_gu8UART,r6
                                   1184 ;	src/main.c:233: printf_fast_f("\r\ninput:This is UART%d", gu8UART);
      000125 AC*01            [24] 1185 	mov	r4,_gu8UART
      000127 7D 00            [12] 1186 	mov	r5,#0x00
      000129 C0 07            [24] 1187 	push	ar7
      00012B C0 06            [24] 1188 	push	ar6
      00012D C0 04            [24] 1189 	push	ar4
      00012F C0 05            [24] 1190 	push	ar5
      000131 74r34            [12] 1191 	mov	a,#___str_7
      000133 C0 E0            [24] 1192 	push	acc
      000135 74s00            [12] 1193 	mov	a,#(___str_7 >> 8)
      000137 C0 E0            [24] 1194 	push	acc
      000139 12r00r00         [24] 1195 	lcall	_printf_fast_f
      00013C E5 81            [12] 1196 	mov	a,sp
      00013E 24 FC            [12] 1197 	add	a,#0xfc
      000140 F5 81            [12] 1198 	mov	sp,a
      000142 D0 06            [24] 1199 	pop	ar6
      000144 D0 07            [24] 1200 	pop	ar7
                                   1201 ;	src/main.c:234: switch(au8State) {
      000146 BF 00 02         [24] 1202 	cjne	r7,#0x00,00144$
      000149 80 0D            [24] 1203 	sjmp	00101$
      00014B                       1204 00144$:
      00014B BF 01 02         [24] 1205 	cjne	r7,#0x01,00145$
      00014E 80 21            [24] 1206 	sjmp	00102$
      000150                       1207 00145$:
      000150 BF 02 02         [24] 1208 	cjne	r7,#0x02,00146$
      000153 80 35            [24] 1209 	sjmp	00103$
      000155                       1210 00146$:
      000155 02r01rDD         [24] 1211 	ljmp	00111$
                                   1212 ;	src/main.c:235: case STATE_SELF :
      000158                       1213 00101$:
                                   1214 ;	src/main.c:236: au8State = STATE_CROSS;
      000158 7F 01            [12] 1215 	mov	r7,#0x01
                                   1216 ;	src/main.c:237: gu8UART = au8SelfID;
      00015A 8E*01            [24] 1217 	mov	_gu8UART,r6
                                   1218 ;	src/main.c:238: print_esc(au8State);
      00015C 75 82 01         [24] 1219 	mov	dpl,#0x01
      00015F C0 07            [24] 1220 	push	ar7
      000161 12r00r74         [24] 1221 	lcall	_print_esc
                                   1222 ;	src/main.c:239: gu8UART = au8OtherID;
      000164 85*06*01         [24] 1223 	mov	_gu8UART,_state_machine_PARM_4
                                   1224 ;	src/main.c:240: print_esc(au8State);
      000167 75 82 01         [24] 1225 	mov	dpl,#0x01
      00016A 12r00r74         [24] 1226 	lcall	_print_esc
      00016D D0 07            [24] 1227 	pop	ar7
                                   1228 ;	src/main.c:241: break;
                                   1229 ;	src/main.c:242: case STATE_CROSS :
      00016F 80 6C            [24] 1230 	sjmp	00111$
      000171                       1231 00102$:
                                   1232 ;	src/main.c:243: au8State = STATE_BOTH;
      000171 7F 02            [12] 1233 	mov	r7,#0x02
                                   1234 ;	src/main.c:244: gu8UART = au8SelfID;
      000173 8E*01            [24] 1235 	mov	_gu8UART,r6
                                   1236 ;	src/main.c:245: print_esc(au8State);
      000175 75 82 02         [24] 1237 	mov	dpl,#0x02
      000178 C0 07            [24] 1238 	push	ar7
      00017A 12r00r74         [24] 1239 	lcall	_print_esc
                                   1240 ;	src/main.c:246: gu8UART = au8OtherID;
      00017D 85*06*01         [24] 1241 	mov	_gu8UART,_state_machine_PARM_4
                                   1242 ;	src/main.c:247: print_esc(au8State);
      000180 75 82 02         [24] 1243 	mov	dpl,#0x02
      000183 12r00r74         [24] 1244 	lcall	_print_esc
      000186 D0 07            [24] 1245 	pop	ar7
                                   1246 ;	src/main.c:248: break;
                                   1247 ;	src/main.c:249: case STATE_BOTH :
      000188 80 53            [24] 1248 	sjmp	00111$
      00018A                       1249 00103$:
                                   1250 ;	src/main.c:250: au8State = STATE_SELF;
      00018A 7F 00            [12] 1251 	mov	r7,#0x00
                                   1252 ;	src/main.c:251: gu8UART = au8SelfID;
      00018C 8E*01            [24] 1253 	mov	_gu8UART,r6
                                   1254 ;	src/main.c:252: print_esc(au8State);
      00018E 75 82 00         [24] 1255 	mov	dpl,#0x00
      000191 C0 07            [24] 1256 	push	ar7
      000193 12r00r74         [24] 1257 	lcall	_print_esc
      000196 D0 07            [24] 1258 	pop	ar7
                                   1259 ;	src/main.c:254: }
      000198 80 43            [24] 1260 	sjmp	00111$
      00019A                       1261 00110$:
                                   1262 ;	src/main.c:257: switch(au8State) {
      00019A BF 00 02         [24] 1263 	cjne	r7,#0x00,00147$
      00019D 80 0A            [24] 1264 	sjmp	00105$
      00019F                       1265 00147$:
      00019F BF 01 02         [24] 1266 	cjne	r7,#0x01,00148$
      0001A2 80 14            [24] 1267 	sjmp	00106$
      0001A4                       1268 00148$:
                                   1269 ;	src/main.c:258: case STATE_SELF :
      0001A4 BF 02 36         [24] 1270 	cjne	r7,#0x02,00111$
      0001A7 80 1E            [24] 1271 	sjmp	00107$
      0001A9                       1272 00105$:
                                   1273 ;	src/main.c:259: gu8UART = au8SelfID;
      0001A9 85*05*01         [24] 1274 	mov	_gu8UART,_state_machine_PARM_3
                                   1275 ;	src/main.c:260: print_char(au8RxUART);
      0001AC 85*04 82         [24] 1276 	mov	dpl,_state_machine_PARM_2
      0001AF C0 07            [24] 1277 	push	ar7
      0001B1 12r00rE3         [24] 1278 	lcall	_print_char
      0001B4 D0 07            [24] 1279 	pop	ar7
                                   1280 ;	src/main.c:261: break;
                                   1281 ;	src/main.c:262: case STATE_CROSS :
      0001B6 80 25            [24] 1282 	sjmp	00111$
      0001B8                       1283 00106$:
                                   1284 ;	src/main.c:263: gu8UART = au8OtherID;
      0001B8 85*06*01         [24] 1285 	mov	_gu8UART,_state_machine_PARM_4
                                   1286 ;	src/main.c:264: print_char(au8RxUART);
      0001BB 85*04 82         [24] 1287 	mov	dpl,_state_machine_PARM_2
      0001BE C0 07            [24] 1288 	push	ar7
      0001C0 12r00rE3         [24] 1289 	lcall	_print_char
      0001C3 D0 07            [24] 1290 	pop	ar7
                                   1291 ;	src/main.c:265: break;
                                   1292 ;	src/main.c:266: case STATE_BOTH :
      0001C5 80 16            [24] 1293 	sjmp	00111$
      0001C7                       1294 00107$:
                                   1295 ;	src/main.c:267: gu8UART = au8SelfID;
      0001C7 85*05*01         [24] 1296 	mov	_gu8UART,_state_machine_PARM_3
                                   1297 ;	src/main.c:268: print_char(au8RxUART);
      0001CA 85*04 82         [24] 1298 	mov	dpl,_state_machine_PARM_2
      0001CD C0 07            [24] 1299 	push	ar7
      0001CF 12r00rE3         [24] 1300 	lcall	_print_char
                                   1301 ;	src/main.c:269: gu8UART = au8OtherID;
      0001D2 85*06*01         [24] 1302 	mov	_gu8UART,_state_machine_PARM_4
                                   1303 ;	src/main.c:270: print_char(au8RxUART);
      0001D5 85*04 82         [24] 1304 	mov	dpl,_state_machine_PARM_2
      0001D8 12r00rE3         [24] 1305 	lcall	_print_char
      0001DB D0 07            [24] 1306 	pop	ar7
                                   1307 ;	src/main.c:272: }
      0001DD                       1308 00111$:
                                   1309 ;	src/main.c:274: return au8State;
      0001DD 8F 82            [24] 1310 	mov	dpl,r7
                                   1311 ;	src/main.c:275: }
      0001DF 22               [24] 1312 	ret
                                   1313 ;------------------------------------------------------------
                                   1314 ;Allocation info for local variables in function 'Timer0_ISR'
                                   1315 ;------------------------------------------------------------
                                   1316 ;	src/main.c:277: void Timer0_ISR (void) interrupt(1)  //interrupt address is 0x000B
                                   1317 ;	-----------------------------------------
                                   1318 ;	 function Timer0_ISR
                                   1319 ;	-----------------------------------------
      0001E0                       1320 _Timer0_ISR:
                           00000F  1321 	ar7 = 0x0f
                           00000E  1322 	ar6 = 0x0e
                           00000D  1323 	ar5 = 0x0d
                           00000C  1324 	ar4 = 0x0c
                           00000B  1325 	ar3 = 0x0b
                           00000A  1326 	ar2 = 0x0a
                           000009  1327 	ar1 = 0x09
                           000008  1328 	ar0 = 0x08
      0001E0 C0 E0            [24] 1329 	push	acc
      0001E2 C0 D0            [24] 1330 	push	psw
                                   1331 ;	src/main.c:279: TH0 = TH0_INIT;
      0001E4 75 8C FF         [24] 1332 	mov	_TH0,#0xff
                                   1333 ;	src/main.c:280: TL0 = TL0_INIT;
      0001E7 75 8A F3         [24] 1334 	mov	_TL0,#0xf3
                                   1335 ;	src/main.c:281: gu16TimeCnt++;
      0001EA 05*02            [12] 1336 	inc	_gu16TimeCnt
      0001EC E4               [12] 1337 	clr	a
      0001ED B5*02 02         [24] 1338 	cjne	a,_gu16TimeCnt,00103$
      0001F0 05*03            [12] 1339 	inc	(_gu16TimeCnt + 1)
      0001F2                       1340 00103$:
                                   1341 ;	src/main.c:290: } //void Timer0_ISR (void) __interrupt 1  //interrupt address is 0x000B
      0001F2 D0 D0            [24] 1342 	pop	psw
      0001F4 D0 E0            [24] 1343 	pop	acc
      0001F6 32               [24] 1344 	reti
                                   1345 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                   1346 ;	eliminated unneeded push/pop dpl
                                   1347 ;	eliminated unneeded push/pop dph
                                   1348 ;	eliminated unneeded push/pop b
                                   1349 ;------------------------------------------------------------
                                   1350 ;Allocation info for local variables in function 'pin_interrupt_isr'
                                   1351 ;------------------------------------------------------------
                                   1352 ;	src/main.c:292: void pin_interrupt_isr(void) interrupt(7)
                                   1353 ;	-----------------------------------------
                                   1354 ;	 function pin_interrupt_isr
                                   1355 ;	-----------------------------------------
      0001F7                       1356 _pin_interrupt_isr:
      0001F7 C0 E0            [24] 1357 	push	acc
                                   1358 ;	src/main.c:294: if (PIF == 0x10) {
      0001F9 E5 EC            [12] 1359 	mov	a,_PIF
                                   1360 ;	src/main.c:296: PIF = 0;
      0001FB 75 EC 00         [24] 1361 	mov	_PIF,#0x00
                                   1362 ;	src/main.c:297: }// void pin_interrupt_isr (void) interrupt(7)
      0001FE D0 E0            [24] 1363 	pop	acc
      000200 32               [24] 1364 	reti
                                   1365 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                   1366 ;	eliminated unneeded push/pop not_psw
                                   1367 ;	eliminated unneeded push/pop dpl
                                   1368 ;	eliminated unneeded push/pop dph
                                   1369 ;	eliminated unneeded push/pop b
                                   1370 ;------------------------------------------------------------
                                   1371 ;Allocation info for local variables in function 'chk_manchester'
                                   1372 ;------------------------------------------------------------
                                   1373 ;c                         Allocated to registers r7 
                                   1374 ;i                         Allocated to registers r6 
                                   1375 ;------------------------------------------------------------
                                   1376 ;	src/main.c:300: UINT8 chk_manchester(UINT8 c)
                                   1377 ;	-----------------------------------------
                                   1378 ;	 function chk_manchester
                                   1379 ;	-----------------------------------------
      000201                       1380 _chk_manchester:
                           000007  1381 	ar7 = 0x07
                           000006  1382 	ar6 = 0x06
                           000005  1383 	ar5 = 0x05
                           000004  1384 	ar4 = 0x04
                           000003  1385 	ar3 = 0x03
                           000002  1386 	ar2 = 0x02
                           000001  1387 	ar1 = 0x01
                           000000  1388 	ar0 = 0x00
      000201 AF 82            [24] 1389 	mov	r7,dpl
                                   1390 ;	src/main.c:303: for (i=0;i<4;i++) {
      000203 7E 00            [12] 1391 	mov	r6,#0x00
      000205                       1392 00104$:
                                   1393 ;	src/main.c:304: if (((c>>(2*i)) & 1) == ((c>>((2*i+1)))&1)) {
      000205 EE               [12] 1394 	mov	a,r6
      000206 2E               [12] 1395 	add	a,r6
      000207 FD               [12] 1396 	mov	r5,a
      000208 8D F0            [24] 1397 	mov	b,r5
      00020A 05 F0            [12] 1398 	inc	b
      00020C EF               [12] 1399 	mov	a,r7
      00020D 80 02            [24] 1400 	sjmp	00121$
      00020F                       1401 00120$:
      00020F C3               [12] 1402 	clr	c
      000210 13               [12] 1403 	rrc	a
      000211                       1404 00121$:
      000211 D5 F0 FB         [24] 1405 	djnz	b,00120$
      000214 FC               [12] 1406 	mov	r4,a
      000215 53 04 01         [24] 1407 	anl	ar4,#0x01
      000218 7B 00            [12] 1408 	mov	r3,#0x00
      00021A ED               [12] 1409 	mov	a,r5
      00021B 04               [12] 1410 	inc	a
      00021C F5 F0            [12] 1411 	mov	b,a
      00021E 05 F0            [12] 1412 	inc	b
      000220 EF               [12] 1413 	mov	a,r7
      000221 80 02            [24] 1414 	sjmp	00123$
      000223                       1415 00122$:
      000223 C3               [12] 1416 	clr	c
      000224 13               [12] 1417 	rrc	a
      000225                       1418 00123$:
      000225 D5 F0 FB         [24] 1419 	djnz	b,00122$
      000228 FD               [12] 1420 	mov	r5,a
      000229 53 05 01         [24] 1421 	anl	ar5,#0x01
      00022C 7A 00            [12] 1422 	mov	r2,#0x00
      00022E EC               [12] 1423 	mov	a,r4
      00022F B5 05 08         [24] 1424 	cjne	a,ar5,00105$
      000232 EB               [12] 1425 	mov	a,r3
      000233 B5 02 04         [24] 1426 	cjne	a,ar2,00105$
                                   1427 ;	src/main.c:306: return 0;
      000236 75 82 00         [24] 1428 	mov	dpl,#0x00
      000239 22               [24] 1429 	ret
      00023A                       1430 00105$:
                                   1431 ;	src/main.c:303: for (i=0;i<4;i++) {
      00023A 0E               [12] 1432 	inc	r6
      00023B BE 04 00         [24] 1433 	cjne	r6,#0x04,00126$
      00023E                       1434 00126$:
      00023E 40 C5            [24] 1435 	jc	00104$
                                   1436 ;	src/main.c:309: return 1;
      000240 75 82 01         [24] 1437 	mov	dpl,#0x01
                                   1438 ;	src/main.c:310: }
      000243 22               [24] 1439 	ret
                                   1440 ;------------------------------------------------------------
                                   1441 ;Allocation info for local variables in function 'conv_manchester2nibble'
                                   1442 ;------------------------------------------------------------
                                   1443 ;c                         Allocated to registers r7 
                                   1444 ;i                         Allocated to registers r5 
                                   1445 ;u8Nibble                  Allocated to registers r6 
                                   1446 ;------------------------------------------------------------
                                   1447 ;	src/main.c:312: UINT8 conv_manchester2nibble(UINT8 c)
                                   1448 ;	-----------------------------------------
                                   1449 ;	 function conv_manchester2nibble
                                   1450 ;	-----------------------------------------
      000244                       1451 _conv_manchester2nibble:
      000244 AF 82            [24] 1452 	mov	r7,dpl
                                   1453 ;	src/main.c:315: UINT8 u8Nibble = 0;
      000246 7E 00            [12] 1454 	mov	r6,#0x00
                                   1455 ;	src/main.c:316: for (i=0;i<4;i++) {
      000248 7D 04            [12] 1456 	mov	r5,#0x04
      00024A                       1457 00106$:
                                   1458 ;	src/main.c:317: if (c & 1) {
      00024A EF               [12] 1459 	mov	a,r7
      00024B 30 E0 03         [24] 1460 	jnb	acc.0,00102$
                                   1461 ;	src/main.c:318: u8Nibble |= 0x80;
      00024E 43 06 80         [24] 1462 	orl	ar6,#0x80
      000251                       1463 00102$:
                                   1464 ;	src/main.c:320: c >>= 2;
      000251 EF               [12] 1465 	mov	a,r7
      000252 03               [12] 1466 	rr	a
      000253 03               [12] 1467 	rr	a
      000254 54 3F            [12] 1468 	anl	a,#0x3f
      000256 FF               [12] 1469 	mov	r7,a
                                   1470 ;	src/main.c:321: u8Nibble >>= 1;
      000257 EE               [12] 1471 	mov	a,r6
      000258 C3               [12] 1472 	clr	c
      000259 13               [12] 1473 	rrc	a
      00025A FE               [12] 1474 	mov	r6,a
                                   1475 ;	src/main.c:316: for (i=0;i<4;i++) {
      00025B DD ED            [24] 1476 	djnz	r5,00106$
                                   1477 ;	src/main.c:323: return u8Nibble;
      00025D 8E 82            [24] 1478 	mov	dpl,r6
                                   1479 ;	src/main.c:324: }
      00025F 22               [24] 1480 	ret
                                   1481 ;------------------------------------------------------------
                                   1482 ;Allocation info for local variables in function 'conv_manchester2highnibble'
                                   1483 ;------------------------------------------------------------
                                   1484 ;c                         Allocated to registers r7 
                                   1485 ;i                         Allocated to registers r5 
                                   1486 ;u8Nibble                  Allocated to registers r6 
                                   1487 ;------------------------------------------------------------
                                   1488 ;	src/main.c:326: UINT8 conv_manchester2highnibble(UINT8 c)
                                   1489 ;	-----------------------------------------
                                   1490 ;	 function conv_manchester2highnibble
                                   1491 ;	-----------------------------------------
      000260                       1492 _conv_manchester2highnibble:
      000260 AF 82            [24] 1493 	mov	r7,dpl
                                   1494 ;	src/main.c:329: UINT8 u8Nibble = 0;
      000262 7E 00            [12] 1495 	mov	r6,#0x00
                                   1496 ;	src/main.c:330: for (i=0;i<4;i++) {
      000264 7D 04            [12] 1497 	mov	r5,#0x04
      000266                       1498 00106$:
                                   1499 ;	src/main.c:331: u8Nibble >>= 1;
      000266 EE               [12] 1500 	mov	a,r6
      000267 C3               [12] 1501 	clr	c
      000268 13               [12] 1502 	rrc	a
      000269 FE               [12] 1503 	mov	r6,a
                                   1504 ;	src/main.c:332: if (c & 1) {
      00026A EF               [12] 1505 	mov	a,r7
      00026B 30 E0 03         [24] 1506 	jnb	acc.0,00102$
                                   1507 ;	src/main.c:333: u8Nibble |= 0x80;
      00026E 43 06 80         [24] 1508 	orl	ar6,#0x80
      000271                       1509 00102$:
                                   1510 ;	src/main.c:335: c >>= 2;
      000271 EF               [12] 1511 	mov	a,r7
      000272 03               [12] 1512 	rr	a
      000273 03               [12] 1513 	rr	a
      000274 54 3F            [12] 1514 	anl	a,#0x3f
      000276 FF               [12] 1515 	mov	r7,a
                                   1516 ;	src/main.c:330: for (i=0;i<4;i++) {
      000277 DD ED            [24] 1517 	djnz	r5,00106$
                                   1518 ;	src/main.c:337: return u8Nibble;
      000279 8E 82            [24] 1519 	mov	dpl,r6
                                   1520 ;	src/main.c:338: }
      00027B 22               [24] 1521 	ret
                                   1522 ;------------------------------------------------------------
                                   1523 ;Allocation info for local variables in function 'MODIFY_HIRC_166'
                                   1524 ;------------------------------------------------------------
                                   1525 ;hircmap0                  Allocated to registers r7 
                                   1526 ;hircmap1                  Allocated to registers r6 
                                   1527 ;trimvalue16bit            Allocated to registers r7 r5 
                                   1528 ;------------------------------------------------------------
                                   1529 ;	src/main.c:340: void MODIFY_HIRC_166(void)
                                   1530 ;	-----------------------------------------
                                   1531 ;	 function MODIFY_HIRC_166
                                   1532 ;	-----------------------------------------
      00027C                       1533 _MODIFY_HIRC_166:
                                   1534 ;	src/main.c:345: if ((PCON&SET_BIT4)==SET_BIT4) {
      00027C AE 87            [24] 1535 	mov	r6,_PCON
      00027E 53 06 10         [24] 1536 	anl	ar6,#0x10
      000281 7F 00            [12] 1537 	mov	r7,#0x00
      000283 BE 10 41         [24] 1538 	cjne	r6,#0x10,00103$
      000286 BF 00 3E         [24] 1539 	cjne	r7,#0x00,00103$
                                   1540 ;	src/main.c:346: hircmap0 = RCTRIM0;
      000289 AF 84            [24] 1541 	mov	r7,_RCTRIM0
                                   1542 ;	src/main.c:347: hircmap1 = RCTRIM1;
      00028B AE 85            [24] 1543 	mov	r6,_RCTRIM1
                                   1544 ;	src/main.c:348: trimvalue16bit = ((hircmap0<<1)+(hircmap1&0x01));
      00028D 7D 00            [12] 1545 	mov	r5,#0x00
      00028F EF               [12] 1546 	mov	a,r7
      000290 2F               [12] 1547 	add	a,r7
      000291 FF               [12] 1548 	mov	r7,a
      000292 ED               [12] 1549 	mov	a,r5
      000293 33               [12] 1550 	rlc	a
      000294 FD               [12] 1551 	mov	r5,a
      000295 53 06 01         [24] 1552 	anl	ar6,#0x01
      000298 7C 00            [12] 1553 	mov	r4,#0x00
      00029A EE               [12] 1554 	mov	a,r6
      00029B 2F               [12] 1555 	add	a,r7
      00029C FF               [12] 1556 	mov	r7,a
      00029D EC               [12] 1557 	mov	a,r4
      00029E 3D               [12] 1558 	addc	a,r5
      00029F FD               [12] 1559 	mov	r5,a
                                   1560 ;	src/main.c:349: trimvalue16bit = trimvalue16bit - 15;
      0002A0 EF               [12] 1561 	mov	a,r7
      0002A1 24 F1            [12] 1562 	add	a,#0xf1
      0002A3 FF               [12] 1563 	mov	r7,a
      0002A4 ED               [12] 1564 	mov	a,r5
      0002A5 34 FF            [12] 1565 	addc	a,#0xff
      0002A7 FD               [12] 1566 	mov	r5,a
                                   1567 ;	src/main.c:350: hircmap1 = trimvalue16bit&0x01;
      0002A8 8F 06            [24] 1568 	mov	ar6,r7
      0002AA 53 06 01         [24] 1569 	anl	ar6,#0x01
                                   1570 ;	src/main.c:351: hircmap0 = trimvalue16bit>>1;
      0002AD ED               [12] 1571 	mov	a,r5
      0002AE C3               [12] 1572 	clr	c
      0002AF 13               [12] 1573 	rrc	a
      0002B0 CF               [12] 1574 	xch	a,r7
      0002B1 13               [12] 1575 	rrc	a
      0002B2 CF               [12] 1576 	xch	a,r7
      0002B3 FD               [12] 1577 	mov	r5,a
                                   1578 ;	src/main.c:352: TA=0XAA;
      0002B4 75 C7 AA         [24] 1579 	mov	_TA,#0xaa
                                   1580 ;	src/main.c:353: TA=0X55;
      0002B7 75 C7 55         [24] 1581 	mov	_TA,#0x55
                                   1582 ;	src/main.c:354: RCTRIM0 = hircmap0;
      0002BA 8F 84            [24] 1583 	mov	_RCTRIM0,r7
                                   1584 ;	src/main.c:355: TA=0XAA;
      0002BC 75 C7 AA         [24] 1585 	mov	_TA,#0xaa
                                   1586 ;	src/main.c:356: TA=0X55;
      0002BF 75 C7 55         [24] 1587 	mov	_TA,#0x55
                                   1588 ;	src/main.c:357: RCTRIM1 = hircmap1;
      0002C2 8E 85            [24] 1589 	mov	_RCTRIM1,r6
                                   1590 ;	src/main.c:359: PCON &= CLR_BIT4;
      0002C4 53 87 EF         [24] 1591 	anl	_PCON,#0xef
      0002C7                       1592 00103$:
                                   1593 ;	src/main.c:361: }
      0002C7 22               [24] 1594 	ret
                                   1595 ;------------------------------------------------------------
                                   1596 ;Allocation info for local variables in function 'disp_help'
                                   1597 ;------------------------------------------------------------
                                   1598 ;au8Code                   Allocated to registers r7 
                                   1599 ;------------------------------------------------------------
                                   1600 ;	src/main.c:362: void disp_help(UINT8 au8Code)
                                   1601 ;	-----------------------------------------
                                   1602 ;	 function disp_help
                                   1603 ;	-----------------------------------------
      0002C8                       1604 _disp_help:
      0002C8 AF 82            [24] 1605 	mov	r7,dpl
                                   1606 ;	src/main.c:364: gu8UART = 1;
      0002CA 75*01 01         [24] 1607 	mov	_gu8UART,#0x01
                                   1608 ;	src/main.c:365: switch(au8Code) {
      0002CD BF 31 01         [24] 1609 	cjne	r7,#0x31,00165$
      0002D0 22               [24] 1610 	ret
      0002D1                       1611 00165$:
      0002D1 BF 32 01         [24] 1612 	cjne	r7,#0x32,00166$
      0002D4 22               [24] 1613 	ret
      0002D5                       1614 00166$:
      0002D5 BF 33 02         [24] 1615 	cjne	r7,#0x33,00167$
      0002D8 80 32            [24] 1616 	sjmp	00103$
      0002DA                       1617 00167$:
      0002DA BF 34 01         [24] 1618 	cjne	r7,#0x34,00168$
      0002DD 22               [24] 1619 	ret
      0002DE                       1620 00168$:
      0002DE BF 50 02         [24] 1621 	cjne	r7,#0x50,00169$
      0002E1 80 49            [24] 1622 	sjmp	00106$
      0002E3                       1623 00169$:
      0002E3 BF 53 03         [24] 1624 	cjne	r7,#0x53,00170$
      0002E6 02r03r6C         [24] 1625 	ljmp	00110$
      0002E9                       1626 00170$:
      0002E9 BF 54 02         [24] 1627 	cjne	r7,#0x54,00171$
      0002EC 80 5E            [24] 1628 	sjmp	00108$
      0002EE                       1629 00171$:
      0002EE BF 56 03         [24] 1630 	cjne	r7,#0x56,00172$
      0002F1 02r03r7C         [24] 1631 	ljmp	00112$
      0002F4                       1632 00172$:
      0002F4 BF 70 02         [24] 1633 	cjne	r7,#0x70,00173$
      0002F7 80 23            [24] 1634 	sjmp	00105$
      0002F9                       1635 00173$:
      0002F9 BF 73 02         [24] 1636 	cjne	r7,#0x73,00174$
      0002FC 80 5E            [24] 1637 	sjmp	00109$
      0002FE                       1638 00174$:
      0002FE BF 74 02         [24] 1639 	cjne	r7,#0x74,00175$
      000301 80 39            [24] 1640 	sjmp	00107$
      000303                       1641 00175$:
      000303 BF 76 03         [24] 1642 	cjne	r7,#0x76,00176$
      000306 02r03r7C         [24] 1643 	ljmp	00112$
      000309                       1644 00176$:
      000309 02r03r8C         [24] 1645 	ljmp	00113$
                                   1646 ;	src/main.c:370: case '3' :
      00030C                       1647 00103$:
                                   1648 ;	src/main.c:371: printf_fast_f("Idle preamble on/off\r\n");
      00030C 74r4B            [12] 1649 	mov	a,#___str_8
      00030E C0 E0            [24] 1650 	push	acc
      000310 74s00            [12] 1651 	mov	a,#(___str_8 >> 8)
      000312 C0 E0            [24] 1652 	push	acc
      000314 12r00r00         [24] 1653 	lcall	_printf_fast_f
      000317 15 81            [12] 1654 	dec	sp
      000319 15 81            [12] 1655 	dec	sp
                                   1656 ;	src/main.c:372: break;
      00031B 22               [24] 1657 	ret
                                   1658 ;	src/main.c:375: case 'p' :
      00031C                       1659 00105$:
                                   1660 ;	src/main.c:376: printf_fast_f("LineFi Power Off\r\n");
      00031C 74r62            [12] 1661 	mov	a,#___str_9
      00031E C0 E0            [24] 1662 	push	acc
      000320 74s00            [12] 1663 	mov	a,#(___str_9 >> 8)
      000322 C0 E0            [24] 1664 	push	acc
      000324 12r00r00         [24] 1665 	lcall	_printf_fast_f
      000327 15 81            [12] 1666 	dec	sp
      000329 15 81            [12] 1667 	dec	sp
                                   1668 ;	src/main.c:377: break;
      00032B 22               [24] 1669 	ret
                                   1670 ;	src/main.c:378: case 'P' :
      00032C                       1671 00106$:
                                   1672 ;	src/main.c:379: printf_fast_f("LineFi Power On\r\n");
      00032C 74r75            [12] 1673 	mov	a,#___str_10
      00032E C0 E0            [24] 1674 	push	acc
      000330 74s00            [12] 1675 	mov	a,#(___str_10 >> 8)
      000332 C0 E0            [24] 1676 	push	acc
      000334 12r00r00         [24] 1677 	lcall	_printf_fast_f
      000337 15 81            [12] 1678 	dec	sp
      000339 15 81            [12] 1679 	dec	sp
                                   1680 ;	src/main.c:380: break;
      00033B 22               [24] 1681 	ret
                                   1682 ;	src/main.c:381: case 't' :
      00033C                       1683 00107$:
                                   1684 ;	src/main.c:382: printf_fast_f("LineFi Uart Tx Low\r\n");
      00033C 74r87            [12] 1685 	mov	a,#___str_11
      00033E C0 E0            [24] 1686 	push	acc
      000340 74s00            [12] 1687 	mov	a,#(___str_11 >> 8)
      000342 C0 E0            [24] 1688 	push	acc
      000344 12r00r00         [24] 1689 	lcall	_printf_fast_f
      000347 15 81            [12] 1690 	dec	sp
      000349 15 81            [12] 1691 	dec	sp
                                   1692 ;	src/main.c:383: break;
      00034B 22               [24] 1693 	ret
                                   1694 ;	src/main.c:384: case 'T' :
      00034C                       1695 00108$:
                                   1696 ;	src/main.c:385: printf_fast_f("LineFi Uart Tx High\r\n");
      00034C 74r9C            [12] 1697 	mov	a,#___str_12
      00034E C0 E0            [24] 1698 	push	acc
      000350 74s00            [12] 1699 	mov	a,#(___str_12 >> 8)
      000352 C0 E0            [24] 1700 	push	acc
      000354 12r00r00         [24] 1701 	lcall	_printf_fast_f
      000357 15 81            [12] 1702 	dec	sp
      000359 15 81            [12] 1703 	dec	sp
                                   1704 ;	src/main.c:386: break;
      00035B 22               [24] 1705 	ret
                                   1706 ;	src/main.c:387: case 's' :
      00035C                       1707 00109$:
                                   1708 ;	src/main.c:388: printf_fast_f("LineFi CSC rx FSM Off\r\n");
      00035C 74rB2            [12] 1709 	mov	a,#___str_13
      00035E C0 E0            [24] 1710 	push	acc
      000360 74s00            [12] 1711 	mov	a,#(___str_13 >> 8)
      000362 C0 E0            [24] 1712 	push	acc
      000364 12r00r00         [24] 1713 	lcall	_printf_fast_f
      000367 15 81            [12] 1714 	dec	sp
      000369 15 81            [12] 1715 	dec	sp
                                   1716 ;	src/main.c:389: break;
      00036B 22               [24] 1717 	ret
                                   1718 ;	src/main.c:390: case 'S' :
      00036C                       1719 00110$:
                                   1720 ;	src/main.c:391: printf_fast_f("LineFi CSC rx FSM ON\r\n");
      00036C 74rCA            [12] 1721 	mov	a,#___str_14
      00036E C0 E0            [24] 1722 	push	acc
      000370 74s00            [12] 1723 	mov	a,#(___str_14 >> 8)
      000372 C0 E0            [24] 1724 	push	acc
      000374 12r00r00         [24] 1725 	lcall	_printf_fast_f
      000377 15 81            [12] 1726 	dec	sp
      000379 15 81            [12] 1727 	dec	sp
                                   1728 ;	src/main.c:392: break;
                                   1729 ;	src/main.c:393: case 'v' : case 'V' :
      00037B 22               [24] 1730 	ret
      00037C                       1731 00112$:
                                   1732 ;	src/main.c:394: printf_fast_f(__VERSION__);
      00037C 74rE1            [12] 1733 	mov	a,#___str_15
      00037E C0 E0            [24] 1734 	push	acc
      000380 74s00            [12] 1735 	mov	a,#(___str_15 >> 8)
      000382 C0 E0            [24] 1736 	push	acc
      000384 12r00r00         [24] 1737 	lcall	_printf_fast_f
      000387 15 81            [12] 1738 	dec	sp
      000389 15 81            [12] 1739 	dec	sp
                                   1740 ;	src/main.c:395: break;
                                   1741 ;	src/main.c:396: default :
      00038B 22               [24] 1742 	ret
      00038C                       1743 00113$:
                                   1744 ;	src/main.c:397: printf_fast_f("1: downlink packet 1\r\n");
      00038C 74rFB            [12] 1745 	mov	a,#___str_16
      00038E C0 E0            [24] 1746 	push	acc
      000390 74s00            [12] 1747 	mov	a,#(___str_16 >> 8)
      000392 C0 E0            [24] 1748 	push	acc
      000394 12r00r00         [24] 1749 	lcall	_printf_fast_f
      000397 15 81            [12] 1750 	dec	sp
      000399 15 81            [12] 1751 	dec	sp
                                   1752 ;	src/main.c:398: printf_fast_f("2: downlink packet 2\r\n");
      00039B 74r12            [12] 1753 	mov	a,#___str_17
      00039D C0 E0            [24] 1754 	push	acc
      00039F 74s01            [12] 1755 	mov	a,#(___str_17 >> 8)
      0003A1 C0 E0            [24] 1756 	push	acc
      0003A3 12r00r00         [24] 1757 	lcall	_printf_fast_f
      0003A6 15 81            [12] 1758 	dec	sp
      0003A8 15 81            [12] 1759 	dec	sp
                                   1760 ;	src/main.c:399: printf_fast_f("3: uplink idle preamble on/off\r\n");
      0003AA 74r29            [12] 1761 	mov	a,#___str_18
      0003AC C0 E0            [24] 1762 	push	acc
      0003AE 74s01            [12] 1763 	mov	a,#(___str_18 >> 8)
      0003B0 C0 E0            [24] 1764 	push	acc
      0003B2 12r00r00         [24] 1765 	lcall	_printf_fast_f
      0003B5 15 81            [12] 1766 	dec	sp
      0003B7 15 81            [12] 1767 	dec	sp
                                   1768 ;	src/main.c:400: printf_fast_f("p/P: LineFi Power off/on\r\n");
      0003B9 74r4A            [12] 1769 	mov	a,#___str_19
      0003BB C0 E0            [24] 1770 	push	acc
      0003BD 74s01            [12] 1771 	mov	a,#(___str_19 >> 8)
      0003BF C0 E0            [24] 1772 	push	acc
      0003C1 12r00r00         [24] 1773 	lcall	_printf_fast_f
      0003C4 15 81            [12] 1774 	dec	sp
      0003C6 15 81            [12] 1775 	dec	sp
                                   1776 ;	src/main.c:401: printf_fast_f("t/T: LineFi Uart Tx Low/High\r\n");
      0003C8 74r65            [12] 1777 	mov	a,#___str_20
      0003CA C0 E0            [24] 1778 	push	acc
      0003CC 74s01            [12] 1779 	mov	a,#(___str_20 >> 8)
      0003CE C0 E0            [24] 1780 	push	acc
      0003D0 12r00r00         [24] 1781 	lcall	_printf_fast_f
      0003D3 15 81            [12] 1782 	dec	sp
      0003D5 15 81            [12] 1783 	dec	sp
                                   1784 ;	src/main.c:402: printf_fast_f("s/S: LineFie CSC Rx FSM off/on\r\n");
      0003D7 74r84            [12] 1785 	mov	a,#___str_21
      0003D9 C0 E0            [24] 1786 	push	acc
      0003DB 74s01            [12] 1787 	mov	a,#(___str_21 >> 8)
      0003DD C0 E0            [24] 1788 	push	acc
      0003DF 12r00r00         [24] 1789 	lcall	_printf_fast_f
      0003E2 15 81            [12] 1790 	dec	sp
      0003E4 15 81            [12] 1791 	dec	sp
                                   1792 ;	src/main.c:403: printf_fast_f("test procedure: p -> P -> T -> S -> 1 or 2\r\n");
      0003E6 74rA5            [12] 1793 	mov	a,#___str_22
      0003E8 C0 E0            [24] 1794 	push	acc
      0003EA 74s01            [12] 1795 	mov	a,#(___str_22 >> 8)
      0003EC C0 E0            [24] 1796 	push	acc
      0003EE 12r00r00         [24] 1797 	lcall	_printf_fast_f
      0003F1 15 81            [12] 1798 	dec	sp
      0003F3 15 81            [12] 1799 	dec	sp
                                   1800 ;	src/main.c:405: }
                                   1801 ;	src/main.c:406: }
      0003F5 22               [24] 1802 	ret
                                   1803 ;------------------------------------------------------------
                                   1804 ;Allocation info for local variables in function 'gpio_setup'
                                   1805 ;------------------------------------------------------------
                                   1806 ;	src/main.c:408: void gpio_setup()
                                   1807 ;	-----------------------------------------
                                   1808 ;	 function gpio_setup
                                   1809 ;	-----------------------------------------
      0003F6                       1810 _gpio_setup:
                                   1811 ;	src/main.c:427: Set_All_GPIO_Quasi_Mode;
      0003F6 75 B1 00         [24] 1812 	mov	_P0M1,#0x00
      0003F9 75 B2 00         [24] 1813 	mov	_P0M2,#0x00
      0003FC 75 B3 00         [24] 1814 	mov	_P1M1,#0x00
      0003FF 75 B4 00         [24] 1815 	mov	_P1M2,#0x00
      000402 75 AC 00         [24] 1816 	mov	_P3M1,#0x00
      000405 75 AD 00         [24] 1817 	mov	_P3M2,#0x00
                                   1818 ;	src/main.c:429: P15_Input_Mode;
      000408 43 B3 20         [24] 1819 	orl	_P1M1,#0x20
      00040B 53 B4 DF         [24] 1820 	anl	_P1M2,#0xdf
                                   1821 ;	src/main.c:430: P02_Input_Mode;
      00040E 43 B1 04         [24] 1822 	orl	_P0M1,#0x04
      000411 53 B2 FB         [24] 1823 	anl	_P0M2,#0xfb
                                   1824 ;	src/main.c:431: P07_Input_Mode;
      000414 43 B1 80         [24] 1825 	orl	_P0M1,#0x80
      000417 53 B2 7F         [24] 1826 	anl	_P0M2,#0x7f
                                   1827 ;	src/main.c:433: P16_PushPull_Mode;
      00041A 53 B3 BF         [24] 1828 	anl	_P1M1,#0xbf
      00041D 43 B4 40         [24] 1829 	orl	_P1M2,#0x40
                                   1830 ;	src/main.c:434: P13_PushPull_Mode;
      000420 53 B3 F7         [24] 1831 	anl	_P1M1,#0xf7
      000423 43 B4 08         [24] 1832 	orl	_P1M2,#0x08
                                   1833 ;	src/main.c:435: P14_PushPull_Mode;
      000426 53 B3 EF         [24] 1834 	anl	_P1M1,#0xef
      000429 43 B4 10         [24] 1835 	orl	_P1M2,#0x10
                                   1836 ;	src/main.c:436: P12_PushPull_Mode;
      00042C 53 B3 FB         [24] 1837 	anl	_P1M1,#0xfb
      00042F 43 B4 04         [24] 1838 	orl	_P1M2,#0x04
                                   1839 ;	src/main.c:437: P11_PushPull_Mode;
      000432 53 B3 FD         [24] 1840 	anl	_P1M1,#0xfd
      000435 43 B4 02         [24] 1841 	orl	_P1M2,#0x02
                                   1842 ;	src/main.c:438: P10_PushPull_Mode;
      000438 53 B3 FE         [24] 1843 	anl	_P1M1,#0xfe
      00043B 43 B4 01         [24] 1844 	orl	_P1M2,#0x01
                                   1845 ;	src/main.c:439: P00_PushPull_Mode;
      00043E 53 B1 FE         [24] 1846 	anl	_P0M1,#0xfe
      000441 43 B2 01         [24] 1847 	orl	_P0M2,#0x01
                                   1848 ;	src/main.c:440: P01_PushPull_Mode;
      000444 53 B1 FD         [24] 1849 	anl	_P0M1,#0xfd
      000447 43 B2 02         [24] 1850 	orl	_P0M2,#0x02
                                   1851 ;	src/main.c:441: P04_PushPull_Mode;
      00044A 53 B1 EF         [24] 1852 	anl	_P0M1,#0xef
      00044D 43 B2 10         [24] 1853 	orl	_P0M2,#0x10
                                   1854 ;	src/main.c:442: P03_PushPull_Mode;
      000450 53 B1 F7         [24] 1855 	anl	_P0M1,#0xf7
      000453 43 B2 08         [24] 1856 	orl	_P0M2,#0x08
                                   1857 ;	src/main.c:444: UART_TX = 0;
                                   1858 ;	assignBit
      000456 C2 96            [12] 1859 	clr	_P16
                                   1860 ;	src/main.c:445: LED_B = 1;
                                   1861 ;	assignBit
      000458 D2 92            [12] 1862 	setb	_P12
                                   1863 ;	src/main.c:446: LED_G = 1;
                                   1864 ;	assignBit
      00045A D2 93            [12] 1865 	setb	_P13
                                   1866 ;	src/main.c:447: LED_R = 1;
                                   1867 ;	assignBit
      00045C D2 94            [12] 1868 	setb	_P14
                                   1869 ;	src/main.c:449: MOTOR_CW = 0;
                                   1870 ;	assignBit
      00045E C2 80            [12] 1871 	clr	_P00
                                   1872 ;	src/main.c:450: MOTOR_CCW = 0;
                                   1873 ;	assignBit
      000460 C2 81            [12] 1874 	clr	_P01
                                   1875 ;	src/main.c:451: SEL_RX_POL = 0;
                                   1876 ;	assignBit
      000462 C2 84            [12] 1877 	clr	_P04
                                   1878 ;	src/main.c:452: PWR_OUT = 0;
                                   1879 ;	assignBit
      000464 C2 83            [12] 1880 	clr	_P03
                                   1881 ;	src/main.c:453: }
      000466 22               [24] 1882 	ret
                                   1883 ;------------------------------------------------------------
                                   1884 ;Allocation info for local variables in function 'state_switches'
                                   1885 ;------------------------------------------------------------
                                   1886 ;su8PrevSW                 Allocated with name '_state_switches_su8PrevSW_65536_96'
                                   1887 ;apu8SwNum                 Allocated with name '_state_switches_PARM_2'
                                   1888 ;au8SW                     Allocated to registers r7 
                                   1889 ;i                         Allocated to registers r2 
                                   1890 ;u8Result                  Allocated to registers r6 
                                   1891 ;------------------------------------------------------------
                                   1892 ;	src/main.c:471: UINT8 state_switches(UINT8 au8SW, UINT8 *apu8SwNum)
                                   1893 ;	-----------------------------------------
                                   1894 ;	 function state_switches
                                   1895 ;	-----------------------------------------
      000467                       1896 _state_switches:
      000467 AF 82            [24] 1897 	mov	r7,dpl
                                   1898 ;	src/main.c:476: UINT8 u8Result = SW_NONE;
      000469 7E 04            [12] 1899 	mov	r6,#0x04
                                   1900 ;	src/main.c:477: if (su8PrevSW == au8SW) {
      00046B EF               [12] 1901 	mov	a,r7
      00046C B5*07 14         [24] 1902 	cjne	a,_state_switches_su8PrevSW_65536_96,00102$
                                   1903 ;	src/main.c:478: *apu8SwNum = 0;
      00046F AB*00            [24] 1904 	mov	r3,_state_switches_PARM_2
      000471 AC*01            [24] 1905 	mov	r4,(_state_switches_PARM_2 + 1)
      000473 AD*02            [24] 1906 	mov	r5,(_state_switches_PARM_2 + 2)
      000475 8B 82            [24] 1907 	mov	dpl,r3
      000477 8C 83            [24] 1908 	mov	dph,r4
      000479 8D F0            [24] 1909 	mov	b,r5
      00047B E4               [12] 1910 	clr	a
      00047C 12r00r00         [24] 1911 	lcall	__gptrput
                                   1912 ;	src/main.c:479: return SW_NONE;
      00047F 75 82 04         [24] 1913 	mov	dpl,#0x04
      000482 22               [24] 1914 	ret
      000483                       1915 00102$:
                                   1916 ;	src/main.c:487: *apu8SwNum = 0;
      000483 AB*00            [24] 1917 	mov	r3,_state_switches_PARM_2
      000485 AC*01            [24] 1918 	mov	r4,(_state_switches_PARM_2 + 1)
      000487 AD*02            [24] 1919 	mov	r5,(_state_switches_PARM_2 + 2)
      000489 8B 82            [24] 1920 	mov	dpl,r3
      00048B 8C 83            [24] 1921 	mov	dph,r4
      00048D 8D F0            [24] 1922 	mov	b,r5
      00048F E4               [12] 1923 	clr	a
      000490 12r00r00         [24] 1924 	lcall	__gptrput
                                   1925 ;	src/main.c:489: for (i=0;i<5;i++) {
      000493 7A 00            [12] 1926 	mov	r2,#0x00
      000495                       1927 00113$:
                                   1928 ;	src/main.c:490: switch((su8PrevSW>>i)&1) {
      000495 8A F0            [24] 1929 	mov	b,r2
      000497 05 F0            [12] 1930 	inc	b
      000499 E5*07            [12] 1931 	mov	a,_state_switches_su8PrevSW_65536_96
      00049B 80 02            [24] 1932 	sjmp	00153$
      00049D                       1933 00152$:
      00049D C3               [12] 1934 	clr	c
      00049E 13               [12] 1935 	rrc	a
      00049F                       1936 00153$:
      00049F D5 F0 FB         [24] 1937 	djnz	b,00152$
      0004A2 F8               [12] 1938 	mov	r0,a
      0004A3 53 00 01         [24] 1939 	anl	ar0,#0x01
      0004A6 79 00            [12] 1940 	mov	r1,#0x00
      0004A8 B8 00 05         [24] 1941 	cjne	r0,#0x00,00154$
      0004AB B9 00 02         [24] 1942 	cjne	r1,#0x00,00154$
      0004AE 80 54            [24] 1943 	sjmp	00107$
      0004B0                       1944 00154$:
      0004B0 B8 01 05         [24] 1945 	cjne	r0,#0x01,00155$
      0004B3 B9 00 02         [24] 1946 	cjne	r1,#0x00,00155$
      0004B6 80 03            [24] 1947 	sjmp	00156$
      0004B8                       1948 00155$:
      0004B8 02r05r4E         [24] 1949 	ljmp	00114$
      0004BB                       1950 00156$:
                                   1951 ;	src/main.c:492: switch((au8SW>>i)&1) {
      0004BB 8A F0            [24] 1952 	mov	b,r2
      0004BD 05 F0            [12] 1953 	inc	b
      0004BF EF               [12] 1954 	mov	a,r7
      0004C0 80 02            [24] 1955 	sjmp	00158$
      0004C2                       1956 00157$:
      0004C2 C3               [12] 1957 	clr	c
      0004C3 13               [12] 1958 	rrc	a
      0004C4                       1959 00158$:
      0004C4 D5 F0 FB         [24] 1960 	djnz	b,00157$
      0004C7 F8               [12] 1961 	mov	r0,a
      0004C8 53 00 01         [24] 1962 	anl	ar0,#0x01
      0004CB 79 00            [12] 1963 	mov	r1,#0x00
      0004CD B8 00 05         [24] 1964 	cjne	r0,#0x00,00159$
      0004D0 B9 00 02         [24] 1965 	cjne	r1,#0x00,00159$
      0004D3 80 03            [24] 1966 	sjmp	00160$
      0004D5                       1967 00159$:
      0004D5 02r05r4E         [24] 1968 	ljmp	00114$
      0004D8                       1969 00160$:
                                   1970 ;	src/main.c:496: su8PrevSW = au8SW;
      0004D8 8F*07            [24] 1971 	mov	_state_switches_su8PrevSW_65536_96,r7
                                   1972 ;	src/main.c:497: *apu8SwNum |= 1<<i;
      0004DA 8B 82            [24] 1973 	mov	dpl,r3
      0004DC 8C 83            [24] 1974 	mov	dph,r4
      0004DE 8D F0            [24] 1975 	mov	b,r5
      0004E0 12r00r00         [24] 1976 	lcall	__gptrget
      0004E3 F9               [12] 1977 	mov	r1,a
      0004E4 8A 00            [24] 1978 	mov	ar0,r2
      0004E6 88 F0            [24] 1979 	mov	b,r0
      0004E8 05 F0            [12] 1980 	inc	b
      0004EA 74 01            [12] 1981 	mov	a,#0x01
      0004EC 80 02            [24] 1982 	sjmp	00163$
      0004EE                       1983 00161$:
      0004EE 25 E0            [12] 1984 	add	a,acc
      0004F0                       1985 00163$:
      0004F0 D5 F0 FB         [24] 1986 	djnz	b,00161$
      0004F3 F8               [12] 1987 	mov	r0,a
      0004F4 42 01            [12] 1988 	orl	ar1,a
      0004F6 8B 82            [24] 1989 	mov	dpl,r3
      0004F8 8C 83            [24] 1990 	mov	dph,r4
      0004FA 8D F0            [24] 1991 	mov	b,r5
      0004FC E9               [12] 1992 	mov	a,r1
      0004FD 12r00r00         [24] 1993 	lcall	__gptrput
                                   1994 ;	src/main.c:498: u8Result = SW_OFF;
      000500 7E 00            [12] 1995 	mov	r6,#0x00
                                   1996 ;	src/main.c:502: break;
                                   1997 ;	src/main.c:503: case SW_OFF :
      000502 80 4A            [24] 1998 	sjmp	00114$
      000504                       1999 00107$:
                                   2000 ;	src/main.c:504: switch((au8SW>>i)&1) {
      000504 8A F0            [24] 2001 	mov	b,r2
      000506 05 F0            [12] 2002 	inc	b
      000508 EF               [12] 2003 	mov	a,r7
      000509 80 02            [24] 2004 	sjmp	00165$
      00050B                       2005 00164$:
      00050B C3               [12] 2006 	clr	c
      00050C 13               [12] 2007 	rrc	a
      00050D                       2008 00165$:
      00050D D5 F0 FB         [24] 2009 	djnz	b,00164$
      000510 F8               [12] 2010 	mov	r0,a
      000511 53 00 01         [24] 2011 	anl	ar0,#0x01
      000514 79 00            [12] 2012 	mov	r1,#0x00
      000516 B8 00 05         [24] 2013 	cjne	r0,#0x00,00166$
      000519 B9 00 02         [24] 2014 	cjne	r1,#0x00,00166$
      00051C 80 30            [24] 2015 	sjmp	00114$
      00051E                       2016 00166$:
      00051E B8 01 2D         [24] 2017 	cjne	r0,#0x01,00114$
      000521 B9 00 2A         [24] 2018 	cjne	r1,#0x00,00114$
                                   2019 ;	src/main.c:506: su8PrevSW = au8SW;
      000524 8F*07            [24] 2020 	mov	_state_switches_su8PrevSW_65536_96,r7
                                   2021 ;	src/main.c:507: *apu8SwNum |= 1<<i;
      000526 8B 82            [24] 2022 	mov	dpl,r3
      000528 8C 83            [24] 2023 	mov	dph,r4
      00052A 8D F0            [24] 2024 	mov	b,r5
      00052C 12r00r00         [24] 2025 	lcall	__gptrget
      00052F F9               [12] 2026 	mov	r1,a
      000530 8A 00            [24] 2027 	mov	ar0,r2
      000532 88 F0            [24] 2028 	mov	b,r0
      000534 05 F0            [12] 2029 	inc	b
      000536 74 01            [12] 2030 	mov	a,#0x01
      000538 80 02            [24] 2031 	sjmp	00171$
      00053A                       2032 00169$:
      00053A 25 E0            [12] 2033 	add	a,acc
      00053C                       2034 00171$:
      00053C D5 F0 FB         [24] 2035 	djnz	b,00169$
      00053F F8               [12] 2036 	mov	r0,a
      000540 42 01            [12] 2037 	orl	ar1,a
      000542 8B 82            [24] 2038 	mov	dpl,r3
      000544 8C 83            [24] 2039 	mov	dph,r4
      000546 8D F0            [24] 2040 	mov	b,r5
      000548 E9               [12] 2041 	mov	a,r1
      000549 12r00r00         [24] 2042 	lcall	__gptrput
                                   2043 ;	src/main.c:508: u8Result = SW_ON;
      00054C 7E 01            [12] 2044 	mov	r6,#0x01
                                   2045 ;	src/main.c:516: }
      00054E                       2046 00114$:
                                   2047 ;	src/main.c:489: for (i=0;i<5;i++) {
      00054E 0A               [12] 2048 	inc	r2
      00054F BA 05 00         [24] 2049 	cjne	r2,#0x05,00172$
      000552                       2050 00172$:
      000552 50 03            [24] 2051 	jnc	00173$
      000554 02r04r95         [24] 2052 	ljmp	00113$
      000557                       2053 00173$:
                                   2054 ;	src/main.c:520: return u8Result;
      000557 8E 82            [24] 2055 	mov	dpl,r6
                                   2056 ;	src/main.c:608: }
      000559 22               [24] 2057 	ret
                                   2058 ;------------------------------------------------------------
                                   2059 ;Allocation info for local variables in function 'ctrl_rgbled_motor'
                                   2060 ;------------------------------------------------------------
                                   2061 ;u8RxUART                  Allocated to registers r7 
                                   2062 ;------------------------------------------------------------
                                   2063 ;	src/main.c:610: void ctrl_rgbled_motor(UINT8 u8RxUART)
                                   2064 ;	-----------------------------------------
                                   2065 ;	 function ctrl_rgbled_motor
                                   2066 ;	-----------------------------------------
      00055A                       2067 _ctrl_rgbled_motor:
                                   2068 ;	src/main.c:614: if (u8RxUART) {
      00055A E5 82            [12] 2069 	mov	a,dpl
      00055C FF               [12] 2070 	mov	r7,a
      00055D 60 54            [24] 2071 	jz	00117$
                                   2072 ;	src/main.c:615: if (u8RxUART&(1<<0)) {
      00055F EF               [12] 2073 	mov	a,r7
      000560 30 E0 02         [24] 2074 	jnb	acc.0,00102$
                                   2075 ;	src/main.c:616: TOGGLE(LED_R);
      000563 B2 94            [12] 2076 	cpl	_P14
      000565                       2077 00102$:
                                   2078 ;	src/main.c:619: if (u8RxUART&(1<<1)) {
      000565 EF               [12] 2079 	mov	a,r7
      000566 30 E1 02         [24] 2080 	jnb	acc.1,00104$
                                   2081 ;	src/main.c:620: TOGGLE(LED_G);
      000569 B2 93            [12] 2082 	cpl	_P13
      00056B                       2083 00104$:
                                   2084 ;	src/main.c:623: if (u8RxUART&(1<<2)) {
      00056B EF               [12] 2085 	mov	a,r7
      00056C 30 E2 02         [24] 2086 	jnb	acc.2,00106$
                                   2087 ;	src/main.c:624: TOGGLE(LED_B);
      00056F B2 92            [12] 2088 	cpl	_P12
      000571                       2089 00106$:
                                   2090 ;	src/main.c:627: if (u8RxUART&(1<<3)) {
      000571 EF               [12] 2091 	mov	a,r7
      000572 30 E3 48         [24] 2092 	jnb	acc.3,00119$
                                   2093 ;	src/main.c:628: switch(gu8MotorState) {
      000575 90r00r14         [24] 2094 	mov	dptr,#_gu8MotorState
      000578 E0               [24] 2095 	movx	a,@dptr
      000579 FF               [12] 2096 	mov  r7,a
      00057A 24 FC            [12] 2097 	add	a,#0xff - 0x03
      00057C 40 24            [24] 2098 	jc	00111$
      00057E EF               [12] 2099 	mov	a,r7
      00057F 2F               [12] 2100 	add	a,r7
                                   2101 ;	src/main.c:629: case 0 :
      000580 90r05r84         [24] 2102 	mov	dptr,#00155$
      000583 73               [24] 2103 	jmp	@a+dptr
      000584                       2104 00155$:
      000584 80 06            [24] 2105 	sjmp	00107$
      000586 80 0A            [24] 2106 	sjmp	00108$
      000588 80 0E            [24] 2107 	sjmp	00109$
      00058A 80 12            [24] 2108 	sjmp	00110$
      00058C                       2109 00107$:
                                   2110 ;	src/main.c:630: MOTOR_CCW = 0;
                                   2111 ;	assignBit
      00058C C2 81            [12] 2112 	clr	_P01
                                   2113 ;	src/main.c:631: MOTOR_CW = 0 ;
                                   2114 ;	assignBit
      00058E C2 80            [12] 2115 	clr	_P00
                                   2116 ;	src/main.c:632: break;
                                   2117 ;	src/main.c:633: case 1 :
      000590 80 10            [24] 2118 	sjmp	00111$
      000592                       2119 00108$:
                                   2120 ;	src/main.c:634: MOTOR_CCW = 1;
                                   2121 ;	assignBit
      000592 D2 81            [12] 2122 	setb	_P01
                                   2123 ;	src/main.c:635: MOTOR_CW = 0 ;
                                   2124 ;	assignBit
      000594 C2 80            [12] 2125 	clr	_P00
                                   2126 ;	src/main.c:636: break;
                                   2127 ;	src/main.c:637: case 2 :
      000596 80 0A            [24] 2128 	sjmp	00111$
      000598                       2129 00109$:
                                   2130 ;	src/main.c:638: MOTOR_CCW = 1;
                                   2131 ;	assignBit
      000598 D2 81            [12] 2132 	setb	_P01
                                   2133 ;	src/main.c:639: MOTOR_CW = 1 ;
                                   2134 ;	assignBit
      00059A D2 80            [12] 2135 	setb	_P00
                                   2136 ;	src/main.c:640: break;
                                   2137 ;	src/main.c:641: case 3 :
      00059C 80 04            [24] 2138 	sjmp	00111$
      00059E                       2139 00110$:
                                   2140 ;	src/main.c:642: MOTOR_CCW = 0;
                                   2141 ;	assignBit
      00059E C2 81            [12] 2142 	clr	_P01
                                   2143 ;	src/main.c:643: MOTOR_CW = 1 ;
                                   2144 ;	assignBit
      0005A0 D2 80            [12] 2145 	setb	_P00
                                   2146 ;	src/main.c:645: }
      0005A2                       2147 00111$:
                                   2148 ;	src/main.c:646: gu8MotorState ++;
      0005A2 90r00r14         [24] 2149 	mov	dptr,#_gu8MotorState
      0005A5 EF               [12] 2150 	mov	a,r7
      0005A6 04               [12] 2151 	inc	a
      0005A7 F0               [24] 2152 	movx	@dptr,a
                                   2153 ;	src/main.c:647: if (gu8MotorState == 4) {
      0005A8 E0               [24] 2154 	movx	a,@dptr
      0005A9 FF               [12] 2155 	mov	r7,a
      0005AA BF 04 10         [24] 2156 	cjne	r7,#0x04,00119$
                                   2157 ;	src/main.c:648: gu8MotorState = 0;
      0005AD 90r00r14         [24] 2158 	mov	dptr,#_gu8MotorState
      0005B0 E4               [12] 2159 	clr	a
      0005B1 F0               [24] 2160 	movx	@dptr,a
      0005B2 22               [24] 2161 	ret
      0005B3                       2162 00117$:
                                   2163 ;	src/main.c:653: LED_R = LED_OFF;
                                   2164 ;	assignBit
      0005B3 D2 94            [12] 2165 	setb	_P14
                                   2166 ;	src/main.c:654: LED_G = LED_OFF;
                                   2167 ;	assignBit
      0005B5 D2 93            [12] 2168 	setb	_P13
                                   2169 ;	src/main.c:655: LED_B = LED_OFF;
                                   2170 ;	assignBit
      0005B7 D2 92            [12] 2171 	setb	_P12
                                   2172 ;	src/main.c:656: MOTOR_CCW = 0;
                                   2173 ;	assignBit
      0005B9 C2 81            [12] 2174 	clr	_P01
                                   2175 ;	src/main.c:657: MOTOR_CW = 0 ;
                                   2176 ;	assignBit
      0005BB C2 80            [12] 2177 	clr	_P00
      0005BD                       2178 00119$:
                                   2179 ;	src/main.c:659: }
      0005BD 22               [24] 2180 	ret
                                   2181 ;------------------------------------------------------------
                                   2182 ;Allocation info for local variables in function 'chk_my_addr'
                                   2183 ;------------------------------------------------------------
                                   2184 ;au8RxData                 Allocated with name '_chk_my_addr_PARM_2'
                                   2185 ;au8MyAddr                 Allocated to registers r7 
                                   2186 ;------------------------------------------------------------
                                   2187 ;	src/main.c:661: UINT8 chk_my_addr(UINT8 au8MyAddr, UINT8 au8RxData)
                                   2188 ;	-----------------------------------------
                                   2189 ;	 function chk_my_addr
                                   2190 ;	-----------------------------------------
      0005BE                       2191 _chk_my_addr:
      0005BE AF 82            [24] 2192 	mov	r7,dpl
                                   2193 ;	src/main.c:663: if ( (au8RxData>>4) == (au8MyAddr&0x0F)) {
      0005C0 E5*00            [12] 2194 	mov	a,_chk_my_addr_PARM_2
      0005C2 C4               [12] 2195 	swap	a
      0005C3 54 0F            [12] 2196 	anl	a,#0x0f
      0005C5 FE               [12] 2197 	mov	r6,a
      0005C6 53 07 0F         [24] 2198 	anl	ar7,#0x0f
      0005C9 E4               [12] 2199 	clr	a
      0005CA FD               [12] 2200 	mov	r5,a
      0005CB FC               [12] 2201 	mov	r4,a
      0005CC EE               [12] 2202 	mov	a,r6
      0005CD B5 07 08         [24] 2203 	cjne	a,ar7,00102$
      0005D0 EC               [12] 2204 	mov	a,r4
      0005D1 B5 05 04         [24] 2205 	cjne	a,ar5,00102$
                                   2206 ;	src/main.c:664: return 1;
      0005D4 75 82 01         [24] 2207 	mov	dpl,#0x01
      0005D7 22               [24] 2208 	ret
      0005D8                       2209 00102$:
                                   2210 ;	src/main.c:666: return 0;
      0005D8 75 82 00         [24] 2211 	mov	dpl,#0x00
                                   2212 ;	src/main.c:667: }
      0005DB 22               [24] 2213 	ret
                                   2214 ;------------------------------------------------------------
                                   2215 ;Allocation info for local variables in function 'process_my_packet'
                                   2216 ;------------------------------------------------------------
                                   2217 ;apstLineFiPkt             Allocated to registers r5 r6 r7 
                                   2218 ;sloc0                     Allocated with name '_process_my_packet_sloc0_1_0'
                                   2219 ;------------------------------------------------------------
                                   2220 ;	src/main.c:669: void process_my_packet(linefi_packet_t * apstLineFiPkt)
                                   2221 ;	-----------------------------------------
                                   2222 ;	 function process_my_packet
                                   2223 ;	-----------------------------------------
      0005DC                       2224 _process_my_packet:
      0005DC AD 82            [24] 2225 	mov	r5,dpl
      0005DE AE 83            [24] 2226 	mov	r6,dph
      0005E0 AF F0            [24] 2227 	mov	r7,b
                                   2228 ;	src/main.c:671: switch(apstLineFiPkt->u8Type) {
      0005E2 74 01            [12] 2229 	mov	a,#0x01
      0005E4 2D               [12] 2230 	add	a,r5
      0005E5 FA               [12] 2231 	mov	r2,a
      0005E6 E4               [12] 2232 	clr	a
      0005E7 3E               [12] 2233 	addc	a,r6
      0005E8 FB               [12] 2234 	mov	r3,a
      0005E9 8F 04            [24] 2235 	mov	ar4,r7
      0005EB 8A 82            [24] 2236 	mov	dpl,r2
      0005ED 8B 83            [24] 2237 	mov	dph,r3
      0005EF 8C F0            [24] 2238 	mov	b,r4
      0005F1 12r00r00         [24] 2239 	lcall	__gptrget
      0005F4 FC               [12] 2240 	mov  r4,a
      0005F5 24 F9            [12] 2241 	add	a,#0xff - 0x06
      0005F7 50 01            [24] 2242 	jnc	00116$
      0005F9 22               [24] 2243 	ret
      0005FA                       2244 00116$:
      0005FA EC               [12] 2245 	mov	a,r4
      0005FB 2C               [12] 2246 	add	a,r4
      0005FC 2C               [12] 2247 	add	a,r4
      0005FD 90r06r01         [24] 2248 	mov	dptr,#00117$
      000600 73               [24] 2249 	jmp	@a+dptr
      000601                       2250 00117$:
      000601 02r07r09         [24] 2251 	ljmp	00109$
      000604 02r07r09         [24] 2252 	ljmp	00109$
      000607 02r07r09         [24] 2253 	ljmp	00109$
      00060A 02r07r09         [24] 2254 	ljmp	00109$
      00060D 02r06r16         [24] 2255 	ljmp	00105$
      000610 02r06r9A         [24] 2256 	ljmp	00106$
      000613 02r06rF0         [24] 2257 	ljmp	00107$
                                   2258 ;	src/main.c:680: case Type_SetLED :
      000616                       2259 00105$:
                                   2260 ;	src/main.c:681: LED_R = apstLineFiPkt->pu8Data[0];
      000616 74 05            [12] 2261 	mov	a,#0x05
      000618 2D               [12] 2262 	add	a,r5
      000619 F5*08            [12] 2263 	mov	_process_my_packet_sloc0_1_0,a
      00061B E4               [12] 2264 	clr	a
      00061C 3E               [12] 2265 	addc	a,r6
      00061D F5*09            [12] 2266 	mov	(_process_my_packet_sloc0_1_0 + 1),a
      00061F 8F*0A            [24] 2267 	mov	(_process_my_packet_sloc0_1_0 + 2),r7
      000621 85*08 82         [24] 2268 	mov	dpl,_process_my_packet_sloc0_1_0
      000624 85*09 83         [24] 2269 	mov	dph,(_process_my_packet_sloc0_1_0 + 1)
      000627 85*0A F0         [24] 2270 	mov	b,(_process_my_packet_sloc0_1_0 + 2)
      00062A 12r00r00         [24] 2271 	lcall	__gptrget
      00062D F8               [12] 2272 	mov	r0,a
      00062E A3               [24] 2273 	inc	dptr
      00062F 12r00r00         [24] 2274 	lcall	__gptrget
      000632 F9               [12] 2275 	mov	r1,a
      000633 A3               [24] 2276 	inc	dptr
      000634 12r00r00         [24] 2277 	lcall	__gptrget
      000637 FC               [12] 2278 	mov	r4,a
      000638 88 82            [24] 2279 	mov	dpl,r0
      00063A 89 83            [24] 2280 	mov	dph,r1
      00063C 8C F0            [24] 2281 	mov	b,r4
      00063E 12r00r00         [24] 2282 	lcall	__gptrget
                                   2283 ;	assignBit
      000641 24 FF            [12] 2284 	add	a,#0xff
      000643 92 94            [24] 2285 	mov	_P14,c
                                   2286 ;	src/main.c:682: LED_G = apstLineFiPkt->pu8Data[1];
      000645 85*08 82         [24] 2287 	mov	dpl,_process_my_packet_sloc0_1_0
      000648 85*09 83         [24] 2288 	mov	dph,(_process_my_packet_sloc0_1_0 + 1)
      00064B 85*0A F0         [24] 2289 	mov	b,(_process_my_packet_sloc0_1_0 + 2)
      00064E 12r00r00         [24] 2290 	lcall	__gptrget
      000651 FA               [12] 2291 	mov	r2,a
      000652 A3               [24] 2292 	inc	dptr
      000653 12r00r00         [24] 2293 	lcall	__gptrget
      000656 FB               [12] 2294 	mov	r3,a
      000657 A3               [24] 2295 	inc	dptr
      000658 12r00r00         [24] 2296 	lcall	__gptrget
      00065B FC               [12] 2297 	mov	r4,a
      00065C 0A               [12] 2298 	inc	r2
      00065D BA 00 01         [24] 2299 	cjne	r2,#0x00,00118$
      000660 0B               [12] 2300 	inc	r3
      000661                       2301 00118$:
      000661 8A 82            [24] 2302 	mov	dpl,r2
      000663 8B 83            [24] 2303 	mov	dph,r3
      000665 8C F0            [24] 2304 	mov	b,r4
      000667 12r00r00         [24] 2305 	lcall	__gptrget
                                   2306 ;	assignBit
      00066A 24 FF            [12] 2307 	add	a,#0xff
      00066C 92 93            [24] 2308 	mov	_P13,c
                                   2309 ;	src/main.c:683: LED_B = apstLineFiPkt->pu8Data[2];
      00066E 85*08 82         [24] 2310 	mov	dpl,_process_my_packet_sloc0_1_0
      000671 85*09 83         [24] 2311 	mov	dph,(_process_my_packet_sloc0_1_0 + 1)
      000674 85*0A F0         [24] 2312 	mov	b,(_process_my_packet_sloc0_1_0 + 2)
      000677 12r00r00         [24] 2313 	lcall	__gptrget
      00067A FA               [12] 2314 	mov	r2,a
      00067B A3               [24] 2315 	inc	dptr
      00067C 12r00r00         [24] 2316 	lcall	__gptrget
      00067F FB               [12] 2317 	mov	r3,a
      000680 A3               [24] 2318 	inc	dptr
      000681 12r00r00         [24] 2319 	lcall	__gptrget
      000684 FC               [12] 2320 	mov	r4,a
      000685 74 02            [12] 2321 	mov	a,#0x02
      000687 2A               [12] 2322 	add	a,r2
      000688 FA               [12] 2323 	mov	r2,a
      000689 E4               [12] 2324 	clr	a
      00068A 3B               [12] 2325 	addc	a,r3
      00068B FB               [12] 2326 	mov	r3,a
      00068C 8A 82            [24] 2327 	mov	dpl,r2
      00068E 8B 83            [24] 2328 	mov	dph,r3
      000690 8C F0            [24] 2329 	mov	b,r4
      000692 12r00r00         [24] 2330 	lcall	__gptrget
                                   2331 ;	assignBit
      000695 24 FF            [12] 2332 	add	a,#0xff
      000697 92 92            [24] 2333 	mov	_P12,c
                                   2334 ;	src/main.c:684: break;
                                   2335 ;	src/main.c:685: case Type_CtrlMotor :
      000699 22               [24] 2336 	ret
      00069A                       2337 00106$:
                                   2338 ;	src/main.c:687: MOTOR_CW = apstLineFiPkt->pu8Data[1];
      00069A 74 05            [12] 2339 	mov	a,#0x05
      00069C 2D               [12] 2340 	add	a,r5
      00069D FD               [12] 2341 	mov	r5,a
      00069E E4               [12] 2342 	clr	a
      00069F 3E               [12] 2343 	addc	a,r6
      0006A0 FE               [12] 2344 	mov	r6,a
      0006A1 8D 82            [24] 2345 	mov	dpl,r5
      0006A3 8E 83            [24] 2346 	mov	dph,r6
      0006A5 8F F0            [24] 2347 	mov	b,r7
      0006A7 12r00r00         [24] 2348 	lcall	__gptrget
      0006AA FA               [12] 2349 	mov	r2,a
      0006AB A3               [24] 2350 	inc	dptr
      0006AC 12r00r00         [24] 2351 	lcall	__gptrget
      0006AF FB               [12] 2352 	mov	r3,a
      0006B0 A3               [24] 2353 	inc	dptr
      0006B1 12r00r00         [24] 2354 	lcall	__gptrget
      0006B4 FC               [12] 2355 	mov	r4,a
      0006B5 0A               [12] 2356 	inc	r2
      0006B6 BA 00 01         [24] 2357 	cjne	r2,#0x00,00119$
      0006B9 0B               [12] 2358 	inc	r3
      0006BA                       2359 00119$:
      0006BA 8A 82            [24] 2360 	mov	dpl,r2
      0006BC 8B 83            [24] 2361 	mov	dph,r3
      0006BE 8C F0            [24] 2362 	mov	b,r4
      0006C0 12r00r00         [24] 2363 	lcall	__gptrget
                                   2364 ;	assignBit
      0006C3 24 FF            [12] 2365 	add	a,#0xff
      0006C5 92 80            [24] 2366 	mov	_P00,c
                                   2367 ;	src/main.c:688: MOTOR_CCW = apstLineFiPkt->pu8Data[2];
      0006C7 8D 82            [24] 2368 	mov	dpl,r5
      0006C9 8E 83            [24] 2369 	mov	dph,r6
      0006CB 8F F0            [24] 2370 	mov	b,r7
      0006CD 12r00r00         [24] 2371 	lcall	__gptrget
      0006D0 FD               [12] 2372 	mov	r5,a
      0006D1 A3               [24] 2373 	inc	dptr
      0006D2 12r00r00         [24] 2374 	lcall	__gptrget
      0006D5 FE               [12] 2375 	mov	r6,a
      0006D6 A3               [24] 2376 	inc	dptr
      0006D7 12r00r00         [24] 2377 	lcall	__gptrget
      0006DA FF               [12] 2378 	mov	r7,a
      0006DB 74 02            [12] 2379 	mov	a,#0x02
      0006DD 2D               [12] 2380 	add	a,r5
      0006DE FD               [12] 2381 	mov	r5,a
      0006DF E4               [12] 2382 	clr	a
      0006E0 3E               [12] 2383 	addc	a,r6
      0006E1 FE               [12] 2384 	mov	r6,a
      0006E2 8D 82            [24] 2385 	mov	dpl,r5
      0006E4 8E 83            [24] 2386 	mov	dph,r6
      0006E6 8F F0            [24] 2387 	mov	b,r7
      0006E8 12r00r00         [24] 2388 	lcall	__gptrget
                                   2389 ;	assignBit
      0006EB 24 FF            [12] 2390 	add	a,#0xff
      0006ED 92 81            [24] 2391 	mov	_P01,c
                                   2392 ;	src/main.c:689: break;
                                   2393 ;	src/main.c:690: case Type_ReadAddr :
      0006EF 22               [24] 2394 	ret
      0006F0                       2395 00107$:
                                   2396 ;	src/main.c:691: printf_fast_f("My address is 0x%x\r\n", gu8MyAddr);
      0006F0 AE*00            [24] 2397 	mov	r6,_gu8MyAddr
      0006F2 7F 00            [12] 2398 	mov	r7,#0x00
      0006F4 C0 06            [24] 2399 	push	ar6
      0006F6 C0 07            [24] 2400 	push	ar7
      0006F8 74rD2            [12] 2401 	mov	a,#___str_23
      0006FA C0 E0            [24] 2402 	push	acc
      0006FC 74s01            [12] 2403 	mov	a,#(___str_23 >> 8)
      0006FE C0 E0            [24] 2404 	push	acc
      000700 12r00r00         [24] 2405 	lcall	_printf_fast_f
      000703 E5 81            [12] 2406 	mov	a,sp
      000705 24 FC            [12] 2407 	add	a,#0xfc
      000707 F5 81            [12] 2408 	mov	sp,a
                                   2409 ;	src/main.c:693: }
      000709                       2410 00109$:
                                   2411 ;	src/main.c:694: }
      000709 22               [24] 2412 	ret
                                   2413 ;------------------------------------------------------------
                                   2414 ;Allocation info for local variables in function 'process_all_packet'
                                   2415 ;------------------------------------------------------------
                                   2416 ;apstLineFiPkt             Allocated to registers r5 r6 r7 
                                   2417 ;------------------------------------------------------------
                                   2418 ;	src/main.c:696: void process_all_packet(linefi_packet_t * apstLineFiPkt)
                                   2419 ;	-----------------------------------------
                                   2420 ;	 function process_all_packet
                                   2421 ;	-----------------------------------------
      00070A                       2422 _process_all_packet:
      00070A AD 82            [24] 2423 	mov	r5,dpl
      00070C AE 83            [24] 2424 	mov	r6,dph
      00070E AF F0            [24] 2425 	mov	r7,b
                                   2426 ;	src/main.c:698: switch(apstLineFiPkt->u8Type) {
      000710 74 01            [12] 2427 	mov	a,#0x01
      000712 2D               [12] 2428 	add	a,r5
      000713 FA               [12] 2429 	mov	r2,a
      000714 E4               [12] 2430 	clr	a
      000715 3E               [12] 2431 	addc	a,r6
      000716 FB               [12] 2432 	mov	r3,a
      000717 8F 04            [24] 2433 	mov	ar4,r7
      000719 8A 82            [24] 2434 	mov	dpl,r2
      00071B 8B 83            [24] 2435 	mov	dph,r3
      00071D 8C F0            [24] 2436 	mov	b,r4
      00071F 12r00r00         [24] 2437 	lcall	__gptrget
      000722 FC               [12] 2438 	mov	r4,a
      000723 60 58            [24] 2439 	jz	00107$
      000725 BC 02 01         [24] 2440 	cjne	r4,#0x02,00126$
      000728 22               [24] 2441 	ret
      000729                       2442 00126$:
      000729 BC 03 51         [24] 2443 	cjne	r4,#0x03,00107$
                                   2444 ;	src/main.c:700: if (SWITCH == SW_ON) {
      00072C 30 95 4E         [24] 2445 	jnb	_P15,00107$
                                   2446 ;	src/main.c:701: printf_fast_f("set address as %d\r\n", apstLineFiPkt->u8Addr);
      00072F 74 02            [12] 2447 	mov	a,#0x02
      000731 2D               [12] 2448 	add	a,r5
      000732 FD               [12] 2449 	mov	r5,a
      000733 E4               [12] 2450 	clr	a
      000734 3E               [12] 2451 	addc	a,r6
      000735 FE               [12] 2452 	mov	r6,a
      000736 8D 82            [24] 2453 	mov	dpl,r5
      000738 8E 83            [24] 2454 	mov	dph,r6
      00073A 8F F0            [24] 2455 	mov	b,r7
      00073C 12r00r00         [24] 2456 	lcall	__gptrget
      00073F FC               [12] 2457 	mov	r4,a
      000740 7B 00            [12] 2458 	mov	r3,#0x00
      000742 C0 07            [24] 2459 	push	ar7
      000744 C0 06            [24] 2460 	push	ar6
      000746 C0 05            [24] 2461 	push	ar5
      000748 C0 04            [24] 2462 	push	ar4
      00074A C0 03            [24] 2463 	push	ar3
      00074C 74rE7            [12] 2464 	mov	a,#___str_24
      00074E C0 E0            [24] 2465 	push	acc
      000750 74s01            [12] 2466 	mov	a,#(___str_24 >> 8)
      000752 C0 E0            [24] 2467 	push	acc
      000754 12r00r00         [24] 2468 	lcall	_printf_fast_f
      000757 E5 81            [12] 2469 	mov	a,sp
      000759 24 FC            [12] 2470 	add	a,#0xfc
      00075B F5 81            [12] 2471 	mov	sp,a
      00075D D0 05            [24] 2472 	pop	ar5
      00075F D0 06            [24] 2473 	pop	ar6
      000761 D0 07            [24] 2474 	pop	ar7
                                   2475 ;	src/main.c:702: gu8MyAddr = apstLineFiPkt->u8Addr;
      000763 8D 82            [24] 2476 	mov	dpl,r5
      000765 8E 83            [24] 2477 	mov	dph,r6
      000767 8F F0            [24] 2478 	mov	b,r7
      000769 12r00r00         [24] 2479 	lcall	__gptrget
      00076C F5*00            [12] 2480 	mov	_gu8MyAddr,a
                                   2481 ;	src/main.c:703: Erase_APROM_Page(BASE_ADDRESS);
      00076E 90 37 00         [24] 2482 	mov	dptr,#0x3700
      000771 12r00r00         [24] 2483 	lcall	_Erase_APROM_Page
                                   2484 ;	src/main.c:704: Write_APROM_BYTE(BASE_ADDRESS+0, gu8MyAddr);
      000774 85*00*00         [24] 2485 	mov	_Write_APROM_BYTE_PARM_2,_gu8MyAddr
      000777 90 37 00         [24] 2486 	mov	dptr,#0x3700
                                   2487 ;	src/main.c:711: }
                                   2488 ;	src/main.c:712: }
      00077A 02r00r00         [24] 2489 	ljmp	_Write_APROM_BYTE
      00077D                       2490 00107$:
      00077D 22               [24] 2491 	ret
                                   2492 ;------------------------------------------------------------
                                   2493 ;Allocation info for local variables in function 'main'
                                   2494 ;------------------------------------------------------------
                                   2495 ;su8Cnt                    Allocated with name '_main_su8Cnt_262145_134'
                                   2496 ;u8PrevSwitch              Allocated to registers r4 
                                   2497 ;u8UartRx                  Allocated to registers 
                                   2498 ;u8RotSense                Allocated to registers 
                                   2499 ;u8RxUART                  Allocated with name '_main_u8RxUART_65536_124'
                                   2500 ;u16Cnt                    Allocated to registers r3 r4 
                                   2501 ;u8OutputState             Allocated to registers 
                                   2502 ;u8StateRxCSC              Allocated to registers 
                                   2503 ;u8LineFiAddr              Allocated to registers 
                                   2504 ;u8LineFiSpeed             Allocated to registers 
                                   2505 ;u8Data                    Allocated to registers 
                                   2506 ;u8LineFiCmd               Allocated to registers 
                                   2507 ;u8PwrOnFirstFlag          Allocated to registers 
                                   2508 ;u8StateRxPkt              Allocated to registers r7 
                                   2509 ;pu8RxUART                 Allocated with name '_main_pu8RxUART_65536_124'
                                   2510 ;stLineFiPkt               Allocated with name '_main_stLineFiPkt_65536_124'
                                   2511 ;u8MotorState              Allocated to registers 
                                   2512 ;u8RxBufIdx                Allocated with name '_main_u8RxBufIdx_65536_124'
                                   2513 ;u8RxLineFiLen             Allocated to registers r5 
                                   2514 ;pu8LineFiRx               Allocated with name '_main_pu8LineFiRx_65536_124'
                                   2515 ;u8LineFiRxIdx             Allocated to registers 
                                   2516 ;u8Count2                  Allocated to registers 
                                   2517 ;u8RxPktCnt                Allocated to registers 
                                   2518 ;u8PreambleCnt             Allocated to registers 
                                   2519 ;i                         Allocated to registers r3 
                                   2520 ;------------------------------------------------------------
                                   2521 ;	src/main.c:717: void main (void)
                                   2522 ;	-----------------------------------------
                                   2523 ;	 function main
                                   2524 ;	-----------------------------------------
      00077E                       2525 _main:
                                   2526 ;	src/main.c:738: UINT8 u8StateRxPkt = STATE_RxPKT_INIT;
      00077E 7F 00            [12] 2527 	mov	r7,#0x00
                                   2528 ;	src/main.c:742: linefi_packet_t stLineFiPkt = {
      000780 75*2B 01         [24] 2529 	mov	_main_stLineFiPkt_65536_124,#0x01
      000783 75*2C 02         [24] 2530 	mov	(_main_stLineFiPkt_65536_124 + 0x0001),#0x02
      000786 75*2D 03         [24] 2531 	mov	(_main_stLineFiPkt_65536_124 + 0x0002),#0x03
      000789 75*2E 04         [24] 2532 	mov	(_main_stLineFiPkt_65536_124 + 0x0003),#0x04
      00078C 75*2F 05         [24] 2533 	mov	(_main_stLineFiPkt_65536_124 + 0x0004),#0x05
      00078F 75*30r00         [24] 2534 	mov	((_main_stLineFiPkt_65536_124 + 0x0005) + 0),#_gpu8Data
      000792 75*31s00         [24] 2535 	mov	((_main_stLineFiPkt_65536_124 + 0x0005) + 1),#(_gpu8Data >> 8)
                                   2536 ;	1-genFromRTrack replaced	mov	((_main_stLineFiPkt_65536_124 + 0x0005) + 2),#0x00
      000795 8F*32            [24] 2537 	mov	((_main_stLineFiPkt_65536_124 + 0x0005) + 2),r7
                                   2538 ;	src/main.c:754: UINT8 u8RxBufIdx = 0;
                                   2539 ;	1-genFromRTrack replaced	mov	_main_u8RxBufIdx_65536_124,#0x00
      000797 8F*33            [24] 2540 	mov	_main_u8RxBufIdx_65536_124,r7
                                   2541 ;	src/main.c:755: UINT8 u8RxLineFiLen = 0;
      000799 7D 00            [12] 2542 	mov	r5,#0x00
                                   2543 ;	src/main.c:760: gpio_setup();
      00079B C0 07            [24] 2544 	push	ar7
      00079D C0 05            [24] 2545 	push	ar5
      00079F 12r03rF6         [24] 2546 	lcall	_gpio_setup
                                   2547 ;	src/main.c:761: uart_setup();
      0007A2 12r00r00         [24] 2548 	lcall	_uart_setup
                                   2549 ;	src/main.c:762: InitialUART1_Timer3(57600);
      0007A5 90 E1 00         [24] 2550 	mov	dptr,#0xe100
      0007A8 E4               [12] 2551 	clr	a
      0007A9 F5 F0            [12] 2552 	mov	b,a
      0007AB 12r00r00         [24] 2553 	lcall	_InitialUART1_Timer3
                                   2554 ;	src/main.c:764: MODIFY_HIRC_166();
      0007AE 12r02r7C         [24] 2555 	lcall	_MODIFY_HIRC_166
                                   2556 ;	src/main.c:766: clr_T0M;// 16/12 MHz
      0007B1 53 8E F7         [24] 2557 	anl	_CKCON,#0xf7
                                   2558 ;	src/main.c:769: set_ET0;                                    //enable Timer0 interrupt
                                   2559 ;	assignBit
      0007B4 D2 A9            [12] 2560 	setb	_ET0
                                   2561 ;	src/main.c:770: set_TR0;                                    //Timer0 run
                                   2562 ;	assignBit
      0007B6 D2 8C            [12] 2563 	setb	_TR0
                                   2564 ;	src/main.c:772: gu8UART = 0;
      0007B8 75*01 00         [24] 2565 	mov	_gu8UART,#0x00
                                   2566 ;	src/main.c:773: printf_fast_f("This is UART0\n\r");
      0007BB 74rFB            [12] 2567 	mov	a,#___str_25
      0007BD C0 E0            [24] 2568 	push	acc
      0007BF 74s01            [12] 2569 	mov	a,#(___str_25 >> 8)
      0007C1 C0 E0            [24] 2570 	push	acc
      0007C3 12r00r00         [24] 2571 	lcall	_printf_fast_f
      0007C6 15 81            [12] 2572 	dec	sp
      0007C8 15 81            [12] 2573 	dec	sp
                                   2574 ;	src/main.c:774: gu8UART = 1;
      0007CA 75*01 01         [24] 2575 	mov	_gu8UART,#0x01
                                   2576 ;	src/main.c:775: printf_fast_f("This is UART1\n\r"); //라인파이
      0007CD 74r0B            [12] 2577 	mov	a,#___str_26
      0007CF C0 E0            [24] 2578 	push	acc
      0007D1 74s02            [12] 2579 	mov	a,#(___str_26 >> 8)
      0007D3 C0 E0            [24] 2580 	push	acc
      0007D5 12r00r00         [24] 2581 	lcall	_printf_fast_f
      0007D8 15 81            [12] 2582 	dec	sp
      0007DA 15 81            [12] 2583 	dec	sp
      0007DC D0 05            [24] 2584 	pop	ar5
      0007DE D0 07            [24] 2585 	pop	ar7
                                   2586 ;	src/main.c:780: for (u16Cnt = 0 ; u16Cnt < 30000; u16Cnt++) {
      0007E0 7B 30            [12] 2587 	mov	r3,#0x30
      0007E2 7C 75            [12] 2588 	mov	r4,#0x75
      0007E4                       2589 00148$:
                                   2590 ;	src/main.c:781: nop; nop; nop; nop; nop;
      0007E4 00               [12] 2591 	NOP
      0007E5 00               [12] 2592 	NOP
      0007E6 00               [12] 2593 	NOP
      0007E7 00               [12] 2594 	NOP
      0007E8 00               [12] 2595 	NOP
      0007E9 1B               [12] 2596 	dec	r3
      0007EA BB FF 01         [24] 2597 	cjne	r3,#0xff,00268$
      0007ED 1C               [12] 2598 	dec	r4
      0007EE                       2599 00268$:
                                   2600 ;	src/main.c:780: for (u16Cnt = 0 ; u16Cnt < 30000; u16Cnt++) {
      0007EE EB               [12] 2601 	mov	a,r3
      0007EF 4C               [12] 2602 	orl	a,r4
                                   2603 ;	src/main.c:783: gu8UART = 0;
      0007F0 70 F2            [24] 2604 	jnz	00148$
      0007F2 F5*01            [12] 2605 	mov	_gu8UART,a
                                   2606 ;	src/main.c:785: u8UartRx = UART_RX;
      0007F4 A2 82            [12] 2607 	mov	c,_P02
                                   2608 ;	src/main.c:786: u8PrevSwitch = SWITCH;
      0007F6 A2 95            [12] 2609 	mov	c,_P15
      0007F8 E4               [12] 2610 	clr	a
      0007F9 33               [12] 2611 	rlc	a
      0007FA FC               [12] 2612 	mov	r4,a
                                   2613 ;	src/main.c:788: set_EPI;
      0007FB 43 9B 02         [24] 2614 	orl	_EIE,#0x02
                                   2615 ;	src/main.c:789: set_EA;
                                   2616 ;	assignBit
      0007FE D2 AF            [12] 2617 	setb	_EA
                                   2618 ;	src/main.c:791: if (UART_RX == 0) {
      000800 20 82 02         [24] 2619 	jb	_P02,00103$
                                   2620 ;	src/main.c:792: SEL_RX_POL = 1;
                                   2621 ;	assignBit
      000803 D2 84            [12] 2622 	setb	_P04
      000805                       2623 00103$:
                                   2624 ;	src/main.c:796: gu8MyAddr = gpcEEPROM[0]; // 0x00이면 펌웨어 쓴 직후
      000805 90r37r00         [24] 2625 	mov	dptr,#_gpcEEPROM
      000808 E4               [12] 2626 	clr	a
      000809 93               [24] 2627 	movc	a,@a+dptr
      00080A F5*00            [12] 2628 	mov	_gu8MyAddr,a
                                   2629 ;	src/main.c:798: while(1) {
      00080C                       2630 00144$:
                                   2631 ;	src/main.c:801: if (Receive_Data_From_UART0_nb(&u8RxUART)) {
      00080C 90r00r0C         [24] 2632 	mov	dptr,#_main_u8RxUART_65536_124
      00080F 75 F0 40         [24] 2633 	mov	b,#0x40
      000812 C0 07            [24] 2634 	push	ar7
      000814 C0 05            [24] 2635 	push	ar5
      000816 C0 04            [24] 2636 	push	ar4
      000818 12r00r00         [24] 2637 	lcall	_Receive_Data_From_UART0_nb
      00081B E5 82            [12] 2638 	mov	a,dpl
      00081D D0 04            [24] 2639 	pop	ar4
      00081F D0 05            [24] 2640 	pop	ar5
      000821 D0 07            [24] 2641 	pop	ar7
      000823 70 03            [24] 2642 	jnz	00271$
      000825 02r0Ar57         [24] 2643 	ljmp	00115$
      000828                       2644 00271$:
                                   2645 ;	src/main.c:802: switch(u8RxUART) {
      000828 74 31            [12] 2646 	mov	a,#0x31
      00082A B5*0C 02         [24] 2647 	cjne	a,_main_u8RxUART_65536_124,00272$
      00082D 80 42            [24] 2648 	sjmp	00104$
      00082F                       2649 00272$:
      00082F 74 32            [12] 2650 	mov	a,#0x32
      000831 B5*0C 02         [24] 2651 	cjne	a,_main_u8RxUART_65536_124,00273$
      000834 80 77            [24] 2652 	sjmp	00105$
      000836                       2653 00273$:
      000836 74 33            [12] 2654 	mov	a,#0x33
      000838 B5*0C 03         [24] 2655 	cjne	a,_main_u8RxUART_65536_124,00274$
      00083B 02r08rE9         [24] 2656 	ljmp	00106$
      00083E                       2657 00274$:
      00083E 74 34            [12] 2658 	mov	a,#0x34
      000840 B5*0C 03         [24] 2659 	cjne	a,_main_u8RxUART_65536_124,00275$
      000843 02r09r25         [24] 2660 	ljmp	00107$
      000846                       2661 00275$:
      000846 74 35            [12] 2662 	mov	a,#0x35
      000848 B5*0C 03         [24] 2663 	cjne	a,_main_u8RxUART_65536_124,00276$
      00084B 02r09r61         [24] 2664 	ljmp	00108$
      00084E                       2665 00276$:
      00084E 74 36            [12] 2666 	mov	a,#0x36
      000850 B5*0C 03         [24] 2667 	cjne	a,_main_u8RxUART_65536_124,00277$
      000853 02r09r7F         [24] 2668 	ljmp	00109$
      000856                       2669 00277$:
      000856 74 37            [12] 2670 	mov	a,#0x37
      000858 B5*0C 03         [24] 2671 	cjne	a,_main_u8RxUART_65536_124,00278$
      00085B 02r09rBB         [24] 2672 	ljmp	00110$
      00085E                       2673 00278$:
      00085E 74 38            [12] 2674 	mov	a,#0x38
      000860 B5*0C 03         [24] 2675 	cjne	a,_main_u8RxUART_65536_124,00279$
      000863 02r09rF6         [24] 2676 	ljmp	00111$
      000866                       2677 00279$:
      000866 74 74            [12] 2678 	mov	a,#0x74
      000868 B5*0C 03         [24] 2679 	cjne	a,_main_u8RxUART_65536_124,00280$
      00086B 02r0Ar31         [24] 2680 	ljmp	00112$
      00086E                       2681 00280$:
      00086E 02r0Ar57         [24] 2682 	ljmp	00115$
                                   2683 ;	src/main.c:803: case '1' :
      000871                       2684 00104$:
                                   2685 ;	src/main.c:804: TOGGLE(UART_TX);
      000871 B2 96            [12] 2686 	cpl	_P16
                                   2687 ;	src/main.c:805: printf_fast_f("UART_TX=");
      000873 C0 07            [24] 2688 	push	ar7
      000875 C0 05            [24] 2689 	push	ar5
      000877 C0 04            [24] 2690 	push	ar4
      000879 74r1B            [12] 2691 	mov	a,#___str_27
      00087B C0 E0            [24] 2692 	push	acc
      00087D 74s02            [12] 2693 	mov	a,#(___str_27 >> 8)
      00087F C0 E0            [24] 2694 	push	acc
      000881 12r00r00         [24] 2695 	lcall	_printf_fast_f
      000884 15 81            [12] 2696 	dec	sp
      000886 15 81            [12] 2697 	dec	sp
                                   2698 ;	src/main.c:806: printf_fast_f("%d\n\r", UART_TX);
      000888 A2 96            [12] 2699 	mov	c,_P16
      00088A E4               [12] 2700 	clr	a
      00088B 33               [12] 2701 	rlc	a
      00088C FA               [12] 2702 	mov	r2,a
      00088D 7B 00            [12] 2703 	mov	r3,#0x00
      00088F C0 02            [24] 2704 	push	ar2
      000891 C0 03            [24] 2705 	push	ar3
      000893 74r24            [12] 2706 	mov	a,#___str_28
      000895 C0 E0            [24] 2707 	push	acc
      000897 74s02            [12] 2708 	mov	a,#(___str_28 >> 8)
      000899 C0 E0            [24] 2709 	push	acc
      00089B 12r00r00         [24] 2710 	lcall	_printf_fast_f
      00089E E5 81            [12] 2711 	mov	a,sp
      0008A0 24 FC            [12] 2712 	add	a,#0xfc
      0008A2 F5 81            [12] 2713 	mov	sp,a
      0008A4 D0 04            [24] 2714 	pop	ar4
      0008A6 D0 05            [24] 2715 	pop	ar5
      0008A8 D0 07            [24] 2716 	pop	ar7
                                   2717 ;	src/main.c:807: break;
      0008AA 02r0Ar57         [24] 2718 	ljmp	00115$
                                   2719 ;	src/main.c:808: case '2' :
      0008AD                       2720 00105$:
                                   2721 ;	src/main.c:809: TOGGLE(LED_R);
      0008AD B2 94            [12] 2722 	cpl	_P14
                                   2723 ;	src/main.c:810: printf_fast_f("LED_R=");
      0008AF C0 07            [24] 2724 	push	ar7
      0008B1 C0 05            [24] 2725 	push	ar5
      0008B3 C0 04            [24] 2726 	push	ar4
      0008B5 74r29            [12] 2727 	mov	a,#___str_29
      0008B7 C0 E0            [24] 2728 	push	acc
      0008B9 74s02            [12] 2729 	mov	a,#(___str_29 >> 8)
      0008BB C0 E0            [24] 2730 	push	acc
      0008BD 12r00r00         [24] 2731 	lcall	_printf_fast_f
      0008C0 15 81            [12] 2732 	dec	sp
      0008C2 15 81            [12] 2733 	dec	sp
                                   2734 ;	src/main.c:811: printf_fast_f("%d\n\r", LED_R);
      0008C4 A2 94            [12] 2735 	mov	c,_P14
      0008C6 E4               [12] 2736 	clr	a
      0008C7 33               [12] 2737 	rlc	a
      0008C8 FA               [12] 2738 	mov	r2,a
      0008C9 7B 00            [12] 2739 	mov	r3,#0x00
      0008CB C0 02            [24] 2740 	push	ar2
      0008CD C0 03            [24] 2741 	push	ar3
      0008CF 74r24            [12] 2742 	mov	a,#___str_28
      0008D1 C0 E0            [24] 2743 	push	acc
      0008D3 74s02            [12] 2744 	mov	a,#(___str_28 >> 8)
      0008D5 C0 E0            [24] 2745 	push	acc
      0008D7 12r00r00         [24] 2746 	lcall	_printf_fast_f
      0008DA E5 81            [12] 2747 	mov	a,sp
      0008DC 24 FC            [12] 2748 	add	a,#0xfc
      0008DE F5 81            [12] 2749 	mov	sp,a
      0008E0 D0 04            [24] 2750 	pop	ar4
      0008E2 D0 05            [24] 2751 	pop	ar5
      0008E4 D0 07            [24] 2752 	pop	ar7
                                   2753 ;	src/main.c:812: break;
      0008E6 02r0Ar57         [24] 2754 	ljmp	00115$
                                   2755 ;	src/main.c:813: case '3' :
      0008E9                       2756 00106$:
                                   2757 ;	src/main.c:814: TOGGLE(LED_G);
      0008E9 B2 93            [12] 2758 	cpl	_P13
                                   2759 ;	src/main.c:815: printf_fast_f("LED_G=");
      0008EB C0 07            [24] 2760 	push	ar7
      0008ED C0 05            [24] 2761 	push	ar5
      0008EF C0 04            [24] 2762 	push	ar4
      0008F1 74r30            [12] 2763 	mov	a,#___str_30
      0008F3 C0 E0            [24] 2764 	push	acc
      0008F5 74s02            [12] 2765 	mov	a,#(___str_30 >> 8)
      0008F7 C0 E0            [24] 2766 	push	acc
      0008F9 12r00r00         [24] 2767 	lcall	_printf_fast_f
      0008FC 15 81            [12] 2768 	dec	sp
      0008FE 15 81            [12] 2769 	dec	sp
                                   2770 ;	src/main.c:816: printf_fast_f("%d\n\r", LED_G);
      000900 A2 93            [12] 2771 	mov	c,_P13
      000902 E4               [12] 2772 	clr	a
      000903 33               [12] 2773 	rlc	a
      000904 FA               [12] 2774 	mov	r2,a
      000905 7B 00            [12] 2775 	mov	r3,#0x00
      000907 C0 02            [24] 2776 	push	ar2
      000909 C0 03            [24] 2777 	push	ar3
      00090B 74r24            [12] 2778 	mov	a,#___str_28
      00090D C0 E0            [24] 2779 	push	acc
      00090F 74s02            [12] 2780 	mov	a,#(___str_28 >> 8)
      000911 C0 E0            [24] 2781 	push	acc
      000913 12r00r00         [24] 2782 	lcall	_printf_fast_f
      000916 E5 81            [12] 2783 	mov	a,sp
      000918 24 FC            [12] 2784 	add	a,#0xfc
      00091A F5 81            [12] 2785 	mov	sp,a
      00091C D0 04            [24] 2786 	pop	ar4
      00091E D0 05            [24] 2787 	pop	ar5
      000920 D0 07            [24] 2788 	pop	ar7
                                   2789 ;	src/main.c:817: break;
      000922 02r0Ar57         [24] 2790 	ljmp	00115$
                                   2791 ;	src/main.c:818: case '4' :
      000925                       2792 00107$:
                                   2793 ;	src/main.c:819: TOGGLE(LED_B);
      000925 B2 92            [12] 2794 	cpl	_P12
                                   2795 ;	src/main.c:820: printf_fast_f("LED_B=");
      000927 C0 07            [24] 2796 	push	ar7
      000929 C0 05            [24] 2797 	push	ar5
      00092B C0 04            [24] 2798 	push	ar4
      00092D 74r37            [12] 2799 	mov	a,#___str_31
      00092F C0 E0            [24] 2800 	push	acc
      000931 74s02            [12] 2801 	mov	a,#(___str_31 >> 8)
      000933 C0 E0            [24] 2802 	push	acc
      000935 12r00r00         [24] 2803 	lcall	_printf_fast_f
      000938 15 81            [12] 2804 	dec	sp
      00093A 15 81            [12] 2805 	dec	sp
                                   2806 ;	src/main.c:821: printf_fast_f("%d\n\r", LED_B);
      00093C A2 92            [12] 2807 	mov	c,_P12
      00093E E4               [12] 2808 	clr	a
      00093F 33               [12] 2809 	rlc	a
      000940 FA               [12] 2810 	mov	r2,a
      000941 7B 00            [12] 2811 	mov	r3,#0x00
      000943 C0 02            [24] 2812 	push	ar2
      000945 C0 03            [24] 2813 	push	ar3
      000947 74r24            [12] 2814 	mov	a,#___str_28
      000949 C0 E0            [24] 2815 	push	acc
      00094B 74s02            [12] 2816 	mov	a,#(___str_28 >> 8)
      00094D C0 E0            [24] 2817 	push	acc
      00094F 12r00r00         [24] 2818 	lcall	_printf_fast_f
      000952 E5 81            [12] 2819 	mov	a,sp
      000954 24 FC            [12] 2820 	add	a,#0xfc
      000956 F5 81            [12] 2821 	mov	sp,a
      000958 D0 04            [24] 2822 	pop	ar4
      00095A D0 05            [24] 2823 	pop	ar5
      00095C D0 07            [24] 2824 	pop	ar7
                                   2825 ;	src/main.c:822: break;
      00095E 02r0Ar57         [24] 2826 	ljmp	00115$
                                   2827 ;	src/main.c:823: case '5' :
      000961                       2828 00108$:
                                   2829 ;	src/main.c:827: printf_fast_f("no MOTOR_EN\r\n");
      000961 C0 07            [24] 2830 	push	ar7
      000963 C0 05            [24] 2831 	push	ar5
      000965 C0 04            [24] 2832 	push	ar4
      000967 74r3E            [12] 2833 	mov	a,#___str_32
      000969 C0 E0            [24] 2834 	push	acc
      00096B 74s02            [12] 2835 	mov	a,#(___str_32 >> 8)
      00096D C0 E0            [24] 2836 	push	acc
      00096F 12r00r00         [24] 2837 	lcall	_printf_fast_f
      000972 15 81            [12] 2838 	dec	sp
      000974 15 81            [12] 2839 	dec	sp
      000976 D0 04            [24] 2840 	pop	ar4
      000978 D0 05            [24] 2841 	pop	ar5
      00097A D0 07            [24] 2842 	pop	ar7
                                   2843 ;	src/main.c:828: break;
      00097C 02r0Ar57         [24] 2844 	ljmp	00115$
                                   2845 ;	src/main.c:829: case '6' :
      00097F                       2846 00109$:
                                   2847 ;	src/main.c:830: TOGGLE(MOTOR_CW);
      00097F B2 80            [12] 2848 	cpl	_P00
                                   2849 ;	src/main.c:831: printf_fast_f("MOTOR_CW=");
      000981 C0 07            [24] 2850 	push	ar7
      000983 C0 05            [24] 2851 	push	ar5
      000985 C0 04            [24] 2852 	push	ar4
      000987 74r4C            [12] 2853 	mov	a,#___str_33
      000989 C0 E0            [24] 2854 	push	acc
      00098B 74s02            [12] 2855 	mov	a,#(___str_33 >> 8)
      00098D C0 E0            [24] 2856 	push	acc
      00098F 12r00r00         [24] 2857 	lcall	_printf_fast_f
      000992 15 81            [12] 2858 	dec	sp
      000994 15 81            [12] 2859 	dec	sp
                                   2860 ;	src/main.c:832: printf_fast_f("%d\n\r", MOTOR_CW);
      000996 A2 80            [12] 2861 	mov	c,_P00
      000998 E4               [12] 2862 	clr	a
      000999 33               [12] 2863 	rlc	a
      00099A FA               [12] 2864 	mov	r2,a
      00099B 7B 00            [12] 2865 	mov	r3,#0x00
      00099D C0 02            [24] 2866 	push	ar2
      00099F C0 03            [24] 2867 	push	ar3
      0009A1 74r24            [12] 2868 	mov	a,#___str_28
      0009A3 C0 E0            [24] 2869 	push	acc
      0009A5 74s02            [12] 2870 	mov	a,#(___str_28 >> 8)
      0009A7 C0 E0            [24] 2871 	push	acc
      0009A9 12r00r00         [24] 2872 	lcall	_printf_fast_f
      0009AC E5 81            [12] 2873 	mov	a,sp
      0009AE 24 FC            [12] 2874 	add	a,#0xfc
      0009B0 F5 81            [12] 2875 	mov	sp,a
      0009B2 D0 04            [24] 2876 	pop	ar4
      0009B4 D0 05            [24] 2877 	pop	ar5
      0009B6 D0 07            [24] 2878 	pop	ar7
                                   2879 ;	src/main.c:833: break;
      0009B8 02r0Ar57         [24] 2880 	ljmp	00115$
                                   2881 ;	src/main.c:834: case '7' :
      0009BB                       2882 00110$:
                                   2883 ;	src/main.c:835: TOGGLE(MOTOR_CCW);
      0009BB B2 81            [12] 2884 	cpl	_P01
                                   2885 ;	src/main.c:836: printf_fast_f("MOTOR_CCW=");
      0009BD C0 07            [24] 2886 	push	ar7
      0009BF C0 05            [24] 2887 	push	ar5
      0009C1 C0 04            [24] 2888 	push	ar4
      0009C3 74r56            [12] 2889 	mov	a,#___str_34
      0009C5 C0 E0            [24] 2890 	push	acc
      0009C7 74s02            [12] 2891 	mov	a,#(___str_34 >> 8)
      0009C9 C0 E0            [24] 2892 	push	acc
      0009CB 12r00r00         [24] 2893 	lcall	_printf_fast_f
      0009CE 15 81            [12] 2894 	dec	sp
      0009D0 15 81            [12] 2895 	dec	sp
                                   2896 ;	src/main.c:837: printf_fast_f("%d\n\r", MOTOR_CCW);
      0009D2 A2 81            [12] 2897 	mov	c,_P01
      0009D4 E4               [12] 2898 	clr	a
      0009D5 33               [12] 2899 	rlc	a
      0009D6 FA               [12] 2900 	mov	r2,a
      0009D7 7B 00            [12] 2901 	mov	r3,#0x00
      0009D9 C0 02            [24] 2902 	push	ar2
      0009DB C0 03            [24] 2903 	push	ar3
      0009DD 74r24            [12] 2904 	mov	a,#___str_28
      0009DF C0 E0            [24] 2905 	push	acc
      0009E1 74s02            [12] 2906 	mov	a,#(___str_28 >> 8)
      0009E3 C0 E0            [24] 2907 	push	acc
      0009E5 12r00r00         [24] 2908 	lcall	_printf_fast_f
      0009E8 E5 81            [12] 2909 	mov	a,sp
      0009EA 24 FC            [12] 2910 	add	a,#0xfc
      0009EC F5 81            [12] 2911 	mov	sp,a
      0009EE D0 04            [24] 2912 	pop	ar4
      0009F0 D0 05            [24] 2913 	pop	ar5
      0009F2 D0 07            [24] 2914 	pop	ar7
                                   2915 ;	src/main.c:838: break;
                                   2916 ;	src/main.c:839: case '8' :
      0009F4 80 61            [24] 2917 	sjmp	00115$
      0009F6                       2918 00111$:
                                   2919 ;	src/main.c:840: TOGGLE(SEL_RX_POL);
      0009F6 B2 84            [12] 2920 	cpl	_P04
                                   2921 ;	src/main.c:841: printf_fast_f("SEL_RX_POL=");
      0009F8 C0 07            [24] 2922 	push	ar7
      0009FA C0 05            [24] 2923 	push	ar5
      0009FC C0 04            [24] 2924 	push	ar4
      0009FE 74r61            [12] 2925 	mov	a,#___str_35
      000A00 C0 E0            [24] 2926 	push	acc
      000A02 74s02            [12] 2927 	mov	a,#(___str_35 >> 8)
      000A04 C0 E0            [24] 2928 	push	acc
      000A06 12r00r00         [24] 2929 	lcall	_printf_fast_f
      000A09 15 81            [12] 2930 	dec	sp
      000A0B 15 81            [12] 2931 	dec	sp
                                   2932 ;	src/main.c:842: printf_fast_f("%d\n\r", SEL_RX_POL);
      000A0D A2 84            [12] 2933 	mov	c,_P04
      000A0F E4               [12] 2934 	clr	a
      000A10 33               [12] 2935 	rlc	a
      000A11 FA               [12] 2936 	mov	r2,a
      000A12 7B 00            [12] 2937 	mov	r3,#0x00
      000A14 C0 02            [24] 2938 	push	ar2
      000A16 C0 03            [24] 2939 	push	ar3
      000A18 74r24            [12] 2940 	mov	a,#___str_28
      000A1A C0 E0            [24] 2941 	push	acc
      000A1C 74s02            [12] 2942 	mov	a,#(___str_28 >> 8)
      000A1E C0 E0            [24] 2943 	push	acc
      000A20 12r00r00         [24] 2944 	lcall	_printf_fast_f
      000A23 E5 81            [12] 2945 	mov	a,sp
      000A25 24 FC            [12] 2946 	add	a,#0xfc
      000A27 F5 81            [12] 2947 	mov	sp,a
      000A29 D0 04            [24] 2948 	pop	ar4
      000A2B D0 05            [24] 2949 	pop	ar5
      000A2D D0 07            [24] 2950 	pop	ar7
                                   2951 ;	src/main.c:843: break;
                                   2952 ;	src/main.c:844: case 't' :
      000A2F 80 26            [24] 2953 	sjmp	00115$
      000A31                       2954 00112$:
                                   2955 ;	src/main.c:845: printf_fast_f("count:%d\r\n", gu16TimeCnt);
      000A31 C0 07            [24] 2956 	push	ar7
      000A33 C0 05            [24] 2957 	push	ar5
      000A35 C0 04            [24] 2958 	push	ar4
      000A37 C0*02            [24] 2959 	push	_gu16TimeCnt
      000A39 C0*03            [24] 2960 	push	(_gu16TimeCnt + 1)
      000A3B 74r6D            [12] 2961 	mov	a,#___str_36
      000A3D C0 E0            [24] 2962 	push	acc
      000A3F 74s02            [12] 2963 	mov	a,#(___str_36 >> 8)
      000A41 C0 E0            [24] 2964 	push	acc
      000A43 12r00r00         [24] 2965 	lcall	_printf_fast_f
      000A46 E5 81            [12] 2966 	mov	a,sp
      000A48 24 FC            [12] 2967 	add	a,#0xfc
      000A4A F5 81            [12] 2968 	mov	sp,a
      000A4C D0 04            [24] 2969 	pop	ar4
      000A4E D0 05            [24] 2970 	pop	ar5
      000A50 D0 07            [24] 2971 	pop	ar7
                                   2972 ;	src/main.c:846: gu16TimeCnt = 0;
      000A52 E4               [12] 2973 	clr	a
      000A53 F5*02            [12] 2974 	mov	_gu16TimeCnt,a
      000A55 F5*03            [12] 2975 	mov	(_gu16TimeCnt + 1),a
                                   2976 ;	src/main.c:848: }
      000A57                       2977 00115$:
                                   2978 ;	src/main.c:851: if (u8PrevSwitch != SWITCH) { // 스위치 스테이트가 변하면..
      000A57 8C 03            [24] 2979 	mov	ar3,r4
      000A59 A2 95            [12] 2980 	mov	c,_P15
      000A5B E4               [12] 2981 	clr	a
      000A5C 33               [12] 2982 	rlc	a
      000A5D FA               [12] 2983 	mov	r2,a
      000A5E EB               [12] 2984 	mov	a,r3
      000A5F B5 02 02         [24] 2985 	cjne	a,ar2,00281$
      000A62 80 5D            [24] 2986 	sjmp	00120$
      000A64                       2987 00281$:
                                   2988 ;	src/main.c:852: printf_fast_f("SWITCH:%d\n\r", SWITCH);
      000A64 A2 95            [12] 2989 	mov	c,_P15
      000A66 E4               [12] 2990 	clr	a
      000A67 33               [12] 2991 	rlc	a
      000A68 FA               [12] 2992 	mov	r2,a
      000A69 7B 00            [12] 2993 	mov	r3,#0x00
      000A6B C0 07            [24] 2994 	push	ar7
      000A6D C0 05            [24] 2995 	push	ar5
      000A6F C0 02            [24] 2996 	push	ar2
      000A71 C0 03            [24] 2997 	push	ar3
      000A73 74r78            [12] 2998 	mov	a,#___str_37
      000A75 C0 E0            [24] 2999 	push	acc
      000A77 74s02            [12] 3000 	mov	a,#(___str_37 >> 8)
      000A79 C0 E0            [24] 3001 	push	acc
      000A7B 12r00r00         [24] 3002 	lcall	_printf_fast_f
      000A7E E5 81            [12] 3003 	mov	a,sp
      000A80 24 FC            [12] 3004 	add	a,#0xfc
      000A82 F5 81            [12] 3005 	mov	sp,a
      000A84 D0 05            [24] 3006 	pop	ar5
      000A86 D0 07            [24] 3007 	pop	ar7
                                   3008 ;	src/main.c:853: if (SWITCH) { //눌렸을 때
      000A88 20 95 31         [24] 3009 	jb	_P15,00118$
                                   3010 ;	src/main.c:857: su8Cnt++;
      000A8B 05*0B            [12] 3011 	inc	_main_su8Cnt_262145_134
                                   3012 ;	src/main.c:858: LED_R = su8Cnt&1;
      000A8D E5*0B            [12] 3013 	mov	a,_main_su8Cnt_262145_134
      000A8F 54 01            [12] 3014 	anl	a,#0x01
                                   3015 ;	assignBit
      000A91 24 FF            [12] 3016 	add	a,#0xff
      000A93 92 94            [24] 3017 	mov	_P14,c
                                   3018 ;	src/main.c:859: LED_G = (su8Cnt>>1)&1;
      000A95 E5*0B            [12] 3019 	mov	a,_main_su8Cnt_262145_134
      000A97 03               [12] 3020 	rr	a
      000A98 54 01            [12] 3021 	anl	a,#0x01
                                   3022 ;	assignBit
      000A9A 24 FF            [12] 3023 	add	a,#0xff
      000A9C E4               [12] 3024 	clr	a
      000A9D 33               [12] 3025 	rlc	a
                                   3026 ;	assignBit
      000A9E FB               [12] 3027 	mov	r3,a
      000A9F 24 FF            [12] 3028 	add	a,#0xff
      000AA1 92 93            [24] 3029 	mov	_P13,c
                                   3030 ;	src/main.c:860: LED_B = (su8Cnt>>2)&1;
      000AA3 E5*0B            [12] 3031 	mov	a,_main_su8Cnt_262145_134
      000AA5 03               [12] 3032 	rr	a
      000AA6 03               [12] 3033 	rr	a
      000AA7 54 01            [12] 3034 	anl	a,#0x01
                                   3035 ;	assignBit
      000AA9 24 FF            [12] 3036 	add	a,#0xff
      000AAB E4               [12] 3037 	clr	a
      000AAC 33               [12] 3038 	rlc	a
                                   3039 ;	assignBit
      000AAD FA               [12] 3040 	mov	r2,a
      000AAE 24 FF            [12] 3041 	add	a,#0xff
      000AB0 92 92            [24] 3042 	mov	_P12,c
                                   3043 ;	src/main.c:863: MOTOR_CW = (su8Cnt>>1)&1;
                                   3044 ;	assignBit
      000AB2 EB               [12] 3045 	mov	a,r3
      000AB3 24 FF            [12] 3046 	add	a,#0xff
      000AB5 92 80            [24] 3047 	mov	_P00,c
                                   3048 ;	src/main.c:864: MOTOR_CCW = (su8Cnt>>2)&1;
                                   3049 ;	assignBit
      000AB7 EA               [12] 3050 	mov	a,r2
      000AB8 24 FF            [12] 3051 	add	a,#0xff
      000ABA 92 81            [24] 3052 	mov	_P01,c
      000ABC                       3053 00118$:
                                   3054 ;	src/main.c:867: u8PrevSwitch = SWITCH;
      000ABC A2 95            [12] 3055 	mov	c,_P15
      000ABE E4               [12] 3056 	clr	a
      000ABF 33               [12] 3057 	rlc	a
      000AC0 FC               [12] 3058 	mov	r4,a
      000AC1                       3059 00120$:
                                   3060 ;	src/main.c:870: if (SWITCH) {
      000AC1 A2 95            [12] 3061 	mov	c,_P15
                                   3062 ;	src/main.c:873: if (u8UartRx != UART_RX) {
      000AC3 A2 82            [12] 3063 	mov	c,_P02
                                   3064 ;	src/main.c:878: switch(u8StateRxPkt) {
      000AC5 BF 00 02         [24] 3065 	cjne	r7,#0x00,00283$
      000AC8 80 0D            [24] 3066 	sjmp	00121$
      000ACA                       3067 00283$:
      000ACA BF 01 02         [24] 3068 	cjne	r7,#0x01,00284$
      000ACD 80 34            [24] 3069 	sjmp	00124$
      000ACF                       3070 00284$:
      000ACF BF 02 02         [24] 3071 	cjne	r7,#0x02,00285$
      000AD2 80 6F            [24] 3072 	sjmp	00130$
      000AD4                       3073 00285$:
      000AD4 02r08r0C         [24] 3074 	ljmp	00144$
                                   3075 ;	src/main.c:879: case STATE_RxPKT_INIT :
      000AD7                       3076 00121$:
                                   3077 ;	src/main.c:880: if (get_octet_from_linefi(&u8RxUART)) {
      000AD7 90r00r0C         [24] 3078 	mov	dptr,#_main_u8RxUART_65536_124
      000ADA 75 F0 40         [24] 3079 	mov	b,#0x40
      000ADD C0 07            [24] 3080 	push	ar7
      000ADF C0 05            [24] 3081 	push	ar5
      000AE1 C0 04            [24] 3082 	push	ar4
      000AE3 12r00r00         [24] 3083 	lcall	_get_octet_from_linefi
      000AE6 E5 82            [12] 3084 	mov	a,dpl
      000AE8 D0 04            [24] 3085 	pop	ar4
      000AEA D0 05            [24] 3086 	pop	ar5
      000AEC D0 07            [24] 3087 	pop	ar7
      000AEE 70 03            [24] 3088 	jnz	00286$
      000AF0 02r08r0C         [24] 3089 	ljmp	00144$
      000AF3                       3090 00286$:
                                   3091 ;	src/main.c:881: gu16TimeCnt = 0;
      000AF3 E4               [12] 3092 	clr	a
      000AF4 F5*02            [12] 3093 	mov	_gu16TimeCnt,a
      000AF6 F5*03            [12] 3094 	mov	(_gu16TimeCnt + 1),a
                                   3095 ;	src/main.c:883: pu8RxUART[u8RxBufIdx++] = u8RxUART;
      000AF8 75*33 01         [24] 3096 	mov	_main_u8RxBufIdx_65536_124,#0x01
      000AFB 85*0C*0D         [24] 3097 	mov	_main_pu8RxUART_65536_124,_main_u8RxUART_65536_124
                                   3098 ;	src/main.c:884: u8StateRxPkt = STATE_RxPKT_START;
      000AFE 7F 01            [12] 3099 	mov	r7,#0x01
                                   3100 ;	src/main.c:886: break;
      000B00 02r08r0C         [24] 3101 	ljmp	00144$
                                   3102 ;	src/main.c:887: case STATE_RxPKT_START :
      000B03                       3103 00124$:
                                   3104 ;	src/main.c:888: if (get_octet_from_linefi(&u8RxUART)) {
      000B03 90r00r0C         [24] 3105 	mov	dptr,#_main_u8RxUART_65536_124
      000B06 75 F0 40         [24] 3106 	mov	b,#0x40
      000B09 C0 07            [24] 3107 	push	ar7
      000B0B C0 05            [24] 3108 	push	ar5
      000B0D C0 04            [24] 3109 	push	ar4
      000B0F 12r00r00         [24] 3110 	lcall	_get_octet_from_linefi
      000B12 E5 82            [12] 3111 	mov	a,dpl
      000B14 D0 04            [24] 3112 	pop	ar4
      000B16 D0 05            [24] 3113 	pop	ar5
      000B18 D0 07            [24] 3114 	pop	ar7
      000B1A 60 12            [24] 3115 	jz	00128$
                                   3116 ;	src/main.c:889: gu16TimeCnt = 0;
      000B1C E4               [12] 3117 	clr	a
      000B1D F5*02            [12] 3118 	mov	_gu16TimeCnt,a
      000B1F F5*03            [12] 3119 	mov	(_gu16TimeCnt + 1),a
                                   3120 ;	src/main.c:890: pu8RxUART[u8RxBufIdx++] = u8RxUART;
      000B21 AB*33            [24] 3121 	mov	r3,_main_u8RxBufIdx_65536_124
      000B23 05*33            [12] 3122 	inc	_main_u8RxBufIdx_65536_124
      000B25 EB               [12] 3123 	mov	a,r3
      000B26 24r0D            [12] 3124 	add	a,#_main_pu8RxUART_65536_124
      000B28 F8               [12] 3125 	mov	r0,a
      000B29 A6*0C            [24] 3126 	mov	@r0,_main_u8RxUART_65536_124
      000B2B 02r08r0C         [24] 3127 	ljmp	00144$
      000B2E                       3128 00128$:
                                   3129 ;	src/main.c:892: else if (gu16TimeCnt > 1000) { // 1msec넘으면
      000B2E C3               [12] 3130 	clr	c
      000B2F 74 E8            [12] 3131 	mov	a,#0xe8
      000B31 95*02            [12] 3132 	subb	a,_gu16TimeCnt
      000B33 74 03            [12] 3133 	mov	a,#0x03
      000B35 95*03            [12] 3134 	subb	a,(_gu16TimeCnt + 1)
      000B37 40 03            [24] 3135 	jc	00288$
      000B39 02r08r0C         [24] 3136 	ljmp	00144$
      000B3C                       3137 00288$:
                                   3138 ;	src/main.c:893: u8RxLineFiLen = u8RxBufIdx;
      000B3C AD*33            [24] 3139 	mov	r5,_main_u8RxBufIdx_65536_124
                                   3140 ;	src/main.c:894: u8StateRxPkt = STATE_RxPKT_END;
      000B3E 7F 02            [12] 3141 	mov	r7,#0x02
                                   3142 ;	src/main.c:896: break;
      000B40 02r08r0C         [24] 3143 	ljmp	00144$
                                   3144 ;	src/main.c:898: case STATE_RxPKT_END :
      000B43                       3145 00130$:
                                   3146 ;	src/main.c:899: switch(u8RxLineFiLen) {
      000B43 BD 01 41         [24] 3147 	cjne	r5,#0x01,00134$
                                   3148 ;	src/main.c:901: if (chk_my_addr(MY_ADDR, pu8RxUART[0])) {
      000B46 85*0D*00         [24] 3149 	mov	_chk_my_addr_PARM_2,_main_pu8RxUART_65536_124
      000B49 75 82 03         [24] 3150 	mov	dpl,#0x03
      000B4C C0 05            [24] 3151 	push	ar5
      000B4E C0 04            [24] 3152 	push	ar4
      000B50 12r05rBE         [24] 3153 	lcall	_chk_my_addr
      000B53 E5 82            [12] 3154 	mov	a,dpl
      000B55 D0 04            [24] 3155 	pop	ar4
      000B57 D0 05            [24] 3156 	pop	ar5
      000B59 60 27            [24] 3157 	jz	00133$
                                   3158 ;	src/main.c:903: printf_fast_f("Rx:%d\n\r", pu8RxUART[0]);
      000B5B AA*0D            [24] 3159 	mov	r2,_main_pu8RxUART_65536_124
      000B5D 7B 00            [12] 3160 	mov	r3,#0x00
      000B5F C0 05            [24] 3161 	push	ar5
      000B61 C0 04            [24] 3162 	push	ar4
      000B63 C0 02            [24] 3163 	push	ar2
      000B65 C0 03            [24] 3164 	push	ar3
      000B67 74r84            [12] 3165 	mov	a,#___str_38
      000B69 C0 E0            [24] 3166 	push	acc
      000B6B 74s02            [12] 3167 	mov	a,#(___str_38 >> 8)
      000B6D C0 E0            [24] 3168 	push	acc
      000B6F 12r00r00         [24] 3169 	lcall	_printf_fast_f
      000B72 E5 81            [12] 3170 	mov	a,sp
      000B74 24 FC            [12] 3171 	add	a,#0xfc
      000B76 F5 81            [12] 3172 	mov	sp,a
                                   3173 ;	src/main.c:904: ctrl_rgbled_motor(u8RxUART);
      000B78 85*0C 82         [24] 3174 	mov	dpl,_main_u8RxUART_65536_124
      000B7B 12r05r5A         [24] 3175 	lcall	_ctrl_rgbled_motor
      000B7E D0 04            [24] 3176 	pop	ar4
      000B80 D0 05            [24] 3177 	pop	ar5
      000B82                       3178 00133$:
                                   3179 ;	src/main.c:906: u8StateRxPkt = STATE_RxPKT_INIT;
      000B82 7F 00            [12] 3180 	mov	r7,#0x00
                                   3181 ;	src/main.c:907: break;
      000B84 02r08r0C         [24] 3182 	ljmp	00144$
                                   3183 ;	src/main.c:908: default : // 가변 옥텟(8  이상) 길이의  라이인파이 패킷 수신
      000B87                       3184 00134$:
                                   3185 ;	src/main.c:909: if ( u8RxLineFiLen < 8) { // 
      000B87 BD 08 00         [24] 3186 	cjne	r5,#0x08,00292$
      000B8A                       3187 00292$:
      000B8A 50 6D            [24] 3188 	jnc	00139$
                                   3189 ;	src/main.c:911: printf_fast_f("Rx size:%d\n\r", u8RxLineFiLen);
      000B8C 8D 02            [24] 3190 	mov	ar2,r5
      000B8E 7B 00            [12] 3191 	mov	r3,#0x00
      000B90 C0 05            [24] 3192 	push	ar5
      000B92 C0 04            [24] 3193 	push	ar4
      000B94 C0 02            [24] 3194 	push	ar2
      000B96 C0 03            [24] 3195 	push	ar3
      000B98 74r8C            [12] 3196 	mov	a,#___str_39
      000B9A C0 E0            [24] 3197 	push	acc
      000B9C 74s02            [12] 3198 	mov	a,#(___str_39 >> 8)
      000B9E C0 E0            [24] 3199 	push	acc
      000BA0 12r00r00         [24] 3200 	lcall	_printf_fast_f
      000BA3 E5 81            [12] 3201 	mov	a,sp
      000BA5 24 FC            [12] 3202 	add	a,#0xfc
      000BA7 F5 81            [12] 3203 	mov	sp,a
      000BA9 D0 04            [24] 3204 	pop	ar4
      000BAB D0 05            [24] 3205 	pop	ar5
                                   3206 ;	src/main.c:912: for (i=0; i<u8RxLineFiLen;i++) {
      000BAD 7B 00            [12] 3207 	mov	r3,#0x00
      000BAF                       3208 00150$:
      000BAF C3               [12] 3209 	clr	c
      000BB0 EB               [12] 3210 	mov	a,r3
      000BB1 9D               [12] 3211 	subb	a,r5
      000BB2 50 2C            [24] 3212 	jnc	00135$
                                   3213 ;	src/main.c:913: printf_fast_f("0x%x ", pu8RxUART[i]);
      000BB4 EB               [12] 3214 	mov	a,r3
      000BB5 24r0D            [12] 3215 	add	a,#_main_pu8RxUART_65536_124
      000BB7 F9               [12] 3216 	mov	r1,a
      000BB8 87 02            [24] 3217 	mov	ar2,@r1
      000BBA 7E 00            [12] 3218 	mov	r6,#0x00
      000BBC C0 05            [24] 3219 	push	ar5
      000BBE C0 04            [24] 3220 	push	ar4
      000BC0 C0 03            [24] 3221 	push	ar3
      000BC2 C0 02            [24] 3222 	push	ar2
      000BC4 C0 06            [24] 3223 	push	ar6
      000BC6 74r99            [12] 3224 	mov	a,#___str_40
      000BC8 C0 E0            [24] 3225 	push	acc
      000BCA 74s02            [12] 3226 	mov	a,#(___str_40 >> 8)
      000BCC C0 E0            [24] 3227 	push	acc
      000BCE 12r00r00         [24] 3228 	lcall	_printf_fast_f
      000BD1 E5 81            [12] 3229 	mov	a,sp
      000BD3 24 FC            [12] 3230 	add	a,#0xfc
      000BD5 F5 81            [12] 3231 	mov	sp,a
      000BD7 D0 03            [24] 3232 	pop	ar3
      000BD9 D0 04            [24] 3233 	pop	ar4
      000BDB D0 05            [24] 3234 	pop	ar5
                                   3235 ;	src/main.c:912: for (i=0; i<u8RxLineFiLen;i++) {
      000BDD 0B               [12] 3236 	inc	r3
      000BDE 80 CF            [24] 3237 	sjmp	00150$
      000BE0                       3238 00135$:
                                   3239 ;	src/main.c:915: printf_fast_f("\n\r");
      000BE0 C0 05            [24] 3240 	push	ar5
      000BE2 C0 04            [24] 3241 	push	ar4
      000BE4 74r00            [12] 3242 	mov	a,#___str_0
      000BE6 C0 E0            [24] 3243 	push	acc
      000BE8 74s00            [12] 3244 	mov	a,#(___str_0 >> 8)
      000BEA C0 E0            [24] 3245 	push	acc
      000BEC 12r00r00         [24] 3246 	lcall	_printf_fast_f
      000BEF 15 81            [12] 3247 	dec	sp
      000BF1 15 81            [12] 3248 	dec	sp
      000BF3 D0 04            [24] 3249 	pop	ar4
      000BF5 D0 05            [24] 3250 	pop	ar5
      000BF7 80 3E            [24] 3251 	sjmp	00140$
      000BF9                       3252 00139$:
                                   3253 ;	src/main.c:918: cp_buf2linefipacket(u8RxLineFiLen, pu8RxUART, &stLineFiPkt);
      000BF9 75*00r0D         [24] 3254 	mov	_cp_buf2linefipacket_PARM_2,#_main_pu8RxUART_65536_124
      000BFC 75*01 00         [24] 3255 	mov	(_cp_buf2linefipacket_PARM_2 + 1),#0x00
      000BFF 75*02 40         [24] 3256 	mov	(_cp_buf2linefipacket_PARM_2 + 2),#0x40
      000C02 75*00r2B         [24] 3257 	mov	_cp_buf2linefipacket_PARM_3,#_main_stLineFiPkt_65536_124
      000C05 75*01 00         [24] 3258 	mov	(_cp_buf2linefipacket_PARM_3 + 1),#0x00
      000C08 75*02 40         [24] 3259 	mov	(_cp_buf2linefipacket_PARM_3 + 2),#0x40
      000C0B 8D 82            [24] 3260 	mov	dpl,r5
      000C0D C0 05            [24] 3261 	push	ar5
      000C0F C0 04            [24] 3262 	push	ar4
      000C11 12r00r00         [24] 3263 	lcall	_cp_buf2linefipacket
                                   3264 ;	src/main.c:919: process_all_packet(&stLineFiPkt);
      000C14 90r00r2B         [24] 3265 	mov	dptr,#_main_stLineFiPkt_65536_124
      000C17 75 F0 40         [24] 3266 	mov	b,#0x40
      000C1A 12r07r0A         [24] 3267 	lcall	_process_all_packet
      000C1D D0 04            [24] 3268 	pop	ar4
      000C1F D0 05            [24] 3269 	pop	ar5
                                   3270 ;	src/main.c:921: if (gu8MyAddr == stLineFiPkt.u8Addr) {
      000C21 E5*2D            [12] 3271 	mov	a,(_main_stLineFiPkt_65536_124 + 0x0002)
      000C23 B5*00 11         [24] 3272 	cjne	a,_gu8MyAddr,00140$
                                   3273 ;	src/main.c:922: process_my_packet(&stLineFiPkt);
      000C26 90r00r2B         [24] 3274 	mov	dptr,#_main_stLineFiPkt_65536_124
      000C29 75 F0 40         [24] 3275 	mov	b,#0x40
      000C2C C0 05            [24] 3276 	push	ar5
      000C2E C0 04            [24] 3277 	push	ar4
      000C30 12r05rDC         [24] 3278 	lcall	_process_my_packet
      000C33 D0 04            [24] 3279 	pop	ar4
      000C35 D0 05            [24] 3280 	pop	ar5
      000C37                       3281 00140$:
                                   3282 ;	src/main.c:926: u8StateRxPkt = STATE_RxPKT_INIT;
      000C37 7F 00            [12] 3283 	mov	r7,#0x00
                                   3284 ;	src/main.c:931: } //switch(u8StateRxPkt)
                                   3285 ;	src/main.c:933: }
      000C39 02r08r0C         [24] 3286 	ljmp	00144$
                                   3287 	.area CSEG    (CODE)
                                   3288 	.area CONST   (CODE)
                                   3289 	.area CONST   (CODE)
      000000                       3290 ___str_0:
      000000 0A                    3291 	.db 0x0a
      000001 0D                    3292 	.db 0x0d
      000002 00                    3293 	.db 0x00
                                   3294 	.area CSEG    (CODE)
                                   3295 	.area CONST   (CODE)
      000003                       3296 ___str_1:
      000003 73 65 6C 66 20        3297 	.ascii "self "
      000008 00                    3298 	.db 0x00
                                   3299 	.area CSEG    (CODE)
                                   3300 	.area CONST   (CODE)
      000009                       3301 ___str_2:
      000009 63 72 6F 73 73        3302 	.ascii "cross"
      00000E 00                    3303 	.db 0x00
                                   3304 	.area CSEG    (CODE)
                                   3305 	.area CONST   (CODE)
      00000F                       3306 ___str_3:
      00000F 62 6F 74 68 20        3307 	.ascii "both "
      000014 00                    3308 	.db 0x00
                                   3309 	.area CSEG    (CODE)
                                   3310 	.area CONST   (CODE)
      000015                       3311 ___str_4:
      000015 20 6F 75 74 70 75 74  3312 	.ascii " output:This is UART%d"
             3A 54 68 69 73 20 69
             73 20 55 41 52 54 25
             64
      00002B 0A                    3313 	.db 0x0a
      00002C 0D                    3314 	.db 0x0d
      00002D 00                    3315 	.db 0x00
                                   3316 	.area CSEG    (CODE)
                                   3317 	.area CONST   (CODE)
      00002E                       3318 ___str_5:
      00002E 0D                    3319 	.db 0x0d
      00002F 0A                    3320 	.db 0x0a
      000030 00                    3321 	.db 0x00
                                   3322 	.area CSEG    (CODE)
                                   3323 	.area CONST   (CODE)
      000031                       3324 ___str_6:
      000031 25 63                 3325 	.ascii "%c"
      000033 00                    3326 	.db 0x00
                                   3327 	.area CSEG    (CODE)
                                   3328 	.area CONST   (CODE)
      000034                       3329 ___str_7:
      000034 0D                    3330 	.db 0x0d
      000035 0A                    3331 	.db 0x0a
      000036 69 6E 70 75 74 3A 54  3332 	.ascii "input:This is UART%d"
             68 69 73 20 69 73 20
             55 41 52 54 25 64
      00004A 00                    3333 	.db 0x00
                                   3334 	.area CSEG    (CODE)
                                   3335 	.area CONST   (CODE)
      00004B                       3336 ___str_8:
      00004B 49 64 6C 65 20 70 72  3337 	.ascii "Idle preamble on/off"
             65 61 6D 62 6C 65 20
             6F 6E 2F 6F 66 66
      00005F 0D                    3338 	.db 0x0d
      000060 0A                    3339 	.db 0x0a
      000061 00                    3340 	.db 0x00
                                   3341 	.area CSEG    (CODE)
                                   3342 	.area CONST   (CODE)
      000062                       3343 ___str_9:
      000062 4C 69 6E 65 46 69 20  3344 	.ascii "LineFi Power Off"
             50 6F 77 65 72 20 4F
             66 66
      000072 0D                    3345 	.db 0x0d
      000073 0A                    3346 	.db 0x0a
      000074 00                    3347 	.db 0x00
                                   3348 	.area CSEG    (CODE)
                                   3349 	.area CONST   (CODE)
      000075                       3350 ___str_10:
      000075 4C 69 6E 65 46 69 20  3351 	.ascii "LineFi Power On"
             50 6F 77 65 72 20 4F
             6E
      000084 0D                    3352 	.db 0x0d
      000085 0A                    3353 	.db 0x0a
      000086 00                    3354 	.db 0x00
                                   3355 	.area CSEG    (CODE)
                                   3356 	.area CONST   (CODE)
      000087                       3357 ___str_11:
      000087 4C 69 6E 65 46 69 20  3358 	.ascii "LineFi Uart Tx Low"
             55 61 72 74 20 54 78
             20 4C 6F 77
      000099 0D                    3359 	.db 0x0d
      00009A 0A                    3360 	.db 0x0a
      00009B 00                    3361 	.db 0x00
                                   3362 	.area CSEG    (CODE)
                                   3363 	.area CONST   (CODE)
      00009C                       3364 ___str_12:
      00009C 4C 69 6E 65 46 69 20  3365 	.ascii "LineFi Uart Tx High"
             55 61 72 74 20 54 78
             20 48 69 67 68
      0000AF 0D                    3366 	.db 0x0d
      0000B0 0A                    3367 	.db 0x0a
      0000B1 00                    3368 	.db 0x00
                                   3369 	.area CSEG    (CODE)
                                   3370 	.area CONST   (CODE)
      0000B2                       3371 ___str_13:
      0000B2 4C 69 6E 65 46 69 20  3372 	.ascii "LineFi CSC rx FSM Off"
             43 53 43 20 72 78 20
             46 53 4D 20 4F 66 66
      0000C7 0D                    3373 	.db 0x0d
      0000C8 0A                    3374 	.db 0x0a
      0000C9 00                    3375 	.db 0x00
                                   3376 	.area CSEG    (CODE)
                                   3377 	.area CONST   (CODE)
      0000CA                       3378 ___str_14:
      0000CA 4C 69 6E 65 46 69 20  3379 	.ascii "LineFi CSC rx FSM ON"
             43 53 43 20 72 78 20
             46 53 4D 20 4F 4E
      0000DE 0D                    3380 	.db 0x0d
      0000DF 0A                    3381 	.db 0x0a
      0000E0 00                    3382 	.db 0x00
                                   3383 	.area CSEG    (CODE)
                                   3384 	.area CONST   (CODE)
      0000E1                       3385 ___str_15:
      0000E1 56 65 72 73 69 6F 6E  3386 	.ascii "Version 1.4 on 20231026"
             20 31 2E 34 20 6F 6E
             20 32 30 32 33 31 30
             32 36
      0000F8 0D                    3387 	.db 0x0d
      0000F9 0A                    3388 	.db 0x0a
      0000FA 00                    3389 	.db 0x00
                                   3390 	.area CSEG    (CODE)
                                   3391 	.area CONST   (CODE)
      0000FB                       3392 ___str_16:
      0000FB 31 3A 20 64 6F 77 6E  3393 	.ascii "1: downlink packet 1"
             6C 69 6E 6B 20 70 61
             63 6B 65 74 20 31
      00010F 0D                    3394 	.db 0x0d
      000110 0A                    3395 	.db 0x0a
      000111 00                    3396 	.db 0x00
                                   3397 	.area CSEG    (CODE)
                                   3398 	.area CONST   (CODE)
      000112                       3399 ___str_17:
      000112 32 3A 20 64 6F 77 6E  3400 	.ascii "2: downlink packet 2"
             6C 69 6E 6B 20 70 61
             63 6B 65 74 20 32
      000126 0D                    3401 	.db 0x0d
      000127 0A                    3402 	.db 0x0a
      000128 00                    3403 	.db 0x00
                                   3404 	.area CSEG    (CODE)
                                   3405 	.area CONST   (CODE)
      000129                       3406 ___str_18:
      000129 33 3A 20 75 70 6C 69  3407 	.ascii "3: uplink idle preamble on/off"
             6E 6B 20 69 64 6C 65
             20 70 72 65 61 6D 62
             6C 65 20 6F 6E 2F 6F
             66 66
      000147 0D                    3408 	.db 0x0d
      000148 0A                    3409 	.db 0x0a
      000149 00                    3410 	.db 0x00
                                   3411 	.area CSEG    (CODE)
                                   3412 	.area CONST   (CODE)
      00014A                       3413 ___str_19:
      00014A 70 2F 50 3A 20 4C 69  3414 	.ascii "p/P: LineFi Power off/on"
             6E 65 46 69 20 50 6F
             77 65 72 20 6F 66 66
             2F 6F 6E
      000162 0D                    3415 	.db 0x0d
      000163 0A                    3416 	.db 0x0a
      000164 00                    3417 	.db 0x00
                                   3418 	.area CSEG    (CODE)
                                   3419 	.area CONST   (CODE)
      000165                       3420 ___str_20:
      000165 74 2F 54 3A 20 4C 69  3421 	.ascii "t/T: LineFi Uart Tx Low/High"
             6E 65 46 69 20 55 61
             72 74 20 54 78 20 4C
             6F 77 2F 48 69 67 68
      000181 0D                    3422 	.db 0x0d
      000182 0A                    3423 	.db 0x0a
      000183 00                    3424 	.db 0x00
                                   3425 	.area CSEG    (CODE)
                                   3426 	.area CONST   (CODE)
      000184                       3427 ___str_21:
      000184 73 2F 53 3A 20 4C 69  3428 	.ascii "s/S: LineFie CSC Rx FSM off/on"
             6E 65 46 69 65 20 43
             53 43 20 52 78 20 46
             53 4D 20 6F 66 66 2F
             6F 6E
      0001A2 0D                    3429 	.db 0x0d
      0001A3 0A                    3430 	.db 0x0a
      0001A4 00                    3431 	.db 0x00
                                   3432 	.area CSEG    (CODE)
                                   3433 	.area CONST   (CODE)
      0001A5                       3434 ___str_22:
      0001A5 74 65 73 74 20 70 72  3435 	.ascii "test procedure: p -> P -> T -> S -> 1 or 2"
             6F 63 65 64 75 72 65
             3A 20 70 20 2D 3E 20
             50 20 2D 3E 20 54 20
             2D 3E 20 53 20 2D 3E
             20 31 20 6F 72 20 32
      0001CF 0D                    3436 	.db 0x0d
      0001D0 0A                    3437 	.db 0x0a
      0001D1 00                    3438 	.db 0x00
                                   3439 	.area CSEG    (CODE)
                                   3440 	.area CONST   (CODE)
      0001D2                       3441 ___str_23:
      0001D2 4D 79 20 61 64 64 72  3442 	.ascii "My address is 0x%x"
             65 73 73 20 69 73 20
             30 78 25 78
      0001E4 0D                    3443 	.db 0x0d
      0001E5 0A                    3444 	.db 0x0a
      0001E6 00                    3445 	.db 0x00
                                   3446 	.area CSEG    (CODE)
                                   3447 	.area CONST   (CODE)
      0001E7                       3448 ___str_24:
      0001E7 73 65 74 20 61 64 64  3449 	.ascii "set address as %d"
             72 65 73 73 20 61 73
             20 25 64
      0001F8 0D                    3450 	.db 0x0d
      0001F9 0A                    3451 	.db 0x0a
      0001FA 00                    3452 	.db 0x00
                                   3453 	.area CSEG    (CODE)
                                   3454 	.area CONST   (CODE)
      0001FB                       3455 ___str_25:
      0001FB 54 68 69 73 20 69 73  3456 	.ascii "This is UART0"
             20 55 41 52 54 30
      000208 0A                    3457 	.db 0x0a
      000209 0D                    3458 	.db 0x0d
      00020A 00                    3459 	.db 0x00
                                   3460 	.area CSEG    (CODE)
                                   3461 	.area CONST   (CODE)
      00020B                       3462 ___str_26:
      00020B 54 68 69 73 20 69 73  3463 	.ascii "This is UART1"
             20 55 41 52 54 31
      000218 0A                    3464 	.db 0x0a
      000219 0D                    3465 	.db 0x0d
      00021A 00                    3466 	.db 0x00
                                   3467 	.area CSEG    (CODE)
                                   3468 	.area CONST   (CODE)
      00021B                       3469 ___str_27:
      00021B 55 41 52 54 5F 54 58  3470 	.ascii "UART_TX="
             3D
      000223 00                    3471 	.db 0x00
                                   3472 	.area CSEG    (CODE)
                                   3473 	.area CONST   (CODE)
      000224                       3474 ___str_28:
      000224 25 64                 3475 	.ascii "%d"
      000226 0A                    3476 	.db 0x0a
      000227 0D                    3477 	.db 0x0d
      000228 00                    3478 	.db 0x00
                                   3479 	.area CSEG    (CODE)
                                   3480 	.area CONST   (CODE)
      000229                       3481 ___str_29:
      000229 4C 45 44 5F 52 3D     3482 	.ascii "LED_R="
      00022F 00                    3483 	.db 0x00
                                   3484 	.area CSEG    (CODE)
                                   3485 	.area CONST   (CODE)
      000230                       3486 ___str_30:
      000230 4C 45 44 5F 47 3D     3487 	.ascii "LED_G="
      000236 00                    3488 	.db 0x00
                                   3489 	.area CSEG    (CODE)
                                   3490 	.area CONST   (CODE)
      000237                       3491 ___str_31:
      000237 4C 45 44 5F 42 3D     3492 	.ascii "LED_B="
      00023D 00                    3493 	.db 0x00
                                   3494 	.area CSEG    (CODE)
                                   3495 	.area CONST   (CODE)
      00023E                       3496 ___str_32:
      00023E 6E 6F 20 4D 4F 54 4F  3497 	.ascii "no MOTOR_EN"
             52 5F 45 4E
      000249 0D                    3498 	.db 0x0d
      00024A 0A                    3499 	.db 0x0a
      00024B 00                    3500 	.db 0x00
                                   3501 	.area CSEG    (CODE)
                                   3502 	.area CONST   (CODE)
      00024C                       3503 ___str_33:
      00024C 4D 4F 54 4F 52 5F 43  3504 	.ascii "MOTOR_CW="
             57 3D
      000255 00                    3505 	.db 0x00
                                   3506 	.area CSEG    (CODE)
                                   3507 	.area CONST   (CODE)
      000256                       3508 ___str_34:
      000256 4D 4F 54 4F 52 5F 43  3509 	.ascii "MOTOR_CCW="
             43 57 3D
      000260 00                    3510 	.db 0x00
                                   3511 	.area CSEG    (CODE)
                                   3512 	.area CONST   (CODE)
      000261                       3513 ___str_35:
      000261 53 45 4C 5F 52 58 5F  3514 	.ascii "SEL_RX_POL="
             50 4F 4C 3D
      00026C 00                    3515 	.db 0x00
                                   3516 	.area CSEG    (CODE)
                                   3517 	.area CONST   (CODE)
      00026D                       3518 ___str_36:
      00026D 63 6F 75 6E 74 3A 25  3519 	.ascii "count:%d"
             64
      000275 0D                    3520 	.db 0x0d
      000276 0A                    3521 	.db 0x0a
      000277 00                    3522 	.db 0x00
                                   3523 	.area CSEG    (CODE)
                                   3524 	.area CONST   (CODE)
      000278                       3525 ___str_37:
      000278 53 57 49 54 43 48 3A  3526 	.ascii "SWITCH:%d"
             25 64
      000281 0A                    3527 	.db 0x0a
      000282 0D                    3528 	.db 0x0d
      000283 00                    3529 	.db 0x00
                                   3530 	.area CSEG    (CODE)
                                   3531 	.area CONST   (CODE)
      000284                       3532 ___str_38:
      000284 52 78 3A 25 64        3533 	.ascii "Rx:%d"
      000289 0A                    3534 	.db 0x0a
      00028A 0D                    3535 	.db 0x0d
      00028B 00                    3536 	.db 0x00
                                   3537 	.area CSEG    (CODE)
                                   3538 	.area CONST   (CODE)
      00028C                       3539 ___str_39:
      00028C 52 78 20 73 69 7A 65  3540 	.ascii "Rx size:%d"
             3A 25 64
      000296 0A                    3541 	.db 0x0a
      000297 0D                    3542 	.db 0x0d
      000298 00                    3543 	.db 0x00
                                   3544 	.area CSEG    (CODE)
                                   3545 	.area CONST   (CODE)
      000299                       3546 ___str_40:
      000299 30 78 25 78 20        3547 	.ascii "0x%x "
      00029E 00                    3548 	.db 0x00
                                   3549 	.area CSEG    (CODE)
                                   3550 	.area CABS    (ABS,CODE)
      003700                       3551 	.org 0x3700
      003700                       3552 _gpcEEPROM:
      003700 00                    3553 	.db 0x00
      003701 00                    3554 	.db 0x00
      003702 00                    3555 	.db 0x00
      003703 00                    3556 	.db 0x00
      003704 00                    3557 	.db 0x00
      003705 00                    3558 	.db 0x00
      003706 00                    3559 	.db 0x00
      003707 00                    3560 	.db 0x00
      003708 00                    3561 	.db 0x00
      003709 00                    3562 	.db 0x00
      00370A 00                    3563 	.db 0x00
      00370B 00                    3564 	.db 0x00
      00370C 00                    3565 	.db 0x00
      00370D 00                    3566 	.db 0x00
      00370E 00                    3567 	.db 0x00
      00370F 00                    3568 	.db 0x00
      003710 00                    3569 	.db 0x00
      003711 00                    3570 	.db 0x00
      003712 00                    3571 	.db 0x00
      003713 00                    3572 	.db 0x00
      003714 00                    3573 	.db 0x00
      003715 00                    3574 	.db 0x00
      003716 00                    3575 	.db 0x00
      003717 00                    3576 	.db 0x00
      003718 00                    3577 	.db 0x00
      003719 00                    3578 	.db 0x00
      00371A 00                    3579 	.db 0x00
      00371B 00                    3580 	.db 0x00
      00371C 00                    3581 	.db 0x00
      00371D 00                    3582 	.db 0x00
      00371E 00                    3583 	.db 0x00
      00371F 00                    3584 	.db 0x00
      003720 00                    3585 	.db 0x00
      003721 00                    3586 	.db 0x00
      003722 00                    3587 	.db 0x00
      003723 00                    3588 	.db 0x00
      003724 00                    3589 	.db 0x00
      003725 00                    3590 	.db 0x00
      003726 00                    3591 	.db 0x00
      003727 00                    3592 	.db 0x00
      003728 00                    3593 	.db 0x00
      003729 00                    3594 	.db 0x00
      00372A 00                    3595 	.db 0x00
      00372B 00                    3596 	.db 0x00
      00372C 00                    3597 	.db 0x00
      00372D 00                    3598 	.db 0x00
      00372E 00                    3599 	.db 0x00
      00372F 00                    3600 	.db 0x00
      003730 00                    3601 	.db 0x00
      003731 00                    3602 	.db 0x00
      003732 00                    3603 	.db 0x00
      003733 00                    3604 	.db 0x00
      003734 00                    3605 	.db 0x00
      003735 00                    3606 	.db 0x00
      003736 00                    3607 	.db 0x00
      003737 00                    3608 	.db 0x00
      003738 00                    3609 	.db 0x00
      003739 00                    3610 	.db 0x00
      00373A 00                    3611 	.db 0x00
      00373B 00                    3612 	.db 0x00
      00373C 00                    3613 	.db 0x00
      00373D 00                    3614 	.db 0x00
      00373E 00                    3615 	.db 0x00
      00373F 00                    3616 	.db 0x00
      003740 00                    3617 	.db 0x00
      003741 00                    3618 	.db 0x00
      003742 00                    3619 	.db 0x00
      003743 00                    3620 	.db 0x00
      003744 00                    3621 	.db 0x00
      003745 00                    3622 	.db 0x00
      003746 00                    3623 	.db 0x00
      003747 00                    3624 	.db 0x00
      003748 00                    3625 	.db 0x00
      003749 00                    3626 	.db 0x00
      00374A 00                    3627 	.db 0x00
      00374B 00                    3628 	.db 0x00
      00374C 00                    3629 	.db 0x00
      00374D 00                    3630 	.db 0x00
      00374E 00                    3631 	.db 0x00
      00374F 00                    3632 	.db 0x00
      003750 00                    3633 	.db 0x00
      003751 00                    3634 	.db 0x00
      003752 00                    3635 	.db 0x00
      003753 00                    3636 	.db 0x00
      003754 00                    3637 	.db 0x00
      003755 00                    3638 	.db 0x00
      003756 00                    3639 	.db 0x00
      003757 00                    3640 	.db 0x00
      003758 00                    3641 	.db 0x00
      003759 00                    3642 	.db 0x00
      00375A 00                    3643 	.db 0x00
      00375B 00                    3644 	.db 0x00
      00375C 00                    3645 	.db 0x00
      00375D 00                    3646 	.db 0x00
      00375E 00                    3647 	.db 0x00
      00375F 00                    3648 	.db 0x00
      003760 00                    3649 	.db 0x00
      003761 00                    3650 	.db 0x00
      003762 00                    3651 	.db 0x00
      003763 00                    3652 	.db 0x00
      003764 00                    3653 	.db 0x00
      003765 00                    3654 	.db 0x00
      003766 00                    3655 	.db 0x00
      003767 00                    3656 	.db 0x00
      003768 00                    3657 	.db 0x00
      003769 00                    3658 	.db 0x00
      00376A 00                    3659 	.db 0x00
      00376B 00                    3660 	.db 0x00
      00376C 00                    3661 	.db 0x00
      00376D 00                    3662 	.db 0x00
      00376E 00                    3663 	.db 0x00
      00376F 00                    3664 	.db 0x00
      003770 00                    3665 	.db 0x00
      003771 00                    3666 	.db 0x00
      003772 00                    3667 	.db 0x00
      003773 00                    3668 	.db 0x00
      003774 00                    3669 	.db 0x00
      003775 00                    3670 	.db 0x00
      003776 00                    3671 	.db 0x00
      003777 00                    3672 	.db 0x00
      003778 00                    3673 	.db 0x00
      003779 00                    3674 	.db 0x00
      00377A 00                    3675 	.db 0x00
      00377B 00                    3676 	.db 0x00
      00377C 00                    3677 	.db 0x00
      00377D 00                    3678 	.db 0x00
      00377E 00                    3679 	.db 0x00
      00377F 00                    3680 	.db 0x00
