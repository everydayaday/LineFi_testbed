                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _chk_my_addr_PARM_2
                                     12 	.globl _state_switches_PARM_2
                                     13 	.globl _gpcEEPROM
                                     14 	.globl _main
                                     15 	.globl _print_one_octet_linefi
                                     16 	.globl _process_all_packet
                                     17 	.globl _process_my_packet
                                     18 	.globl _chk_my_addr
                                     19 	.globl _ctrl_rgbled
                                     20 	.globl _state_switches
                                     21 	.globl _gpio_setup
                                     22 	.globl _disp_help
                                     23 	.globl _MODIFY_HIRC_166
                                     24 	.globl _conv_manchester2highnibble
                                     25 	.globl _conv_manchester2nibble
                                     26 	.globl _chk_manchester
                                     27 	.globl _pin_interrupt_isr
                                     28 	.globl _Timer0_ISR
                                     29 	.globl _state_machine
                                     30 	.globl _print_char
                                     31 	.globl _print_esc
                                     32 	.globl _preamble
                                     33 	.globl _putchar_manchester
                                     34 	.globl _conv_nibble2manchester
                                     35 	.globl _Write_APROM_BYTE
                                     36 	.globl _Erase_APROM_Page
                                     37 	.globl _print_raw_packet
                                     38 	.globl _print_linefipacket
                                     39 	.globl _cp_buf2linefipacket
                                     40 	.globl _uart_setup
                                     41 	.globl _Receive_Data_From_UART1_nb
                                     42 	.globl _Receive_Data_From_UART0_nb
                                     43 	.globl _InitialUART1_Timer3
                                     44 	.globl _printf_fast_f
                                     45 	.globl _MOSI
                                     46 	.globl _P00
                                     47 	.globl _MISO
                                     48 	.globl _P01
                                     49 	.globl _RXD_1
                                     50 	.globl _P02
                                     51 	.globl _P03
                                     52 	.globl _STADC
                                     53 	.globl _P04
                                     54 	.globl _P05
                                     55 	.globl _TXD
                                     56 	.globl _P06
                                     57 	.globl _RXD
                                     58 	.globl _P07
                                     59 	.globl _IT0
                                     60 	.globl _IE0
                                     61 	.globl _IT1
                                     62 	.globl _IE1
                                     63 	.globl _TR0
                                     64 	.globl _TF0
                                     65 	.globl _TR1
                                     66 	.globl _TF1
                                     67 	.globl _P10
                                     68 	.globl _P11
                                     69 	.globl _P12
                                     70 	.globl _SCL
                                     71 	.globl _P13
                                     72 	.globl _SDA
                                     73 	.globl _P14
                                     74 	.globl _P15
                                     75 	.globl _TXD_1
                                     76 	.globl _P16
                                     77 	.globl _P17
                                     78 	.globl _RI
                                     79 	.globl _TI
                                     80 	.globl _RB8
                                     81 	.globl _TB8
                                     82 	.globl _REN
                                     83 	.globl _SM2
                                     84 	.globl _SM1
                                     85 	.globl _FE
                                     86 	.globl _SM0
                                     87 	.globl _P20
                                     88 	.globl _EX0
                                     89 	.globl _ET0
                                     90 	.globl _EX1
                                     91 	.globl _ET1
                                     92 	.globl _ES
                                     93 	.globl _EBOD
                                     94 	.globl _EADC
                                     95 	.globl _EA
                                     96 	.globl _P30
                                     97 	.globl _PX0
                                     98 	.globl _PT0
                                     99 	.globl _PX1
                                    100 	.globl _PT1
                                    101 	.globl _PS
                                    102 	.globl _PBOD
                                    103 	.globl _PADC
                                    104 	.globl _I2CPX
                                    105 	.globl _AA
                                    106 	.globl _SI
                                    107 	.globl _STO
                                    108 	.globl _STA
                                    109 	.globl _I2CEN
                                    110 	.globl _CM_RL2
                                    111 	.globl _TR2
                                    112 	.globl _TF2
                                    113 	.globl _P
                                    114 	.globl _OV
                                    115 	.globl _RS0
                                    116 	.globl _RS1
                                    117 	.globl _F0
                                    118 	.globl _AC
                                    119 	.globl _CY
                                    120 	.globl _CLRPWM
                                    121 	.globl _PWMF
                                    122 	.globl _LOAD
                                    123 	.globl _PWMRUN
                                    124 	.globl _ADCHS0
                                    125 	.globl _ADCHS1
                                    126 	.globl _ADCHS2
                                    127 	.globl _ADCHS3
                                    128 	.globl _ETGSEL0
                                    129 	.globl _ETGSEL1
                                    130 	.globl _ADCS
                                    131 	.globl _ADCF
                                    132 	.globl _RI_1
                                    133 	.globl _TI_1
                                    134 	.globl _RB8_1
                                    135 	.globl _TB8_1
                                    136 	.globl _REN_1
                                    137 	.globl _SM2_1
                                    138 	.globl _SM1_1
                                    139 	.globl _FE_1
                                    140 	.globl _SM0_1
                                    141 	.globl _EIPH1
                                    142 	.globl _EIP1
                                    143 	.globl _PMD
                                    144 	.globl _PMEN
                                    145 	.globl _PDTCNT
                                    146 	.globl _PDTEN
                                    147 	.globl _SCON_1
                                    148 	.globl _EIPH
                                    149 	.globl _AINDIDS
                                    150 	.globl _SPDR
                                    151 	.globl _SPSR
                                    152 	.globl _SPCR2
                                    153 	.globl _SPCR
                                    154 	.globl _CAPCON4
                                    155 	.globl _CAPCON3
                                    156 	.globl _B
                                    157 	.globl _EIP
                                    158 	.globl _C2H
                                    159 	.globl _C2L
                                    160 	.globl _PIF
                                    161 	.globl _PIPEN
                                    162 	.globl _PINEN
                                    163 	.globl _PICON
                                    164 	.globl _ADCCON0
                                    165 	.globl _C1H
                                    166 	.globl _C1L
                                    167 	.globl _C0H
                                    168 	.globl _C0L
                                    169 	.globl _ADCDLY
                                    170 	.globl _ADCCON2
                                    171 	.globl _ADCCON1
                                    172 	.globl _ACC
                                    173 	.globl _PWMCON1
                                    174 	.globl _PIOCON0
                                    175 	.globl _PWM3L
                                    176 	.globl _PWM2L
                                    177 	.globl _PWM1L
                                    178 	.globl _PWM0L
                                    179 	.globl _PWMPL
                                    180 	.globl _PWMCON0
                                    181 	.globl _FBD
                                    182 	.globl _PNP
                                    183 	.globl _PWM3H
                                    184 	.globl _PWM2H
                                    185 	.globl _PWM1H
                                    186 	.globl _PWM0H
                                    187 	.globl _PWMPH
                                    188 	.globl _PSW
                                    189 	.globl _ADCMPH
                                    190 	.globl _ADCMPL
                                    191 	.globl _PWM5L
                                    192 	.globl _TH2
                                    193 	.globl _PWM4L
                                    194 	.globl _TL2
                                    195 	.globl _RCMP2H
                                    196 	.globl _RCMP2L
                                    197 	.globl _T2MOD
                                    198 	.globl _T2CON
                                    199 	.globl _TA
                                    200 	.globl _PIOCON1
                                    201 	.globl _RH3
                                    202 	.globl _PWM5H
                                    203 	.globl _RL3
                                    204 	.globl _PWM4H
                                    205 	.globl _T3CON
                                    206 	.globl _ADCRH
                                    207 	.globl _ADCRL
                                    208 	.globl _I2ADDR
                                    209 	.globl _I2CON
                                    210 	.globl _I2TOC
                                    211 	.globl _I2CLK
                                    212 	.globl _I2STAT
                                    213 	.globl _I2DAT
                                    214 	.globl _SADDR_1
                                    215 	.globl _SADEN_1
                                    216 	.globl _SADEN
                                    217 	.globl _IP
                                    218 	.globl _PWMINTC
                                    219 	.globl _IPH
                                    220 	.globl _P2S
                                    221 	.globl _P1SR
                                    222 	.globl _P1M2
                                    223 	.globl _P1S
                                    224 	.globl _P1M1
                                    225 	.globl _P0SR
                                    226 	.globl _P0M2
                                    227 	.globl _P0S
                                    228 	.globl _P0M1
                                    229 	.globl _P3
                                    230 	.globl _IAPCN
                                    231 	.globl _IAPFD
                                    232 	.globl _P3SR
                                    233 	.globl _P3M2
                                    234 	.globl _P3S
                                    235 	.globl _P3M1
                                    236 	.globl _BODCON1
                                    237 	.globl _WDCON
                                    238 	.globl _SADDR
                                    239 	.globl _IE
                                    240 	.globl _IAPAH
                                    241 	.globl _IAPAL
                                    242 	.globl _IAPUEN
                                    243 	.globl _IAPTRG
                                    244 	.globl _BODCON0
                                    245 	.globl _AUXR1
                                    246 	.globl _P2
                                    247 	.globl _CHPCON
                                    248 	.globl _EIE1
                                    249 	.globl _EIE
                                    250 	.globl _SBUF_1
                                    251 	.globl _SBUF
                                    252 	.globl _SCON
                                    253 	.globl _CKEN
                                    254 	.globl _CKSWT
                                    255 	.globl _CKDIV
                                    256 	.globl _CAPCON2
                                    257 	.globl _CAPCON1
                                    258 	.globl _CAPCON0
                                    259 	.globl _SFRS
                                    260 	.globl _P1
                                    261 	.globl _WKCON
                                    262 	.globl _CKCON
                                    263 	.globl _TH1
                                    264 	.globl _TH0
                                    265 	.globl _TL1
                                    266 	.globl _TL0
                                    267 	.globl _TMOD
                                    268 	.globl _TCON
                                    269 	.globl _PCON
                                    270 	.globl _RWK
                                    271 	.globl _RCTRIM1
                                    272 	.globl _RCTRIM0
                                    273 	.globl _DPH
                                    274 	.globl _DPL
                                    275 	.globl _SP
                                    276 	.globl _P0
                                    277 	.globl _gpu32UartSpeed
                                    278 	.globl _gpu8Data
                                    279 	.globl _state_machine_PARM_4
                                    280 	.globl _state_machine_PARM_3
                                    281 	.globl _state_machine_PARM_2
                                    282 	.globl _gu16TimeCnt
                                    283 	.globl _gu8UART
                                    284 	.globl _gu8MyAddr
                                    285 	.globl _putchar
                                    286 ;--------------------------------------------------------
                                    287 ; special function registers
                                    288 ;--------------------------------------------------------
                                    289 	.area RSEG    (ABS,DATA)
      000000                        290 	.org 0x0000
                           000080   291 _P0	=	0x0080
                           000081   292 _SP	=	0x0081
                           000082   293 _DPL	=	0x0082
                           000083   294 _DPH	=	0x0083
                           000084   295 _RCTRIM0	=	0x0084
                           000085   296 _RCTRIM1	=	0x0085
                           000086   297 _RWK	=	0x0086
                           000087   298 _PCON	=	0x0087
                           000088   299 _TCON	=	0x0088
                           000089   300 _TMOD	=	0x0089
                           00008A   301 _TL0	=	0x008a
                           00008B   302 _TL1	=	0x008b
                           00008C   303 _TH0	=	0x008c
                           00008D   304 _TH1	=	0x008d
                           00008E   305 _CKCON	=	0x008e
                           00008F   306 _WKCON	=	0x008f
                           000090   307 _P1	=	0x0090
                           000091   308 _SFRS	=	0x0091
                           000092   309 _CAPCON0	=	0x0092
                           000093   310 _CAPCON1	=	0x0093
                           000094   311 _CAPCON2	=	0x0094
                           000095   312 _CKDIV	=	0x0095
                           000096   313 _CKSWT	=	0x0096
                           000097   314 _CKEN	=	0x0097
                           000098   315 _SCON	=	0x0098
                           000099   316 _SBUF	=	0x0099
                           00009A   317 _SBUF_1	=	0x009a
                           00009B   318 _EIE	=	0x009b
                           00009C   319 _EIE1	=	0x009c
                           00009F   320 _CHPCON	=	0x009f
                           0000A0   321 _P2	=	0x00a0
                           0000A2   322 _AUXR1	=	0x00a2
                           0000A3   323 _BODCON0	=	0x00a3
                           0000A4   324 _IAPTRG	=	0x00a4
                           0000A5   325 _IAPUEN	=	0x00a5
                           0000A6   326 _IAPAL	=	0x00a6
                           0000A7   327 _IAPAH	=	0x00a7
                           0000A8   328 _IE	=	0x00a8
                           0000A9   329 _SADDR	=	0x00a9
                           0000AA   330 _WDCON	=	0x00aa
                           0000AB   331 _BODCON1	=	0x00ab
                           0000AC   332 _P3M1	=	0x00ac
                           0000AC   333 _P3S	=	0x00ac
                           0000AD   334 _P3M2	=	0x00ad
                           0000AD   335 _P3SR	=	0x00ad
                           0000AE   336 _IAPFD	=	0x00ae
                           0000AF   337 _IAPCN	=	0x00af
                           0000B0   338 _P3	=	0x00b0
                           0000B1   339 _P0M1	=	0x00b1
                           0000B1   340 _P0S	=	0x00b1
                           0000B2   341 _P0M2	=	0x00b2
                           0000B2   342 _P0SR	=	0x00b2
                           0000B3   343 _P1M1	=	0x00b3
                           0000B3   344 _P1S	=	0x00b3
                           0000B4   345 _P1M2	=	0x00b4
                           0000B4   346 _P1SR	=	0x00b4
                           0000B5   347 _P2S	=	0x00b5
                           0000B7   348 _IPH	=	0x00b7
                           0000B7   349 _PWMINTC	=	0x00b7
                           0000B8   350 _IP	=	0x00b8
                           0000B9   351 _SADEN	=	0x00b9
                           0000BA   352 _SADEN_1	=	0x00ba
                           0000BB   353 _SADDR_1	=	0x00bb
                           0000BC   354 _I2DAT	=	0x00bc
                           0000BD   355 _I2STAT	=	0x00bd
                           0000BE   356 _I2CLK	=	0x00be
                           0000BF   357 _I2TOC	=	0x00bf
                           0000C0   358 _I2CON	=	0x00c0
                           0000C1   359 _I2ADDR	=	0x00c1
                           0000C2   360 _ADCRL	=	0x00c2
                           0000C3   361 _ADCRH	=	0x00c3
                           0000C4   362 _T3CON	=	0x00c4
                           0000C4   363 _PWM4H	=	0x00c4
                           0000C5   364 _RL3	=	0x00c5
                           0000C5   365 _PWM5H	=	0x00c5
                           0000C6   366 _RH3	=	0x00c6
                           0000C6   367 _PIOCON1	=	0x00c6
                           0000C7   368 _TA	=	0x00c7
                           0000C8   369 _T2CON	=	0x00c8
                           0000C9   370 _T2MOD	=	0x00c9
                           0000CA   371 _RCMP2L	=	0x00ca
                           0000CB   372 _RCMP2H	=	0x00cb
                           0000CC   373 _TL2	=	0x00cc
                           0000CC   374 _PWM4L	=	0x00cc
                           0000CD   375 _TH2	=	0x00cd
                           0000CD   376 _PWM5L	=	0x00cd
                           0000CE   377 _ADCMPL	=	0x00ce
                           0000CF   378 _ADCMPH	=	0x00cf
                           0000D0   379 _PSW	=	0x00d0
                           0000D1   380 _PWMPH	=	0x00d1
                           0000D2   381 _PWM0H	=	0x00d2
                           0000D3   382 _PWM1H	=	0x00d3
                           0000D4   383 _PWM2H	=	0x00d4
                           0000D5   384 _PWM3H	=	0x00d5
                           0000D6   385 _PNP	=	0x00d6
                           0000D7   386 _FBD	=	0x00d7
                           0000D8   387 _PWMCON0	=	0x00d8
                           0000D9   388 _PWMPL	=	0x00d9
                           0000DA   389 _PWM0L	=	0x00da
                           0000DB   390 _PWM1L	=	0x00db
                           0000DC   391 _PWM2L	=	0x00dc
                           0000DD   392 _PWM3L	=	0x00dd
                           0000DE   393 _PIOCON0	=	0x00de
                           0000DF   394 _PWMCON1	=	0x00df
                           0000E0   395 _ACC	=	0x00e0
                           0000E1   396 _ADCCON1	=	0x00e1
                           0000E2   397 _ADCCON2	=	0x00e2
                           0000E3   398 _ADCDLY	=	0x00e3
                           0000E4   399 _C0L	=	0x00e4
                           0000E5   400 _C0H	=	0x00e5
                           0000E6   401 _C1L	=	0x00e6
                           0000E7   402 _C1H	=	0x00e7
                           0000E8   403 _ADCCON0	=	0x00e8
                           0000E9   404 _PICON	=	0x00e9
                           0000EA   405 _PINEN	=	0x00ea
                           0000EB   406 _PIPEN	=	0x00eb
                           0000EC   407 _PIF	=	0x00ec
                           0000ED   408 _C2L	=	0x00ed
                           0000EE   409 _C2H	=	0x00ee
                           0000EF   410 _EIP	=	0x00ef
                           0000F0   411 _B	=	0x00f0
                           0000F1   412 _CAPCON3	=	0x00f1
                           0000F2   413 _CAPCON4	=	0x00f2
                           0000F3   414 _SPCR	=	0x00f3
                           0000F3   415 _SPCR2	=	0x00f3
                           0000F4   416 _SPSR	=	0x00f4
                           0000F5   417 _SPDR	=	0x00f5
                           0000F6   418 _AINDIDS	=	0x00f6
                           0000F7   419 _EIPH	=	0x00f7
                           0000F8   420 _SCON_1	=	0x00f8
                           0000F9   421 _PDTEN	=	0x00f9
                           0000FA   422 _PDTCNT	=	0x00fa
                           0000FB   423 _PMEN	=	0x00fb
                           0000FC   424 _PMD	=	0x00fc
                           0000FE   425 _EIP1	=	0x00fe
                           0000FF   426 _EIPH1	=	0x00ff
                                    427 ;--------------------------------------------------------
                                    428 ; special function bits
                                    429 ;--------------------------------------------------------
                                    430 	.area RSEG    (ABS,DATA)
      000000                        431 	.org 0x0000
                           0000FF   432 _SM0_1	=	0x00ff
                           0000FF   433 _FE_1	=	0x00ff
                           0000FE   434 _SM1_1	=	0x00fe
                           0000FD   435 _SM2_1	=	0x00fd
                           0000FC   436 _REN_1	=	0x00fc
                           0000FB   437 _TB8_1	=	0x00fb
                           0000FA   438 _RB8_1	=	0x00fa
                           0000F9   439 _TI_1	=	0x00f9
                           0000F8   440 _RI_1	=	0x00f8
                           0000EF   441 _ADCF	=	0x00ef
                           0000EE   442 _ADCS	=	0x00ee
                           0000ED   443 _ETGSEL1	=	0x00ed
                           0000EC   444 _ETGSEL0	=	0x00ec
                           0000EB   445 _ADCHS3	=	0x00eb
                           0000EA   446 _ADCHS2	=	0x00ea
                           0000E9   447 _ADCHS1	=	0x00e9
                           0000E8   448 _ADCHS0	=	0x00e8
                           0000DF   449 _PWMRUN	=	0x00df
                           0000DE   450 _LOAD	=	0x00de
                           0000DD   451 _PWMF	=	0x00dd
                           0000DC   452 _CLRPWM	=	0x00dc
                           0000D7   453 _CY	=	0x00d7
                           0000D6   454 _AC	=	0x00d6
                           0000D5   455 _F0	=	0x00d5
                           0000D4   456 _RS1	=	0x00d4
                           0000D3   457 _RS0	=	0x00d3
                           0000D2   458 _OV	=	0x00d2
                           0000D0   459 _P	=	0x00d0
                           0000CF   460 _TF2	=	0x00cf
                           0000CA   461 _TR2	=	0x00ca
                           0000C8   462 _CM_RL2	=	0x00c8
                           0000C6   463 _I2CEN	=	0x00c6
                           0000C5   464 _STA	=	0x00c5
                           0000C4   465 _STO	=	0x00c4
                           0000C3   466 _SI	=	0x00c3
                           0000C2   467 _AA	=	0x00c2
                           0000C0   468 _I2CPX	=	0x00c0
                           0000BE   469 _PADC	=	0x00be
                           0000BD   470 _PBOD	=	0x00bd
                           0000BC   471 _PS	=	0x00bc
                           0000BB   472 _PT1	=	0x00bb
                           0000BA   473 _PX1	=	0x00ba
                           0000B9   474 _PT0	=	0x00b9
                           0000B8   475 _PX0	=	0x00b8
                           0000B0   476 _P30	=	0x00b0
                           0000AF   477 _EA	=	0x00af
                           0000AE   478 _EADC	=	0x00ae
                           0000AD   479 _EBOD	=	0x00ad
                           0000AC   480 _ES	=	0x00ac
                           0000AB   481 _ET1	=	0x00ab
                           0000AA   482 _EX1	=	0x00aa
                           0000A9   483 _ET0	=	0x00a9
                           0000A8   484 _EX0	=	0x00a8
                           0000A0   485 _P20	=	0x00a0
                           00009F   486 _SM0	=	0x009f
                           00009F   487 _FE	=	0x009f
                           00009E   488 _SM1	=	0x009e
                           00009D   489 _SM2	=	0x009d
                           00009C   490 _REN	=	0x009c
                           00009B   491 _TB8	=	0x009b
                           00009A   492 _RB8	=	0x009a
                           000099   493 _TI	=	0x0099
                           000098   494 _RI	=	0x0098
                           000097   495 _P17	=	0x0097
                           000096   496 _P16	=	0x0096
                           000096   497 _TXD_1	=	0x0096
                           000095   498 _P15	=	0x0095
                           000094   499 _P14	=	0x0094
                           000094   500 _SDA	=	0x0094
                           000093   501 _P13	=	0x0093
                           000093   502 _SCL	=	0x0093
                           000092   503 _P12	=	0x0092
                           000091   504 _P11	=	0x0091
                           000090   505 _P10	=	0x0090
                           00008F   506 _TF1	=	0x008f
                           00008E   507 _TR1	=	0x008e
                           00008D   508 _TF0	=	0x008d
                           00008C   509 _TR0	=	0x008c
                           00008B   510 _IE1	=	0x008b
                           00008A   511 _IT1	=	0x008a
                           000089   512 _IE0	=	0x0089
                           000088   513 _IT0	=	0x0088
                           000087   514 _P07	=	0x0087
                           000087   515 _RXD	=	0x0087
                           000086   516 _P06	=	0x0086
                           000086   517 _TXD	=	0x0086
                           000085   518 _P05	=	0x0085
                           000084   519 _P04	=	0x0084
                           000084   520 _STADC	=	0x0084
                           000083   521 _P03	=	0x0083
                           000082   522 _P02	=	0x0082
                           000082   523 _RXD_1	=	0x0082
                           000081   524 _P01	=	0x0081
                           000081   525 _MISO	=	0x0081
                           000080   526 _P00	=	0x0080
                           000080   527 _MOSI	=	0x0080
                                    528 ;--------------------------------------------------------
                                    529 ; overlayable register banks
                                    530 ;--------------------------------------------------------
                                    531 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        532 	.ds 8
                                    533 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        534 	.ds 8
                                    535 ;--------------------------------------------------------
                                    536 ; internal ram data
                                    537 ;--------------------------------------------------------
                                    538 	.area DSEG    (DATA)
      000000                        539 _gu8MyAddr::
      000000                        540 	.ds 1
      000001                        541 _gu8UART::
      000001                        542 	.ds 1
      000002                        543 _gu16TimeCnt::
      000002                        544 	.ds 2
      000004                        545 _state_machine_PARM_2:
      000004                        546 	.ds 1
      000005                        547 _state_machine_PARM_3:
      000005                        548 	.ds 1
      000006                        549 _state_machine_PARM_4:
      000006                        550 	.ds 1
      000007                        551 _state_switches_su8PrevSW_65536_96:
      000007                        552 	.ds 1
      000008                        553 _process_my_packet_sloc0_1_0:
      000008                        554 	.ds 3
      00000B                        555 _main_su8Cnt_262145_138:
      00000B                        556 	.ds 1
      00000C                        557 _main_u8RxUART_65536_128:
      00000C                        558 	.ds 1
      00000D                        559 _main_stLineFiPkt_65536_128:
      00000D                        560 	.ds 8
      000015                        561 _main_pu8LineFiRx_65536_128:
      000015                        562 	.ds 10
                                    563 ;--------------------------------------------------------
                                    564 ; overlayable items in internal ram
                                    565 ;--------------------------------------------------------
                                    566 	.area	OSEG    (OVR,DATA)
                                    567 	.area	OSEG    (OVR,DATA)
                                    568 	.area	OSEG    (OVR,DATA)
                                    569 	.area	OSEG    (OVR,DATA)
                                    570 	.area	OSEG    (OVR,DATA)
                                    571 	.area	OSEG    (OVR,DATA)
                                    572 	.area	OSEG    (OVR,DATA)
      000000                        573 _state_switches_PARM_2:
      000000                        574 	.ds 3
                                    575 	.area	OSEG    (OVR,DATA)
                                    576 	.area	OSEG    (OVR,DATA)
      000000                        577 _chk_my_addr_PARM_2:
      000000                        578 	.ds 1
                                    579 ;--------------------------------------------------------
                                    580 ; Stack segment in internal ram
                                    581 ;--------------------------------------------------------
                                    582 	.area	SSEG
      000000                        583 __start__stack:
      000000                        584 	.ds	1
                                    585 
                                    586 ;--------------------------------------------------------
                                    587 ; indirectly addressable internal ram data
                                    588 ;--------------------------------------------------------
                                    589 	.area ISEG    (DATA)
                                    590 ;--------------------------------------------------------
                                    591 ; absolute internal ram data
                                    592 ;--------------------------------------------------------
                                    593 	.area IABS    (ABS,DATA)
                                    594 	.area IABS    (ABS,DATA)
                                    595 ;--------------------------------------------------------
                                    596 ; bit data
                                    597 ;--------------------------------------------------------
                                    598 	.area BSEG    (BIT)
                                    599 ;--------------------------------------------------------
                                    600 ; paged external ram data
                                    601 ;--------------------------------------------------------
                                    602 	.area PSEG    (PAG,XDATA)
                                    603 ;--------------------------------------------------------
                                    604 ; external ram data
                                    605 ;--------------------------------------------------------
                                    606 	.area XSEG    (XDATA)
      000000                        607 _gpu8Data::
      000000                        608 	.ds 20
      000014                        609 _gpu32UartSpeed::
      000014                        610 	.ds 56
      00004C                        611 _main_pu8RxUART_65536_128:
      00004C                        612 	.ds 30
                                    613 ;--------------------------------------------------------
                                    614 ; absolute external ram data
                                    615 ;--------------------------------------------------------
                                    616 	.area XABS    (ABS,XDATA)
                                    617 ;--------------------------------------------------------
                                    618 ; external initialized ram data
                                    619 ;--------------------------------------------------------
                                    620 	.area HOME    (CODE)
                                    621 	.area GSINIT0 (CODE)
                                    622 	.area GSINIT1 (CODE)
                                    623 	.area GSINIT2 (CODE)
                                    624 	.area GSINIT3 (CODE)
                                    625 	.area GSINIT4 (CODE)
                                    626 	.area GSINIT5 (CODE)
                                    627 	.area GSINIT  (CODE)
                                    628 	.area GSFINAL (CODE)
                                    629 	.area CSEG    (CODE)
                                    630 ;--------------------------------------------------------
                                    631 ; interrupt vector
                                    632 ;--------------------------------------------------------
                                    633 	.area HOME    (CODE)
      000000                        634 __interrupt_vect:
      000000 02r00r00         [24]  635 	ljmp	__sdcc_gsinit_startup
      000003 32               [24]  636 	reti
      000004                        637 	.ds	7
      00000B 02r01rE0         [24]  638 	ljmp	_Timer0_ISR
      00000E                        639 	.ds	5
      000013 32               [24]  640 	reti
      000014                        641 	.ds	7
      00001B 32               [24]  642 	reti
      00001C                        643 	.ds	7
      000023 32               [24]  644 	reti
      000024                        645 	.ds	7
      00002B 32               [24]  646 	reti
      00002C                        647 	.ds	7
      000033 32               [24]  648 	reti
      000034                        649 	.ds	7
      00003B 02r01rF7         [24]  650 	ljmp	_pin_interrupt_isr
                                    651 ;--------------------------------------------------------
                                    652 ; global & static initialisations
                                    653 ;--------------------------------------------------------
                                    654 	.area HOME    (CODE)
                                    655 	.area GSINIT  (CODE)
                                    656 	.area GSFINAL (CODE)
                                    657 	.area GSINIT  (CODE)
                                    658 	.globl __sdcc_gsinit_startup
                                    659 	.globl __sdcc_program_startup
                                    660 	.globl __start__stack
                                    661 	.globl __mcs51_genRAMCLEAR
                                    662 ;------------------------------------------------------------
                                    663 ;Allocation info for local variables in function 'state_switches'
                                    664 ;------------------------------------------------------------
                                    665 ;su8PrevSW                 Allocated with name '_state_switches_su8PrevSW_65536_96'
                                    666 ;apu8SwNum                 Allocated with name '_state_switches_PARM_2'
                                    667 ;au8SW                     Allocated to registers r7 
                                    668 ;i                         Allocated to registers r2 
                                    669 ;u8Result                  Allocated to registers r6 
                                    670 ;------------------------------------------------------------
                                    671 ;	src/main.c:463: static UINT8 su8PrevSW = 0;
      000000 75*07 00         [24]  672 	mov	_state_switches_su8PrevSW_65536_96,#0x00
                                    673 ;------------------------------------------------------------
                                    674 ;Allocation info for local variables in function 'main'
                                    675 ;------------------------------------------------------------
                                    676 ;su8Cnt                    Allocated with name '_main_su8Cnt_262145_138'
                                    677 ;u8PrevSwitch              Allocated to registers r5 
                                    678 ;u8UartRx                  Allocated to registers 
                                    679 ;u8RotSense                Allocated to registers 
                                    680 ;u8RxUART                  Allocated with name '_main_u8RxUART_65536_128'
                                    681 ;u16Cnt                    Allocated to registers r4 r5 
                                    682 ;u8OutputState             Allocated to registers 
                                    683 ;u8LineFiAddr              Allocated to registers 
                                    684 ;u8LineFiSpeed             Allocated to registers 
                                    685 ;u8Data                    Allocated to registers 
                                    686 ;u8LineFiCmd               Allocated to registers 
                                    687 ;u8PwrOnFirstFlag          Allocated to registers 
                                    688 ;u8StateRxLFP              Allocated to registers r7 
                                    689 ;stLineFiPkt               Allocated with name '_main_stLineFiPkt_65536_128'
                                    690 ;u8MotorState              Allocated to registers 
                                    691 ;u8RxIdx                   Allocated to registers r6 
                                    692 ;pu8LineFiRx               Allocated with name '_main_pu8LineFiRx_65536_128'
                                    693 ;u8LineFiRxIdx             Allocated to registers 
                                    694 ;u8Count2                  Allocated to registers 
                                    695 ;u8RxPktCnt                Allocated to registers 
                                    696 ;u8PreambleCnt             Allocated to registers 
                                    697 ;pu8RxUART                 Allocated with name '_main_pu8RxUART_65536_128'
                                    698 ;------------------------------------------------------------
                                    699 ;	src/main.c:844: static uint8 su8Cnt = 0;
      000003 75*0B 00         [24]  700 	mov	_main_su8Cnt_262145_138,#0x00
                                    701 ;	src/main.c:107: UINT8 gu8UART = 0;
      000006 75*01 00         [24]  702 	mov	_gu8UART,#0x00
                                    703 ;	src/main.c:108: UINT16 gu16TimeCnt = 0;
      000009 E4               [12]  704 	clr	a
      00000A F5*02            [12]  705 	mov	_gu16TimeCnt,a
      00000C F5*03            [12]  706 	mov	(_gu16TimeCnt + 1),a
                                    707 ;	src/main.c:90: UINT32 __xdata gpu32UartSpeed[] = {
      00000E 90r00r14         [24]  708 	mov	dptr,#_gpu32UartSpeed
      000011 74 60            [12]  709 	mov	a,#0x60
      000013 F0               [24]  710 	movx	@dptr,a
      000014 74 09            [12]  711 	mov	a,#0x09
      000016 A3               [24]  712 	inc	dptr
      000017 F0               [24]  713 	movx	@dptr,a
      000018 E4               [12]  714 	clr	a
      000019 A3               [24]  715 	inc	dptr
      00001A F0               [24]  716 	movx	@dptr,a
      00001B A3               [24]  717 	inc	dptr
      00001C F0               [24]  718 	movx	@dptr,a
      00001D 90r00r18         [24]  719 	mov	dptr,#(_gpu32UartSpeed + 0x0004)
      000020 74 80            [12]  720 	mov	a,#0x80
      000022 F0               [24]  721 	movx	@dptr,a
      000023 74 70            [12]  722 	mov	a,#0x70
      000025 A3               [24]  723 	inc	dptr
      000026 F0               [24]  724 	movx	@dptr,a
      000027 E4               [12]  725 	clr	a
      000028 A3               [24]  726 	inc	dptr
      000029 F0               [24]  727 	movx	@dptr,a
      00002A A3               [24]  728 	inc	dptr
      00002B F0               [24]  729 	movx	@dptr,a
      00002C 90r00r1C         [24]  730 	mov	dptr,#(_gpu32UartSpeed + 0x0008)
      00002F F0               [24]  731 	movx	@dptr,a
      000030 74 96            [12]  732 	mov	a,#0x96
      000032 A3               [24]  733 	inc	dptr
      000033 F0               [24]  734 	movx	@dptr,a
      000034 E4               [12]  735 	clr	a
      000035 A3               [24]  736 	inc	dptr
      000036 F0               [24]  737 	movx	@dptr,a
      000037 A3               [24]  738 	inc	dptr
      000038 F0               [24]  739 	movx	@dptr,a
      000039 90r00r20         [24]  740 	mov	dptr,#(_gpu32UartSpeed + 0x000c)
      00003C F0               [24]  741 	movx	@dptr,a
      00003D 74 E1            [12]  742 	mov	a,#0xe1
      00003F A3               [24]  743 	inc	dptr
      000040 F0               [24]  744 	movx	@dptr,a
      000041 E4               [12]  745 	clr	a
      000042 A3               [24]  746 	inc	dptr
      000043 F0               [24]  747 	movx	@dptr,a
      000044 A3               [24]  748 	inc	dptr
      000045 F0               [24]  749 	movx	@dptr,a
      000046 90r00r24         [24]  750 	mov	dptr,#(_gpu32UartSpeed + 0x0010)
      000049 F0               [24]  751 	movx	@dptr,a
      00004A 74 C2            [12]  752 	mov	a,#0xc2
      00004C A3               [24]  753 	inc	dptr
      00004D F0               [24]  754 	movx	@dptr,a
      00004E 74 01            [12]  755 	mov	a,#0x01
      000050 A3               [24]  756 	inc	dptr
      000051 F0               [24]  757 	movx	@dptr,a
      000052 E4               [12]  758 	clr	a
      000053 A3               [24]  759 	inc	dptr
      000054 F0               [24]  760 	movx	@dptr,a
      000055 90r00r28         [24]  761 	mov	dptr,#(_gpu32UartSpeed + 0x0014)
      000058 F0               [24]  762 	movx	@dptr,a
      000059 74 84            [12]  763 	mov	a,#0x84
      00005B A3               [24]  764 	inc	dptr
      00005C F0               [24]  765 	movx	@dptr,a
      00005D 74 03            [12]  766 	mov	a,#0x03
      00005F A3               [24]  767 	inc	dptr
      000060 F0               [24]  768 	movx	@dptr,a
      000061 E4               [12]  769 	clr	a
      000062 A3               [24]  770 	inc	dptr
      000063 F0               [24]  771 	movx	@dptr,a
      000064 90r00r2C         [24]  772 	mov	dptr,#(_gpu32UartSpeed + 0x0018)
      000067 74 E0            [12]  773 	mov	a,#0xe0
      000069 F0               [24]  774 	movx	@dptr,a
      00006A 74 93            [12]  775 	mov	a,#0x93
      00006C A3               [24]  776 	inc	dptr
      00006D F0               [24]  777 	movx	@dptr,a
      00006E 74 04            [12]  778 	mov	a,#0x04
      000070 A3               [24]  779 	inc	dptr
      000071 F0               [24]  780 	movx	@dptr,a
      000072 E4               [12]  781 	clr	a
      000073 A3               [24]  782 	inc	dptr
      000074 F0               [24]  783 	movx	@dptr,a
      000075 90r00r30         [24]  784 	mov	dptr,#(_gpu32UartSpeed + 0x001c)
      000078 F0               [24]  785 	movx	@dptr,a
      000079 74 08            [12]  786 	mov	a,#0x08
      00007B A3               [24]  787 	inc	dptr
      00007C F0               [24]  788 	movx	@dptr,a
      00007D 14               [12]  789 	dec	a
      00007E A3               [24]  790 	inc	dptr
      00007F F0               [24]  791 	movx	@dptr,a
      000080 E4               [12]  792 	clr	a
      000081 A3               [24]  793 	inc	dptr
      000082 F0               [24]  794 	movx	@dptr,a
      000083 90r00r34         [24]  795 	mov	dptr,#(_gpu32UartSpeed + 0x0020)
      000086 74 20            [12]  796 	mov	a,#0x20
      000088 F0               [24]  797 	movx	@dptr,a
      000089 74 A1            [12]  798 	mov	a,#0xa1
      00008B A3               [24]  799 	inc	dptr
      00008C F0               [24]  800 	movx	@dptr,a
      00008D 74 07            [12]  801 	mov	a,#0x07
      00008F A3               [24]  802 	inc	dptr
      000090 F0               [24]  803 	movx	@dptr,a
      000091 E4               [12]  804 	clr	a
      000092 A3               [24]  805 	inc	dptr
      000093 F0               [24]  806 	movx	@dptr,a
      000094 90r00r38         [24]  807 	mov	dptr,#(_gpu32UartSpeed + 0x0024)
      000097 74 C0            [12]  808 	mov	a,#0xc0
      000099 F0               [24]  809 	movx	@dptr,a
      00009A 74 27            [12]  810 	mov	a,#0x27
      00009C A3               [24]  811 	inc	dptr
      00009D F0               [24]  812 	movx	@dptr,a
      00009E 74 09            [12]  813 	mov	a,#0x09
      0000A0 A3               [24]  814 	inc	dptr
      0000A1 F0               [24]  815 	movx	@dptr,a
      0000A2 E4               [12]  816 	clr	a
      0000A3 A3               [24]  817 	inc	dptr
      0000A4 F0               [24]  818 	movx	@dptr,a
      0000A5 90r00r3C         [24]  819 	mov	dptr,#(_gpu32UartSpeed + 0x0028)
      0000A8 74 60            [12]  820 	mov	a,#0x60
      0000AA F0               [24]  821 	movx	@dptr,a
      0000AB 74 AE            [12]  822 	mov	a,#0xae
      0000AD A3               [24]  823 	inc	dptr
      0000AE F0               [24]  824 	movx	@dptr,a
      0000AF 74 0A            [12]  825 	mov	a,#0x0a
      0000B1 A3               [24]  826 	inc	dptr
      0000B2 F0               [24]  827 	movx	@dptr,a
      0000B3 E4               [12]  828 	clr	a
      0000B4 A3               [24]  829 	inc	dptr
      0000B5 F0               [24]  830 	movx	@dptr,a
      0000B6 90r00r40         [24]  831 	mov	dptr,#(_gpu32UartSpeed + 0x002c)
      0000B9 F0               [24]  832 	movx	@dptr,a
      0000BA 74 35            [12]  833 	mov	a,#0x35
      0000BC A3               [24]  834 	inc	dptr
      0000BD F0               [24]  835 	movx	@dptr,a
      0000BE 74 0C            [12]  836 	mov	a,#0x0c
      0000C0 A3               [24]  837 	inc	dptr
      0000C1 F0               [24]  838 	movx	@dptr,a
      0000C2 E4               [12]  839 	clr	a
      0000C3 A3               [24]  840 	inc	dptr
      0000C4 F0               [24]  841 	movx	@dptr,a
      0000C5 90r00r44         [24]  842 	mov	dptr,#(_gpu32UartSpeed + 0x0030)
      0000C8 74 A0            [12]  843 	mov	a,#0xa0
      0000CA F0               [24]  844 	movx	@dptr,a
      0000CB 74 BB            [12]  845 	mov	a,#0xbb
      0000CD A3               [24]  846 	inc	dptr
      0000CE F0               [24]  847 	movx	@dptr,a
      0000CF 74 0D            [12]  848 	mov	a,#0x0d
      0000D1 A3               [24]  849 	inc	dptr
      0000D2 F0               [24]  850 	movx	@dptr,a
      0000D3 E4               [12]  851 	clr	a
      0000D4 A3               [24]  852 	inc	dptr
      0000D5 F0               [24]  853 	movx	@dptr,a
      0000D6 90r00r48         [24]  854 	mov	dptr,#(_gpu32UartSpeed + 0x0034)
      0000D9 F0               [24]  855 	movx	@dptr,a
      0000DA 74 10            [12]  856 	mov	a,#0x10
      0000DC A3               [24]  857 	inc	dptr
      0000DD F0               [24]  858 	movx	@dptr,a
      0000DE 74 0E            [12]  859 	mov	a,#0x0e
      0000E0 A3               [24]  860 	inc	dptr
      0000E1 F0               [24]  861 	movx	@dptr,a
      0000E2 E4               [12]  862 	clr	a
      0000E3 A3               [24]  863 	inc	dptr
      0000E4 F0               [24]  864 	movx	@dptr,a
                                    865 	.area GSFINAL (CODE)
      000000 02r00r3E         [24]  866 	ljmp	__sdcc_program_startup
                                    867 ;--------------------------------------------------------
                                    868 ; Home
                                    869 ;--------------------------------------------------------
                                    870 	.area HOME    (CODE)
                                    871 	.area HOME    (CODE)
      00003E                        872 __sdcc_program_startup:
      00003E 02r08r19         [24]  873 	ljmp	_main
                                    874 ;	return from main will return to caller
                                    875 ;--------------------------------------------------------
                                    876 ; code
                                    877 ;--------------------------------------------------------
                                    878 	.area CSEG    (CODE)
                                    879 ;------------------------------------------------------------
                                    880 ;Allocation info for local variables in function 'putchar'
                                    881 ;------------------------------------------------------------
                                    882 ;c                         Allocated to registers r7 
                                    883 ;------------------------------------------------------------
                                    884 ;	src/main.c:111: void putchar (char c) 
                                    885 ;	-----------------------------------------
                                    886 ;	 function putchar
                                    887 ;	-----------------------------------------
      000000                        888 _putchar:
                           000007   889 	ar7 = 0x07
                           000006   890 	ar6 = 0x06
                           000005   891 	ar5 = 0x05
                           000004   892 	ar4 = 0x04
                           000003   893 	ar3 = 0x03
                           000002   894 	ar2 = 0x02
                           000001   895 	ar1 = 0x01
                           000000   896 	ar0 = 0x00
      000000 AF 82            [24]  897 	mov	r7,dpl
                                    898 ;	src/main.c:113: if (gu8UART == 0)  {
      000002 E5*01            [12]  899 	mov	a,_gu8UART
      000004 70 09            [24]  900 	jnz	00108$
                                    901 ;	src/main.c:114: TI = 0;
                                    902 ;	assignBit
      000006 C2 99            [12]  903 	clr	_TI
                                    904 ;	src/main.c:115: SBUF = c;
      000008 8F 99            [24]  905 	mov	_SBUF,r7
                                    906 ;	src/main.c:116: while(TI==0);
      00000A                        907 00101$:
      00000A 20 99 09         [24]  908 	jb	_TI,00110$
      00000D 80 FB            [24]  909 	sjmp	00101$
      00000F                        910 00108$:
                                    911 ;	src/main.c:119: TI_1 = 0;
                                    912 ;	assignBit
      00000F C2 F9            [12]  913 	clr	_TI_1
                                    914 ;	src/main.c:120: SBUF_1 = c;
      000011 8F 9A            [24]  915 	mov	_SBUF_1,r7
                                    916 ;	src/main.c:121: while(TI_1==0);
      000013                        917 00104$:
      000013 30 F9 FD         [24]  918 	jnb	_TI_1,00104$
      000016                        919 00110$:
                                    920 ;	src/main.c:123: }
      000016 22               [24]  921 	ret
                                    922 ;------------------------------------------------------------
                                    923 ;Allocation info for local variables in function 'conv_nibble2manchester'
                                    924 ;------------------------------------------------------------
                                    925 ;c                         Allocated to registers r7 
                                    926 ;i                         Allocated to registers r5 
                                    927 ;u8Manch                   Allocated to registers r4 
                                    928 ;------------------------------------------------------------
                                    929 ;	src/main.c:125: UINT8 conv_nibble2manchester (UINT8 c)
                                    930 ;	-----------------------------------------
                                    931 ;	 function conv_nibble2manchester
                                    932 ;	-----------------------------------------
      000017                        933 _conv_nibble2manchester:
      000017 AF 82            [24]  934 	mov	r7,dpl
                                    935 ;	src/main.c:135: UINT8 u8Manch = 0;
      000019 7E 00            [12]  936 	mov	r6,#0x00
                                    937 ;	src/main.c:136: for (i=0;i<4;i++) {
      00001B 7D 00            [12]  938 	mov	r5,#0x00
      00001D                        939 00105$:
                                    940 ;	src/main.c:137: u8Manch >>=2;
      00001D EE               [12]  941 	mov	a,r6
      00001E 03               [12]  942 	rr	a
      00001F 03               [12]  943 	rr	a
      000020 54 3F            [12]  944 	anl	a,#0x3f
      000022 FC               [12]  945 	mov	r4,a
                                    946 ;	src/main.c:138: if (c&1) {
      000023 EF               [12]  947 	mov	a,r7
      000024 30 E0 06         [24]  948 	jnb	acc.0,00102$
                                    949 ;	src/main.c:139: u8Manch |= 0x40; // 1 -> 0
      000027 74 40            [12]  950 	mov	a,#0x40
      000029 4C               [12]  951 	orl	a,r4
      00002A FE               [12]  952 	mov	r6,a
      00002B 80 04            [24]  953 	sjmp	00103$
      00002D                        954 00102$:
                                    955 ;	src/main.c:142: u8Manch |= 0x80; // 0 -> 1
      00002D 74 80            [12]  956 	mov	a,#0x80
      00002F 4C               [12]  957 	orl	a,r4
      000030 FE               [12]  958 	mov	r6,a
      000031                        959 00103$:
                                    960 ;	src/main.c:144: c >>= 1;
      000031 EF               [12]  961 	mov	a,r7
      000032 C3               [12]  962 	clr	c
      000033 13               [12]  963 	rrc	a
      000034 FF               [12]  964 	mov	r7,a
                                    965 ;	src/main.c:136: for (i=0;i<4;i++) {
      000035 0D               [12]  966 	inc	r5
      000036 BD 04 00         [24]  967 	cjne	r5,#0x04,00126$
      000039                        968 00126$:
      000039 40 E2            [24]  969 	jc	00105$
                                    970 ;	src/main.c:146: return u8Manch;
      00003B 8E 82            [24]  971 	mov	dpl,r6
                                    972 ;	src/main.c:147: }
      00003D 22               [24]  973 	ret
                                    974 ;------------------------------------------------------------
                                    975 ;Allocation info for local variables in function 'putchar_manchester'
                                    976 ;------------------------------------------------------------
                                    977 ;c                         Allocated to registers r7 
                                    978 ;------------------------------------------------------------
                                    979 ;	src/main.c:149: void putchar_manchester (char c) 
                                    980 ;	-----------------------------------------
                                    981 ;	 function putchar_manchester
                                    982 ;	-----------------------------------------
      00003E                        983 _putchar_manchester:
                                    984 ;	src/main.c:151: gu8UART = 1;
                                    985 ;	src/main.c:152: putchar(conv_nibble2manchester(c));
      00003E AF 82            [24]  986 	mov	r7,dpl
      000040 75*01 01         [24]  987 	mov	_gu8UART,#0x01
      000043 C0 07            [24]  988 	push	ar7
      000045 12r00r17         [24]  989 	lcall	_conv_nibble2manchester
      000048 12r00r00         [24]  990 	lcall	_putchar
      00004B D0 07            [24]  991 	pop	ar7
                                    992 ;	src/main.c:153: putchar(conv_nibble2manchester(c>>4));
      00004D EF               [12]  993 	mov	a,r7
      00004E C4               [12]  994 	swap	a
      00004F 54 0F            [12]  995 	anl	a,#0x0f
      000051 F5 82            [12]  996 	mov	dpl,a
      000053 12r00r17         [24]  997 	lcall	_conv_nibble2manchester
                                    998 ;	src/main.c:154: return;
                                    999 ;	src/main.c:155: }
      000056 02r00r00         [24] 1000 	ljmp	_putchar
                                   1001 ;------------------------------------------------------------
                                   1002 ;Allocation info for local variables in function 'preamble'
                                   1003 ;------------------------------------------------------------
                                   1004 ;	src/main.c:157: void preamble() 
                                   1005 ;	-----------------------------------------
                                   1006 ;	 function preamble
                                   1007 ;	-----------------------------------------
      000059                       1008 _preamble:
                                   1009 ;	src/main.c:159: gu8UART = 1;
      000059 75*01 01         [24] 1010 	mov	_gu8UART,#0x01
                                   1011 ;	src/main.c:160: putchar(0xF0);
      00005C 75 82 F0         [24] 1012 	mov	dpl,#0xf0
      00005F 12r00r00         [24] 1013 	lcall	_putchar
                                   1014 ;	src/main.c:161: putchar(0xF0);
      000062 75 82 F0         [24] 1015 	mov	dpl,#0xf0
      000065 12r00r00         [24] 1016 	lcall	_putchar
                                   1017 ;	src/main.c:162: putchar(0xF0);
      000068 75 82 F0         [24] 1018 	mov	dpl,#0xf0
      00006B 12r00r00         [24] 1019 	lcall	_putchar
                                   1020 ;	src/main.c:163: putchar(0xF0);
      00006E 75 82 F0         [24] 1021 	mov	dpl,#0xf0
                                   1022 ;	src/main.c:164: }
      000071 02r00r00         [24] 1023 	ljmp	_putchar
                                   1024 ;------------------------------------------------------------
                                   1025 ;Allocation info for local variables in function 'print_esc'
                                   1026 ;------------------------------------------------------------
                                   1027 ;au8State                  Allocated to registers r7 
                                   1028 ;------------------------------------------------------------
                                   1029 ;	src/main.c:189: void print_esc(UINT8 au8State)
                                   1030 ;	-----------------------------------------
                                   1031 ;	 function print_esc
                                   1032 ;	-----------------------------------------
      000074                       1033 _print_esc:
      000074 AF 82            [24] 1034 	mov	r7,dpl
                                   1035 ;	src/main.c:191: printf_fast_f("\n\r");
      000076 C0 07            [24] 1036 	push	ar7
      000078 74r00            [12] 1037 	mov	a,#___str_0
      00007A C0 E0            [24] 1038 	push	acc
      00007C 74s00            [12] 1039 	mov	a,#(___str_0 >> 8)
      00007E C0 E0            [24] 1040 	push	acc
      000080 12r00r00         [24] 1041 	lcall	_printf_fast_f
      000083 15 81            [12] 1042 	dec	sp
      000085 15 81            [12] 1043 	dec	sp
      000087 D0 07            [24] 1044 	pop	ar7
                                   1045 ;	src/main.c:192: switch(au8State) {
      000089 BF 00 02         [24] 1046 	cjne	r7,#0x00,00119$
      00008C 80 0A            [24] 1047 	sjmp	00101$
      00008E                       1048 00119$:
      00008E BF 01 02         [24] 1049 	cjne	r7,#0x01,00120$
      000091 80 16            [24] 1050 	sjmp	00102$
      000093                       1051 00120$:
                                   1052 ;	src/main.c:193: case STATE_SELF :
      000093 BF 02 33         [24] 1053 	cjne	r7,#0x02,00104$
      000096 80 22            [24] 1054 	sjmp	00103$
      000098                       1055 00101$:
                                   1056 ;	src/main.c:194: printf_fast_f("self ");
      000098 74r03            [12] 1057 	mov	a,#___str_1
      00009A C0 E0            [24] 1058 	push	acc
      00009C 74s00            [12] 1059 	mov	a,#(___str_1 >> 8)
      00009E C0 E0            [24] 1060 	push	acc
      0000A0 12r00r00         [24] 1061 	lcall	_printf_fast_f
      0000A3 15 81            [12] 1062 	dec	sp
      0000A5 15 81            [12] 1063 	dec	sp
                                   1064 ;	src/main.c:195: break;
                                   1065 ;	src/main.c:196: case STATE_CROSS :
      0000A7 80 20            [24] 1066 	sjmp	00104$
      0000A9                       1067 00102$:
                                   1068 ;	src/main.c:197: printf_fast_f("cross");
      0000A9 74r09            [12] 1069 	mov	a,#___str_2
      0000AB C0 E0            [24] 1070 	push	acc
      0000AD 74s00            [12] 1071 	mov	a,#(___str_2 >> 8)
      0000AF C0 E0            [24] 1072 	push	acc
      0000B1 12r00r00         [24] 1073 	lcall	_printf_fast_f
      0000B4 15 81            [12] 1074 	dec	sp
      0000B6 15 81            [12] 1075 	dec	sp
                                   1076 ;	src/main.c:198: break;
                                   1077 ;	src/main.c:199: case STATE_BOTH :
      0000B8 80 0F            [24] 1078 	sjmp	00104$
      0000BA                       1079 00103$:
                                   1080 ;	src/main.c:200: printf_fast_f("both ");
      0000BA 74r0F            [12] 1081 	mov	a,#___str_3
      0000BC C0 E0            [24] 1082 	push	acc
      0000BE 74s00            [12] 1083 	mov	a,#(___str_3 >> 8)
      0000C0 C0 E0            [24] 1084 	push	acc
      0000C2 12r00r00         [24] 1085 	lcall	_printf_fast_f
      0000C5 15 81            [12] 1086 	dec	sp
      0000C7 15 81            [12] 1087 	dec	sp
                                   1088 ;	src/main.c:202: }
      0000C9                       1089 00104$:
                                   1090 ;	src/main.c:203: printf_fast_f(" output:This is UART%d\n\r", gu8UART);
      0000C9 AE*01            [24] 1091 	mov	r6,_gu8UART
      0000CB 7F 00            [12] 1092 	mov	r7,#0x00
      0000CD C0 06            [24] 1093 	push	ar6
      0000CF C0 07            [24] 1094 	push	ar7
      0000D1 74r15            [12] 1095 	mov	a,#___str_4
      0000D3 C0 E0            [24] 1096 	push	acc
      0000D5 74s00            [12] 1097 	mov	a,#(___str_4 >> 8)
      0000D7 C0 E0            [24] 1098 	push	acc
      0000D9 12r00r00         [24] 1099 	lcall	_printf_fast_f
      0000DC E5 81            [12] 1100 	mov	a,sp
      0000DE 24 FC            [12] 1101 	add	a,#0xfc
      0000E0 F5 81            [12] 1102 	mov	sp,a
                                   1103 ;	src/main.c:204: }
      0000E2 22               [24] 1104 	ret
                                   1105 ;------------------------------------------------------------
                                   1106 ;Allocation info for local variables in function 'print_char'
                                   1107 ;------------------------------------------------------------
                                   1108 ;au8Data                   Allocated to registers r7 
                                   1109 ;------------------------------------------------------------
                                   1110 ;	src/main.c:206: void print_char(char au8Data)
                                   1111 ;	-----------------------------------------
                                   1112 ;	 function print_char
                                   1113 ;	-----------------------------------------
      0000E3                       1114 _print_char:
      0000E3 AF 82            [24] 1115 	mov	r7,dpl
                                   1116 ;	src/main.c:208: switch(au8Data) {
      0000E5 BF 0D 02         [24] 1117 	cjne	r7,#0x0d,00115$
      0000E8 80 04            [24] 1118 	sjmp	00102$
      0000EA                       1119 00115$:
      0000EA BF 1B 11         [24] 1120 	cjne	r7,#0x1b,00103$
                                   1121 ;	src/main.c:210: break;
                                   1122 ;	src/main.c:211: case '\r' :
      0000ED 22               [24] 1123 	ret
      0000EE                       1124 00102$:
                                   1125 ;	src/main.c:212: printf_fast_f("\r\n");
      0000EE 74r2E            [12] 1126 	mov	a,#___str_5
      0000F0 C0 E0            [24] 1127 	push	acc
      0000F2 74s00            [12] 1128 	mov	a,#(___str_5 >> 8)
      0000F4 C0 E0            [24] 1129 	push	acc
      0000F6 12r00r00         [24] 1130 	lcall	_printf_fast_f
      0000F9 15 81            [12] 1131 	dec	sp
      0000FB 15 81            [12] 1132 	dec	sp
                                   1133 ;	src/main.c:213: break;
                                   1134 ;	src/main.c:214: default :
      0000FD 22               [24] 1135 	ret
      0000FE                       1136 00103$:
                                   1137 ;	src/main.c:215: printf_fast_f("%c",au8Data);
      0000FE 7E 00            [12] 1138 	mov	r6,#0x00
      000100 C0 07            [24] 1139 	push	ar7
      000102 C0 06            [24] 1140 	push	ar6
      000104 74r31            [12] 1141 	mov	a,#___str_6
      000106 C0 E0            [24] 1142 	push	acc
      000108 74s00            [12] 1143 	mov	a,#(___str_6 >> 8)
      00010A C0 E0            [24] 1144 	push	acc
      00010C 12r00r00         [24] 1145 	lcall	_printf_fast_f
      00010F E5 81            [12] 1146 	mov	a,sp
      000111 24 FC            [12] 1147 	add	a,#0xfc
      000113 F5 81            [12] 1148 	mov	sp,a
                                   1149 ;	src/main.c:216: }
                                   1150 ;	src/main.c:217: }
      000115 22               [24] 1151 	ret
                                   1152 ;------------------------------------------------------------
                                   1153 ;Allocation info for local variables in function 'state_machine'
                                   1154 ;------------------------------------------------------------
                                   1155 ;au8RxUART                 Allocated with name '_state_machine_PARM_2'
                                   1156 ;au8SelfID                 Allocated with name '_state_machine_PARM_3'
                                   1157 ;au8OtherID                Allocated with name '_state_machine_PARM_4'
                                   1158 ;au8State                  Allocated to registers r7 
                                   1159 ;------------------------------------------------------------
                                   1160 ;	src/main.c:219: UINT8 state_machine(UINT8 au8State, UINT8 au8RxUART, UINT8 au8SelfID, UINT8 au8OtherID)
                                   1161 ;	-----------------------------------------
                                   1162 ;	 function state_machine
                                   1163 ;	-----------------------------------------
      000116                       1164 _state_machine:
      000116 AF 82            [24] 1165 	mov	r7,dpl
                                   1166 ;	src/main.c:221: if(au8RxUART == KEY_ESC) {
      000118 74 1B            [12] 1167 	mov	a,#0x1b
      00011A B5*04 02         [24] 1168 	cjne	a,_state_machine_PARM_2,00142$
      00011D 80 02            [24] 1169 	sjmp	00143$
      00011F                       1170 00142$:
      00011F 80 79            [24] 1171 	sjmp	00110$
      000121                       1172 00143$:
                                   1173 ;	src/main.c:222: gu8UART = au8SelfID;
      000121 AE*05            [24] 1174 	mov	r6,_state_machine_PARM_3
      000123 8E*01            [24] 1175 	mov	_gu8UART,r6
                                   1176 ;	src/main.c:223: printf_fast_f("\r\ninput:This is UART%d", gu8UART);
      000125 AC*01            [24] 1177 	mov	r4,_gu8UART
      000127 7D 00            [12] 1178 	mov	r5,#0x00
      000129 C0 07            [24] 1179 	push	ar7
      00012B C0 06            [24] 1180 	push	ar6
      00012D C0 04            [24] 1181 	push	ar4
      00012F C0 05            [24] 1182 	push	ar5
      000131 74r34            [12] 1183 	mov	a,#___str_7
      000133 C0 E0            [24] 1184 	push	acc
      000135 74s00            [12] 1185 	mov	a,#(___str_7 >> 8)
      000137 C0 E0            [24] 1186 	push	acc
      000139 12r00r00         [24] 1187 	lcall	_printf_fast_f
      00013C E5 81            [12] 1188 	mov	a,sp
      00013E 24 FC            [12] 1189 	add	a,#0xfc
      000140 F5 81            [12] 1190 	mov	sp,a
      000142 D0 06            [24] 1191 	pop	ar6
      000144 D0 07            [24] 1192 	pop	ar7
                                   1193 ;	src/main.c:224: switch(au8State) {
      000146 BF 00 02         [24] 1194 	cjne	r7,#0x00,00144$
      000149 80 0D            [24] 1195 	sjmp	00101$
      00014B                       1196 00144$:
      00014B BF 01 02         [24] 1197 	cjne	r7,#0x01,00145$
      00014E 80 21            [24] 1198 	sjmp	00102$
      000150                       1199 00145$:
      000150 BF 02 02         [24] 1200 	cjne	r7,#0x02,00146$
      000153 80 35            [24] 1201 	sjmp	00103$
      000155                       1202 00146$:
      000155 02r01rDD         [24] 1203 	ljmp	00111$
                                   1204 ;	src/main.c:225: case STATE_SELF :
      000158                       1205 00101$:
                                   1206 ;	src/main.c:226: au8State = STATE_CROSS;
      000158 7F 01            [12] 1207 	mov	r7,#0x01
                                   1208 ;	src/main.c:227: gu8UART = au8SelfID;
      00015A 8E*01            [24] 1209 	mov	_gu8UART,r6
                                   1210 ;	src/main.c:228: print_esc(au8State);
      00015C 75 82 01         [24] 1211 	mov	dpl,#0x01
      00015F C0 07            [24] 1212 	push	ar7
      000161 12r00r74         [24] 1213 	lcall	_print_esc
                                   1214 ;	src/main.c:229: gu8UART = au8OtherID;
      000164 85*06*01         [24] 1215 	mov	_gu8UART,_state_machine_PARM_4
                                   1216 ;	src/main.c:230: print_esc(au8State);
      000167 75 82 01         [24] 1217 	mov	dpl,#0x01
      00016A 12r00r74         [24] 1218 	lcall	_print_esc
      00016D D0 07            [24] 1219 	pop	ar7
                                   1220 ;	src/main.c:231: break;
                                   1221 ;	src/main.c:232: case STATE_CROSS :
      00016F 80 6C            [24] 1222 	sjmp	00111$
      000171                       1223 00102$:
                                   1224 ;	src/main.c:233: au8State = STATE_BOTH;
      000171 7F 02            [12] 1225 	mov	r7,#0x02
                                   1226 ;	src/main.c:234: gu8UART = au8SelfID;
      000173 8E*01            [24] 1227 	mov	_gu8UART,r6
                                   1228 ;	src/main.c:235: print_esc(au8State);
      000175 75 82 02         [24] 1229 	mov	dpl,#0x02
      000178 C0 07            [24] 1230 	push	ar7
      00017A 12r00r74         [24] 1231 	lcall	_print_esc
                                   1232 ;	src/main.c:236: gu8UART = au8OtherID;
      00017D 85*06*01         [24] 1233 	mov	_gu8UART,_state_machine_PARM_4
                                   1234 ;	src/main.c:237: print_esc(au8State);
      000180 75 82 02         [24] 1235 	mov	dpl,#0x02
      000183 12r00r74         [24] 1236 	lcall	_print_esc
      000186 D0 07            [24] 1237 	pop	ar7
                                   1238 ;	src/main.c:238: break;
                                   1239 ;	src/main.c:239: case STATE_BOTH :
      000188 80 53            [24] 1240 	sjmp	00111$
      00018A                       1241 00103$:
                                   1242 ;	src/main.c:240: au8State = STATE_SELF;
      00018A 7F 00            [12] 1243 	mov	r7,#0x00
                                   1244 ;	src/main.c:241: gu8UART = au8SelfID;
      00018C 8E*01            [24] 1245 	mov	_gu8UART,r6
                                   1246 ;	src/main.c:242: print_esc(au8State);
      00018E 75 82 00         [24] 1247 	mov	dpl,#0x00
      000191 C0 07            [24] 1248 	push	ar7
      000193 12r00r74         [24] 1249 	lcall	_print_esc
      000196 D0 07            [24] 1250 	pop	ar7
                                   1251 ;	src/main.c:244: }
      000198 80 43            [24] 1252 	sjmp	00111$
      00019A                       1253 00110$:
                                   1254 ;	src/main.c:247: switch(au8State) {
      00019A BF 00 02         [24] 1255 	cjne	r7,#0x00,00147$
      00019D 80 0A            [24] 1256 	sjmp	00105$
      00019F                       1257 00147$:
      00019F BF 01 02         [24] 1258 	cjne	r7,#0x01,00148$
      0001A2 80 14            [24] 1259 	sjmp	00106$
      0001A4                       1260 00148$:
                                   1261 ;	src/main.c:248: case STATE_SELF :
      0001A4 BF 02 36         [24] 1262 	cjne	r7,#0x02,00111$
      0001A7 80 1E            [24] 1263 	sjmp	00107$
      0001A9                       1264 00105$:
                                   1265 ;	src/main.c:249: gu8UART = au8SelfID;
      0001A9 85*05*01         [24] 1266 	mov	_gu8UART,_state_machine_PARM_3
                                   1267 ;	src/main.c:250: print_char(au8RxUART);
      0001AC 85*04 82         [24] 1268 	mov	dpl,_state_machine_PARM_2
      0001AF C0 07            [24] 1269 	push	ar7
      0001B1 12r00rE3         [24] 1270 	lcall	_print_char
      0001B4 D0 07            [24] 1271 	pop	ar7
                                   1272 ;	src/main.c:251: break;
                                   1273 ;	src/main.c:252: case STATE_CROSS :
      0001B6 80 25            [24] 1274 	sjmp	00111$
      0001B8                       1275 00106$:
                                   1276 ;	src/main.c:253: gu8UART = au8OtherID;
      0001B8 85*06*01         [24] 1277 	mov	_gu8UART,_state_machine_PARM_4
                                   1278 ;	src/main.c:254: print_char(au8RxUART);
      0001BB 85*04 82         [24] 1279 	mov	dpl,_state_machine_PARM_2
      0001BE C0 07            [24] 1280 	push	ar7
      0001C0 12r00rE3         [24] 1281 	lcall	_print_char
      0001C3 D0 07            [24] 1282 	pop	ar7
                                   1283 ;	src/main.c:255: break;
                                   1284 ;	src/main.c:256: case STATE_BOTH :
      0001C5 80 16            [24] 1285 	sjmp	00111$
      0001C7                       1286 00107$:
                                   1287 ;	src/main.c:257: gu8UART = au8SelfID;
      0001C7 85*05*01         [24] 1288 	mov	_gu8UART,_state_machine_PARM_3
                                   1289 ;	src/main.c:258: print_char(au8RxUART);
      0001CA 85*04 82         [24] 1290 	mov	dpl,_state_machine_PARM_2
      0001CD C0 07            [24] 1291 	push	ar7
      0001CF 12r00rE3         [24] 1292 	lcall	_print_char
                                   1293 ;	src/main.c:259: gu8UART = au8OtherID;
      0001D2 85*06*01         [24] 1294 	mov	_gu8UART,_state_machine_PARM_4
                                   1295 ;	src/main.c:260: print_char(au8RxUART);
      0001D5 85*04 82         [24] 1296 	mov	dpl,_state_machine_PARM_2
      0001D8 12r00rE3         [24] 1297 	lcall	_print_char
      0001DB D0 07            [24] 1298 	pop	ar7
                                   1299 ;	src/main.c:262: }
      0001DD                       1300 00111$:
                                   1301 ;	src/main.c:264: return au8State;
      0001DD 8F 82            [24] 1302 	mov	dpl,r7
                                   1303 ;	src/main.c:265: }
      0001DF 22               [24] 1304 	ret
                                   1305 ;------------------------------------------------------------
                                   1306 ;Allocation info for local variables in function 'Timer0_ISR'
                                   1307 ;------------------------------------------------------------
                                   1308 ;	src/main.c:267: void Timer0_ISR (void) interrupt(1)  //interrupt address is 0x000B
                                   1309 ;	-----------------------------------------
                                   1310 ;	 function Timer0_ISR
                                   1311 ;	-----------------------------------------
      0001E0                       1312 _Timer0_ISR:
                           00000F  1313 	ar7 = 0x0f
                           00000E  1314 	ar6 = 0x0e
                           00000D  1315 	ar5 = 0x0d
                           00000C  1316 	ar4 = 0x0c
                           00000B  1317 	ar3 = 0x0b
                           00000A  1318 	ar2 = 0x0a
                           000009  1319 	ar1 = 0x09
                           000008  1320 	ar0 = 0x08
      0001E0 C0 E0            [24] 1321 	push	acc
      0001E2 C0 D0            [24] 1322 	push	psw
                                   1323 ;	src/main.c:269: TH0 = TH0_INIT;
      0001E4 75 8C FF         [24] 1324 	mov	_TH0,#0xff
                                   1325 ;	src/main.c:270: TL0 = TL0_INIT;
      0001E7 75 8A F3         [24] 1326 	mov	_TL0,#0xf3
                                   1327 ;	src/main.c:271: gu16TimeCnt++;
      0001EA 05*02            [12] 1328 	inc	_gu16TimeCnt
      0001EC E4               [12] 1329 	clr	a
      0001ED B5*02 02         [24] 1330 	cjne	a,_gu16TimeCnt,00103$
      0001F0 05*03            [12] 1331 	inc	(_gu16TimeCnt + 1)
      0001F2                       1332 00103$:
                                   1333 ;	src/main.c:280: } //void Timer0_ISR (void) __interrupt 1  //interrupt address is 0x000B
      0001F2 D0 D0            [24] 1334 	pop	psw
      0001F4 D0 E0            [24] 1335 	pop	acc
      0001F6 32               [24] 1336 	reti
                                   1337 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                   1338 ;	eliminated unneeded push/pop dpl
                                   1339 ;	eliminated unneeded push/pop dph
                                   1340 ;	eliminated unneeded push/pop b
                                   1341 ;------------------------------------------------------------
                                   1342 ;Allocation info for local variables in function 'pin_interrupt_isr'
                                   1343 ;------------------------------------------------------------
                                   1344 ;	src/main.c:282: void pin_interrupt_isr(void) interrupt(7)
                                   1345 ;	-----------------------------------------
                                   1346 ;	 function pin_interrupt_isr
                                   1347 ;	-----------------------------------------
      0001F7                       1348 _pin_interrupt_isr:
      0001F7 C0 E0            [24] 1349 	push	acc
                                   1350 ;	src/main.c:284: if (PIF == 0x10) {
      0001F9 E5 EC            [12] 1351 	mov	a,_PIF
                                   1352 ;	src/main.c:286: PIF = 0;
      0001FB 75 EC 00         [24] 1353 	mov	_PIF,#0x00
                                   1354 ;	src/main.c:287: }// void pin_interrupt_isr (void) interrupt(7)
      0001FE D0 E0            [24] 1355 	pop	acc
      000200 32               [24] 1356 	reti
                                   1357 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                   1358 ;	eliminated unneeded push/pop not_psw
                                   1359 ;	eliminated unneeded push/pop dpl
                                   1360 ;	eliminated unneeded push/pop dph
                                   1361 ;	eliminated unneeded push/pop b
                                   1362 ;------------------------------------------------------------
                                   1363 ;Allocation info for local variables in function 'chk_manchester'
                                   1364 ;------------------------------------------------------------
                                   1365 ;c                         Allocated to registers r7 
                                   1366 ;i                         Allocated to registers r6 
                                   1367 ;------------------------------------------------------------
                                   1368 ;	src/main.c:290: UINT8 chk_manchester(UINT8 c)
                                   1369 ;	-----------------------------------------
                                   1370 ;	 function chk_manchester
                                   1371 ;	-----------------------------------------
      000201                       1372 _chk_manchester:
                           000007  1373 	ar7 = 0x07
                           000006  1374 	ar6 = 0x06
                           000005  1375 	ar5 = 0x05
                           000004  1376 	ar4 = 0x04
                           000003  1377 	ar3 = 0x03
                           000002  1378 	ar2 = 0x02
                           000001  1379 	ar1 = 0x01
                           000000  1380 	ar0 = 0x00
      000201 AF 82            [24] 1381 	mov	r7,dpl
                                   1382 ;	src/main.c:293: for (i=0;i<4;i++) {
      000203 7E 00            [12] 1383 	mov	r6,#0x00
      000205                       1384 00104$:
                                   1385 ;	src/main.c:294: if (((c>>(2*i)) & 1) == ((c>>((2*i+1)))&1)) {
      000205 EE               [12] 1386 	mov	a,r6
      000206 2E               [12] 1387 	add	a,r6
      000207 FD               [12] 1388 	mov	r5,a
      000208 8D F0            [24] 1389 	mov	b,r5
      00020A 05 F0            [12] 1390 	inc	b
      00020C EF               [12] 1391 	mov	a,r7
      00020D 80 02            [24] 1392 	sjmp	00121$
      00020F                       1393 00120$:
      00020F C3               [12] 1394 	clr	c
      000210 13               [12] 1395 	rrc	a
      000211                       1396 00121$:
      000211 D5 F0 FB         [24] 1397 	djnz	b,00120$
      000214 FC               [12] 1398 	mov	r4,a
      000215 53 04 01         [24] 1399 	anl	ar4,#0x01
      000218 7B 00            [12] 1400 	mov	r3,#0x00
      00021A ED               [12] 1401 	mov	a,r5
      00021B 04               [12] 1402 	inc	a
      00021C F5 F0            [12] 1403 	mov	b,a
      00021E 05 F0            [12] 1404 	inc	b
      000220 EF               [12] 1405 	mov	a,r7
      000221 80 02            [24] 1406 	sjmp	00123$
      000223                       1407 00122$:
      000223 C3               [12] 1408 	clr	c
      000224 13               [12] 1409 	rrc	a
      000225                       1410 00123$:
      000225 D5 F0 FB         [24] 1411 	djnz	b,00122$
      000228 FD               [12] 1412 	mov	r5,a
      000229 53 05 01         [24] 1413 	anl	ar5,#0x01
      00022C 7A 00            [12] 1414 	mov	r2,#0x00
      00022E EC               [12] 1415 	mov	a,r4
      00022F B5 05 08         [24] 1416 	cjne	a,ar5,00105$
      000232 EB               [12] 1417 	mov	a,r3
      000233 B5 02 04         [24] 1418 	cjne	a,ar2,00105$
                                   1419 ;	src/main.c:296: return 0;
      000236 75 82 00         [24] 1420 	mov	dpl,#0x00
      000239 22               [24] 1421 	ret
      00023A                       1422 00105$:
                                   1423 ;	src/main.c:293: for (i=0;i<4;i++) {
      00023A 0E               [12] 1424 	inc	r6
      00023B BE 04 00         [24] 1425 	cjne	r6,#0x04,00126$
      00023E                       1426 00126$:
      00023E 40 C5            [24] 1427 	jc	00104$
                                   1428 ;	src/main.c:299: return 1;
      000240 75 82 01         [24] 1429 	mov	dpl,#0x01
                                   1430 ;	src/main.c:300: }
      000243 22               [24] 1431 	ret
                                   1432 ;------------------------------------------------------------
                                   1433 ;Allocation info for local variables in function 'conv_manchester2nibble'
                                   1434 ;------------------------------------------------------------
                                   1435 ;c                         Allocated to registers r7 
                                   1436 ;i                         Allocated to registers r5 
                                   1437 ;u8Nibble                  Allocated to registers r6 
                                   1438 ;------------------------------------------------------------
                                   1439 ;	src/main.c:302: UINT8 conv_manchester2nibble(UINT8 c)
                                   1440 ;	-----------------------------------------
                                   1441 ;	 function conv_manchester2nibble
                                   1442 ;	-----------------------------------------
      000244                       1443 _conv_manchester2nibble:
      000244 AF 82            [24] 1444 	mov	r7,dpl
                                   1445 ;	src/main.c:305: UINT8 u8Nibble = 0;
      000246 7E 00            [12] 1446 	mov	r6,#0x00
                                   1447 ;	src/main.c:306: for (i=0;i<4;i++) {
      000248 7D 04            [12] 1448 	mov	r5,#0x04
      00024A                       1449 00106$:
                                   1450 ;	src/main.c:307: if (c & 1) {
      00024A EF               [12] 1451 	mov	a,r7
      00024B 30 E0 03         [24] 1452 	jnb	acc.0,00102$
                                   1453 ;	src/main.c:308: u8Nibble |= 0x80;
      00024E 43 06 80         [24] 1454 	orl	ar6,#0x80
      000251                       1455 00102$:
                                   1456 ;	src/main.c:310: c >>= 2;
      000251 EF               [12] 1457 	mov	a,r7
      000252 03               [12] 1458 	rr	a
      000253 03               [12] 1459 	rr	a
      000254 54 3F            [12] 1460 	anl	a,#0x3f
      000256 FF               [12] 1461 	mov	r7,a
                                   1462 ;	src/main.c:311: u8Nibble >>= 1;
      000257 EE               [12] 1463 	mov	a,r6
      000258 C3               [12] 1464 	clr	c
      000259 13               [12] 1465 	rrc	a
      00025A FE               [12] 1466 	mov	r6,a
                                   1467 ;	src/main.c:306: for (i=0;i<4;i++) {
      00025B DD ED            [24] 1468 	djnz	r5,00106$
                                   1469 ;	src/main.c:313: return u8Nibble;
      00025D 8E 82            [24] 1470 	mov	dpl,r6
                                   1471 ;	src/main.c:314: }
      00025F 22               [24] 1472 	ret
                                   1473 ;------------------------------------------------------------
                                   1474 ;Allocation info for local variables in function 'conv_manchester2highnibble'
                                   1475 ;------------------------------------------------------------
                                   1476 ;c                         Allocated to registers r7 
                                   1477 ;i                         Allocated to registers r5 
                                   1478 ;u8Nibble                  Allocated to registers r6 
                                   1479 ;------------------------------------------------------------
                                   1480 ;	src/main.c:316: UINT8 conv_manchester2highnibble(UINT8 c)
                                   1481 ;	-----------------------------------------
                                   1482 ;	 function conv_manchester2highnibble
                                   1483 ;	-----------------------------------------
      000260                       1484 _conv_manchester2highnibble:
      000260 AF 82            [24] 1485 	mov	r7,dpl
                                   1486 ;	src/main.c:319: UINT8 u8Nibble = 0;
      000262 7E 00            [12] 1487 	mov	r6,#0x00
                                   1488 ;	src/main.c:320: for (i=0;i<4;i++) {
      000264 7D 04            [12] 1489 	mov	r5,#0x04
      000266                       1490 00106$:
                                   1491 ;	src/main.c:321: u8Nibble >>= 1;
      000266 EE               [12] 1492 	mov	a,r6
      000267 C3               [12] 1493 	clr	c
      000268 13               [12] 1494 	rrc	a
      000269 FE               [12] 1495 	mov	r6,a
                                   1496 ;	src/main.c:322: if (c & 1) {
      00026A EF               [12] 1497 	mov	a,r7
      00026B 30 E0 03         [24] 1498 	jnb	acc.0,00102$
                                   1499 ;	src/main.c:323: u8Nibble |= 0x80;
      00026E 43 06 80         [24] 1500 	orl	ar6,#0x80
      000271                       1501 00102$:
                                   1502 ;	src/main.c:325: c >>= 2;
      000271 EF               [12] 1503 	mov	a,r7
      000272 03               [12] 1504 	rr	a
      000273 03               [12] 1505 	rr	a
      000274 54 3F            [12] 1506 	anl	a,#0x3f
      000276 FF               [12] 1507 	mov	r7,a
                                   1508 ;	src/main.c:320: for (i=0;i<4;i++) {
      000277 DD ED            [24] 1509 	djnz	r5,00106$
                                   1510 ;	src/main.c:327: return u8Nibble;
      000279 8E 82            [24] 1511 	mov	dpl,r6
                                   1512 ;	src/main.c:328: }
      00027B 22               [24] 1513 	ret
                                   1514 ;------------------------------------------------------------
                                   1515 ;Allocation info for local variables in function 'MODIFY_HIRC_166'
                                   1516 ;------------------------------------------------------------
                                   1517 ;hircmap0                  Allocated to registers r7 
                                   1518 ;hircmap1                  Allocated to registers r6 
                                   1519 ;trimvalue16bit            Allocated to registers r7 r5 
                                   1520 ;------------------------------------------------------------
                                   1521 ;	src/main.c:330: void MODIFY_HIRC_166(void)
                                   1522 ;	-----------------------------------------
                                   1523 ;	 function MODIFY_HIRC_166
                                   1524 ;	-----------------------------------------
      00027C                       1525 _MODIFY_HIRC_166:
                                   1526 ;	src/main.c:335: if ((PCON&SET_BIT4)==SET_BIT4) {
      00027C AE 87            [24] 1527 	mov	r6,_PCON
      00027E 53 06 10         [24] 1528 	anl	ar6,#0x10
      000281 7F 00            [12] 1529 	mov	r7,#0x00
      000283 BE 10 41         [24] 1530 	cjne	r6,#0x10,00103$
      000286 BF 00 3E         [24] 1531 	cjne	r7,#0x00,00103$
                                   1532 ;	src/main.c:336: hircmap0 = RCTRIM0;
      000289 AF 84            [24] 1533 	mov	r7,_RCTRIM0
                                   1534 ;	src/main.c:337: hircmap1 = RCTRIM1;
      00028B AE 85            [24] 1535 	mov	r6,_RCTRIM1
                                   1536 ;	src/main.c:338: trimvalue16bit = ((hircmap0<<1)+(hircmap1&0x01));
      00028D 7D 00            [12] 1537 	mov	r5,#0x00
      00028F EF               [12] 1538 	mov	a,r7
      000290 2F               [12] 1539 	add	a,r7
      000291 FF               [12] 1540 	mov	r7,a
      000292 ED               [12] 1541 	mov	a,r5
      000293 33               [12] 1542 	rlc	a
      000294 FD               [12] 1543 	mov	r5,a
      000295 53 06 01         [24] 1544 	anl	ar6,#0x01
      000298 7C 00            [12] 1545 	mov	r4,#0x00
      00029A EE               [12] 1546 	mov	a,r6
      00029B 2F               [12] 1547 	add	a,r7
      00029C FF               [12] 1548 	mov	r7,a
      00029D EC               [12] 1549 	mov	a,r4
      00029E 3D               [12] 1550 	addc	a,r5
      00029F FD               [12] 1551 	mov	r5,a
                                   1552 ;	src/main.c:339: trimvalue16bit = trimvalue16bit - 15;
      0002A0 EF               [12] 1553 	mov	a,r7
      0002A1 24 F1            [12] 1554 	add	a,#0xf1
      0002A3 FF               [12] 1555 	mov	r7,a
      0002A4 ED               [12] 1556 	mov	a,r5
      0002A5 34 FF            [12] 1557 	addc	a,#0xff
      0002A7 FD               [12] 1558 	mov	r5,a
                                   1559 ;	src/main.c:340: hircmap1 = trimvalue16bit&0x01;
      0002A8 8F 06            [24] 1560 	mov	ar6,r7
      0002AA 53 06 01         [24] 1561 	anl	ar6,#0x01
                                   1562 ;	src/main.c:341: hircmap0 = trimvalue16bit>>1;
      0002AD ED               [12] 1563 	mov	a,r5
      0002AE C3               [12] 1564 	clr	c
      0002AF 13               [12] 1565 	rrc	a
      0002B0 CF               [12] 1566 	xch	a,r7
      0002B1 13               [12] 1567 	rrc	a
      0002B2 CF               [12] 1568 	xch	a,r7
      0002B3 FD               [12] 1569 	mov	r5,a
                                   1570 ;	src/main.c:342: TA=0XAA;
      0002B4 75 C7 AA         [24] 1571 	mov	_TA,#0xaa
                                   1572 ;	src/main.c:343: TA=0X55;
      0002B7 75 C7 55         [24] 1573 	mov	_TA,#0x55
                                   1574 ;	src/main.c:344: RCTRIM0 = hircmap0;
      0002BA 8F 84            [24] 1575 	mov	_RCTRIM0,r7
                                   1576 ;	src/main.c:345: TA=0XAA;
      0002BC 75 C7 AA         [24] 1577 	mov	_TA,#0xaa
                                   1578 ;	src/main.c:346: TA=0X55;
      0002BF 75 C7 55         [24] 1579 	mov	_TA,#0x55
                                   1580 ;	src/main.c:347: RCTRIM1 = hircmap1;
      0002C2 8E 85            [24] 1581 	mov	_RCTRIM1,r6
                                   1582 ;	src/main.c:349: PCON &= CLR_BIT4;
      0002C4 53 87 EF         [24] 1583 	anl	_PCON,#0xef
      0002C7                       1584 00103$:
                                   1585 ;	src/main.c:351: }
      0002C7 22               [24] 1586 	ret
                                   1587 ;------------------------------------------------------------
                                   1588 ;Allocation info for local variables in function 'disp_help'
                                   1589 ;------------------------------------------------------------
                                   1590 ;au8Code                   Allocated to registers r7 
                                   1591 ;------------------------------------------------------------
                                   1592 ;	src/main.c:352: void disp_help(UINT8 au8Code)
                                   1593 ;	-----------------------------------------
                                   1594 ;	 function disp_help
                                   1595 ;	-----------------------------------------
      0002C8                       1596 _disp_help:
      0002C8 AF 82            [24] 1597 	mov	r7,dpl
                                   1598 ;	src/main.c:354: gu8UART = 1;
      0002CA 75*01 01         [24] 1599 	mov	_gu8UART,#0x01
                                   1600 ;	src/main.c:355: switch(au8Code) {
      0002CD BF 31 01         [24] 1601 	cjne	r7,#0x31,00165$
      0002D0 22               [24] 1602 	ret
      0002D1                       1603 00165$:
      0002D1 BF 32 01         [24] 1604 	cjne	r7,#0x32,00166$
      0002D4 22               [24] 1605 	ret
      0002D5                       1606 00166$:
      0002D5 BF 33 02         [24] 1607 	cjne	r7,#0x33,00167$
      0002D8 80 32            [24] 1608 	sjmp	00103$
      0002DA                       1609 00167$:
      0002DA BF 34 01         [24] 1610 	cjne	r7,#0x34,00168$
      0002DD 22               [24] 1611 	ret
      0002DE                       1612 00168$:
      0002DE BF 50 02         [24] 1613 	cjne	r7,#0x50,00169$
      0002E1 80 49            [24] 1614 	sjmp	00106$
      0002E3                       1615 00169$:
      0002E3 BF 53 03         [24] 1616 	cjne	r7,#0x53,00170$
      0002E6 02r03r6C         [24] 1617 	ljmp	00110$
      0002E9                       1618 00170$:
      0002E9 BF 54 02         [24] 1619 	cjne	r7,#0x54,00171$
      0002EC 80 5E            [24] 1620 	sjmp	00108$
      0002EE                       1621 00171$:
      0002EE BF 56 03         [24] 1622 	cjne	r7,#0x56,00172$
      0002F1 02r03r7C         [24] 1623 	ljmp	00112$
      0002F4                       1624 00172$:
      0002F4 BF 70 02         [24] 1625 	cjne	r7,#0x70,00173$
      0002F7 80 23            [24] 1626 	sjmp	00105$
      0002F9                       1627 00173$:
      0002F9 BF 73 02         [24] 1628 	cjne	r7,#0x73,00174$
      0002FC 80 5E            [24] 1629 	sjmp	00109$
      0002FE                       1630 00174$:
      0002FE BF 74 02         [24] 1631 	cjne	r7,#0x74,00175$
      000301 80 39            [24] 1632 	sjmp	00107$
      000303                       1633 00175$:
      000303 BF 76 03         [24] 1634 	cjne	r7,#0x76,00176$
      000306 02r03r7C         [24] 1635 	ljmp	00112$
      000309                       1636 00176$:
      000309 02r03r8C         [24] 1637 	ljmp	00113$
                                   1638 ;	src/main.c:360: case '3' :
      00030C                       1639 00103$:
                                   1640 ;	src/main.c:361: printf_fast_f("Idle preamble on/off\r\n");
      00030C 74r4B            [12] 1641 	mov	a,#___str_8
      00030E C0 E0            [24] 1642 	push	acc
      000310 74s00            [12] 1643 	mov	a,#(___str_8 >> 8)
      000312 C0 E0            [24] 1644 	push	acc
      000314 12r00r00         [24] 1645 	lcall	_printf_fast_f
      000317 15 81            [12] 1646 	dec	sp
      000319 15 81            [12] 1647 	dec	sp
                                   1648 ;	src/main.c:362: break;
      00031B 22               [24] 1649 	ret
                                   1650 ;	src/main.c:365: case 'p' :
      00031C                       1651 00105$:
                                   1652 ;	src/main.c:366: printf_fast_f("LineFi Power Off\r\n");
      00031C 74r62            [12] 1653 	mov	a,#___str_9
      00031E C0 E0            [24] 1654 	push	acc
      000320 74s00            [12] 1655 	mov	a,#(___str_9 >> 8)
      000322 C0 E0            [24] 1656 	push	acc
      000324 12r00r00         [24] 1657 	lcall	_printf_fast_f
      000327 15 81            [12] 1658 	dec	sp
      000329 15 81            [12] 1659 	dec	sp
                                   1660 ;	src/main.c:367: break;
      00032B 22               [24] 1661 	ret
                                   1662 ;	src/main.c:368: case 'P' :
      00032C                       1663 00106$:
                                   1664 ;	src/main.c:369: printf_fast_f("LineFi Power On\r\n");
      00032C 74r75            [12] 1665 	mov	a,#___str_10
      00032E C0 E0            [24] 1666 	push	acc
      000330 74s00            [12] 1667 	mov	a,#(___str_10 >> 8)
      000332 C0 E0            [24] 1668 	push	acc
      000334 12r00r00         [24] 1669 	lcall	_printf_fast_f
      000337 15 81            [12] 1670 	dec	sp
      000339 15 81            [12] 1671 	dec	sp
                                   1672 ;	src/main.c:370: break;
      00033B 22               [24] 1673 	ret
                                   1674 ;	src/main.c:371: case 't' :
      00033C                       1675 00107$:
                                   1676 ;	src/main.c:372: printf_fast_f("LineFi Uart Tx Low\r\n");
      00033C 74r87            [12] 1677 	mov	a,#___str_11
      00033E C0 E0            [24] 1678 	push	acc
      000340 74s00            [12] 1679 	mov	a,#(___str_11 >> 8)
      000342 C0 E0            [24] 1680 	push	acc
      000344 12r00r00         [24] 1681 	lcall	_printf_fast_f
      000347 15 81            [12] 1682 	dec	sp
      000349 15 81            [12] 1683 	dec	sp
                                   1684 ;	src/main.c:373: break;
      00034B 22               [24] 1685 	ret
                                   1686 ;	src/main.c:374: case 'T' :
      00034C                       1687 00108$:
                                   1688 ;	src/main.c:375: printf_fast_f("LineFi Uart Tx High\r\n");
      00034C 74r9C            [12] 1689 	mov	a,#___str_12
      00034E C0 E0            [24] 1690 	push	acc
      000350 74s00            [12] 1691 	mov	a,#(___str_12 >> 8)
      000352 C0 E0            [24] 1692 	push	acc
      000354 12r00r00         [24] 1693 	lcall	_printf_fast_f
      000357 15 81            [12] 1694 	dec	sp
      000359 15 81            [12] 1695 	dec	sp
                                   1696 ;	src/main.c:376: break;
      00035B 22               [24] 1697 	ret
                                   1698 ;	src/main.c:377: case 's' :
      00035C                       1699 00109$:
                                   1700 ;	src/main.c:378: printf_fast_f("LineFi CSC rx FSM Off\r\n");
      00035C 74rB2            [12] 1701 	mov	a,#___str_13
      00035E C0 E0            [24] 1702 	push	acc
      000360 74s00            [12] 1703 	mov	a,#(___str_13 >> 8)
      000362 C0 E0            [24] 1704 	push	acc
      000364 12r00r00         [24] 1705 	lcall	_printf_fast_f
      000367 15 81            [12] 1706 	dec	sp
      000369 15 81            [12] 1707 	dec	sp
                                   1708 ;	src/main.c:379: break;
      00036B 22               [24] 1709 	ret
                                   1710 ;	src/main.c:380: case 'S' :
      00036C                       1711 00110$:
                                   1712 ;	src/main.c:381: printf_fast_f("LineFi CSC rx FSM ON\r\n");
      00036C 74rCA            [12] 1713 	mov	a,#___str_14
      00036E C0 E0            [24] 1714 	push	acc
      000370 74s00            [12] 1715 	mov	a,#(___str_14 >> 8)
      000372 C0 E0            [24] 1716 	push	acc
      000374 12r00r00         [24] 1717 	lcall	_printf_fast_f
      000377 15 81            [12] 1718 	dec	sp
      000379 15 81            [12] 1719 	dec	sp
                                   1720 ;	src/main.c:382: break;
                                   1721 ;	src/main.c:383: case 'v' : case 'V' :
      00037B 22               [24] 1722 	ret
      00037C                       1723 00112$:
                                   1724 ;	src/main.c:384: printf_fast_f(__VERSION__);
      00037C 74rE1            [12] 1725 	mov	a,#___str_15
      00037E C0 E0            [24] 1726 	push	acc
      000380 74s00            [12] 1727 	mov	a,#(___str_15 >> 8)
      000382 C0 E0            [24] 1728 	push	acc
      000384 12r00r00         [24] 1729 	lcall	_printf_fast_f
      000387 15 81            [12] 1730 	dec	sp
      000389 15 81            [12] 1731 	dec	sp
                                   1732 ;	src/main.c:385: break;
                                   1733 ;	src/main.c:386: default :
      00038B 22               [24] 1734 	ret
      00038C                       1735 00113$:
                                   1736 ;	src/main.c:387: printf_fast_f("1: downlink packet 1\r\n");
      00038C 74rFB            [12] 1737 	mov	a,#___str_16
      00038E C0 E0            [24] 1738 	push	acc
      000390 74s00            [12] 1739 	mov	a,#(___str_16 >> 8)
      000392 C0 E0            [24] 1740 	push	acc
      000394 12r00r00         [24] 1741 	lcall	_printf_fast_f
      000397 15 81            [12] 1742 	dec	sp
      000399 15 81            [12] 1743 	dec	sp
                                   1744 ;	src/main.c:388: printf_fast_f("2: downlink packet 2\r\n");
      00039B 74r12            [12] 1745 	mov	a,#___str_17
      00039D C0 E0            [24] 1746 	push	acc
      00039F 74s01            [12] 1747 	mov	a,#(___str_17 >> 8)
      0003A1 C0 E0            [24] 1748 	push	acc
      0003A3 12r00r00         [24] 1749 	lcall	_printf_fast_f
      0003A6 15 81            [12] 1750 	dec	sp
      0003A8 15 81            [12] 1751 	dec	sp
                                   1752 ;	src/main.c:389: printf_fast_f("3: uplink idle preamble on/off\r\n");
      0003AA 74r29            [12] 1753 	mov	a,#___str_18
      0003AC C0 E0            [24] 1754 	push	acc
      0003AE 74s01            [12] 1755 	mov	a,#(___str_18 >> 8)
      0003B0 C0 E0            [24] 1756 	push	acc
      0003B2 12r00r00         [24] 1757 	lcall	_printf_fast_f
      0003B5 15 81            [12] 1758 	dec	sp
      0003B7 15 81            [12] 1759 	dec	sp
                                   1760 ;	src/main.c:390: printf_fast_f("p/P: LineFi Power off/on\r\n");
      0003B9 74r4A            [12] 1761 	mov	a,#___str_19
      0003BB C0 E0            [24] 1762 	push	acc
      0003BD 74s01            [12] 1763 	mov	a,#(___str_19 >> 8)
      0003BF C0 E0            [24] 1764 	push	acc
      0003C1 12r00r00         [24] 1765 	lcall	_printf_fast_f
      0003C4 15 81            [12] 1766 	dec	sp
      0003C6 15 81            [12] 1767 	dec	sp
                                   1768 ;	src/main.c:391: printf_fast_f("t/T: LineFi Uart Tx Low/High\r\n");
      0003C8 74r65            [12] 1769 	mov	a,#___str_20
      0003CA C0 E0            [24] 1770 	push	acc
      0003CC 74s01            [12] 1771 	mov	a,#(___str_20 >> 8)
      0003CE C0 E0            [24] 1772 	push	acc
      0003D0 12r00r00         [24] 1773 	lcall	_printf_fast_f
      0003D3 15 81            [12] 1774 	dec	sp
      0003D5 15 81            [12] 1775 	dec	sp
                                   1776 ;	src/main.c:392: printf_fast_f("s/S: LineFie CSC Rx FSM off/on\r\n");
      0003D7 74r84            [12] 1777 	mov	a,#___str_21
      0003D9 C0 E0            [24] 1778 	push	acc
      0003DB 74s01            [12] 1779 	mov	a,#(___str_21 >> 8)
      0003DD C0 E0            [24] 1780 	push	acc
      0003DF 12r00r00         [24] 1781 	lcall	_printf_fast_f
      0003E2 15 81            [12] 1782 	dec	sp
      0003E4 15 81            [12] 1783 	dec	sp
                                   1784 ;	src/main.c:393: printf_fast_f("test procedure: p -> P -> T -> S -> 1 or 2\r\n");
      0003E6 74rA5            [12] 1785 	mov	a,#___str_22
      0003E8 C0 E0            [24] 1786 	push	acc
      0003EA 74s01            [12] 1787 	mov	a,#(___str_22 >> 8)
      0003EC C0 E0            [24] 1788 	push	acc
      0003EE 12r00r00         [24] 1789 	lcall	_printf_fast_f
      0003F1 15 81            [12] 1790 	dec	sp
      0003F3 15 81            [12] 1791 	dec	sp
                                   1792 ;	src/main.c:395: }
                                   1793 ;	src/main.c:396: }
      0003F5 22               [24] 1794 	ret
                                   1795 ;------------------------------------------------------------
                                   1796 ;Allocation info for local variables in function 'gpio_setup'
                                   1797 ;------------------------------------------------------------
                                   1798 ;	src/main.c:398: void gpio_setup()
                                   1799 ;	-----------------------------------------
                                   1800 ;	 function gpio_setup
                                   1801 ;	-----------------------------------------
      0003F6                       1802 _gpio_setup:
                                   1803 ;	src/main.c:417: Set_All_GPIO_Quasi_Mode;
      0003F6 75 B1 00         [24] 1804 	mov	_P0M1,#0x00
      0003F9 75 B2 00         [24] 1805 	mov	_P0M2,#0x00
      0003FC 75 B3 00         [24] 1806 	mov	_P1M1,#0x00
      0003FF 75 B4 00         [24] 1807 	mov	_P1M2,#0x00
      000402 75 AC 00         [24] 1808 	mov	_P3M1,#0x00
      000405 75 AD 00         [24] 1809 	mov	_P3M2,#0x00
                                   1810 ;	src/main.c:419: P15_Input_Mode;
      000408 43 B3 20         [24] 1811 	orl	_P1M1,#0x20
      00040B 53 B4 DF         [24] 1812 	anl	_P1M2,#0xdf
                                   1813 ;	src/main.c:420: P02_Input_Mode;
      00040E 43 B1 04         [24] 1814 	orl	_P0M1,#0x04
      000411 53 B2 FB         [24] 1815 	anl	_P0M2,#0xfb
                                   1816 ;	src/main.c:421: P07_Input_Mode;
      000414 43 B1 80         [24] 1817 	orl	_P0M1,#0x80
      000417 53 B2 7F         [24] 1818 	anl	_P0M2,#0x7f
                                   1819 ;	src/main.c:423: P16_PushPull_Mode;
      00041A 53 B3 BF         [24] 1820 	anl	_P1M1,#0xbf
      00041D 43 B4 40         [24] 1821 	orl	_P1M2,#0x40
                                   1822 ;	src/main.c:424: P13_PushPull_Mode;
      000420 53 B3 F7         [24] 1823 	anl	_P1M1,#0xf7
      000423 43 B4 08         [24] 1824 	orl	_P1M2,#0x08
                                   1825 ;	src/main.c:425: P14_PushPull_Mode;
      000426 53 B3 EF         [24] 1826 	anl	_P1M1,#0xef
      000429 43 B4 10         [24] 1827 	orl	_P1M2,#0x10
                                   1828 ;	src/main.c:426: P12_PushPull_Mode;
      00042C 53 B3 FB         [24] 1829 	anl	_P1M1,#0xfb
      00042F 43 B4 04         [24] 1830 	orl	_P1M2,#0x04
                                   1831 ;	src/main.c:427: P11_PushPull_Mode;
      000432 53 B3 FD         [24] 1832 	anl	_P1M1,#0xfd
      000435 43 B4 02         [24] 1833 	orl	_P1M2,#0x02
                                   1834 ;	src/main.c:428: P10_PushPull_Mode;
      000438 53 B3 FE         [24] 1835 	anl	_P1M1,#0xfe
      00043B 43 B4 01         [24] 1836 	orl	_P1M2,#0x01
                                   1837 ;	src/main.c:429: P00_PushPull_Mode;
      00043E 53 B1 FE         [24] 1838 	anl	_P0M1,#0xfe
      000441 43 B2 01         [24] 1839 	orl	_P0M2,#0x01
                                   1840 ;	src/main.c:430: P01_PushPull_Mode;
      000444 53 B1 FD         [24] 1841 	anl	_P0M1,#0xfd
      000447 43 B2 02         [24] 1842 	orl	_P0M2,#0x02
                                   1843 ;	src/main.c:431: P04_PushPull_Mode;
      00044A 53 B1 EF         [24] 1844 	anl	_P0M1,#0xef
      00044D 43 B2 10         [24] 1845 	orl	_P0M2,#0x10
                                   1846 ;	src/main.c:432: P03_PushPull_Mode;
      000450 53 B1 F7         [24] 1847 	anl	_P0M1,#0xf7
      000453 43 B2 08         [24] 1848 	orl	_P0M2,#0x08
                                   1849 ;	src/main.c:434: UART_TX = 0;
                                   1850 ;	assignBit
      000456 C2 96            [12] 1851 	clr	_P16
                                   1852 ;	src/main.c:435: LED_B = 1;
                                   1853 ;	assignBit
      000458 D2 92            [12] 1854 	setb	_P12
                                   1855 ;	src/main.c:436: LED_G = 1;
                                   1856 ;	assignBit
      00045A D2 93            [12] 1857 	setb	_P13
                                   1858 ;	src/main.c:437: LED_R = 1;
                                   1859 ;	assignBit
      00045C D2 94            [12] 1860 	setb	_P14
                                   1861 ;	src/main.c:438: MOTOR_EN = 0;
                                   1862 ;	assignBit
      00045E C2 90            [12] 1863 	clr	_P10
                                   1864 ;	src/main.c:439: MOTOR_CW = 0;
                                   1865 ;	assignBit
      000460 C2 80            [12] 1866 	clr	_P00
                                   1867 ;	src/main.c:440: MOTOR_CCW = 0;
                                   1868 ;	assignBit
      000462 C2 81            [12] 1869 	clr	_P01
                                   1870 ;	src/main.c:441: SEL_RX_POL = 0;
                                   1871 ;	assignBit
      000464 C2 84            [12] 1872 	clr	_P04
                                   1873 ;	src/main.c:442: PWR_OUT = 0;
                                   1874 ;	assignBit
      000466 C2 83            [12] 1875 	clr	_P03
                                   1876 ;	src/main.c:443: }
      000468 22               [24] 1877 	ret
                                   1878 ;------------------------------------------------------------
                                   1879 ;Allocation info for local variables in function 'state_switches'
                                   1880 ;------------------------------------------------------------
                                   1881 ;su8PrevSW                 Allocated with name '_state_switches_su8PrevSW_65536_96'
                                   1882 ;apu8SwNum                 Allocated with name '_state_switches_PARM_2'
                                   1883 ;au8SW                     Allocated to registers r7 
                                   1884 ;i                         Allocated to registers r2 
                                   1885 ;u8Result                  Allocated to registers r6 
                                   1886 ;------------------------------------------------------------
                                   1887 ;	src/main.c:461: UINT8 state_switches(UINT8 au8SW, UINT8 *apu8SwNum)
                                   1888 ;	-----------------------------------------
                                   1889 ;	 function state_switches
                                   1890 ;	-----------------------------------------
      000469                       1891 _state_switches:
      000469 AF 82            [24] 1892 	mov	r7,dpl
                                   1893 ;	src/main.c:466: UINT8 u8Result = SW_NONE;
      00046B 7E 04            [12] 1894 	mov	r6,#0x04
                                   1895 ;	src/main.c:467: if (su8PrevSW == au8SW) {
      00046D EF               [12] 1896 	mov	a,r7
      00046E B5*07 14         [24] 1897 	cjne	a,_state_switches_su8PrevSW_65536_96,00102$
                                   1898 ;	src/main.c:468: *apu8SwNum = 0;
      000471 AB*00            [24] 1899 	mov	r3,_state_switches_PARM_2
      000473 AC*01            [24] 1900 	mov	r4,(_state_switches_PARM_2 + 1)
      000475 AD*02            [24] 1901 	mov	r5,(_state_switches_PARM_2 + 2)
      000477 8B 82            [24] 1902 	mov	dpl,r3
      000479 8C 83            [24] 1903 	mov	dph,r4
      00047B 8D F0            [24] 1904 	mov	b,r5
      00047D E4               [12] 1905 	clr	a
      00047E 12r00r00         [24] 1906 	lcall	__gptrput
                                   1907 ;	src/main.c:469: return SW_NONE;
      000481 75 82 04         [24] 1908 	mov	dpl,#0x04
      000484 22               [24] 1909 	ret
      000485                       1910 00102$:
                                   1911 ;	src/main.c:477: *apu8SwNum = 0;
      000485 AB*00            [24] 1912 	mov	r3,_state_switches_PARM_2
      000487 AC*01            [24] 1913 	mov	r4,(_state_switches_PARM_2 + 1)
      000489 AD*02            [24] 1914 	mov	r5,(_state_switches_PARM_2 + 2)
      00048B 8B 82            [24] 1915 	mov	dpl,r3
      00048D 8C 83            [24] 1916 	mov	dph,r4
      00048F 8D F0            [24] 1917 	mov	b,r5
      000491 E4               [12] 1918 	clr	a
      000492 12r00r00         [24] 1919 	lcall	__gptrput
                                   1920 ;	src/main.c:479: for (i=0;i<5;i++) {
      000495 7A 00            [12] 1921 	mov	r2,#0x00
      000497                       1922 00113$:
                                   1923 ;	src/main.c:480: switch((su8PrevSW>>i)&1) {
      000497 8A F0            [24] 1924 	mov	b,r2
      000499 05 F0            [12] 1925 	inc	b
      00049B E5*07            [12] 1926 	mov	a,_state_switches_su8PrevSW_65536_96
      00049D 80 02            [24] 1927 	sjmp	00153$
      00049F                       1928 00152$:
      00049F C3               [12] 1929 	clr	c
      0004A0 13               [12] 1930 	rrc	a
      0004A1                       1931 00153$:
      0004A1 D5 F0 FB         [24] 1932 	djnz	b,00152$
      0004A4 F8               [12] 1933 	mov	r0,a
      0004A5 53 00 01         [24] 1934 	anl	ar0,#0x01
      0004A8 79 00            [12] 1935 	mov	r1,#0x00
      0004AA B8 00 05         [24] 1936 	cjne	r0,#0x00,00154$
      0004AD B9 00 02         [24] 1937 	cjne	r1,#0x00,00154$
      0004B0 80 54            [24] 1938 	sjmp	00107$
      0004B2                       1939 00154$:
      0004B2 B8 01 05         [24] 1940 	cjne	r0,#0x01,00155$
      0004B5 B9 00 02         [24] 1941 	cjne	r1,#0x00,00155$
      0004B8 80 03            [24] 1942 	sjmp	00156$
      0004BA                       1943 00155$:
      0004BA 02r05r50         [24] 1944 	ljmp	00114$
      0004BD                       1945 00156$:
                                   1946 ;	src/main.c:482: switch((au8SW>>i)&1) {
      0004BD 8A F0            [24] 1947 	mov	b,r2
      0004BF 05 F0            [12] 1948 	inc	b
      0004C1 EF               [12] 1949 	mov	a,r7
      0004C2 80 02            [24] 1950 	sjmp	00158$
      0004C4                       1951 00157$:
      0004C4 C3               [12] 1952 	clr	c
      0004C5 13               [12] 1953 	rrc	a
      0004C6                       1954 00158$:
      0004C6 D5 F0 FB         [24] 1955 	djnz	b,00157$
      0004C9 F8               [12] 1956 	mov	r0,a
      0004CA 53 00 01         [24] 1957 	anl	ar0,#0x01
      0004CD 79 00            [12] 1958 	mov	r1,#0x00
      0004CF B8 00 05         [24] 1959 	cjne	r0,#0x00,00159$
      0004D2 B9 00 02         [24] 1960 	cjne	r1,#0x00,00159$
      0004D5 80 03            [24] 1961 	sjmp	00160$
      0004D7                       1962 00159$:
      0004D7 02r05r50         [24] 1963 	ljmp	00114$
      0004DA                       1964 00160$:
                                   1965 ;	src/main.c:486: su8PrevSW = au8SW;
      0004DA 8F*07            [24] 1966 	mov	_state_switches_su8PrevSW_65536_96,r7
                                   1967 ;	src/main.c:487: *apu8SwNum |= 1<<i;
      0004DC 8B 82            [24] 1968 	mov	dpl,r3
      0004DE 8C 83            [24] 1969 	mov	dph,r4
      0004E0 8D F0            [24] 1970 	mov	b,r5
      0004E2 12r00r00         [24] 1971 	lcall	__gptrget
      0004E5 F9               [12] 1972 	mov	r1,a
      0004E6 8A 00            [24] 1973 	mov	ar0,r2
      0004E8 88 F0            [24] 1974 	mov	b,r0
      0004EA 05 F0            [12] 1975 	inc	b
      0004EC 74 01            [12] 1976 	mov	a,#0x01
      0004EE 80 02            [24] 1977 	sjmp	00163$
      0004F0                       1978 00161$:
      0004F0 25 E0            [12] 1979 	add	a,acc
      0004F2                       1980 00163$:
      0004F2 D5 F0 FB         [24] 1981 	djnz	b,00161$
      0004F5 F8               [12] 1982 	mov	r0,a
      0004F6 42 01            [12] 1983 	orl	ar1,a
      0004F8 8B 82            [24] 1984 	mov	dpl,r3
      0004FA 8C 83            [24] 1985 	mov	dph,r4
      0004FC 8D F0            [24] 1986 	mov	b,r5
      0004FE E9               [12] 1987 	mov	a,r1
      0004FF 12r00r00         [24] 1988 	lcall	__gptrput
                                   1989 ;	src/main.c:488: u8Result = SW_OFF;
      000502 7E 00            [12] 1990 	mov	r6,#0x00
                                   1991 ;	src/main.c:492: break;
                                   1992 ;	src/main.c:493: case SW_OFF :
      000504 80 4A            [24] 1993 	sjmp	00114$
      000506                       1994 00107$:
                                   1995 ;	src/main.c:494: switch((au8SW>>i)&1) {
      000506 8A F0            [24] 1996 	mov	b,r2
      000508 05 F0            [12] 1997 	inc	b
      00050A EF               [12] 1998 	mov	a,r7
      00050B 80 02            [24] 1999 	sjmp	00165$
      00050D                       2000 00164$:
      00050D C3               [12] 2001 	clr	c
      00050E 13               [12] 2002 	rrc	a
      00050F                       2003 00165$:
      00050F D5 F0 FB         [24] 2004 	djnz	b,00164$
      000512 F8               [12] 2005 	mov	r0,a
      000513 53 00 01         [24] 2006 	anl	ar0,#0x01
      000516 79 00            [12] 2007 	mov	r1,#0x00
      000518 B8 00 05         [24] 2008 	cjne	r0,#0x00,00166$
      00051B B9 00 02         [24] 2009 	cjne	r1,#0x00,00166$
      00051E 80 30            [24] 2010 	sjmp	00114$
      000520                       2011 00166$:
      000520 B8 01 2D         [24] 2012 	cjne	r0,#0x01,00114$
      000523 B9 00 2A         [24] 2013 	cjne	r1,#0x00,00114$
                                   2014 ;	src/main.c:496: su8PrevSW = au8SW;
      000526 8F*07            [24] 2015 	mov	_state_switches_su8PrevSW_65536_96,r7
                                   2016 ;	src/main.c:497: *apu8SwNum |= 1<<i;
      000528 8B 82            [24] 2017 	mov	dpl,r3
      00052A 8C 83            [24] 2018 	mov	dph,r4
      00052C 8D F0            [24] 2019 	mov	b,r5
      00052E 12r00r00         [24] 2020 	lcall	__gptrget
      000531 F9               [12] 2021 	mov	r1,a
      000532 8A 00            [24] 2022 	mov	ar0,r2
      000534 88 F0            [24] 2023 	mov	b,r0
      000536 05 F0            [12] 2024 	inc	b
      000538 74 01            [12] 2025 	mov	a,#0x01
      00053A 80 02            [24] 2026 	sjmp	00171$
      00053C                       2027 00169$:
      00053C 25 E0            [12] 2028 	add	a,acc
      00053E                       2029 00171$:
      00053E D5 F0 FB         [24] 2030 	djnz	b,00169$
      000541 F8               [12] 2031 	mov	r0,a
      000542 42 01            [12] 2032 	orl	ar1,a
      000544 8B 82            [24] 2033 	mov	dpl,r3
      000546 8C 83            [24] 2034 	mov	dph,r4
      000548 8D F0            [24] 2035 	mov	b,r5
      00054A E9               [12] 2036 	mov	a,r1
      00054B 12r00r00         [24] 2037 	lcall	__gptrput
                                   2038 ;	src/main.c:498: u8Result = SW_ON;
      00054E 7E 01            [12] 2039 	mov	r6,#0x01
                                   2040 ;	src/main.c:506: }
      000550                       2041 00114$:
                                   2042 ;	src/main.c:479: for (i=0;i<5;i++) {
      000550 0A               [12] 2043 	inc	r2
      000551 BA 05 00         [24] 2044 	cjne	r2,#0x05,00172$
      000554                       2045 00172$:
      000554 50 03            [24] 2046 	jnc	00173$
      000556 02r04r97         [24] 2047 	ljmp	00113$
      000559                       2048 00173$:
                                   2049 ;	src/main.c:510: return u8Result;
      000559 8E 82            [24] 2050 	mov	dpl,r6
                                   2051 ;	src/main.c:598: }
      00055B 22               [24] 2052 	ret
                                   2053 ;------------------------------------------------------------
                                   2054 ;Allocation info for local variables in function 'ctrl_rgbled'
                                   2055 ;------------------------------------------------------------
                                   2056 ;u8RxUART                  Allocated to registers r7 
                                   2057 ;------------------------------------------------------------
                                   2058 ;	src/main.c:601: void ctrl_rgbled(UINT8 u8RxUART)
                                   2059 ;	-----------------------------------------
                                   2060 ;	 function ctrl_rgbled
                                   2061 ;	-----------------------------------------
      00055C                       2062 _ctrl_rgbled:
                                   2063 ;	src/main.c:605: if (u8RxUART) {
      00055C E5 82            [12] 2064 	mov	a,dpl
      00055E FF               [12] 2065 	mov	r7,a
      00055F 60 1E            [24] 2066 	jz	00111$
                                   2067 ;	src/main.c:606: if (u8RxUART&0x1) {
      000561 EF               [12] 2068 	mov	a,r7
      000562 30 E0 04         [24] 2069 	jnb	acc.0,00102$
                                   2070 ;	src/main.c:607: LED_R = LED_ON;
                                   2071 ;	assignBit
      000565 C2 94            [12] 2072 	clr	_P14
      000567 80 02            [24] 2073 	sjmp	00103$
      000569                       2074 00102$:
                                   2075 ;	src/main.c:610: LED_R = LED_OFF;
                                   2076 ;	assignBit
      000569 D2 94            [12] 2077 	setb	_P14
      00056B                       2078 00103$:
                                   2079 ;	src/main.c:612: if (u8RxUART&0x2) {
      00056B EF               [12] 2080 	mov	a,r7
      00056C 30 E1 04         [24] 2081 	jnb	acc.1,00105$
                                   2082 ;	src/main.c:613: LED_G = LED_ON;
                                   2083 ;	assignBit
      00056F C2 93            [12] 2084 	clr	_P13
      000571 80 02            [24] 2085 	sjmp	00106$
      000573                       2086 00105$:
                                   2087 ;	src/main.c:616: LED_G = LED_OFF;
                                   2088 ;	assignBit
      000573 D2 93            [12] 2089 	setb	_P13
      000575                       2090 00106$:
                                   2091 ;	src/main.c:618: if (u8RxUART&0x4) {
      000575 EF               [12] 2092 	mov	a,r7
      000576 30 E2 03         [24] 2093 	jnb	acc.2,00108$
                                   2094 ;	src/main.c:619: LED_B = LED_ON;
                                   2095 ;	assignBit
      000579 C2 92            [12] 2096 	clr	_P12
      00057B 22               [24] 2097 	ret
      00057C                       2098 00108$:
                                   2099 ;	src/main.c:622: LED_B = LED_OFF;
                                   2100 ;	assignBit
      00057C D2 92            [12] 2101 	setb	_P12
      00057E 22               [24] 2102 	ret
      00057F                       2103 00111$:
                                   2104 ;	src/main.c:626: LED_R = LED_OFF;
                                   2105 ;	assignBit
      00057F D2 94            [12] 2106 	setb	_P14
                                   2107 ;	src/main.c:627: LED_G = LED_OFF;
                                   2108 ;	assignBit
      000581 D2 93            [12] 2109 	setb	_P13
                                   2110 ;	src/main.c:628: LED_B = LED_OFF;
                                   2111 ;	assignBit
      000583 D2 92            [12] 2112 	setb	_P12
                                   2113 ;	src/main.c:630: }
      000585 22               [24] 2114 	ret
                                   2115 ;------------------------------------------------------------
                                   2116 ;Allocation info for local variables in function 'chk_my_addr'
                                   2117 ;------------------------------------------------------------
                                   2118 ;au8RxData                 Allocated with name '_chk_my_addr_PARM_2'
                                   2119 ;au8MyAddr                 Allocated to registers r7 
                                   2120 ;------------------------------------------------------------
                                   2121 ;	src/main.c:632: UINT8 chk_my_addr(UINT8 au8MyAddr, UINT8 au8RxData)
                                   2122 ;	-----------------------------------------
                                   2123 ;	 function chk_my_addr
                                   2124 ;	-----------------------------------------
      000586                       2125 _chk_my_addr:
      000586 AF 82            [24] 2126 	mov	r7,dpl
                                   2127 ;	src/main.c:634: if ( (au8RxData>>4) == (au8MyAddr&0x0F)) {
      000588 E5*00            [12] 2128 	mov	a,_chk_my_addr_PARM_2
      00058A C4               [12] 2129 	swap	a
      00058B 54 0F            [12] 2130 	anl	a,#0x0f
      00058D FE               [12] 2131 	mov	r6,a
      00058E 53 07 0F         [24] 2132 	anl	ar7,#0x0f
      000591 E4               [12] 2133 	clr	a
      000592 FD               [12] 2134 	mov	r5,a
      000593 FC               [12] 2135 	mov	r4,a
      000594 EE               [12] 2136 	mov	a,r6
      000595 B5 07 08         [24] 2137 	cjne	a,ar7,00102$
      000598 EC               [12] 2138 	mov	a,r4
      000599 B5 05 04         [24] 2139 	cjne	a,ar5,00102$
                                   2140 ;	src/main.c:635: return 1;
      00059C 75 82 01         [24] 2141 	mov	dpl,#0x01
      00059F 22               [24] 2142 	ret
      0005A0                       2143 00102$:
                                   2144 ;	src/main.c:637: return 0;
      0005A0 75 82 00         [24] 2145 	mov	dpl,#0x00
                                   2146 ;	src/main.c:638: }
      0005A3 22               [24] 2147 	ret
                                   2148 ;------------------------------------------------------------
                                   2149 ;Allocation info for local variables in function 'process_my_packet'
                                   2150 ;------------------------------------------------------------
                                   2151 ;apstLineFiPkt             Allocated to registers r5 r6 r7 
                                   2152 ;sloc0                     Allocated with name '_process_my_packet_sloc0_1_0'
                                   2153 ;------------------------------------------------------------
                                   2154 ;	src/main.c:640: void process_my_packet(linefi_packet_t * apstLineFiPkt)
                                   2155 ;	-----------------------------------------
                                   2156 ;	 function process_my_packet
                                   2157 ;	-----------------------------------------
      0005A4                       2158 _process_my_packet:
      0005A4 AD 82            [24] 2159 	mov	r5,dpl
      0005A6 AE 83            [24] 2160 	mov	r6,dph
      0005A8 AF F0            [24] 2161 	mov	r7,b
                                   2162 ;	src/main.c:642: switch(apstLineFiPkt->u8Type) {
      0005AA 74 01            [12] 2163 	mov	a,#0x01
      0005AC 2D               [12] 2164 	add	a,r5
      0005AD FA               [12] 2165 	mov	r2,a
      0005AE E4               [12] 2166 	clr	a
      0005AF 3E               [12] 2167 	addc	a,r6
      0005B0 FB               [12] 2168 	mov	r3,a
      0005B1 8F 04            [24] 2169 	mov	ar4,r7
      0005B3 8A 82            [24] 2170 	mov	dpl,r2
      0005B5 8B 83            [24] 2171 	mov	dph,r3
      0005B7 8C F0            [24] 2172 	mov	b,r4
      0005B9 12r00r00         [24] 2173 	lcall	__gptrget
      0005BC FC               [12] 2174 	mov  r4,a
      0005BD 24 F9            [12] 2175 	add	a,#0xff - 0x06
      0005BF 50 01            [24] 2176 	jnc	00116$
      0005C1 22               [24] 2177 	ret
      0005C2                       2178 00116$:
      0005C2 EC               [12] 2179 	mov	a,r4
      0005C3 2C               [12] 2180 	add	a,r4
      0005C4 2C               [12] 2181 	add	a,r4
      0005C5 90r05rC9         [24] 2182 	mov	dptr,#00117$
      0005C8 73               [24] 2183 	jmp	@a+dptr
      0005C9                       2184 00117$:
      0005C9 02r06rF2         [24] 2185 	ljmp	00109$
      0005CC 02r06rF2         [24] 2186 	ljmp	00109$
      0005CF 02r06rF2         [24] 2187 	ljmp	00109$
      0005D2 02r06rF2         [24] 2188 	ljmp	00109$
      0005D5 02r05rDE         [24] 2189 	ljmp	00105$
      0005D8 02r06r62         [24] 2190 	ljmp	00106$
      0005DB 02r06rD9         [24] 2191 	ljmp	00107$
                                   2192 ;	src/main.c:651: case Type_SetLED :
      0005DE                       2193 00105$:
                                   2194 ;	src/main.c:652: LED_R = apstLineFiPkt->pu8Data[0];
      0005DE 74 05            [12] 2195 	mov	a,#0x05
      0005E0 2D               [12] 2196 	add	a,r5
      0005E1 F5*08            [12] 2197 	mov	_process_my_packet_sloc0_1_0,a
      0005E3 E4               [12] 2198 	clr	a
      0005E4 3E               [12] 2199 	addc	a,r6
      0005E5 F5*09            [12] 2200 	mov	(_process_my_packet_sloc0_1_0 + 1),a
      0005E7 8F*0A            [24] 2201 	mov	(_process_my_packet_sloc0_1_0 + 2),r7
      0005E9 85*08 82         [24] 2202 	mov	dpl,_process_my_packet_sloc0_1_0
      0005EC 85*09 83         [24] 2203 	mov	dph,(_process_my_packet_sloc0_1_0 + 1)
      0005EF 85*0A F0         [24] 2204 	mov	b,(_process_my_packet_sloc0_1_0 + 2)
      0005F2 12r00r00         [24] 2205 	lcall	__gptrget
      0005F5 F8               [12] 2206 	mov	r0,a
      0005F6 A3               [24] 2207 	inc	dptr
      0005F7 12r00r00         [24] 2208 	lcall	__gptrget
      0005FA F9               [12] 2209 	mov	r1,a
      0005FB A3               [24] 2210 	inc	dptr
      0005FC 12r00r00         [24] 2211 	lcall	__gptrget
      0005FF FC               [12] 2212 	mov	r4,a
      000600 88 82            [24] 2213 	mov	dpl,r0
      000602 89 83            [24] 2214 	mov	dph,r1
      000604 8C F0            [24] 2215 	mov	b,r4
      000606 12r00r00         [24] 2216 	lcall	__gptrget
                                   2217 ;	assignBit
      000609 24 FF            [12] 2218 	add	a,#0xff
      00060B 92 94            [24] 2219 	mov	_P14,c
                                   2220 ;	src/main.c:653: LED_G = apstLineFiPkt->pu8Data[1];
      00060D 85*08 82         [24] 2221 	mov	dpl,_process_my_packet_sloc0_1_0
      000610 85*09 83         [24] 2222 	mov	dph,(_process_my_packet_sloc0_1_0 + 1)
      000613 85*0A F0         [24] 2223 	mov	b,(_process_my_packet_sloc0_1_0 + 2)
      000616 12r00r00         [24] 2224 	lcall	__gptrget
      000619 FA               [12] 2225 	mov	r2,a
      00061A A3               [24] 2226 	inc	dptr
      00061B 12r00r00         [24] 2227 	lcall	__gptrget
      00061E FB               [12] 2228 	mov	r3,a
      00061F A3               [24] 2229 	inc	dptr
      000620 12r00r00         [24] 2230 	lcall	__gptrget
      000623 FC               [12] 2231 	mov	r4,a
      000624 0A               [12] 2232 	inc	r2
      000625 BA 00 01         [24] 2233 	cjne	r2,#0x00,00118$
      000628 0B               [12] 2234 	inc	r3
      000629                       2235 00118$:
      000629 8A 82            [24] 2236 	mov	dpl,r2
      00062B 8B 83            [24] 2237 	mov	dph,r3
      00062D 8C F0            [24] 2238 	mov	b,r4
      00062F 12r00r00         [24] 2239 	lcall	__gptrget
                                   2240 ;	assignBit
      000632 24 FF            [12] 2241 	add	a,#0xff
      000634 92 93            [24] 2242 	mov	_P13,c
                                   2243 ;	src/main.c:654: LED_B = apstLineFiPkt->pu8Data[2];
      000636 85*08 82         [24] 2244 	mov	dpl,_process_my_packet_sloc0_1_0
      000639 85*09 83         [24] 2245 	mov	dph,(_process_my_packet_sloc0_1_0 + 1)
      00063C 85*0A F0         [24] 2246 	mov	b,(_process_my_packet_sloc0_1_0 + 2)
      00063F 12r00r00         [24] 2247 	lcall	__gptrget
      000642 FA               [12] 2248 	mov	r2,a
      000643 A3               [24] 2249 	inc	dptr
      000644 12r00r00         [24] 2250 	lcall	__gptrget
      000647 FB               [12] 2251 	mov	r3,a
      000648 A3               [24] 2252 	inc	dptr
      000649 12r00r00         [24] 2253 	lcall	__gptrget
      00064C FC               [12] 2254 	mov	r4,a
      00064D 74 02            [12] 2255 	mov	a,#0x02
      00064F 2A               [12] 2256 	add	a,r2
      000650 FA               [12] 2257 	mov	r2,a
      000651 E4               [12] 2258 	clr	a
      000652 3B               [12] 2259 	addc	a,r3
      000653 FB               [12] 2260 	mov	r3,a
      000654 8A 82            [24] 2261 	mov	dpl,r2
      000656 8B 83            [24] 2262 	mov	dph,r3
      000658 8C F0            [24] 2263 	mov	b,r4
      00065A 12r00r00         [24] 2264 	lcall	__gptrget
                                   2265 ;	assignBit
      00065D 24 FF            [12] 2266 	add	a,#0xff
      00065F 92 92            [24] 2267 	mov	_P12,c
                                   2268 ;	src/main.c:655: break;
      000661 22               [24] 2269 	ret
                                   2270 ;	src/main.c:656: case Type_CtrlMotor :
      000662                       2271 00106$:
                                   2272 ;	src/main.c:657: MOTOR_EN = apstLineFiPkt->pu8Data[0];
      000662 74 05            [12] 2273 	mov	a,#0x05
      000664 2D               [12] 2274 	add	a,r5
      000665 FD               [12] 2275 	mov	r5,a
      000666 E4               [12] 2276 	clr	a
      000667 3E               [12] 2277 	addc	a,r6
      000668 FE               [12] 2278 	mov	r6,a
      000669 8D 82            [24] 2279 	mov	dpl,r5
      00066B 8E 83            [24] 2280 	mov	dph,r6
      00066D 8F F0            [24] 2281 	mov	b,r7
      00066F 12r00r00         [24] 2282 	lcall	__gptrget
      000672 FA               [12] 2283 	mov	r2,a
      000673 A3               [24] 2284 	inc	dptr
      000674 12r00r00         [24] 2285 	lcall	__gptrget
      000677 FB               [12] 2286 	mov	r3,a
      000678 A3               [24] 2287 	inc	dptr
      000679 12r00r00         [24] 2288 	lcall	__gptrget
      00067C FC               [12] 2289 	mov	r4,a
      00067D 8A 82            [24] 2290 	mov	dpl,r2
      00067F 8B 83            [24] 2291 	mov	dph,r3
      000681 8C F0            [24] 2292 	mov	b,r4
      000683 12r00r00         [24] 2293 	lcall	__gptrget
                                   2294 ;	assignBit
      000686 24 FF            [12] 2295 	add	a,#0xff
      000688 92 90            [24] 2296 	mov	_P10,c
                                   2297 ;	src/main.c:658: MOTOR_CW = apstLineFiPkt->pu8Data[1];
      00068A 8D 82            [24] 2298 	mov	dpl,r5
      00068C 8E 83            [24] 2299 	mov	dph,r6
      00068E 8F F0            [24] 2300 	mov	b,r7
      000690 12r00r00         [24] 2301 	lcall	__gptrget
      000693 FA               [12] 2302 	mov	r2,a
      000694 A3               [24] 2303 	inc	dptr
      000695 12r00r00         [24] 2304 	lcall	__gptrget
      000698 FB               [12] 2305 	mov	r3,a
      000699 A3               [24] 2306 	inc	dptr
      00069A 12r00r00         [24] 2307 	lcall	__gptrget
      00069D FC               [12] 2308 	mov	r4,a
      00069E 0A               [12] 2309 	inc	r2
      00069F BA 00 01         [24] 2310 	cjne	r2,#0x00,00119$
      0006A2 0B               [12] 2311 	inc	r3
      0006A3                       2312 00119$:
      0006A3 8A 82            [24] 2313 	mov	dpl,r2
      0006A5 8B 83            [24] 2314 	mov	dph,r3
      0006A7 8C F0            [24] 2315 	mov	b,r4
      0006A9 12r00r00         [24] 2316 	lcall	__gptrget
                                   2317 ;	assignBit
      0006AC 24 FF            [12] 2318 	add	a,#0xff
      0006AE 92 80            [24] 2319 	mov	_P00,c
                                   2320 ;	src/main.c:659: MOTOR_CCW = apstLineFiPkt->pu8Data[2];
      0006B0 8D 82            [24] 2321 	mov	dpl,r5
      0006B2 8E 83            [24] 2322 	mov	dph,r6
      0006B4 8F F0            [24] 2323 	mov	b,r7
      0006B6 12r00r00         [24] 2324 	lcall	__gptrget
      0006B9 FD               [12] 2325 	mov	r5,a
      0006BA A3               [24] 2326 	inc	dptr
      0006BB 12r00r00         [24] 2327 	lcall	__gptrget
      0006BE FE               [12] 2328 	mov	r6,a
      0006BF A3               [24] 2329 	inc	dptr
      0006C0 12r00r00         [24] 2330 	lcall	__gptrget
      0006C3 FF               [12] 2331 	mov	r7,a
      0006C4 74 02            [12] 2332 	mov	a,#0x02
      0006C6 2D               [12] 2333 	add	a,r5
      0006C7 FD               [12] 2334 	mov	r5,a
      0006C8 E4               [12] 2335 	clr	a
      0006C9 3E               [12] 2336 	addc	a,r6
      0006CA FE               [12] 2337 	mov	r6,a
      0006CB 8D 82            [24] 2338 	mov	dpl,r5
      0006CD 8E 83            [24] 2339 	mov	dph,r6
      0006CF 8F F0            [24] 2340 	mov	b,r7
      0006D1 12r00r00         [24] 2341 	lcall	__gptrget
                                   2342 ;	assignBit
      0006D4 24 FF            [12] 2343 	add	a,#0xff
      0006D6 92 81            [24] 2344 	mov	_P01,c
                                   2345 ;	src/main.c:660: break;
                                   2346 ;	src/main.c:661: case Type_ReadAddr :
      0006D8 22               [24] 2347 	ret
      0006D9                       2348 00107$:
                                   2349 ;	src/main.c:662: printf_fast_f("My address is 0x%x\r\n", gu8MyAddr);
      0006D9 AE*00            [24] 2350 	mov	r6,_gu8MyAddr
      0006DB 7F 00            [12] 2351 	mov	r7,#0x00
      0006DD C0 06            [24] 2352 	push	ar6
      0006DF C0 07            [24] 2353 	push	ar7
      0006E1 74rD2            [12] 2354 	mov	a,#___str_23
      0006E3 C0 E0            [24] 2355 	push	acc
      0006E5 74s01            [12] 2356 	mov	a,#(___str_23 >> 8)
      0006E7 C0 E0            [24] 2357 	push	acc
      0006E9 12r00r00         [24] 2358 	lcall	_printf_fast_f
      0006EC E5 81            [12] 2359 	mov	a,sp
      0006EE 24 FC            [12] 2360 	add	a,#0xfc
      0006F0 F5 81            [12] 2361 	mov	sp,a
                                   2362 ;	src/main.c:664: }
      0006F2                       2363 00109$:
                                   2364 ;	src/main.c:665: }
      0006F2 22               [24] 2365 	ret
                                   2366 ;------------------------------------------------------------
                                   2367 ;Allocation info for local variables in function 'process_all_packet'
                                   2368 ;------------------------------------------------------------
                                   2369 ;apstLineFiPkt             Allocated to registers r5 r6 r7 
                                   2370 ;------------------------------------------------------------
                                   2371 ;	src/main.c:667: void process_all_packet(linefi_packet_t * apstLineFiPkt)
                                   2372 ;	-----------------------------------------
                                   2373 ;	 function process_all_packet
                                   2374 ;	-----------------------------------------
      0006F3                       2375 _process_all_packet:
      0006F3 AD 82            [24] 2376 	mov	r5,dpl
      0006F5 AE 83            [24] 2377 	mov	r6,dph
      0006F7 AF F0            [24] 2378 	mov	r7,b
                                   2379 ;	src/main.c:669: switch(apstLineFiPkt->u8Type) {
      0006F9 74 01            [12] 2380 	mov	a,#0x01
      0006FB 2D               [12] 2381 	add	a,r5
      0006FC FA               [12] 2382 	mov	r2,a
      0006FD E4               [12] 2383 	clr	a
      0006FE 3E               [12] 2384 	addc	a,r6
      0006FF FB               [12] 2385 	mov	r3,a
      000700 8F 04            [24] 2386 	mov	ar4,r7
      000702 8A 82            [24] 2387 	mov	dpl,r2
      000704 8B 83            [24] 2388 	mov	dph,r3
      000706 8C F0            [24] 2389 	mov	b,r4
      000708 12r00r00         [24] 2390 	lcall	__gptrget
      00070B FC               [12] 2391 	mov  r4,a
      00070C 24 F9            [12] 2392 	add	a,#0xff - 0x06
      00070E 50 03            [24] 2393 	jnc	00132$
      000710 02r07rBC         [24] 2394 	ljmp	00110$
      000713                       2395 00132$:
      000713 EC               [12] 2396 	mov	a,r4
      000714 2C               [12] 2397 	add	a,r4
      000715 2C               [12] 2398 	add	a,r4
      000716 90r07r1A         [24] 2399 	mov	dptr,#00133$
      000719 73               [24] 2400 	jmp	@a+dptr
      00071A                       2401 00133$:
      00071A 02r07rDB         [24] 2402 	ljmp	00114$
      00071D 02r07r83         [24] 2403 	ljmp	00106$
      000720 02r07rDB         [24] 2404 	ljmp	00114$
      000723 02r07r2F         [24] 2405 	ljmp	00101$
      000726 02r07rBC         [24] 2406 	ljmp	00110$
      000729 02r07rBC         [24] 2407 	ljmp	00110$
      00072C 02r07rA2         [24] 2408 	ljmp	00109$
                                   2409 ;	src/main.c:670: case Type_SetAddr :
      00072F                       2410 00101$:
                                   2411 ;	src/main.c:671: if (SWITCH == SW_ON) {
      00072F 20 95 01         [24] 2412 	jb	_P15,00134$
      000732 22               [24] 2413 	ret
      000733                       2414 00134$:
                                   2415 ;	src/main.c:672: printf_fast_f("set address as %d\r\n", apstLineFiPkt->u8Addr);
      000733 74 02            [12] 2416 	mov	a,#0x02
      000735 2D               [12] 2417 	add	a,r5
      000736 FA               [12] 2418 	mov	r2,a
      000737 E4               [12] 2419 	clr	a
      000738 3E               [12] 2420 	addc	a,r6
      000739 FB               [12] 2421 	mov	r3,a
      00073A 8F 04            [24] 2422 	mov	ar4,r7
      00073C 8A 82            [24] 2423 	mov	dpl,r2
      00073E 8B 83            [24] 2424 	mov	dph,r3
      000740 8C F0            [24] 2425 	mov	b,r4
      000742 12r00r00         [24] 2426 	lcall	__gptrget
      000745 F8               [12] 2427 	mov	r0,a
      000746 79 00            [12] 2428 	mov	r1,#0x00
      000748 C0 04            [24] 2429 	push	ar4
      00074A C0 03            [24] 2430 	push	ar3
      00074C C0 02            [24] 2431 	push	ar2
      00074E C0 00            [24] 2432 	push	ar0
      000750 C0 01            [24] 2433 	push	ar1
      000752 74rE7            [12] 2434 	mov	a,#___str_24
      000754 C0 E0            [24] 2435 	push	acc
      000756 74s01            [12] 2436 	mov	a,#(___str_24 >> 8)
      000758 C0 E0            [24] 2437 	push	acc
      00075A 12r00r00         [24] 2438 	lcall	_printf_fast_f
      00075D E5 81            [12] 2439 	mov	a,sp
      00075F 24 FC            [12] 2440 	add	a,#0xfc
      000761 F5 81            [12] 2441 	mov	sp,a
      000763 D0 02            [24] 2442 	pop	ar2
      000765 D0 03            [24] 2443 	pop	ar3
      000767 D0 04            [24] 2444 	pop	ar4
                                   2445 ;	src/main.c:673: gu8MyAddr = apstLineFiPkt->u8Addr;
      000769 8A 82            [24] 2446 	mov	dpl,r2
      00076B 8B 83            [24] 2447 	mov	dph,r3
      00076D 8C F0            [24] 2448 	mov	b,r4
      00076F 12r00r00         [24] 2449 	lcall	__gptrget
      000772 F5*00            [12] 2450 	mov	_gu8MyAddr,a
                                   2451 ;	src/main.c:674: Erase_APROM_Page(BASE_ADDRESS);
      000774 90 37 00         [24] 2452 	mov	dptr,#0x3700
      000777 12r00r00         [24] 2453 	lcall	_Erase_APROM_Page
                                   2454 ;	src/main.c:675: Write_APROM_BYTE(BASE_ADDRESS+0, gu8MyAddr);
      00077A 85*00*00         [24] 2455 	mov	_Write_APROM_BYTE_PARM_2,_gu8MyAddr
      00077D 90 37 00         [24] 2456 	mov	dptr,#0x3700
                                   2457 ;	src/main.c:677: break;
                                   2458 ;	src/main.c:682: case Type_Ucast :
      000780 02r00r00         [24] 2459 	ljmp	_Write_APROM_BYTE
      000783                       2460 00106$:
                                   2461 ;	src/main.c:683: if (gu8MyAddr == apstLineFiPkt->u8Addr) {
      000783 74 02            [12] 2462 	mov	a,#0x02
      000785 2D               [12] 2463 	add	a,r5
      000786 FA               [12] 2464 	mov	r2,a
      000787 E4               [12] 2465 	clr	a
      000788 3E               [12] 2466 	addc	a,r6
      000789 FB               [12] 2467 	mov	r3,a
      00078A 8F 04            [24] 2468 	mov	ar4,r7
      00078C 8A 82            [24] 2469 	mov	dpl,r2
      00078E 8B 83            [24] 2470 	mov	dph,r3
      000790 8C F0            [24] 2471 	mov	b,r4
      000792 12r00r00         [24] 2472 	lcall	__gptrget
      000795 FA               [12] 2473 	mov	r2,a
      000796 B5*00 42         [24] 2474 	cjne	a,_gu8MyAddr,00114$
                                   2475 ;	src/main.c:684: process_my_packet(apstLineFiPkt);
      000799 8D 82            [24] 2476 	mov	dpl,r5
      00079B 8E 83            [24] 2477 	mov	dph,r6
      00079D 8F F0            [24] 2478 	mov	b,r7
                                   2479 ;	src/main.c:686: break;
                                   2480 ;	src/main.c:687: case Type_ReadAddr :
      00079F 02r05rA4         [24] 2481 	ljmp	_process_my_packet
      0007A2                       2482 00109$:
                                   2483 ;	src/main.c:688: printf_fast_f("My address is %d\r\n", gu8MyAddr);
      0007A2 AB*00            [24] 2484 	mov	r3,_gu8MyAddr
      0007A4 7C 00            [12] 2485 	mov	r4,#0x00
      0007A6 C0 03            [24] 2486 	push	ar3
      0007A8 C0 04            [24] 2487 	push	ar4
      0007AA 74rFB            [12] 2488 	mov	a,#___str_25
      0007AC C0 E0            [24] 2489 	push	acc
      0007AE 74s01            [12] 2490 	mov	a,#(___str_25 >> 8)
      0007B0 C0 E0            [24] 2491 	push	acc
      0007B2 12r00r00         [24] 2492 	lcall	_printf_fast_f
      0007B5 E5 81            [12] 2493 	mov	a,sp
      0007B7 24 FC            [12] 2494 	add	a,#0xfc
      0007B9 F5 81            [12] 2495 	mov	sp,a
                                   2496 ;	src/main.c:689: break;
                                   2497 ;	src/main.c:690: default :
      0007BB 22               [24] 2498 	ret
      0007BC                       2499 00110$:
                                   2500 ;	src/main.c:691: if (gu8MyAddr == apstLineFiPkt->u8Addr) {
      0007BC 74 02            [12] 2501 	mov	a,#0x02
      0007BE 2D               [12] 2502 	add	a,r5
      0007BF FA               [12] 2503 	mov	r2,a
      0007C0 E4               [12] 2504 	clr	a
      0007C1 3E               [12] 2505 	addc	a,r6
      0007C2 FB               [12] 2506 	mov	r3,a
      0007C3 8F 04            [24] 2507 	mov	ar4,r7
      0007C5 8A 82            [24] 2508 	mov	dpl,r2
      0007C7 8B 83            [24] 2509 	mov	dph,r3
      0007C9 8C F0            [24] 2510 	mov	b,r4
      0007CB 12r00r00         [24] 2511 	lcall	__gptrget
      0007CE FA               [12] 2512 	mov	r2,a
      0007CF B5*00 09         [24] 2513 	cjne	a,_gu8MyAddr,00114$
                                   2514 ;	src/main.c:692: process_my_packet(apstLineFiPkt);
      0007D2 8D 82            [24] 2515 	mov	dpl,r5
      0007D4 8E 83            [24] 2516 	mov	dph,r6
      0007D6 8F F0            [24] 2517 	mov	b,r7
                                   2518 ;	src/main.c:695: }
                                   2519 ;	src/main.c:696: }
      0007D8 02r05rA4         [24] 2520 	ljmp	_process_my_packet
      0007DB                       2521 00114$:
      0007DB 22               [24] 2522 	ret
                                   2523 ;------------------------------------------------------------
                                   2524 ;Allocation info for local variables in function 'print_one_octet_linefi'
                                   2525 ;------------------------------------------------------------
                                   2526 ;au8Data                   Allocated to registers r7 
                                   2527 ;------------------------------------------------------------
                                   2528 ;	src/main.c:698: void print_one_octet_linefi(UINT8 au8Data)
                                   2529 ;	-----------------------------------------
                                   2530 ;	 function print_one_octet_linefi
                                   2531 ;	-----------------------------------------
      0007DC                       2532 _print_one_octet_linefi:
                                   2533 ;	src/main.c:700: printf_fast_f("address:%u\r\n", au8Data>>4);
      0007DC E5 82            [12] 2534 	mov	a,dpl
      0007DE FF               [12] 2535 	mov	r7,a
      0007DF C4               [12] 2536 	swap	a
      0007E0 54 0F            [12] 2537 	anl	a,#0x0f
      0007E2 FE               [12] 2538 	mov	r6,a
      0007E3 7D 00            [12] 2539 	mov	r5,#0x00
      0007E5 C0 07            [24] 2540 	push	ar7
      0007E7 C0 06            [24] 2541 	push	ar6
      0007E9 C0 05            [24] 2542 	push	ar5
      0007EB 74r0E            [12] 2543 	mov	a,#___str_26
      0007ED C0 E0            [24] 2544 	push	acc
      0007EF 74s02            [12] 2545 	mov	a,#(___str_26 >> 8)
      0007F1 C0 E0            [24] 2546 	push	acc
      0007F3 12r00r00         [24] 2547 	lcall	_printf_fast_f
      0007F6 E5 81            [12] 2548 	mov	a,sp
      0007F8 24 FC            [12] 2549 	add	a,#0xfc
      0007FA F5 81            [12] 2550 	mov	sp,a
      0007FC D0 07            [24] 2551 	pop	ar7
                                   2552 ;	src/main.c:701: printf_fast_f("command:%u\r\n", au8Data&0xF);
      0007FE 53 07 0F         [24] 2553 	anl	ar7,#0x0f
      000801 7E 00            [12] 2554 	mov	r6,#0x00
      000803 C0 07            [24] 2555 	push	ar7
      000805 C0 06            [24] 2556 	push	ar6
      000807 74r1B            [12] 2557 	mov	a,#___str_27
      000809 C0 E0            [24] 2558 	push	acc
      00080B 74s02            [12] 2559 	mov	a,#(___str_27 >> 8)
      00080D C0 E0            [24] 2560 	push	acc
      00080F 12r00r00         [24] 2561 	lcall	_printf_fast_f
      000812 E5 81            [12] 2562 	mov	a,sp
      000814 24 FC            [12] 2563 	add	a,#0xfc
      000816 F5 81            [12] 2564 	mov	sp,a
                                   2565 ;	src/main.c:702: }
      000818 22               [24] 2566 	ret
                                   2567 ;------------------------------------------------------------
                                   2568 ;Allocation info for local variables in function 'main'
                                   2569 ;------------------------------------------------------------
                                   2570 ;su8Cnt                    Allocated with name '_main_su8Cnt_262145_138'
                                   2571 ;u8PrevSwitch              Allocated to registers r5 
                                   2572 ;u8UartRx                  Allocated to registers 
                                   2573 ;u8RotSense                Allocated to registers 
                                   2574 ;u8RxUART                  Allocated with name '_main_u8RxUART_65536_128'
                                   2575 ;u16Cnt                    Allocated to registers r4 r5 
                                   2576 ;u8OutputState             Allocated to registers 
                                   2577 ;u8LineFiAddr              Allocated to registers 
                                   2578 ;u8LineFiSpeed             Allocated to registers 
                                   2579 ;u8Data                    Allocated to registers 
                                   2580 ;u8LineFiCmd               Allocated to registers 
                                   2581 ;u8PwrOnFirstFlag          Allocated to registers 
                                   2582 ;u8StateRxLFP              Allocated to registers r7 
                                   2583 ;stLineFiPkt               Allocated with name '_main_stLineFiPkt_65536_128'
                                   2584 ;u8MotorState              Allocated to registers 
                                   2585 ;u8RxIdx                   Allocated to registers r6 
                                   2586 ;pu8LineFiRx               Allocated with name '_main_pu8LineFiRx_65536_128'
                                   2587 ;u8LineFiRxIdx             Allocated to registers 
                                   2588 ;u8Count2                  Allocated to registers 
                                   2589 ;u8RxPktCnt                Allocated to registers 
                                   2590 ;u8PreambleCnt             Allocated to registers 
                                   2591 ;pu8RxUART                 Allocated with name '_main_pu8RxUART_65536_128'
                                   2592 ;------------------------------------------------------------
                                   2593 ;	src/main.c:707: void main (void)
                                   2594 ;	-----------------------------------------
                                   2595 ;	 function main
                                   2596 ;	-----------------------------------------
      000819                       2597 _main:
                                   2598 ;	src/main.c:727: UINT8 u8StateRxLFP = STATE_RxLFP_INIT; // State Rx LineFi Packet
      000819 7F 00            [12] 2599 	mov	r7,#0x00
                                   2600 ;	src/main.c:731: linefi_packet_t stLineFiPkt = {
      00081B 75*0D 01         [24] 2601 	mov	_main_stLineFiPkt_65536_128,#0x01
      00081E 75*0E 02         [24] 2602 	mov	(_main_stLineFiPkt_65536_128 + 0x0001),#0x02
      000821 75*0F 03         [24] 2603 	mov	(_main_stLineFiPkt_65536_128 + 0x0002),#0x03
      000824 75*10 04         [24] 2604 	mov	(_main_stLineFiPkt_65536_128 + 0x0003),#0x04
      000827 75*11 05         [24] 2605 	mov	(_main_stLineFiPkt_65536_128 + 0x0004),#0x05
      00082A 75*12r00         [24] 2606 	mov	((_main_stLineFiPkt_65536_128 + 0x0005) + 0),#_gpu8Data
      00082D 75*13s00         [24] 2607 	mov	((_main_stLineFiPkt_65536_128 + 0x0005) + 1),#(_gpu8Data >> 8)
                                   2608 ;	1-genFromRTrack replaced	mov	((_main_stLineFiPkt_65536_128 + 0x0005) + 2),#0x00
      000830 8F*14            [24] 2609 	mov	((_main_stLineFiPkt_65536_128 + 0x0005) + 2),r7
                                   2610 ;	src/main.c:743: UINT8 u8RxIdx = 0;
      000832 7E 00            [12] 2611 	mov	r6,#0x00
                                   2612 ;	src/main.c:748: gpio_setup();
      000834 C0 07            [24] 2613 	push	ar7
      000836 C0 06            [24] 2614 	push	ar6
      000838 12r03rF6         [24] 2615 	lcall	_gpio_setup
                                   2616 ;	src/main.c:749: uart_setup();
      00083B 12r00r00         [24] 2617 	lcall	_uart_setup
                                   2618 ;	src/main.c:750: InitialUART1_Timer3(57600);
      00083E 90 E1 00         [24] 2619 	mov	dptr,#0xe100
      000841 E4               [12] 2620 	clr	a
      000842 F5 F0            [12] 2621 	mov	b,a
      000844 12r00r00         [24] 2622 	lcall	_InitialUART1_Timer3
                                   2623 ;	src/main.c:752: MODIFY_HIRC_166();
      000847 12r02r7C         [24] 2624 	lcall	_MODIFY_HIRC_166
                                   2625 ;	src/main.c:754: clr_T0M;// 16/12 MHz
      00084A 53 8E F7         [24] 2626 	anl	_CKCON,#0xf7
                                   2627 ;	src/main.c:757: set_ET0;                                    //enable Timer0 interrupt
                                   2628 ;	assignBit
      00084D D2 A9            [12] 2629 	setb	_ET0
                                   2630 ;	src/main.c:758: set_TR0;                                    //Timer0 run
                                   2631 ;	assignBit
      00084F D2 8C            [12] 2632 	setb	_TR0
                                   2633 ;	src/main.c:760: gu8UART = 0;
      000851 75*01 00         [24] 2634 	mov	_gu8UART,#0x00
                                   2635 ;	src/main.c:761: printf_fast_f("This is UART0\n\r");
      000854 74r28            [12] 2636 	mov	a,#___str_28
      000856 C0 E0            [24] 2637 	push	acc
      000858 74s02            [12] 2638 	mov	a,#(___str_28 >> 8)
      00085A C0 E0            [24] 2639 	push	acc
      00085C 12r00r00         [24] 2640 	lcall	_printf_fast_f
      00085F 15 81            [12] 2641 	dec	sp
      000861 15 81            [12] 2642 	dec	sp
                                   2643 ;	src/main.c:762: printf_fast_f("LineFi Sniffer\n\r");
      000863 74r38            [12] 2644 	mov	a,#___str_29
      000865 C0 E0            [24] 2645 	push	acc
      000867 74s02            [12] 2646 	mov	a,#(___str_29 >> 8)
      000869 C0 E0            [24] 2647 	push	acc
      00086B 12r00r00         [24] 2648 	lcall	_printf_fast_f
      00086E 15 81            [12] 2649 	dec	sp
      000870 15 81            [12] 2650 	dec	sp
                                   2651 ;	src/main.c:763: gu8UART = 1;
      000872 75*01 01         [24] 2652 	mov	_gu8UART,#0x01
                                   2653 ;	src/main.c:764: printf_fast_f("This is UART1\n\r");
      000875 74r49            [12] 2654 	mov	a,#___str_30
      000877 C0 E0            [24] 2655 	push	acc
      000879 74s02            [12] 2656 	mov	a,#(___str_30 >> 8)
      00087B C0 E0            [24] 2657 	push	acc
      00087D 12r00r00         [24] 2658 	lcall	_printf_fast_f
      000880 15 81            [12] 2659 	dec	sp
      000882 15 81            [12] 2660 	dec	sp
      000884 D0 06            [24] 2661 	pop	ar6
      000886 D0 07            [24] 2662 	pop	ar7
                                   2663 ;	src/main.c:769: for (u16Cnt = 0 ; u16Cnt < 30000; u16Cnt++) {
      000888 7C 30            [12] 2664 	mov	r4,#0x30
      00088A 7D 75            [12] 2665 	mov	r5,#0x75
      00088C                       2666 00144$:
                                   2667 ;	src/main.c:770: nop; nop; nop; nop; nop;
      00088C 00               [12] 2668 	NOP
      00088D 00               [12] 2669 	NOP
      00088E 00               [12] 2670 	NOP
      00088F 00               [12] 2671 	NOP
      000890 00               [12] 2672 	NOP
      000891 1C               [12] 2673 	dec	r4
      000892 BC FF 01         [24] 2674 	cjne	r4,#0xff,00252$
      000895 1D               [12] 2675 	dec	r5
      000896                       2676 00252$:
                                   2677 ;	src/main.c:769: for (u16Cnt = 0 ; u16Cnt < 30000; u16Cnt++) {
      000896 EC               [12] 2678 	mov	a,r4
      000897 4D               [12] 2679 	orl	a,r5
                                   2680 ;	src/main.c:772: gu8UART = 0;
      000898 70 F2            [24] 2681 	jnz	00144$
      00089A F5*01            [12] 2682 	mov	_gu8UART,a
                                   2683 ;	src/main.c:774: u8UartRx = UART_RX;
      00089C A2 82            [12] 2684 	mov	c,_P02
                                   2685 ;	src/main.c:775: u8PrevSwitch = SWITCH;
      00089E A2 95            [12] 2686 	mov	c,_P15
      0008A0 E4               [12] 2687 	clr	a
      0008A1 33               [12] 2688 	rlc	a
      0008A2 FD               [12] 2689 	mov	r5,a
                                   2690 ;	src/main.c:777: set_EPI;
      0008A3 43 9B 02         [24] 2691 	orl	_EIE,#0x02
                                   2692 ;	src/main.c:778: set_EA;
                                   2693 ;	assignBit
      0008A6 D2 AF            [12] 2694 	setb	_EA
                                   2695 ;	src/main.c:780: if (UART_RX == 0) {
      0008A8 20 82 02         [24] 2696 	jb	_P02,00103$
                                   2697 ;	src/main.c:781: SEL_RX_POL = 1;
                                   2698 ;	assignBit
      0008AB D2 84            [12] 2699 	setb	_P04
      0008AD                       2700 00103$:
                                   2701 ;	src/main.c:783: MOTOR_EN = 1;
                                   2702 ;	assignBit
      0008AD D2 90            [12] 2703 	setb	_P10
                                   2704 ;	src/main.c:785: gu8MyAddr = gpcEEPROM[0]; // 0x00이면 펌웨어 쓴 직후
      0008AF 90r37r00         [24] 2705 	mov	dptr,#_gpcEEPROM
      0008B2 E4               [12] 2706 	clr	a
      0008B3 93               [24] 2707 	movc	a,@a+dptr
      0008B4 F5*00            [12] 2708 	mov	_gu8MyAddr,a
                                   2709 ;	src/main.c:787: while(1) {
      0008B6                       2710 00140$:
                                   2711 ;	src/main.c:790: if (Receive_Data_From_UART0_nb(&u8RxUART)) {
      0008B6 90r00r0C         [24] 2712 	mov	dptr,#_main_u8RxUART_65536_128
      0008B9 75 F0 40         [24] 2713 	mov	b,#0x40
      0008BC C0 07            [24] 2714 	push	ar7
      0008BE C0 06            [24] 2715 	push	ar6
      0008C0 C0 05            [24] 2716 	push	ar5
      0008C2 12r00r00         [24] 2717 	lcall	_Receive_Data_From_UART0_nb
      0008C5 E5 82            [12] 2718 	mov	a,dpl
      0008C7 D0 05            [24] 2719 	pop	ar5
      0008C9 D0 06            [24] 2720 	pop	ar6
      0008CB D0 07            [24] 2721 	pop	ar7
      0008CD 70 03            [24] 2722 	jnz	00255$
      0008CF 02r0Br1F         [24] 2723 	ljmp	00115$
      0008D2                       2724 00255$:
                                   2725 ;	src/main.c:791: switch(u8RxUART) {
      0008D2 74 31            [12] 2726 	mov	a,#0x31
      0008D4 B5*0C 02         [24] 2727 	cjne	a,_main_u8RxUART_65536_128,00256$
      0008D7 80 42            [24] 2728 	sjmp	00104$
      0008D9                       2729 00256$:
      0008D9 74 32            [12] 2730 	mov	a,#0x32
      0008DB B5*0C 02         [24] 2731 	cjne	a,_main_u8RxUART_65536_128,00257$
      0008DE 80 77            [24] 2732 	sjmp	00105$
      0008E0                       2733 00257$:
      0008E0 74 33            [12] 2734 	mov	a,#0x33
      0008E2 B5*0C 03         [24] 2735 	cjne	a,_main_u8RxUART_65536_128,00258$
      0008E5 02r09r93         [24] 2736 	ljmp	00106$
      0008E8                       2737 00258$:
      0008E8 74 34            [12] 2738 	mov	a,#0x34
      0008EA B5*0C 03         [24] 2739 	cjne	a,_main_u8RxUART_65536_128,00259$
      0008ED 02r09rCF         [24] 2740 	ljmp	00107$
      0008F0                       2741 00259$:
      0008F0 74 35            [12] 2742 	mov	a,#0x35
      0008F2 B5*0C 03         [24] 2743 	cjne	a,_main_u8RxUART_65536_128,00260$
      0008F5 02r0Ar0B         [24] 2744 	ljmp	00108$
      0008F8                       2745 00260$:
      0008F8 74 36            [12] 2746 	mov	a,#0x36
      0008FA B5*0C 03         [24] 2747 	cjne	a,_main_u8RxUART_65536_128,00261$
      0008FD 02r0Ar47         [24] 2748 	ljmp	00109$
      000900                       2749 00261$:
      000900 74 37            [12] 2750 	mov	a,#0x37
      000902 B5*0C 03         [24] 2751 	cjne	a,_main_u8RxUART_65536_128,00262$
      000905 02r0Ar83         [24] 2752 	ljmp	00110$
      000908                       2753 00262$:
      000908 74 38            [12] 2754 	mov	a,#0x38
      00090A B5*0C 03         [24] 2755 	cjne	a,_main_u8RxUART_65536_128,00263$
      00090D 02r0ArBE         [24] 2756 	ljmp	00111$
      000910                       2757 00263$:
      000910 74 74            [12] 2758 	mov	a,#0x74
      000912 B5*0C 03         [24] 2759 	cjne	a,_main_u8RxUART_65536_128,00264$
      000915 02r0ArF9         [24] 2760 	ljmp	00112$
      000918                       2761 00264$:
      000918 02r0Br1F         [24] 2762 	ljmp	00115$
                                   2763 ;	src/main.c:792: case '1' :
      00091B                       2764 00104$:
                                   2765 ;	src/main.c:793: TOGGLE(UART_TX);
      00091B B2 96            [12] 2766 	cpl	_P16
                                   2767 ;	src/main.c:794: printf_fast_f("UART_TX=");
      00091D C0 07            [24] 2768 	push	ar7
      00091F C0 06            [24] 2769 	push	ar6
      000921 C0 05            [24] 2770 	push	ar5
      000923 74r59            [12] 2771 	mov	a,#___str_31
      000925 C0 E0            [24] 2772 	push	acc
      000927 74s02            [12] 2773 	mov	a,#(___str_31 >> 8)
      000929 C0 E0            [24] 2774 	push	acc
      00092B 12r00r00         [24] 2775 	lcall	_printf_fast_f
      00092E 15 81            [12] 2776 	dec	sp
      000930 15 81            [12] 2777 	dec	sp
                                   2778 ;	src/main.c:795: printf_fast_f("%d\n\r", UART_TX);
      000932 A2 96            [12] 2779 	mov	c,_P16
      000934 E4               [12] 2780 	clr	a
      000935 33               [12] 2781 	rlc	a
      000936 FB               [12] 2782 	mov	r3,a
      000937 7C 00            [12] 2783 	mov	r4,#0x00
      000939 C0 03            [24] 2784 	push	ar3
      00093B C0 04            [24] 2785 	push	ar4
      00093D 74r62            [12] 2786 	mov	a,#___str_32
      00093F C0 E0            [24] 2787 	push	acc
      000941 74s02            [12] 2788 	mov	a,#(___str_32 >> 8)
      000943 C0 E0            [24] 2789 	push	acc
      000945 12r00r00         [24] 2790 	lcall	_printf_fast_f
      000948 E5 81            [12] 2791 	mov	a,sp
      00094A 24 FC            [12] 2792 	add	a,#0xfc
      00094C F5 81            [12] 2793 	mov	sp,a
      00094E D0 05            [24] 2794 	pop	ar5
      000950 D0 06            [24] 2795 	pop	ar6
      000952 D0 07            [24] 2796 	pop	ar7
                                   2797 ;	src/main.c:796: break;
      000954 02r0Br1F         [24] 2798 	ljmp	00115$
                                   2799 ;	src/main.c:797: case '2' :
      000957                       2800 00105$:
                                   2801 ;	src/main.c:798: TOGGLE(LED_R);
      000957 B2 94            [12] 2802 	cpl	_P14
                                   2803 ;	src/main.c:799: printf_fast_f("LED_R=");
      000959 C0 07            [24] 2804 	push	ar7
      00095B C0 06            [24] 2805 	push	ar6
      00095D C0 05            [24] 2806 	push	ar5
      00095F 74r67            [12] 2807 	mov	a,#___str_33
      000961 C0 E0            [24] 2808 	push	acc
      000963 74s02            [12] 2809 	mov	a,#(___str_33 >> 8)
      000965 C0 E0            [24] 2810 	push	acc
      000967 12r00r00         [24] 2811 	lcall	_printf_fast_f
      00096A 15 81            [12] 2812 	dec	sp
      00096C 15 81            [12] 2813 	dec	sp
                                   2814 ;	src/main.c:800: printf_fast_f("%d\n\r", LED_R);
      00096E A2 94            [12] 2815 	mov	c,_P14
      000970 E4               [12] 2816 	clr	a
      000971 33               [12] 2817 	rlc	a
      000972 FB               [12] 2818 	mov	r3,a
      000973 7C 00            [12] 2819 	mov	r4,#0x00
      000975 C0 03            [24] 2820 	push	ar3
      000977 C0 04            [24] 2821 	push	ar4
      000979 74r62            [12] 2822 	mov	a,#___str_32
      00097B C0 E0            [24] 2823 	push	acc
      00097D 74s02            [12] 2824 	mov	a,#(___str_32 >> 8)
      00097F C0 E0            [24] 2825 	push	acc
      000981 12r00r00         [24] 2826 	lcall	_printf_fast_f
      000984 E5 81            [12] 2827 	mov	a,sp
      000986 24 FC            [12] 2828 	add	a,#0xfc
      000988 F5 81            [12] 2829 	mov	sp,a
      00098A D0 05            [24] 2830 	pop	ar5
      00098C D0 06            [24] 2831 	pop	ar6
      00098E D0 07            [24] 2832 	pop	ar7
                                   2833 ;	src/main.c:801: break;
      000990 02r0Br1F         [24] 2834 	ljmp	00115$
                                   2835 ;	src/main.c:802: case '3' :
      000993                       2836 00106$:
                                   2837 ;	src/main.c:803: TOGGLE(LED_G);
      000993 B2 93            [12] 2838 	cpl	_P13
                                   2839 ;	src/main.c:804: printf_fast_f("LED_G=");
      000995 C0 07            [24] 2840 	push	ar7
      000997 C0 06            [24] 2841 	push	ar6
      000999 C0 05            [24] 2842 	push	ar5
      00099B 74r6E            [12] 2843 	mov	a,#___str_34
      00099D C0 E0            [24] 2844 	push	acc
      00099F 74s02            [12] 2845 	mov	a,#(___str_34 >> 8)
      0009A1 C0 E0            [24] 2846 	push	acc
      0009A3 12r00r00         [24] 2847 	lcall	_printf_fast_f
      0009A6 15 81            [12] 2848 	dec	sp
      0009A8 15 81            [12] 2849 	dec	sp
                                   2850 ;	src/main.c:805: printf_fast_f("%d\n\r", LED_G);
      0009AA A2 93            [12] 2851 	mov	c,_P13
      0009AC E4               [12] 2852 	clr	a
      0009AD 33               [12] 2853 	rlc	a
      0009AE FB               [12] 2854 	mov	r3,a
      0009AF 7C 00            [12] 2855 	mov	r4,#0x00
      0009B1 C0 03            [24] 2856 	push	ar3
      0009B3 C0 04            [24] 2857 	push	ar4
      0009B5 74r62            [12] 2858 	mov	a,#___str_32
      0009B7 C0 E0            [24] 2859 	push	acc
      0009B9 74s02            [12] 2860 	mov	a,#(___str_32 >> 8)
      0009BB C0 E0            [24] 2861 	push	acc
      0009BD 12r00r00         [24] 2862 	lcall	_printf_fast_f
      0009C0 E5 81            [12] 2863 	mov	a,sp
      0009C2 24 FC            [12] 2864 	add	a,#0xfc
      0009C4 F5 81            [12] 2865 	mov	sp,a
      0009C6 D0 05            [24] 2866 	pop	ar5
      0009C8 D0 06            [24] 2867 	pop	ar6
      0009CA D0 07            [24] 2868 	pop	ar7
                                   2869 ;	src/main.c:806: break;
      0009CC 02r0Br1F         [24] 2870 	ljmp	00115$
                                   2871 ;	src/main.c:807: case '4' :
      0009CF                       2872 00107$:
                                   2873 ;	src/main.c:808: TOGGLE(LED_B);
      0009CF B2 92            [12] 2874 	cpl	_P12
                                   2875 ;	src/main.c:809: printf_fast_f("LED_B=");
      0009D1 C0 07            [24] 2876 	push	ar7
      0009D3 C0 06            [24] 2877 	push	ar6
      0009D5 C0 05            [24] 2878 	push	ar5
      0009D7 74r75            [12] 2879 	mov	a,#___str_35
      0009D9 C0 E0            [24] 2880 	push	acc
      0009DB 74s02            [12] 2881 	mov	a,#(___str_35 >> 8)
      0009DD C0 E0            [24] 2882 	push	acc
      0009DF 12r00r00         [24] 2883 	lcall	_printf_fast_f
      0009E2 15 81            [12] 2884 	dec	sp
      0009E4 15 81            [12] 2885 	dec	sp
                                   2886 ;	src/main.c:810: printf_fast_f("%d\n\r", LED_B);
      0009E6 A2 92            [12] 2887 	mov	c,_P12
      0009E8 E4               [12] 2888 	clr	a
      0009E9 33               [12] 2889 	rlc	a
      0009EA FB               [12] 2890 	mov	r3,a
      0009EB 7C 00            [12] 2891 	mov	r4,#0x00
      0009ED C0 03            [24] 2892 	push	ar3
      0009EF C0 04            [24] 2893 	push	ar4
      0009F1 74r62            [12] 2894 	mov	a,#___str_32
      0009F3 C0 E0            [24] 2895 	push	acc
      0009F5 74s02            [12] 2896 	mov	a,#(___str_32 >> 8)
      0009F7 C0 E0            [24] 2897 	push	acc
      0009F9 12r00r00         [24] 2898 	lcall	_printf_fast_f
      0009FC E5 81            [12] 2899 	mov	a,sp
      0009FE 24 FC            [12] 2900 	add	a,#0xfc
      000A00 F5 81            [12] 2901 	mov	sp,a
      000A02 D0 05            [24] 2902 	pop	ar5
      000A04 D0 06            [24] 2903 	pop	ar6
      000A06 D0 07            [24] 2904 	pop	ar7
                                   2905 ;	src/main.c:811: break;
      000A08 02r0Br1F         [24] 2906 	ljmp	00115$
                                   2907 ;	src/main.c:812: case '5' :
      000A0B                       2908 00108$:
                                   2909 ;	src/main.c:813: TOGGLE(MOTOR_EN);
      000A0B B2 90            [12] 2910 	cpl	_P10
                                   2911 ;	src/main.c:814: printf_fast_f("MOTOR_EN=");
      000A0D C0 07            [24] 2912 	push	ar7
      000A0F C0 06            [24] 2913 	push	ar6
      000A11 C0 05            [24] 2914 	push	ar5
      000A13 74r7C            [12] 2915 	mov	a,#___str_36
      000A15 C0 E0            [24] 2916 	push	acc
      000A17 74s02            [12] 2917 	mov	a,#(___str_36 >> 8)
      000A19 C0 E0            [24] 2918 	push	acc
      000A1B 12r00r00         [24] 2919 	lcall	_printf_fast_f
      000A1E 15 81            [12] 2920 	dec	sp
      000A20 15 81            [12] 2921 	dec	sp
                                   2922 ;	src/main.c:815: printf_fast_f("%d\n\r", MOTOR_EN);
      000A22 A2 90            [12] 2923 	mov	c,_P10
      000A24 E4               [12] 2924 	clr	a
      000A25 33               [12] 2925 	rlc	a
      000A26 FB               [12] 2926 	mov	r3,a
      000A27 7C 00            [12] 2927 	mov	r4,#0x00
      000A29 C0 03            [24] 2928 	push	ar3
      000A2B C0 04            [24] 2929 	push	ar4
      000A2D 74r62            [12] 2930 	mov	a,#___str_32
      000A2F C0 E0            [24] 2931 	push	acc
      000A31 74s02            [12] 2932 	mov	a,#(___str_32 >> 8)
      000A33 C0 E0            [24] 2933 	push	acc
      000A35 12r00r00         [24] 2934 	lcall	_printf_fast_f
      000A38 E5 81            [12] 2935 	mov	a,sp
      000A3A 24 FC            [12] 2936 	add	a,#0xfc
      000A3C F5 81            [12] 2937 	mov	sp,a
      000A3E D0 05            [24] 2938 	pop	ar5
      000A40 D0 06            [24] 2939 	pop	ar6
      000A42 D0 07            [24] 2940 	pop	ar7
                                   2941 ;	src/main.c:816: break;
      000A44 02r0Br1F         [24] 2942 	ljmp	00115$
                                   2943 ;	src/main.c:817: case '6' :
      000A47                       2944 00109$:
                                   2945 ;	src/main.c:818: TOGGLE(MOTOR_CW);
      000A47 B2 80            [12] 2946 	cpl	_P00
                                   2947 ;	src/main.c:819: printf_fast_f("MOTOR_CW=");
      000A49 C0 07            [24] 2948 	push	ar7
      000A4B C0 06            [24] 2949 	push	ar6
      000A4D C0 05            [24] 2950 	push	ar5
      000A4F 74r86            [12] 2951 	mov	a,#___str_37
      000A51 C0 E0            [24] 2952 	push	acc
      000A53 74s02            [12] 2953 	mov	a,#(___str_37 >> 8)
      000A55 C0 E0            [24] 2954 	push	acc
      000A57 12r00r00         [24] 2955 	lcall	_printf_fast_f
      000A5A 15 81            [12] 2956 	dec	sp
      000A5C 15 81            [12] 2957 	dec	sp
                                   2958 ;	src/main.c:820: printf_fast_f("%d\n\r", MOTOR_CW);
      000A5E A2 80            [12] 2959 	mov	c,_P00
      000A60 E4               [12] 2960 	clr	a
      000A61 33               [12] 2961 	rlc	a
      000A62 FB               [12] 2962 	mov	r3,a
      000A63 7C 00            [12] 2963 	mov	r4,#0x00
      000A65 C0 03            [24] 2964 	push	ar3
      000A67 C0 04            [24] 2965 	push	ar4
      000A69 74r62            [12] 2966 	mov	a,#___str_32
      000A6B C0 E0            [24] 2967 	push	acc
      000A6D 74s02            [12] 2968 	mov	a,#(___str_32 >> 8)
      000A6F C0 E0            [24] 2969 	push	acc
      000A71 12r00r00         [24] 2970 	lcall	_printf_fast_f
      000A74 E5 81            [12] 2971 	mov	a,sp
      000A76 24 FC            [12] 2972 	add	a,#0xfc
      000A78 F5 81            [12] 2973 	mov	sp,a
      000A7A D0 05            [24] 2974 	pop	ar5
      000A7C D0 06            [24] 2975 	pop	ar6
      000A7E D0 07            [24] 2976 	pop	ar7
                                   2977 ;	src/main.c:821: break;
      000A80 02r0Br1F         [24] 2978 	ljmp	00115$
                                   2979 ;	src/main.c:822: case '7' :
      000A83                       2980 00110$:
                                   2981 ;	src/main.c:823: TOGGLE(MOTOR_CCW);
      000A83 B2 81            [12] 2982 	cpl	_P01
                                   2983 ;	src/main.c:824: printf_fast_f("MOTOR_CCW=");
      000A85 C0 07            [24] 2984 	push	ar7
      000A87 C0 06            [24] 2985 	push	ar6
      000A89 C0 05            [24] 2986 	push	ar5
      000A8B 74r90            [12] 2987 	mov	a,#___str_38
      000A8D C0 E0            [24] 2988 	push	acc
      000A8F 74s02            [12] 2989 	mov	a,#(___str_38 >> 8)
      000A91 C0 E0            [24] 2990 	push	acc
      000A93 12r00r00         [24] 2991 	lcall	_printf_fast_f
      000A96 15 81            [12] 2992 	dec	sp
      000A98 15 81            [12] 2993 	dec	sp
                                   2994 ;	src/main.c:825: printf_fast_f("%d\n\r", MOTOR_CCW);
      000A9A A2 81            [12] 2995 	mov	c,_P01
      000A9C E4               [12] 2996 	clr	a
      000A9D 33               [12] 2997 	rlc	a
      000A9E FB               [12] 2998 	mov	r3,a
      000A9F 7C 00            [12] 2999 	mov	r4,#0x00
      000AA1 C0 03            [24] 3000 	push	ar3
      000AA3 C0 04            [24] 3001 	push	ar4
      000AA5 74r62            [12] 3002 	mov	a,#___str_32
      000AA7 C0 E0            [24] 3003 	push	acc
      000AA9 74s02            [12] 3004 	mov	a,#(___str_32 >> 8)
      000AAB C0 E0            [24] 3005 	push	acc
      000AAD 12r00r00         [24] 3006 	lcall	_printf_fast_f
      000AB0 E5 81            [12] 3007 	mov	a,sp
      000AB2 24 FC            [12] 3008 	add	a,#0xfc
      000AB4 F5 81            [12] 3009 	mov	sp,a
      000AB6 D0 05            [24] 3010 	pop	ar5
      000AB8 D0 06            [24] 3011 	pop	ar6
      000ABA D0 07            [24] 3012 	pop	ar7
                                   3013 ;	src/main.c:826: break;
                                   3014 ;	src/main.c:827: case '8' :
      000ABC 80 61            [24] 3015 	sjmp	00115$
      000ABE                       3016 00111$:
                                   3017 ;	src/main.c:828: TOGGLE(SEL_RX_POL);
      000ABE B2 84            [12] 3018 	cpl	_P04
                                   3019 ;	src/main.c:829: printf_fast_f("SEL_RX_POL=");
      000AC0 C0 07            [24] 3020 	push	ar7
      000AC2 C0 06            [24] 3021 	push	ar6
      000AC4 C0 05            [24] 3022 	push	ar5
      000AC6 74r9B            [12] 3023 	mov	a,#___str_39
      000AC8 C0 E0            [24] 3024 	push	acc
      000ACA 74s02            [12] 3025 	mov	a,#(___str_39 >> 8)
      000ACC C0 E0            [24] 3026 	push	acc
      000ACE 12r00r00         [24] 3027 	lcall	_printf_fast_f
      000AD1 15 81            [12] 3028 	dec	sp
      000AD3 15 81            [12] 3029 	dec	sp
                                   3030 ;	src/main.c:830: printf_fast_f("%d\n\r", SEL_RX_POL);
      000AD5 A2 84            [12] 3031 	mov	c,_P04
      000AD7 E4               [12] 3032 	clr	a
      000AD8 33               [12] 3033 	rlc	a
      000AD9 FB               [12] 3034 	mov	r3,a
      000ADA 7C 00            [12] 3035 	mov	r4,#0x00
      000ADC C0 03            [24] 3036 	push	ar3
      000ADE C0 04            [24] 3037 	push	ar4
      000AE0 74r62            [12] 3038 	mov	a,#___str_32
      000AE2 C0 E0            [24] 3039 	push	acc
      000AE4 74s02            [12] 3040 	mov	a,#(___str_32 >> 8)
      000AE6 C0 E0            [24] 3041 	push	acc
      000AE8 12r00r00         [24] 3042 	lcall	_printf_fast_f
      000AEB E5 81            [12] 3043 	mov	a,sp
      000AED 24 FC            [12] 3044 	add	a,#0xfc
      000AEF F5 81            [12] 3045 	mov	sp,a
      000AF1 D0 05            [24] 3046 	pop	ar5
      000AF3 D0 06            [24] 3047 	pop	ar6
      000AF5 D0 07            [24] 3048 	pop	ar7
                                   3049 ;	src/main.c:831: break;
                                   3050 ;	src/main.c:832: case 't' :
      000AF7 80 26            [24] 3051 	sjmp	00115$
      000AF9                       3052 00112$:
                                   3053 ;	src/main.c:833: printf_fast_f("count:%d\r\n", gu16TimeCnt);
      000AF9 C0 07            [24] 3054 	push	ar7
      000AFB C0 06            [24] 3055 	push	ar6
      000AFD C0 05            [24] 3056 	push	ar5
      000AFF C0*02            [24] 3057 	push	_gu16TimeCnt
      000B01 C0*03            [24] 3058 	push	(_gu16TimeCnt + 1)
      000B03 74rA7            [12] 3059 	mov	a,#___str_40
      000B05 C0 E0            [24] 3060 	push	acc
      000B07 74s02            [12] 3061 	mov	a,#(___str_40 >> 8)
      000B09 C0 E0            [24] 3062 	push	acc
      000B0B 12r00r00         [24] 3063 	lcall	_printf_fast_f
      000B0E E5 81            [12] 3064 	mov	a,sp
      000B10 24 FC            [12] 3065 	add	a,#0xfc
      000B12 F5 81            [12] 3066 	mov	sp,a
      000B14 D0 05            [24] 3067 	pop	ar5
      000B16 D0 06            [24] 3068 	pop	ar6
      000B18 D0 07            [24] 3069 	pop	ar7
                                   3070 ;	src/main.c:834: gu16TimeCnt = 0;
      000B1A E4               [12] 3071 	clr	a
      000B1B F5*02            [12] 3072 	mov	_gu16TimeCnt,a
      000B1D F5*03            [12] 3073 	mov	(_gu16TimeCnt + 1),a
                                   3074 ;	src/main.c:836: }
      000B1F                       3075 00115$:
                                   3076 ;	src/main.c:839: if (u8PrevSwitch != SWITCH) { // 스위치 스테이트가 변하면..
      000B1F 8D 04            [24] 3077 	mov	ar4,r5
      000B21 A2 95            [12] 3078 	mov	c,_P15
      000B23 E4               [12] 3079 	clr	a
      000B24 33               [12] 3080 	rlc	a
      000B25 FB               [12] 3081 	mov	r3,a
      000B26 EC               [12] 3082 	mov	a,r4
      000B27 B5 03 02         [24] 3083 	cjne	a,ar3,00265$
      000B2A 80 67            [24] 3084 	sjmp	00120$
      000B2C                       3085 00265$:
                                   3086 ;	src/main.c:840: printf_fast_f("SWITCH:%d\n\r", SWITCH);
      000B2C A2 95            [12] 3087 	mov	c,_P15
      000B2E E4               [12] 3088 	clr	a
      000B2F 33               [12] 3089 	rlc	a
      000B30 FB               [12] 3090 	mov	r3,a
      000B31 7C 00            [12] 3091 	mov	r4,#0x00
      000B33 C0 07            [24] 3092 	push	ar7
      000B35 C0 06            [24] 3093 	push	ar6
      000B37 C0 03            [24] 3094 	push	ar3
      000B39 C0 04            [24] 3095 	push	ar4
      000B3B 74rB2            [12] 3096 	mov	a,#___str_41
      000B3D C0 E0            [24] 3097 	push	acc
      000B3F 74s02            [12] 3098 	mov	a,#(___str_41 >> 8)
      000B41 C0 E0            [24] 3099 	push	acc
      000B43 12r00r00         [24] 3100 	lcall	_printf_fast_f
      000B46 E5 81            [12] 3101 	mov	a,sp
      000B48 24 FC            [12] 3102 	add	a,#0xfc
      000B4A F5 81            [12] 3103 	mov	sp,a
      000B4C D0 06            [24] 3104 	pop	ar6
      000B4E D0 07            [24] 3105 	pop	ar7
                                   3106 ;	src/main.c:841: if (SWITCH) { //눌렸을 때
      000B50 20 95 3B         [24] 3107 	jb	_P15,00118$
                                   3108 ;	src/main.c:845: su8Cnt++;
      000B53 05*0B            [12] 3109 	inc	_main_su8Cnt_262145_138
                                   3110 ;	src/main.c:846: LED_R = su8Cnt&1;
      000B55 E5*0B            [12] 3111 	mov	a,_main_su8Cnt_262145_138
      000B57 54 01            [12] 3112 	anl	a,#0x01
                                   3113 ;	assignBit
      000B59 24 FF            [12] 3114 	add	a,#0xff
      000B5B E4               [12] 3115 	clr	a
      000B5C 33               [12] 3116 	rlc	a
                                   3117 ;	assignBit
      000B5D FC               [12] 3118 	mov	r4,a
      000B5E 24 FF            [12] 3119 	add	a,#0xff
      000B60 92 94            [24] 3120 	mov	_P14,c
                                   3121 ;	src/main.c:847: LED_G = (su8Cnt>>1)&1;
      000B62 E5*0B            [12] 3122 	mov	a,_main_su8Cnt_262145_138
      000B64 03               [12] 3123 	rr	a
      000B65 54 01            [12] 3124 	anl	a,#0x01
                                   3125 ;	assignBit
      000B67 24 FF            [12] 3126 	add	a,#0xff
      000B69 E4               [12] 3127 	clr	a
      000B6A 33               [12] 3128 	rlc	a
                                   3129 ;	assignBit
      000B6B FB               [12] 3130 	mov	r3,a
      000B6C 24 FF            [12] 3131 	add	a,#0xff
      000B6E 92 93            [24] 3132 	mov	_P13,c
                                   3133 ;	src/main.c:848: LED_B = (su8Cnt>>2)&1;
      000B70 E5*0B            [12] 3134 	mov	a,_main_su8Cnt_262145_138
      000B72 03               [12] 3135 	rr	a
      000B73 03               [12] 3136 	rr	a
      000B74 54 01            [12] 3137 	anl	a,#0x01
                                   3138 ;	assignBit
      000B76 24 FF            [12] 3139 	add	a,#0xff
      000B78 E4               [12] 3140 	clr	a
      000B79 33               [12] 3141 	rlc	a
                                   3142 ;	assignBit
      000B7A FA               [12] 3143 	mov	r2,a
      000B7B 24 FF            [12] 3144 	add	a,#0xff
      000B7D 92 92            [24] 3145 	mov	_P12,c
                                   3146 ;	src/main.c:850: MOTOR_EN = su8Cnt&1;
                                   3147 ;	assignBit
      000B7F EC               [12] 3148 	mov	a,r4
      000B80 24 FF            [12] 3149 	add	a,#0xff
      000B82 92 90            [24] 3150 	mov	_P10,c
                                   3151 ;	src/main.c:851: MOTOR_CW = (su8Cnt>>1)&1;
                                   3152 ;	assignBit
      000B84 EB               [12] 3153 	mov	a,r3
      000B85 24 FF            [12] 3154 	add	a,#0xff
      000B87 92 80            [24] 3155 	mov	_P00,c
                                   3156 ;	src/main.c:852: MOTOR_CCW = (su8Cnt>>2)&1;
                                   3157 ;	assignBit
      000B89 EA               [12] 3158 	mov	a,r2
      000B8A 24 FF            [12] 3159 	add	a,#0xff
      000B8C 92 81            [24] 3160 	mov	_P01,c
      000B8E                       3161 00118$:
                                   3162 ;	src/main.c:855: u8PrevSwitch = SWITCH;
      000B8E A2 95            [12] 3163 	mov	c,_P15
      000B90 E4               [12] 3164 	clr	a
      000B91 33               [12] 3165 	rlc	a
      000B92 FD               [12] 3166 	mov	r5,a
      000B93                       3167 00120$:
                                   3168 ;	src/main.c:858: if (SWITCH) {
      000B93 A2 95            [12] 3169 	mov	c,_P15
                                   3170 ;	src/main.c:861: if (u8UartRx != UART_RX) {
      000B95 A2 82            [12] 3171 	mov	c,_P02
                                   3172 ;	src/main.c:866: switch(u8StateRxLFP) {
      000B97 BF 00 02         [24] 3173 	cjne	r7,#0x00,00267$
      000B9A 80 0D            [24] 3174 	sjmp	00121$
      000B9C                       3175 00267$:
      000B9C BF 01 02         [24] 3176 	cjne	r7,#0x01,00268$
      000B9F 80 36            [24] 3177 	sjmp	00124$
      000BA1                       3178 00268$:
      000BA1 BF 02 02         [24] 3179 	cjne	r7,#0x02,00269$
      000BA4 80 75            [24] 3180 	sjmp	00130$
      000BA6                       3181 00269$:
      000BA6 02r08rB6         [24] 3182 	ljmp	00140$
                                   3183 ;	src/main.c:867: case STATE_RxLFP_INIT :
      000BA9                       3184 00121$:
                                   3185 ;	src/main.c:868: if (Receive_Data_From_UART1_nb(&u8RxUART)) {
      000BA9 90r00r0C         [24] 3186 	mov	dptr,#_main_u8RxUART_65536_128
      000BAC 75 F0 40         [24] 3187 	mov	b,#0x40
      000BAF C0 07            [24] 3188 	push	ar7
      000BB1 C0 06            [24] 3189 	push	ar6
      000BB3 C0 05            [24] 3190 	push	ar5
      000BB5 12r00r00         [24] 3191 	lcall	_Receive_Data_From_UART1_nb
      000BB8 E5 82            [12] 3192 	mov	a,dpl
      000BBA D0 05            [24] 3193 	pop	ar5
      000BBC D0 06            [24] 3194 	pop	ar6
      000BBE D0 07            [24] 3195 	pop	ar7
      000BC0 70 03            [24] 3196 	jnz	00270$
      000BC2 02r08rB6         [24] 3197 	ljmp	00140$
      000BC5                       3198 00270$:
                                   3199 ;	src/main.c:869: gu16TimeCnt = 0;
      000BC5 E4               [12] 3200 	clr	a
      000BC6 F5*02            [12] 3201 	mov	_gu16TimeCnt,a
      000BC8 F5*03            [12] 3202 	mov	(_gu16TimeCnt + 1),a
                                   3203 ;	src/main.c:871: pu8RxUART[u8RxIdx++] = u8RxUART;
      000BCA 7E 01            [12] 3204 	mov	r6,#0x01
      000BCC 90r00r4C         [24] 3205 	mov	dptr,#_main_pu8RxUART_65536_128
      000BCF E5*0C            [12] 3206 	mov	a,_main_u8RxUART_65536_128
      000BD1 F0               [24] 3207 	movx	@dptr,a
                                   3208 ;	src/main.c:872: u8StateRxLFP = STATE_RxLFP_START;
      000BD2 7F 01            [12] 3209 	mov	r7,#0x01
                                   3210 ;	src/main.c:874: break;
      000BD4 02r08rB6         [24] 3211 	ljmp	00140$
                                   3212 ;	src/main.c:875: case STATE_RxLFP_START :
      000BD7                       3213 00124$:
                                   3214 ;	src/main.c:876: if (Receive_Data_From_UART1_nb(&u8RxUART)) {
      000BD7 90r00r0C         [24] 3215 	mov	dptr,#_main_u8RxUART_65536_128
      000BDA 75 F0 40         [24] 3216 	mov	b,#0x40
      000BDD C0 07            [24] 3217 	push	ar7
      000BDF C0 06            [24] 3218 	push	ar6
      000BE1 C0 05            [24] 3219 	push	ar5
      000BE3 12r00r00         [24] 3220 	lcall	_Receive_Data_From_UART1_nb
      000BE6 E5 82            [12] 3221 	mov	a,dpl
      000BE8 D0 05            [24] 3222 	pop	ar5
      000BEA D0 06            [24] 3223 	pop	ar6
      000BEC D0 07            [24] 3224 	pop	ar7
      000BEE 60 18            [24] 3225 	jz	00128$
                                   3226 ;	src/main.c:877: gu16TimeCnt = 0;
      000BF0 E4               [12] 3227 	clr	a
      000BF1 F5*02            [12] 3228 	mov	_gu16TimeCnt,a
      000BF3 F5*03            [12] 3229 	mov	(_gu16TimeCnt + 1),a
                                   3230 ;	src/main.c:878: pu8RxUART[u8RxIdx++] = u8RxUART;
      000BF5 8E 04            [24] 3231 	mov	ar4,r6
      000BF7 0E               [12] 3232 	inc	r6
      000BF8 EC               [12] 3233 	mov	a,r4
      000BF9 24r4C            [12] 3234 	add	a,#_main_pu8RxUART_65536_128
      000BFB F5 82            [12] 3235 	mov	dpl,a
      000BFD E4               [12] 3236 	clr	a
      000BFE 34s00            [12] 3237 	addc	a,#(_main_pu8RxUART_65536_128 >> 8)
      000C00 F5 83            [12] 3238 	mov	dph,a
      000C02 E5*0C            [12] 3239 	mov	a,_main_u8RxUART_65536_128
      000C04 F0               [24] 3240 	movx	@dptr,a
      000C05 02r08rB6         [24] 3241 	ljmp	00140$
      000C08                       3242 00128$:
                                   3243 ;	src/main.c:880: else if (gu16TimeCnt > 1000) { // 1msec넘으면
      000C08 C3               [12] 3244 	clr	c
      000C09 74 E8            [12] 3245 	mov	a,#0xe8
      000C0B 95*02            [12] 3246 	subb	a,_gu16TimeCnt
      000C0D 74 03            [12] 3247 	mov	a,#0x03
      000C0F 95*03            [12] 3248 	subb	a,(_gu16TimeCnt + 1)
      000C11 40 03            [24] 3249 	jc	00272$
      000C13 02r08rB6         [24] 3250 	ljmp	00140$
      000C16                       3251 00272$:
                                   3252 ;	src/main.c:881: u8StateRxLFP = STATE_RxLFP_END;
      000C16 7F 02            [12] 3253 	mov	r7,#0x02
                                   3254 ;	src/main.c:883: break;
      000C18 02r08rB6         [24] 3255 	ljmp	00140$
                                   3256 ;	src/main.c:885: case STATE_RxLFP_END :
      000C1B                       3257 00130$:
                                   3258 ;	src/main.c:886: print_raw_packet(u8RxIdx, pu8RxUART);
      000C1B 75*00r4C         [24] 3259 	mov	_print_raw_packet_PARM_2,#_main_pu8RxUART_65536_128
      000C1E 75*01s00         [24] 3260 	mov	(_print_raw_packet_PARM_2 + 1),#(_main_pu8RxUART_65536_128 >> 8)
      000C21 75*02 00         [24] 3261 	mov	(_print_raw_packet_PARM_2 + 2),#0x00
      000C24 8E 82            [24] 3262 	mov	dpl,r6
      000C26 C0 06            [24] 3263 	push	ar6
      000C28 C0 05            [24] 3264 	push	ar5
      000C2A 12r00r00         [24] 3265 	lcall	_print_raw_packet
      000C2D D0 05            [24] 3266 	pop	ar5
      000C2F D0 06            [24] 3267 	pop	ar6
                                   3268 ;	src/main.c:887: switch(cp_buf2linefipacket(u8RxIdx, pu8RxUART, &stLineFiPkt)) {
      000C31 75*00r4C         [24] 3269 	mov	_cp_buf2linefipacket_PARM_2,#_main_pu8RxUART_65536_128
      000C34 75*01s00         [24] 3270 	mov	(_cp_buf2linefipacket_PARM_2 + 1),#(_main_pu8RxUART_65536_128 >> 8)
      000C37 75*02 00         [24] 3271 	mov	(_cp_buf2linefipacket_PARM_2 + 2),#0x00
      000C3A 75*00r0D         [24] 3272 	mov	_cp_buf2linefipacket_PARM_3,#_main_stLineFiPkt_65536_128
      000C3D 75*01 00         [24] 3273 	mov	(_cp_buf2linefipacket_PARM_3 + 1),#0x00
      000C40 75*02 40         [24] 3274 	mov	(_cp_buf2linefipacket_PARM_3 + 2),#0x40
      000C43 8E 82            [24] 3275 	mov	dpl,r6
      000C45 C0 06            [24] 3276 	push	ar6
      000C47 C0 05            [24] 3277 	push	ar5
      000C49 12r00r00         [24] 3278 	lcall	_cp_buf2linefipacket
      000C4C AC 82            [24] 3279 	mov	r4,dpl
      000C4E D0 05            [24] 3280 	pop	ar5
      000C50 D0 06            [24] 3281 	pop	ar6
      000C52 BC 02 02         [24] 3282 	cjne	r4,#0x02,00273$
      000C55 80 0A            [24] 3283 	sjmp	00131$
      000C57                       3284 00273$:
      000C57 BC 03 02         [24] 3285 	cjne	r4,#0x03,00274$
      000C5A 80 31            [24] 3286 	sjmp	00133$
      000C5C                       3287 00274$:
                                   3288 ;	src/main.c:888: case CONV_OK :
      000C5C BC 04 5B         [24] 3289 	cjne	r4,#0x04,00137$
      000C5F 80 13            [24] 3290 	sjmp	00132$
      000C61                       3291 00131$:
                                   3292 ;	src/main.c:889: print_linefipacket(&stLineFiPkt);
      000C61 90r00r0D         [24] 3293 	mov	dptr,#_main_stLineFiPkt_65536_128
      000C64 75 F0 40         [24] 3294 	mov	b,#0x40
      000C67 C0 06            [24] 3295 	push	ar6
      000C69 C0 05            [24] 3296 	push	ar5
      000C6B 12r00r00         [24] 3297 	lcall	_print_linefipacket
      000C6E D0 05            [24] 3298 	pop	ar5
      000C70 D0 06            [24] 3299 	pop	ar6
                                   3300 ;	src/main.c:890: break;
                                   3301 ;	src/main.c:891: case CONV_ERR_CRC :
      000C72 80 46            [24] 3302 	sjmp	00137$
      000C74                       3303 00132$:
                                   3304 ;	src/main.c:892: printf_fast_f("ERROR: CRC!!\r\n");
      000C74 C0 06            [24] 3305 	push	ar6
      000C76 C0 05            [24] 3306 	push	ar5
      000C78 74rBE            [12] 3307 	mov	a,#___str_42
      000C7A C0 E0            [24] 3308 	push	acc
      000C7C 74s02            [12] 3309 	mov	a,#(___str_42 >> 8)
      000C7E C0 E0            [24] 3310 	push	acc
      000C80 12r00r00         [24] 3311 	lcall	_printf_fast_f
      000C83 15 81            [12] 3312 	dec	sp
      000C85 15 81            [12] 3313 	dec	sp
      000C87 D0 05            [24] 3314 	pop	ar5
      000C89 D0 06            [24] 3315 	pop	ar6
                                   3316 ;	src/main.c:893: break;
                                   3317 ;	src/main.c:894: case CONV_ERR_TOO_SMALLSIZE :
      000C8B 80 2D            [24] 3318 	sjmp	00137$
      000C8D                       3319 00133$:
                                   3320 ;	src/main.c:895: switch(u8RxIdx) {
      000C8D BE 01 13         [24] 3321 	cjne	r6,#0x01,00135$
                                   3322 ;	src/main.c:897: print_one_octet_linefi(pu8RxUART[0]);
      000C90 90r00r4C         [24] 3323 	mov	dptr,#_main_pu8RxUART_65536_128
      000C93 E0               [24] 3324 	movx	a,@dptr
      000C94 F5 82            [12] 3325 	mov	dpl,a
      000C96 C0 06            [24] 3326 	push	ar6
      000C98 C0 05            [24] 3327 	push	ar5
      000C9A 12r07rDC         [24] 3328 	lcall	_print_one_octet_linefi
      000C9D D0 05            [24] 3329 	pop	ar5
      000C9F D0 06            [24] 3330 	pop	ar6
                                   3331 ;	src/main.c:898: break;
                                   3332 ;	src/main.c:899: default :
      000CA1 80 17            [24] 3333 	sjmp	00137$
      000CA3                       3334 00135$:
                                   3335 ;	src/main.c:900: printf_fast_f("ERROR: too small length!!\r\n");
      000CA3 C0 06            [24] 3336 	push	ar6
      000CA5 C0 05            [24] 3337 	push	ar5
      000CA7 74rCD            [12] 3338 	mov	a,#___str_43
      000CA9 C0 E0            [24] 3339 	push	acc
      000CAB 74s02            [12] 3340 	mov	a,#(___str_43 >> 8)
      000CAD C0 E0            [24] 3341 	push	acc
      000CAF 12r00r00         [24] 3342 	lcall	_printf_fast_f
      000CB2 15 81            [12] 3343 	dec	sp
      000CB4 15 81            [12] 3344 	dec	sp
      000CB6 D0 05            [24] 3345 	pop	ar5
      000CB8 D0 06            [24] 3346 	pop	ar6
                                   3347 ;	src/main.c:904: }
      000CBA                       3348 00137$:
                                   3349 ;	src/main.c:905: u8StateRxLFP = STATE_RxLFP_INIT;
      000CBA 7F 00            [12] 3350 	mov	r7,#0x00
                                   3351 ;	src/main.c:907: } //switch(u8StateRxLFP)
                                   3352 ;	src/main.c:909: }
      000CBC 02r08rB6         [24] 3353 	ljmp	00140$
                                   3354 	.area CSEG    (CODE)
                                   3355 	.area CONST   (CODE)
                                   3356 	.area CONST   (CODE)
      000000                       3357 ___str_0:
      000000 0A                    3358 	.db 0x0a
      000001 0D                    3359 	.db 0x0d
      000002 00                    3360 	.db 0x00
                                   3361 	.area CSEG    (CODE)
                                   3362 	.area CONST   (CODE)
      000003                       3363 ___str_1:
      000003 73 65 6C 66 20        3364 	.ascii "self "
      000008 00                    3365 	.db 0x00
                                   3366 	.area CSEG    (CODE)
                                   3367 	.area CONST   (CODE)
      000009                       3368 ___str_2:
      000009 63 72 6F 73 73        3369 	.ascii "cross"
      00000E 00                    3370 	.db 0x00
                                   3371 	.area CSEG    (CODE)
                                   3372 	.area CONST   (CODE)
      00000F                       3373 ___str_3:
      00000F 62 6F 74 68 20        3374 	.ascii "both "
      000014 00                    3375 	.db 0x00
                                   3376 	.area CSEG    (CODE)
                                   3377 	.area CONST   (CODE)
      000015                       3378 ___str_4:
      000015 20 6F 75 74 70 75 74  3379 	.ascii " output:This is UART%d"
             3A 54 68 69 73 20 69
             73 20 55 41 52 54 25
             64
      00002B 0A                    3380 	.db 0x0a
      00002C 0D                    3381 	.db 0x0d
      00002D 00                    3382 	.db 0x00
                                   3383 	.area CSEG    (CODE)
                                   3384 	.area CONST   (CODE)
      00002E                       3385 ___str_5:
      00002E 0D                    3386 	.db 0x0d
      00002F 0A                    3387 	.db 0x0a
      000030 00                    3388 	.db 0x00
                                   3389 	.area CSEG    (CODE)
                                   3390 	.area CONST   (CODE)
      000031                       3391 ___str_6:
      000031 25 63                 3392 	.ascii "%c"
      000033 00                    3393 	.db 0x00
                                   3394 	.area CSEG    (CODE)
                                   3395 	.area CONST   (CODE)
      000034                       3396 ___str_7:
      000034 0D                    3397 	.db 0x0d
      000035 0A                    3398 	.db 0x0a
      000036 69 6E 70 75 74 3A 54  3399 	.ascii "input:This is UART%d"
             68 69 73 20 69 73 20
             55 41 52 54 25 64
      00004A 00                    3400 	.db 0x00
                                   3401 	.area CSEG    (CODE)
                                   3402 	.area CONST   (CODE)
      00004B                       3403 ___str_8:
      00004B 49 64 6C 65 20 70 72  3404 	.ascii "Idle preamble on/off"
             65 61 6D 62 6C 65 20
             6F 6E 2F 6F 66 66
      00005F 0D                    3405 	.db 0x0d
      000060 0A                    3406 	.db 0x0a
      000061 00                    3407 	.db 0x00
                                   3408 	.area CSEG    (CODE)
                                   3409 	.area CONST   (CODE)
      000062                       3410 ___str_9:
      000062 4C 69 6E 65 46 69 20  3411 	.ascii "LineFi Power Off"
             50 6F 77 65 72 20 4F
             66 66
      000072 0D                    3412 	.db 0x0d
      000073 0A                    3413 	.db 0x0a
      000074 00                    3414 	.db 0x00
                                   3415 	.area CSEG    (CODE)
                                   3416 	.area CONST   (CODE)
      000075                       3417 ___str_10:
      000075 4C 69 6E 65 46 69 20  3418 	.ascii "LineFi Power On"
             50 6F 77 65 72 20 4F
             6E
      000084 0D                    3419 	.db 0x0d
      000085 0A                    3420 	.db 0x0a
      000086 00                    3421 	.db 0x00
                                   3422 	.area CSEG    (CODE)
                                   3423 	.area CONST   (CODE)
      000087                       3424 ___str_11:
      000087 4C 69 6E 65 46 69 20  3425 	.ascii "LineFi Uart Tx Low"
             55 61 72 74 20 54 78
             20 4C 6F 77
      000099 0D                    3426 	.db 0x0d
      00009A 0A                    3427 	.db 0x0a
      00009B 00                    3428 	.db 0x00
                                   3429 	.area CSEG    (CODE)
                                   3430 	.area CONST   (CODE)
      00009C                       3431 ___str_12:
      00009C 4C 69 6E 65 46 69 20  3432 	.ascii "LineFi Uart Tx High"
             55 61 72 74 20 54 78
             20 48 69 67 68
      0000AF 0D                    3433 	.db 0x0d
      0000B0 0A                    3434 	.db 0x0a
      0000B1 00                    3435 	.db 0x00
                                   3436 	.area CSEG    (CODE)
                                   3437 	.area CONST   (CODE)
      0000B2                       3438 ___str_13:
      0000B2 4C 69 6E 65 46 69 20  3439 	.ascii "LineFi CSC rx FSM Off"
             43 53 43 20 72 78 20
             46 53 4D 20 4F 66 66
      0000C7 0D                    3440 	.db 0x0d
      0000C8 0A                    3441 	.db 0x0a
      0000C9 00                    3442 	.db 0x00
                                   3443 	.area CSEG    (CODE)
                                   3444 	.area CONST   (CODE)
      0000CA                       3445 ___str_14:
      0000CA 4C 69 6E 65 46 69 20  3446 	.ascii "LineFi CSC rx FSM ON"
             43 53 43 20 72 78 20
             46 53 4D 20 4F 4E
      0000DE 0D                    3447 	.db 0x0d
      0000DF 0A                    3448 	.db 0x0a
      0000E0 00                    3449 	.db 0x00
                                   3450 	.area CSEG    (CODE)
                                   3451 	.area CONST   (CODE)
      0000E1                       3452 ___str_15:
      0000E1 56 65 72 73 69 6F 6E  3453 	.ascii "Version 1.4 on 20231026"
             20 31 2E 34 20 6F 6E
             20 32 30 32 33 31 30
             32 36
      0000F8 0D                    3454 	.db 0x0d
      0000F9 0A                    3455 	.db 0x0a
      0000FA 00                    3456 	.db 0x00
                                   3457 	.area CSEG    (CODE)
                                   3458 	.area CONST   (CODE)
      0000FB                       3459 ___str_16:
      0000FB 31 3A 20 64 6F 77 6E  3460 	.ascii "1: downlink packet 1"
             6C 69 6E 6B 20 70 61
             63 6B 65 74 20 31
      00010F 0D                    3461 	.db 0x0d
      000110 0A                    3462 	.db 0x0a
      000111 00                    3463 	.db 0x00
                                   3464 	.area CSEG    (CODE)
                                   3465 	.area CONST   (CODE)
      000112                       3466 ___str_17:
      000112 32 3A 20 64 6F 77 6E  3467 	.ascii "2: downlink packet 2"
             6C 69 6E 6B 20 70 61
             63 6B 65 74 20 32
      000126 0D                    3468 	.db 0x0d
      000127 0A                    3469 	.db 0x0a
      000128 00                    3470 	.db 0x00
                                   3471 	.area CSEG    (CODE)
                                   3472 	.area CONST   (CODE)
      000129                       3473 ___str_18:
      000129 33 3A 20 75 70 6C 69  3474 	.ascii "3: uplink idle preamble on/off"
             6E 6B 20 69 64 6C 65
             20 70 72 65 61 6D 62
             6C 65 20 6F 6E 2F 6F
             66 66
      000147 0D                    3475 	.db 0x0d
      000148 0A                    3476 	.db 0x0a
      000149 00                    3477 	.db 0x00
                                   3478 	.area CSEG    (CODE)
                                   3479 	.area CONST   (CODE)
      00014A                       3480 ___str_19:
      00014A 70 2F 50 3A 20 4C 69  3481 	.ascii "p/P: LineFi Power off/on"
             6E 65 46 69 20 50 6F
             77 65 72 20 6F 66 66
             2F 6F 6E
      000162 0D                    3482 	.db 0x0d
      000163 0A                    3483 	.db 0x0a
      000164 00                    3484 	.db 0x00
                                   3485 	.area CSEG    (CODE)
                                   3486 	.area CONST   (CODE)
      000165                       3487 ___str_20:
      000165 74 2F 54 3A 20 4C 69  3488 	.ascii "t/T: LineFi Uart Tx Low/High"
             6E 65 46 69 20 55 61
             72 74 20 54 78 20 4C
             6F 77 2F 48 69 67 68
      000181 0D                    3489 	.db 0x0d
      000182 0A                    3490 	.db 0x0a
      000183 00                    3491 	.db 0x00
                                   3492 	.area CSEG    (CODE)
                                   3493 	.area CONST   (CODE)
      000184                       3494 ___str_21:
      000184 73 2F 53 3A 20 4C 69  3495 	.ascii "s/S: LineFie CSC Rx FSM off/on"
             6E 65 46 69 65 20 43
             53 43 20 52 78 20 46
             53 4D 20 6F 66 66 2F
             6F 6E
      0001A2 0D                    3496 	.db 0x0d
      0001A3 0A                    3497 	.db 0x0a
      0001A4 00                    3498 	.db 0x00
                                   3499 	.area CSEG    (CODE)
                                   3500 	.area CONST   (CODE)
      0001A5                       3501 ___str_22:
      0001A5 74 65 73 74 20 70 72  3502 	.ascii "test procedure: p -> P -> T -> S -> 1 or 2"
             6F 63 65 64 75 72 65
             3A 20 70 20 2D 3E 20
             50 20 2D 3E 20 54 20
             2D 3E 20 53 20 2D 3E
             20 31 20 6F 72 20 32
      0001CF 0D                    3503 	.db 0x0d
      0001D0 0A                    3504 	.db 0x0a
      0001D1 00                    3505 	.db 0x00
                                   3506 	.area CSEG    (CODE)
                                   3507 	.area CONST   (CODE)
      0001D2                       3508 ___str_23:
      0001D2 4D 79 20 61 64 64 72  3509 	.ascii "My address is 0x%x"
             65 73 73 20 69 73 20
             30 78 25 78
      0001E4 0D                    3510 	.db 0x0d
      0001E5 0A                    3511 	.db 0x0a
      0001E6 00                    3512 	.db 0x00
                                   3513 	.area CSEG    (CODE)
                                   3514 	.area CONST   (CODE)
      0001E7                       3515 ___str_24:
      0001E7 73 65 74 20 61 64 64  3516 	.ascii "set address as %d"
             72 65 73 73 20 61 73
             20 25 64
      0001F8 0D                    3517 	.db 0x0d
      0001F9 0A                    3518 	.db 0x0a
      0001FA 00                    3519 	.db 0x00
                                   3520 	.area CSEG    (CODE)
                                   3521 	.area CONST   (CODE)
      0001FB                       3522 ___str_25:
      0001FB 4D 79 20 61 64 64 72  3523 	.ascii "My address is %d"
             65 73 73 20 69 73 20
             25 64
      00020B 0D                    3524 	.db 0x0d
      00020C 0A                    3525 	.db 0x0a
      00020D 00                    3526 	.db 0x00
                                   3527 	.area CSEG    (CODE)
                                   3528 	.area CONST   (CODE)
      00020E                       3529 ___str_26:
      00020E 61 64 64 72 65 73 73  3530 	.ascii "address:%u"
             3A 25 75
      000218 0D                    3531 	.db 0x0d
      000219 0A                    3532 	.db 0x0a
      00021A 00                    3533 	.db 0x00
                                   3534 	.area CSEG    (CODE)
                                   3535 	.area CONST   (CODE)
      00021B                       3536 ___str_27:
      00021B 63 6F 6D 6D 61 6E 64  3537 	.ascii "command:%u"
             3A 25 75
      000225 0D                    3538 	.db 0x0d
      000226 0A                    3539 	.db 0x0a
      000227 00                    3540 	.db 0x00
                                   3541 	.area CSEG    (CODE)
                                   3542 	.area CONST   (CODE)
      000228                       3543 ___str_28:
      000228 54 68 69 73 20 69 73  3544 	.ascii "This is UART0"
             20 55 41 52 54 30
      000235 0A                    3545 	.db 0x0a
      000236 0D                    3546 	.db 0x0d
      000237 00                    3547 	.db 0x00
                                   3548 	.area CSEG    (CODE)
                                   3549 	.area CONST   (CODE)
      000238                       3550 ___str_29:
      000238 4C 69 6E 65 46 69 20  3551 	.ascii "LineFi Sniffer"
             53 6E 69 66 66 65 72
      000246 0A                    3552 	.db 0x0a
      000247 0D                    3553 	.db 0x0d
      000248 00                    3554 	.db 0x00
                                   3555 	.area CSEG    (CODE)
                                   3556 	.area CONST   (CODE)
      000249                       3557 ___str_30:
      000249 54 68 69 73 20 69 73  3558 	.ascii "This is UART1"
             20 55 41 52 54 31
      000256 0A                    3559 	.db 0x0a
      000257 0D                    3560 	.db 0x0d
      000258 00                    3561 	.db 0x00
                                   3562 	.area CSEG    (CODE)
                                   3563 	.area CONST   (CODE)
      000259                       3564 ___str_31:
      000259 55 41 52 54 5F 54 58  3565 	.ascii "UART_TX="
             3D
      000261 00                    3566 	.db 0x00
                                   3567 	.area CSEG    (CODE)
                                   3568 	.area CONST   (CODE)
      000262                       3569 ___str_32:
      000262 25 64                 3570 	.ascii "%d"
      000264 0A                    3571 	.db 0x0a
      000265 0D                    3572 	.db 0x0d
      000266 00                    3573 	.db 0x00
                                   3574 	.area CSEG    (CODE)
                                   3575 	.area CONST   (CODE)
      000267                       3576 ___str_33:
      000267 4C 45 44 5F 52 3D     3577 	.ascii "LED_R="
      00026D 00                    3578 	.db 0x00
                                   3579 	.area CSEG    (CODE)
                                   3580 	.area CONST   (CODE)
      00026E                       3581 ___str_34:
      00026E 4C 45 44 5F 47 3D     3582 	.ascii "LED_G="
      000274 00                    3583 	.db 0x00
                                   3584 	.area CSEG    (CODE)
                                   3585 	.area CONST   (CODE)
      000275                       3586 ___str_35:
      000275 4C 45 44 5F 42 3D     3587 	.ascii "LED_B="
      00027B 00                    3588 	.db 0x00
                                   3589 	.area CSEG    (CODE)
                                   3590 	.area CONST   (CODE)
      00027C                       3591 ___str_36:
      00027C 4D 4F 54 4F 52 5F 45  3592 	.ascii "MOTOR_EN="
             4E 3D
      000285 00                    3593 	.db 0x00
                                   3594 	.area CSEG    (CODE)
                                   3595 	.area CONST   (CODE)
      000286                       3596 ___str_37:
      000286 4D 4F 54 4F 52 5F 43  3597 	.ascii "MOTOR_CW="
             57 3D
      00028F 00                    3598 	.db 0x00
                                   3599 	.area CSEG    (CODE)
                                   3600 	.area CONST   (CODE)
      000290                       3601 ___str_38:
      000290 4D 4F 54 4F 52 5F 43  3602 	.ascii "MOTOR_CCW="
             43 57 3D
      00029A 00                    3603 	.db 0x00
                                   3604 	.area CSEG    (CODE)
                                   3605 	.area CONST   (CODE)
      00029B                       3606 ___str_39:
      00029B 53 45 4C 5F 52 58 5F  3607 	.ascii "SEL_RX_POL="
             50 4F 4C 3D
      0002A6 00                    3608 	.db 0x00
                                   3609 	.area CSEG    (CODE)
                                   3610 	.area CONST   (CODE)
      0002A7                       3611 ___str_40:
      0002A7 63 6F 75 6E 74 3A 25  3612 	.ascii "count:%d"
             64
      0002AF 0D                    3613 	.db 0x0d
      0002B0 0A                    3614 	.db 0x0a
      0002B1 00                    3615 	.db 0x00
                                   3616 	.area CSEG    (CODE)
                                   3617 	.area CONST   (CODE)
      0002B2                       3618 ___str_41:
      0002B2 53 57 49 54 43 48 3A  3619 	.ascii "SWITCH:%d"
             25 64
      0002BB 0A                    3620 	.db 0x0a
      0002BC 0D                    3621 	.db 0x0d
      0002BD 00                    3622 	.db 0x00
                                   3623 	.area CSEG    (CODE)
                                   3624 	.area CONST   (CODE)
      0002BE                       3625 ___str_42:
      0002BE 45 52 52 4F 52 3A 20  3626 	.ascii "ERROR: CRC!!"
             43 52 43 21 21
      0002CA 0D                    3627 	.db 0x0d
      0002CB 0A                    3628 	.db 0x0a
      0002CC 00                    3629 	.db 0x00
                                   3630 	.area CSEG    (CODE)
                                   3631 	.area CONST   (CODE)
      0002CD                       3632 ___str_43:
      0002CD 45 52 52 4F 52 3A 20  3633 	.ascii "ERROR: too small length!!"
             74 6F 6F 20 73 6D 61
             6C 6C 20 6C 65 6E 67
             74 68 21 21
      0002E6 0D                    3634 	.db 0x0d
      0002E7 0A                    3635 	.db 0x0a
      0002E8 00                    3636 	.db 0x00
                                   3637 	.area CSEG    (CODE)
                                   3638 	.area CABS    (ABS,CODE)
      003700                       3639 	.org 0x3700
      003700                       3640 _gpcEEPROM:
      003700 00                    3641 	.db 0x00
      003701 00                    3642 	.db 0x00
      003702 00                    3643 	.db 0x00
      003703 00                    3644 	.db 0x00
      003704 00                    3645 	.db 0x00
      003705 00                    3646 	.db 0x00
      003706 00                    3647 	.db 0x00
      003707 00                    3648 	.db 0x00
      003708 00                    3649 	.db 0x00
      003709 00                    3650 	.db 0x00
      00370A 00                    3651 	.db 0x00
      00370B 00                    3652 	.db 0x00
      00370C 00                    3653 	.db 0x00
      00370D 00                    3654 	.db 0x00
      00370E 00                    3655 	.db 0x00
      00370F 00                    3656 	.db 0x00
      003710 00                    3657 	.db 0x00
      003711 00                    3658 	.db 0x00
      003712 00                    3659 	.db 0x00
      003713 00                    3660 	.db 0x00
      003714 00                    3661 	.db 0x00
      003715 00                    3662 	.db 0x00
      003716 00                    3663 	.db 0x00
      003717 00                    3664 	.db 0x00
      003718 00                    3665 	.db 0x00
      003719 00                    3666 	.db 0x00
      00371A 00                    3667 	.db 0x00
      00371B 00                    3668 	.db 0x00
      00371C 00                    3669 	.db 0x00
      00371D 00                    3670 	.db 0x00
      00371E 00                    3671 	.db 0x00
      00371F 00                    3672 	.db 0x00
      003720 00                    3673 	.db 0x00
      003721 00                    3674 	.db 0x00
      003722 00                    3675 	.db 0x00
      003723 00                    3676 	.db 0x00
      003724 00                    3677 	.db 0x00
      003725 00                    3678 	.db 0x00
      003726 00                    3679 	.db 0x00
      003727 00                    3680 	.db 0x00
      003728 00                    3681 	.db 0x00
      003729 00                    3682 	.db 0x00
      00372A 00                    3683 	.db 0x00
      00372B 00                    3684 	.db 0x00
      00372C 00                    3685 	.db 0x00
      00372D 00                    3686 	.db 0x00
      00372E 00                    3687 	.db 0x00
      00372F 00                    3688 	.db 0x00
      003730 00                    3689 	.db 0x00
      003731 00                    3690 	.db 0x00
      003732 00                    3691 	.db 0x00
      003733 00                    3692 	.db 0x00
      003734 00                    3693 	.db 0x00
      003735 00                    3694 	.db 0x00
      003736 00                    3695 	.db 0x00
      003737 00                    3696 	.db 0x00
      003738 00                    3697 	.db 0x00
      003739 00                    3698 	.db 0x00
      00373A 00                    3699 	.db 0x00
      00373B 00                    3700 	.db 0x00
      00373C 00                    3701 	.db 0x00
      00373D 00                    3702 	.db 0x00
      00373E 00                    3703 	.db 0x00
      00373F 00                    3704 	.db 0x00
      003740 00                    3705 	.db 0x00
      003741 00                    3706 	.db 0x00
      003742 00                    3707 	.db 0x00
      003743 00                    3708 	.db 0x00
      003744 00                    3709 	.db 0x00
      003745 00                    3710 	.db 0x00
      003746 00                    3711 	.db 0x00
      003747 00                    3712 	.db 0x00
      003748 00                    3713 	.db 0x00
      003749 00                    3714 	.db 0x00
      00374A 00                    3715 	.db 0x00
      00374B 00                    3716 	.db 0x00
      00374C 00                    3717 	.db 0x00
      00374D 00                    3718 	.db 0x00
      00374E 00                    3719 	.db 0x00
      00374F 00                    3720 	.db 0x00
      003750 00                    3721 	.db 0x00
      003751 00                    3722 	.db 0x00
      003752 00                    3723 	.db 0x00
      003753 00                    3724 	.db 0x00
      003754 00                    3725 	.db 0x00
      003755 00                    3726 	.db 0x00
      003756 00                    3727 	.db 0x00
      003757 00                    3728 	.db 0x00
      003758 00                    3729 	.db 0x00
      003759 00                    3730 	.db 0x00
      00375A 00                    3731 	.db 0x00
      00375B 00                    3732 	.db 0x00
      00375C 00                    3733 	.db 0x00
      00375D 00                    3734 	.db 0x00
      00375E 00                    3735 	.db 0x00
      00375F 00                    3736 	.db 0x00
      003760 00                    3737 	.db 0x00
      003761 00                    3738 	.db 0x00
      003762 00                    3739 	.db 0x00
      003763 00                    3740 	.db 0x00
      003764 00                    3741 	.db 0x00
      003765 00                    3742 	.db 0x00
      003766 00                    3743 	.db 0x00
      003767 00                    3744 	.db 0x00
      003768 00                    3745 	.db 0x00
      003769 00                    3746 	.db 0x00
      00376A 00                    3747 	.db 0x00
      00376B 00                    3748 	.db 0x00
      00376C 00                    3749 	.db 0x00
      00376D 00                    3750 	.db 0x00
      00376E 00                    3751 	.db 0x00
      00376F 00                    3752 	.db 0x00
      003770 00                    3753 	.db 0x00
      003771 00                    3754 	.db 0x00
      003772 00                    3755 	.db 0x00
      003773 00                    3756 	.db 0x00
      003774 00                    3757 	.db 0x00
      003775 00                    3758 	.db 0x00
      003776 00                    3759 	.db 0x00
      003777 00                    3760 	.db 0x00
      003778 00                    3761 	.db 0x00
      003779 00                    3762 	.db 0x00
      00377A 00                    3763 	.db 0x00
      00377B 00                    3764 	.db 0x00
      00377C 00                    3765 	.db 0x00
      00377D 00                    3766 	.db 0x00
      00377E 00                    3767 	.db 0x00
      00377F 00                    3768 	.db 0x00
