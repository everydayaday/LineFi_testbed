                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _state_switches_PARM_2
                                     12 	.globl _main
                                     13 	.globl _periodic_func
                                     14 	.globl _struct_to_uint8
                                     15 	.globl _act_by_one_key
                                     16 	.globl _print_help
                                     17 	.globl _printoutbuf
                                     18 	.globl _state_switches
                                     19 	.globl _gpio_setup
                                     20 	.globl _disp_help
                                     21 	.globl _MODIFY_HIRC_166
                                     22 	.globl _conv_manchester2highnibble
                                     23 	.globl _conv_manchester2nibble
                                     24 	.globl _chk_manchester
                                     25 	.globl _pin_interrupt_isr
                                     26 	.globl _Timer0_ISR
                                     27 	.globl _state_machine
                                     28 	.globl _print_char
                                     29 	.globl _print_esc
                                     30 	.globl _print_raw_packet
                                     31 	.globl _print_linefipacket
                                     32 	.globl _send_linefi_packet
                                     33 	.globl _send_octet_to_linefi
                                     34 	.globl _size_linefi_packet
                                     35 	.globl _uart_setup
                                     36 	.globl _Receive_Data_From_UART0_nb
                                     37 	.globl _InitialUART1_Timer3
                                     38 	.globl _printf_fast_f
                                     39 	.globl _printf
                                     40 	.globl _MOSI
                                     41 	.globl _P00
                                     42 	.globl _MISO
                                     43 	.globl _P01
                                     44 	.globl _RXD_1
                                     45 	.globl _P02
                                     46 	.globl _P03
                                     47 	.globl _STADC
                                     48 	.globl _P04
                                     49 	.globl _P05
                                     50 	.globl _TXD
                                     51 	.globl _P06
                                     52 	.globl _RXD
                                     53 	.globl _P07
                                     54 	.globl _IT0
                                     55 	.globl _IE0
                                     56 	.globl _IT1
                                     57 	.globl _IE1
                                     58 	.globl _TR0
                                     59 	.globl _TF0
                                     60 	.globl _TR1
                                     61 	.globl _TF1
                                     62 	.globl _P10
                                     63 	.globl _P11
                                     64 	.globl _P12
                                     65 	.globl _SCL
                                     66 	.globl _P13
                                     67 	.globl _SDA
                                     68 	.globl _P14
                                     69 	.globl _P15
                                     70 	.globl _TXD_1
                                     71 	.globl _P16
                                     72 	.globl _P17
                                     73 	.globl _RI
                                     74 	.globl _TI
                                     75 	.globl _RB8
                                     76 	.globl _TB8
                                     77 	.globl _REN
                                     78 	.globl _SM2
                                     79 	.globl _SM1
                                     80 	.globl _FE
                                     81 	.globl _SM0
                                     82 	.globl _P20
                                     83 	.globl _EX0
                                     84 	.globl _ET0
                                     85 	.globl _EX1
                                     86 	.globl _ET1
                                     87 	.globl _ES
                                     88 	.globl _EBOD
                                     89 	.globl _EADC
                                     90 	.globl _EA
                                     91 	.globl _P30
                                     92 	.globl _PX0
                                     93 	.globl _PT0
                                     94 	.globl _PX1
                                     95 	.globl _PT1
                                     96 	.globl _PS
                                     97 	.globl _PBOD
                                     98 	.globl _PADC
                                     99 	.globl _I2CPX
                                    100 	.globl _AA
                                    101 	.globl _SI
                                    102 	.globl _STO
                                    103 	.globl _STA
                                    104 	.globl _I2CEN
                                    105 	.globl _CM_RL2
                                    106 	.globl _TR2
                                    107 	.globl _TF2
                                    108 	.globl _P
                                    109 	.globl _OV
                                    110 	.globl _RS0
                                    111 	.globl _RS1
                                    112 	.globl _F0
                                    113 	.globl _AC
                                    114 	.globl _CY
                                    115 	.globl _CLRPWM
                                    116 	.globl _PWMF
                                    117 	.globl _LOAD
                                    118 	.globl _PWMRUN
                                    119 	.globl _ADCHS0
                                    120 	.globl _ADCHS1
                                    121 	.globl _ADCHS2
                                    122 	.globl _ADCHS3
                                    123 	.globl _ETGSEL0
                                    124 	.globl _ETGSEL1
                                    125 	.globl _ADCS
                                    126 	.globl _ADCF
                                    127 	.globl _RI_1
                                    128 	.globl _TI_1
                                    129 	.globl _RB8_1
                                    130 	.globl _TB8_1
                                    131 	.globl _REN_1
                                    132 	.globl _SM2_1
                                    133 	.globl _SM1_1
                                    134 	.globl _FE_1
                                    135 	.globl _SM0_1
                                    136 	.globl _EIPH1
                                    137 	.globl _EIP1
                                    138 	.globl _PMD
                                    139 	.globl _PMEN
                                    140 	.globl _PDTCNT
                                    141 	.globl _PDTEN
                                    142 	.globl _SCON_1
                                    143 	.globl _EIPH
                                    144 	.globl _AINDIDS
                                    145 	.globl _SPDR
                                    146 	.globl _SPSR
                                    147 	.globl _SPCR2
                                    148 	.globl _SPCR
                                    149 	.globl _CAPCON4
                                    150 	.globl _CAPCON3
                                    151 	.globl _B
                                    152 	.globl _EIP
                                    153 	.globl _C2H
                                    154 	.globl _C2L
                                    155 	.globl _PIF
                                    156 	.globl _PIPEN
                                    157 	.globl _PINEN
                                    158 	.globl _PICON
                                    159 	.globl _ADCCON0
                                    160 	.globl _C1H
                                    161 	.globl _C1L
                                    162 	.globl _C0H
                                    163 	.globl _C0L
                                    164 	.globl _ADCDLY
                                    165 	.globl _ADCCON2
                                    166 	.globl _ADCCON1
                                    167 	.globl _ACC
                                    168 	.globl _PWMCON1
                                    169 	.globl _PIOCON0
                                    170 	.globl _PWM3L
                                    171 	.globl _PWM2L
                                    172 	.globl _PWM1L
                                    173 	.globl _PWM0L
                                    174 	.globl _PWMPL
                                    175 	.globl _PWMCON0
                                    176 	.globl _FBD
                                    177 	.globl _PNP
                                    178 	.globl _PWM3H
                                    179 	.globl _PWM2H
                                    180 	.globl _PWM1H
                                    181 	.globl _PWM0H
                                    182 	.globl _PWMPH
                                    183 	.globl _PSW
                                    184 	.globl _ADCMPH
                                    185 	.globl _ADCMPL
                                    186 	.globl _PWM5L
                                    187 	.globl _TH2
                                    188 	.globl _PWM4L
                                    189 	.globl _TL2
                                    190 	.globl _RCMP2H
                                    191 	.globl _RCMP2L
                                    192 	.globl _T2MOD
                                    193 	.globl _T2CON
                                    194 	.globl _TA
                                    195 	.globl _PIOCON1
                                    196 	.globl _RH3
                                    197 	.globl _PWM5H
                                    198 	.globl _RL3
                                    199 	.globl _PWM4H
                                    200 	.globl _T3CON
                                    201 	.globl _ADCRH
                                    202 	.globl _ADCRL
                                    203 	.globl _I2ADDR
                                    204 	.globl _I2CON
                                    205 	.globl _I2TOC
                                    206 	.globl _I2CLK
                                    207 	.globl _I2STAT
                                    208 	.globl _I2DAT
                                    209 	.globl _SADDR_1
                                    210 	.globl _SADEN_1
                                    211 	.globl _SADEN
                                    212 	.globl _IP
                                    213 	.globl _PWMINTC
                                    214 	.globl _IPH
                                    215 	.globl _P2S
                                    216 	.globl _P1SR
                                    217 	.globl _P1M2
                                    218 	.globl _P1S
                                    219 	.globl _P1M1
                                    220 	.globl _P0SR
                                    221 	.globl _P0M2
                                    222 	.globl _P0S
                                    223 	.globl _P0M1
                                    224 	.globl _P3
                                    225 	.globl _IAPCN
                                    226 	.globl _IAPFD
                                    227 	.globl _P3SR
                                    228 	.globl _P3M2
                                    229 	.globl _P3S
                                    230 	.globl _P3M1
                                    231 	.globl _BODCON1
                                    232 	.globl _WDCON
                                    233 	.globl _SADDR
                                    234 	.globl _IE
                                    235 	.globl _IAPAH
                                    236 	.globl _IAPAL
                                    237 	.globl _IAPUEN
                                    238 	.globl _IAPTRG
                                    239 	.globl _BODCON0
                                    240 	.globl _AUXR1
                                    241 	.globl _P2
                                    242 	.globl _CHPCON
                                    243 	.globl _EIE1
                                    244 	.globl _EIE
                                    245 	.globl _SBUF_1
                                    246 	.globl _SBUF
                                    247 	.globl _SCON
                                    248 	.globl _CKEN
                                    249 	.globl _CKSWT
                                    250 	.globl _CKDIV
                                    251 	.globl _CAPCON2
                                    252 	.globl _CAPCON1
                                    253 	.globl _CAPCON0
                                    254 	.globl _SFRS
                                    255 	.globl _P1
                                    256 	.globl _WKCON
                                    257 	.globl _CKCON
                                    258 	.globl _TH1
                                    259 	.globl _TH0
                                    260 	.globl _TL1
                                    261 	.globl _TL0
                                    262 	.globl _TMOD
                                    263 	.globl _TCON
                                    264 	.globl _PCON
                                    265 	.globl _RWK
                                    266 	.globl _RCTRIM1
                                    267 	.globl _RCTRIM0
                                    268 	.globl _DPH
                                    269 	.globl _DPL
                                    270 	.globl _SP
                                    271 	.globl _P0
                                    272 	.globl _gpu32UartSpeed
                                    273 	.globl _gu16TimeCntMilliSec
                                    274 	.globl _gu16TimeCnt
                                    275 	.globl _gpu8Data3
                                    276 	.globl _gpu8Data2
                                    277 	.globl _gpu8Data
                                    278 	.globl _gcUartInputMode
                                    279 	.globl _pu8buff
                                    280 	.globl _act_by_one_key_PARM_3
                                    281 	.globl _act_by_one_key_PARM_2
                                    282 	.globl _printoutbuf_PARM_2
                                    283 	.globl _state_machine_PARM_4
                                    284 	.globl _state_machine_PARM_3
                                    285 	.globl _state_machine_PARM_2
                                    286 	.globl _gu8UART
                                    287 	.globl _putchar
                                    288 ;--------------------------------------------------------
                                    289 ; special function registers
                                    290 ;--------------------------------------------------------
                                    291 	.area RSEG    (ABS,DATA)
      000000                        292 	.org 0x0000
                           000080   293 _P0	=	0x0080
                           000081   294 _SP	=	0x0081
                           000082   295 _DPL	=	0x0082
                           000083   296 _DPH	=	0x0083
                           000084   297 _RCTRIM0	=	0x0084
                           000085   298 _RCTRIM1	=	0x0085
                           000086   299 _RWK	=	0x0086
                           000087   300 _PCON	=	0x0087
                           000088   301 _TCON	=	0x0088
                           000089   302 _TMOD	=	0x0089
                           00008A   303 _TL0	=	0x008a
                           00008B   304 _TL1	=	0x008b
                           00008C   305 _TH0	=	0x008c
                           00008D   306 _TH1	=	0x008d
                           00008E   307 _CKCON	=	0x008e
                           00008F   308 _WKCON	=	0x008f
                           000090   309 _P1	=	0x0090
                           000091   310 _SFRS	=	0x0091
                           000092   311 _CAPCON0	=	0x0092
                           000093   312 _CAPCON1	=	0x0093
                           000094   313 _CAPCON2	=	0x0094
                           000095   314 _CKDIV	=	0x0095
                           000096   315 _CKSWT	=	0x0096
                           000097   316 _CKEN	=	0x0097
                           000098   317 _SCON	=	0x0098
                           000099   318 _SBUF	=	0x0099
                           00009A   319 _SBUF_1	=	0x009a
                           00009B   320 _EIE	=	0x009b
                           00009C   321 _EIE1	=	0x009c
                           00009F   322 _CHPCON	=	0x009f
                           0000A0   323 _P2	=	0x00a0
                           0000A2   324 _AUXR1	=	0x00a2
                           0000A3   325 _BODCON0	=	0x00a3
                           0000A4   326 _IAPTRG	=	0x00a4
                           0000A5   327 _IAPUEN	=	0x00a5
                           0000A6   328 _IAPAL	=	0x00a6
                           0000A7   329 _IAPAH	=	0x00a7
                           0000A8   330 _IE	=	0x00a8
                           0000A9   331 _SADDR	=	0x00a9
                           0000AA   332 _WDCON	=	0x00aa
                           0000AB   333 _BODCON1	=	0x00ab
                           0000AC   334 _P3M1	=	0x00ac
                           0000AC   335 _P3S	=	0x00ac
                           0000AD   336 _P3M2	=	0x00ad
                           0000AD   337 _P3SR	=	0x00ad
                           0000AE   338 _IAPFD	=	0x00ae
                           0000AF   339 _IAPCN	=	0x00af
                           0000B0   340 _P3	=	0x00b0
                           0000B1   341 _P0M1	=	0x00b1
                           0000B1   342 _P0S	=	0x00b1
                           0000B2   343 _P0M2	=	0x00b2
                           0000B2   344 _P0SR	=	0x00b2
                           0000B3   345 _P1M1	=	0x00b3
                           0000B3   346 _P1S	=	0x00b3
                           0000B4   347 _P1M2	=	0x00b4
                           0000B4   348 _P1SR	=	0x00b4
                           0000B5   349 _P2S	=	0x00b5
                           0000B7   350 _IPH	=	0x00b7
                           0000B7   351 _PWMINTC	=	0x00b7
                           0000B8   352 _IP	=	0x00b8
                           0000B9   353 _SADEN	=	0x00b9
                           0000BA   354 _SADEN_1	=	0x00ba
                           0000BB   355 _SADDR_1	=	0x00bb
                           0000BC   356 _I2DAT	=	0x00bc
                           0000BD   357 _I2STAT	=	0x00bd
                           0000BE   358 _I2CLK	=	0x00be
                           0000BF   359 _I2TOC	=	0x00bf
                           0000C0   360 _I2CON	=	0x00c0
                           0000C1   361 _I2ADDR	=	0x00c1
                           0000C2   362 _ADCRL	=	0x00c2
                           0000C3   363 _ADCRH	=	0x00c3
                           0000C4   364 _T3CON	=	0x00c4
                           0000C4   365 _PWM4H	=	0x00c4
                           0000C5   366 _RL3	=	0x00c5
                           0000C5   367 _PWM5H	=	0x00c5
                           0000C6   368 _RH3	=	0x00c6
                           0000C6   369 _PIOCON1	=	0x00c6
                           0000C7   370 _TA	=	0x00c7
                           0000C8   371 _T2CON	=	0x00c8
                           0000C9   372 _T2MOD	=	0x00c9
                           0000CA   373 _RCMP2L	=	0x00ca
                           0000CB   374 _RCMP2H	=	0x00cb
                           0000CC   375 _TL2	=	0x00cc
                           0000CC   376 _PWM4L	=	0x00cc
                           0000CD   377 _TH2	=	0x00cd
                           0000CD   378 _PWM5L	=	0x00cd
                           0000CE   379 _ADCMPL	=	0x00ce
                           0000CF   380 _ADCMPH	=	0x00cf
                           0000D0   381 _PSW	=	0x00d0
                           0000D1   382 _PWMPH	=	0x00d1
                           0000D2   383 _PWM0H	=	0x00d2
                           0000D3   384 _PWM1H	=	0x00d3
                           0000D4   385 _PWM2H	=	0x00d4
                           0000D5   386 _PWM3H	=	0x00d5
                           0000D6   387 _PNP	=	0x00d6
                           0000D7   388 _FBD	=	0x00d7
                           0000D8   389 _PWMCON0	=	0x00d8
                           0000D9   390 _PWMPL	=	0x00d9
                           0000DA   391 _PWM0L	=	0x00da
                           0000DB   392 _PWM1L	=	0x00db
                           0000DC   393 _PWM2L	=	0x00dc
                           0000DD   394 _PWM3L	=	0x00dd
                           0000DE   395 _PIOCON0	=	0x00de
                           0000DF   396 _PWMCON1	=	0x00df
                           0000E0   397 _ACC	=	0x00e0
                           0000E1   398 _ADCCON1	=	0x00e1
                           0000E2   399 _ADCCON2	=	0x00e2
                           0000E3   400 _ADCDLY	=	0x00e3
                           0000E4   401 _C0L	=	0x00e4
                           0000E5   402 _C0H	=	0x00e5
                           0000E6   403 _C1L	=	0x00e6
                           0000E7   404 _C1H	=	0x00e7
                           0000E8   405 _ADCCON0	=	0x00e8
                           0000E9   406 _PICON	=	0x00e9
                           0000EA   407 _PINEN	=	0x00ea
                           0000EB   408 _PIPEN	=	0x00eb
                           0000EC   409 _PIF	=	0x00ec
                           0000ED   410 _C2L	=	0x00ed
                           0000EE   411 _C2H	=	0x00ee
                           0000EF   412 _EIP	=	0x00ef
                           0000F0   413 _B	=	0x00f0
                           0000F1   414 _CAPCON3	=	0x00f1
                           0000F2   415 _CAPCON4	=	0x00f2
                           0000F3   416 _SPCR	=	0x00f3
                           0000F3   417 _SPCR2	=	0x00f3
                           0000F4   418 _SPSR	=	0x00f4
                           0000F5   419 _SPDR	=	0x00f5
                           0000F6   420 _AINDIDS	=	0x00f6
                           0000F7   421 _EIPH	=	0x00f7
                           0000F8   422 _SCON_1	=	0x00f8
                           0000F9   423 _PDTEN	=	0x00f9
                           0000FA   424 _PDTCNT	=	0x00fa
                           0000FB   425 _PMEN	=	0x00fb
                           0000FC   426 _PMD	=	0x00fc
                           0000FE   427 _EIP1	=	0x00fe
                           0000FF   428 _EIPH1	=	0x00ff
                                    429 ;--------------------------------------------------------
                                    430 ; special function bits
                                    431 ;--------------------------------------------------------
                                    432 	.area RSEG    (ABS,DATA)
      000000                        433 	.org 0x0000
                           0000FF   434 _SM0_1	=	0x00ff
                           0000FF   435 _FE_1	=	0x00ff
                           0000FE   436 _SM1_1	=	0x00fe
                           0000FD   437 _SM2_1	=	0x00fd
                           0000FC   438 _REN_1	=	0x00fc
                           0000FB   439 _TB8_1	=	0x00fb
                           0000FA   440 _RB8_1	=	0x00fa
                           0000F9   441 _TI_1	=	0x00f9
                           0000F8   442 _RI_1	=	0x00f8
                           0000EF   443 _ADCF	=	0x00ef
                           0000EE   444 _ADCS	=	0x00ee
                           0000ED   445 _ETGSEL1	=	0x00ed
                           0000EC   446 _ETGSEL0	=	0x00ec
                           0000EB   447 _ADCHS3	=	0x00eb
                           0000EA   448 _ADCHS2	=	0x00ea
                           0000E9   449 _ADCHS1	=	0x00e9
                           0000E8   450 _ADCHS0	=	0x00e8
                           0000DF   451 _PWMRUN	=	0x00df
                           0000DE   452 _LOAD	=	0x00de
                           0000DD   453 _PWMF	=	0x00dd
                           0000DC   454 _CLRPWM	=	0x00dc
                           0000D7   455 _CY	=	0x00d7
                           0000D6   456 _AC	=	0x00d6
                           0000D5   457 _F0	=	0x00d5
                           0000D4   458 _RS1	=	0x00d4
                           0000D3   459 _RS0	=	0x00d3
                           0000D2   460 _OV	=	0x00d2
                           0000D0   461 _P	=	0x00d0
                           0000CF   462 _TF2	=	0x00cf
                           0000CA   463 _TR2	=	0x00ca
                           0000C8   464 _CM_RL2	=	0x00c8
                           0000C6   465 _I2CEN	=	0x00c6
                           0000C5   466 _STA	=	0x00c5
                           0000C4   467 _STO	=	0x00c4
                           0000C3   468 _SI	=	0x00c3
                           0000C2   469 _AA	=	0x00c2
                           0000C0   470 _I2CPX	=	0x00c0
                           0000BE   471 _PADC	=	0x00be
                           0000BD   472 _PBOD	=	0x00bd
                           0000BC   473 _PS	=	0x00bc
                           0000BB   474 _PT1	=	0x00bb
                           0000BA   475 _PX1	=	0x00ba
                           0000B9   476 _PT0	=	0x00b9
                           0000B8   477 _PX0	=	0x00b8
                           0000B0   478 _P30	=	0x00b0
                           0000AF   479 _EA	=	0x00af
                           0000AE   480 _EADC	=	0x00ae
                           0000AD   481 _EBOD	=	0x00ad
                           0000AC   482 _ES	=	0x00ac
                           0000AB   483 _ET1	=	0x00ab
                           0000AA   484 _EX1	=	0x00aa
                           0000A9   485 _ET0	=	0x00a9
                           0000A8   486 _EX0	=	0x00a8
                           0000A0   487 _P20	=	0x00a0
                           00009F   488 _SM0	=	0x009f
                           00009F   489 _FE	=	0x009f
                           00009E   490 _SM1	=	0x009e
                           00009D   491 _SM2	=	0x009d
                           00009C   492 _REN	=	0x009c
                           00009B   493 _TB8	=	0x009b
                           00009A   494 _RB8	=	0x009a
                           000099   495 _TI	=	0x0099
                           000098   496 _RI	=	0x0098
                           000097   497 _P17	=	0x0097
                           000096   498 _P16	=	0x0096
                           000096   499 _TXD_1	=	0x0096
                           000095   500 _P15	=	0x0095
                           000094   501 _P14	=	0x0094
                           000094   502 _SDA	=	0x0094
                           000093   503 _P13	=	0x0093
                           000093   504 _SCL	=	0x0093
                           000092   505 _P12	=	0x0092
                           000091   506 _P11	=	0x0091
                           000090   507 _P10	=	0x0090
                           00008F   508 _TF1	=	0x008f
                           00008E   509 _TR1	=	0x008e
                           00008D   510 _TF0	=	0x008d
                           00008C   511 _TR0	=	0x008c
                           00008B   512 _IE1	=	0x008b
                           00008A   513 _IT1	=	0x008a
                           000089   514 _IE0	=	0x0089
                           000088   515 _IT0	=	0x0088
                           000087   516 _P07	=	0x0087
                           000087   517 _RXD	=	0x0087
                           000086   518 _P06	=	0x0086
                           000086   519 _TXD	=	0x0086
                           000085   520 _P05	=	0x0085
                           000084   521 _P04	=	0x0084
                           000084   522 _STADC	=	0x0084
                           000083   523 _P03	=	0x0083
                           000082   524 _P02	=	0x0082
                           000082   525 _RXD_1	=	0x0082
                           000081   526 _P01	=	0x0081
                           000081   527 _MISO	=	0x0081
                           000080   528 _P00	=	0x0080
                           000080   529 _MOSI	=	0x0080
                                    530 ;--------------------------------------------------------
                                    531 ; overlayable register banks
                                    532 ;--------------------------------------------------------
                                    533 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        534 	.ds 8
                                    535 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        536 	.ds 8
                                    537 ;--------------------------------------------------------
                                    538 ; internal ram data
                                    539 ;--------------------------------------------------------
                                    540 	.area DSEG    (DATA)
      000000                        541 _gu8UART::
      000000                        542 	.ds 1
      000001                        543 _state_machine_PARM_2:
      000001                        544 	.ds 1
      000002                        545 _state_machine_PARM_3:
      000002                        546 	.ds 1
      000003                        547 _state_machine_PARM_4:
      000003                        548 	.ds 1
      000004                        549 _state_switches_su8PrevSW_65536_89:
      000004                        550 	.ds 1
      000005                        551 _printoutbuf_PARM_2:
      000005                        552 	.ds 3
      000008                        553 _act_by_one_key_PARM_2:
      000008                        554 	.ds 3
      00000B                        555 _act_by_one_key_PARM_3:
      00000B                        556 	.ds 3
      00000E                        557 _act_by_one_key_sloc0_1_0:
      00000E                        558 	.ds 3
      000011                        559 _periodic_func_su8Cnt_65536_116:
      000011                        560 	.ds 1
      000012                        561 _main_u8RxUART_65536_120:
      000012                        562 	.ds 1
      000013                        563 _main_u8LineFiAddr_65536_120:
      000013                        564 	.ds 1
      000014                        565 _main_u8LineFiCmd_65536_120:
      000014                        566 	.ds 1
      000015                        567 _main_u8SwNum_65536_120:
      000015                        568 	.ds 1
      000016                        569 _main_u8StatePeriodicSend_65536_120:
      000016                        570 	.ds 1
      000017                        571 _main_u8PSCmd_65536_120:
      000017                        572 	.ds 1
      000018                        573 _main_stLineFiPkt_65536_120:
      000018                        574 	.ds 8
                                    575 ;--------------------------------------------------------
                                    576 ; overlayable items in internal ram 
                                    577 ;--------------------------------------------------------
                                    578 	.area	OSEG    (OVR,DATA)
                                    579 	.area	OSEG    (OVR,DATA)
                                    580 	.area	OSEG    (OVR,DATA)
                                    581 	.area	OSEG    (OVR,DATA)
                                    582 	.area	OSEG    (OVR,DATA)
                                    583 	.area	OSEG    (OVR,DATA)
      000000                        584 _state_switches_PARM_2:
      000000                        585 	.ds 3
                                    586 	.area	OSEG    (OVR,DATA)
      000000                        587 _struct_to_uint8_apcPkt_65536_110:
      000000                        588 	.ds 3
      000003                        589 _struct_to_uint8_cntIdx_65536_111:
      000003                        590 	.ds 1
      000004                        591 _struct_to_uint8_i_65537_112:
      000004                        592 	.ds 1
                                    593 ;--------------------------------------------------------
                                    594 ; Stack segment in internal ram 
                                    595 ;--------------------------------------------------------
                                    596 	.area	SSEG
      000000                        597 __start__stack:
      000000                        598 	.ds	1
                                    599 
                                    600 ;--------------------------------------------------------
                                    601 ; indirectly addressable internal ram data
                                    602 ;--------------------------------------------------------
                                    603 	.area ISEG    (DATA)
                                    604 ;--------------------------------------------------------
                                    605 ; absolute internal ram data
                                    606 ;--------------------------------------------------------
                                    607 	.area IABS    (ABS,DATA)
                                    608 	.area IABS    (ABS,DATA)
                                    609 ;--------------------------------------------------------
                                    610 ; bit data
                                    611 ;--------------------------------------------------------
                                    612 	.area BSEG    (BIT)
                                    613 ;--------------------------------------------------------
                                    614 ; paged external ram data
                                    615 ;--------------------------------------------------------
                                    616 	.area PSEG    (PAG,XDATA)
                                    617 ;--------------------------------------------------------
                                    618 ; external ram data
                                    619 ;--------------------------------------------------------
                                    620 	.area XSEG    (XDATA)
      000000                        621 _pu8buff::
      000000                        622 	.ds 30
      00001E                        623 _gcUartInputMode::
      00001E                        624 	.ds 15
      00002D                        625 _gpu8Data::
      00002D                        626 	.ds 20
      000041                        627 _gpu8Data2::
      000041                        628 	.ds 20
      000055                        629 _gpu8Data3::
      000055                        630 	.ds 28
      000071                        631 _gu16TimeCnt::
      000071                        632 	.ds 2
      000073                        633 _gu16TimeCntMilliSec::
      000073                        634 	.ds 2
      000075                        635 _gpu32UartSpeed::
      000075                        636 	.ds 56
      0000AD                        637 _act_by_one_key_u8Data_65536_102:
      0000AD                        638 	.ds 1
      0000AE                        639 _main_pcBuf_65536_120:
      0000AE                        640 	.ds 100
      000112                        641 _main_pu8Data_65536_120:
      000112                        642 	.ds 10
      00011C                        643 _main_u8DataIdx_65536_120:
      00011C                        644 	.ds 1
      00011D                        645 _main_ucBufIdx_65536_120:
      00011D                        646 	.ds 1
      00011E                        647 _main_pstLineFiPkt_65536_120:
      00011E                        648 	.ds 40
      000146                        649 _main_stLineFiPkt_test_65536_120:
      000146                        650 	.ds 8
                                    651 ;--------------------------------------------------------
                                    652 ; absolute external ram data
                                    653 ;--------------------------------------------------------
                                    654 	.area XABS    (ABS,XDATA)
                                    655 ;--------------------------------------------------------
                                    656 ; external initialized ram data
                                    657 ;--------------------------------------------------------
                                    658 	.area HOME    (CODE)
                                    659 	.area GSINIT0 (CODE)
                                    660 	.area GSINIT1 (CODE)
                                    661 	.area GSINIT2 (CODE)
                                    662 	.area GSINIT3 (CODE)
                                    663 	.area GSINIT4 (CODE)
                                    664 	.area GSINIT5 (CODE)
                                    665 	.area GSINIT  (CODE)
                                    666 	.area GSFINAL (CODE)
                                    667 	.area CSEG    (CODE)
                                    668 ;--------------------------------------------------------
                                    669 ; interrupt vector 
                                    670 ;--------------------------------------------------------
                                    671 	.area HOME    (CODE)
      000000                        672 __interrupt_vect:
      000000 02r00r00         [24]  673 	ljmp	__sdcc_gsinit_startup
      000003 32               [24]  674 	reti
      000004                        675 	.ds	7
      00000B 02r01r86         [24]  676 	ljmp	_Timer0_ISR
      00000E                        677 	.ds	5
      000013 32               [24]  678 	reti
      000014                        679 	.ds	7
      00001B 32               [24]  680 	reti
      00001C                        681 	.ds	7
      000023 32               [24]  682 	reti
      000024                        683 	.ds	7
      00002B 32               [24]  684 	reti
      00002C                        685 	.ds	7
      000033 32               [24]  686 	reti
      000034                        687 	.ds	7
      00003B 02r01rB5         [24]  688 	ljmp	_pin_interrupt_isr
                                    689 ;--------------------------------------------------------
                                    690 ; global & static initialisations
                                    691 ;--------------------------------------------------------
                                    692 	.area HOME    (CODE)
                                    693 	.area GSINIT  (CODE)
                                    694 	.area GSFINAL (CODE)
                                    695 	.area GSINIT  (CODE)
                                    696 	.globl __sdcc_gsinit_startup
                                    697 	.globl __sdcc_program_startup
                                    698 	.globl __start__stack
                                    699 	.globl __mcs51_genRAMCLEAR
                                    700 ;------------------------------------------------------------
                                    701 ;Allocation info for local variables in function 'state_switches'
                                    702 ;------------------------------------------------------------
                                    703 ;su8PrevSW                 Allocated with name '_state_switches_su8PrevSW_65536_89'
                                    704 ;apu8SwNum                 Allocated with name '_state_switches_PARM_2'
                                    705 ;au8SW                     Allocated to registers r7 
                                    706 ;i                         Allocated to registers r2 
                                    707 ;u8Result                  Allocated to registers r6 
                                    708 ;------------------------------------------------------------
                                    709 ;	src/main.c:452: static UINT8 su8PrevSW = 0;
      000000 75*04 00         [24]  710 	mov	_state_switches_su8PrevSW_65536_89,#0x00
                                    711 ;------------------------------------------------------------
                                    712 ;Allocation info for local variables in function 'act_by_one_key'
                                    713 ;------------------------------------------------------------
                                    714 ;apu8LineFiCmd             Allocated with name '_act_by_one_key_PARM_2'
                                    715 ;apu8LineFiAddr            Allocated with name '_act_by_one_key_PARM_3'
                                    716 ;au8RxUART                 Allocated to registers r7 
                                    717 ;sloc0                     Allocated with name '_act_by_one_key_sloc0_1_0'
                                    718 ;u8Data                    Allocated with name '_act_by_one_key_u8Data_65536_102'
                                    719 ;------------------------------------------------------------
                                    720 ;	src/main.c:621: static UINT8 __xdata u8Data = 0;
      000003 90r00rAD         [24]  721 	mov	dptr,#_act_by_one_key_u8Data_65536_102
      000006 E4               [12]  722 	clr	a
      000007 F0               [24]  723 	movx	@dptr,a
                                    724 ;------------------------------------------------------------
                                    725 ;Allocation info for local variables in function 'periodic_func'
                                    726 ;------------------------------------------------------------
                                    727 ;su8Cnt                    Allocated with name '_periodic_func_su8Cnt_65536_116'
                                    728 ;apcStr                    Allocated to registers r5 r6 r7 
                                    729 ;total_size                Allocated to registers r4 
                                    730 ;------------------------------------------------------------
                                    731 ;	src/main.c:789: static UINT8 su8Cnt = 0;
      000008 75*11 00         [24]  732 	mov	_periodic_func_su8Cnt_65536_116,#0x00
                                    733 ;	src/main.c:145: UINT8 gu8UART = 0;
      00000B 75*00 00         [24]  734 	mov	_gu8UART,#0x00
                                    735 ;	src/main.c:82: const char * __xdata  gcUartInputMode[MAX_STATE_UART0_INPUT] = {
      00000E 90r00r1E         [24]  736 	mov	dptr,#_gcUartInputMode
      000011 74r30            [12]  737 	mov	a,#___str_66
      000013 F0               [24]  738 	movx	@dptr,a
      000014 74s04            [12]  739 	mov	a,#(___str_66 >> 8)
      000016 A3               [24]  740 	inc	dptr
      000017 F0               [24]  741 	movx	@dptr,a
      000018 74 80            [12]  742 	mov	a,#0x80
      00001A A3               [24]  743 	inc	dptr
      00001B F0               [24]  744 	movx	@dptr,a
      00001C 90r00r21         [24]  745 	mov	dptr,#(_gcUartInputMode + 0x0003)
      00001F 74r52            [12]  746 	mov	a,#___str_67
      000021 F0               [24]  747 	movx	@dptr,a
      000022 74s04            [12]  748 	mov	a,#(___str_67 >> 8)
      000024 A3               [24]  749 	inc	dptr
      000025 F0               [24]  750 	movx	@dptr,a
      000026 74 80            [12]  751 	mov	a,#0x80
      000028 A3               [24]  752 	inc	dptr
      000029 F0               [24]  753 	movx	@dptr,a
      00002A 90r00r24         [24]  754 	mov	dptr,#(_gcUartInputMode + 0x0006)
      00002D 74r71            [12]  755 	mov	a,#___str_68
      00002F F0               [24]  756 	movx	@dptr,a
      000030 74s04            [12]  757 	mov	a,#(___str_68 >> 8)
      000032 A3               [24]  758 	inc	dptr
      000033 F0               [24]  759 	movx	@dptr,a
      000034 74 80            [12]  760 	mov	a,#0x80
      000036 A3               [24]  761 	inc	dptr
      000037 F0               [24]  762 	movx	@dptr,a
      000038 90r00r27         [24]  763 	mov	dptr,#(_gcUartInputMode + 0x0009)
      00003B 74r98            [12]  764 	mov	a,#___str_69
      00003D F0               [24]  765 	movx	@dptr,a
      00003E 74s04            [12]  766 	mov	a,#(___str_69 >> 8)
      000040 A3               [24]  767 	inc	dptr
      000041 F0               [24]  768 	movx	@dptr,a
      000042 74 80            [12]  769 	mov	a,#0x80
      000044 A3               [24]  770 	inc	dptr
      000045 F0               [24]  771 	movx	@dptr,a
      000046 90r00r2A         [24]  772 	mov	dptr,#(_gcUartInputMode + 0x000c)
      000049 74rB7            [12]  773 	mov	a,#___str_70
      00004B F0               [24]  774 	movx	@dptr,a
      00004C 74s04            [12]  775 	mov	a,#(___str_70 >> 8)
      00004E A3               [24]  776 	inc	dptr
      00004F F0               [24]  777 	movx	@dptr,a
      000050 74 80            [12]  778 	mov	a,#0x80
      000052 A3               [24]  779 	inc	dptr
      000053 F0               [24]  780 	movx	@dptr,a
                                    781 ;	src/main.c:99: UINT8 __xdata gpu8Data[20] = {
      000054 90r00r2D         [24]  782 	mov	dptr,#_gpu8Data
      000057 23               [12]  783 	rl	a
      000058 F0               [24]  784 	movx	@dptr,a
      000059 90r00r2E         [24]  785 	mov	dptr,#(_gpu8Data + 0x0001)
      00005C F0               [24]  786 	movx	@dptr,a
      00005D 90r00r2F         [24]  787 	mov	dptr,#(_gpu8Data + 0x0002)
      000060 F0               [24]  788 	movx	@dptr,a
      000061 90r00r30         [24]  789 	mov	dptr,#(_gpu8Data + 0x0003)
      000064 F0               [24]  790 	movx	@dptr,a
      000065 90r00r31         [24]  791 	mov	dptr,#(_gpu8Data + 0x0004)
      000068 04               [12]  792 	inc	a
      000069 F0               [24]  793 	movx	@dptr,a
      00006A 90r00r32         [24]  794 	mov	dptr,#(_gpu8Data + 0x0005)
      00006D F0               [24]  795 	movx	@dptr,a
      00006E 90r00r33         [24]  796 	mov	dptr,#(_gpu8Data + 0x0006)
      000071 F0               [24]  797 	movx	@dptr,a
      000072 90r00r34         [24]  798 	mov	dptr,#(_gpu8Data + 0x0007)
      000075 F0               [24]  799 	movx	@dptr,a
      000076 90r00r35         [24]  800 	mov	dptr,#(_gpu8Data + 0x0008)
      000079 04               [12]  801 	inc	a
      00007A F0               [24]  802 	movx	@dptr,a
      00007B 90r00r36         [24]  803 	mov	dptr,#(_gpu8Data + 0x0009)
      00007E F0               [24]  804 	movx	@dptr,a
      00007F 90r00r37         [24]  805 	mov	dptr,#(_gpu8Data + 0x000a)
      000082 F0               [24]  806 	movx	@dptr,a
      000083 90r00r38         [24]  807 	mov	dptr,#(_gpu8Data + 0x000b)
      000086 F0               [24]  808 	movx	@dptr,a
      000087 90r00r39         [24]  809 	mov	dptr,#(_gpu8Data + 0x000c)
      00008A 04               [12]  810 	inc	a
      00008B F0               [24]  811 	movx	@dptr,a
      00008C 90r00r3A         [24]  812 	mov	dptr,#(_gpu8Data + 0x000d)
      00008F F0               [24]  813 	movx	@dptr,a
      000090 90r00r3B         [24]  814 	mov	dptr,#(_gpu8Data + 0x000e)
      000093 F0               [24]  815 	movx	@dptr,a
      000094 90r00r3C         [24]  816 	mov	dptr,#(_gpu8Data + 0x000f)
      000097 F0               [24]  817 	movx	@dptr,a
      000098 90r00r3D         [24]  818 	mov	dptr,#(_gpu8Data + 0x0010)
      00009B 04               [12]  819 	inc	a
      00009C F0               [24]  820 	movx	@dptr,a
      00009D 90r00r3E         [24]  821 	mov	dptr,#(_gpu8Data + 0x0011)
      0000A0 F0               [24]  822 	movx	@dptr,a
      0000A1 90r00r3F         [24]  823 	mov	dptr,#(_gpu8Data + 0x0012)
      0000A4 F0               [24]  824 	movx	@dptr,a
      0000A5 90r00r40         [24]  825 	mov	dptr,#(_gpu8Data + 0x0013)
      0000A8 F0               [24]  826 	movx	@dptr,a
                                    827 ;	src/main.c:107: UINT8 __xdata gpu8Data2[20] = {
      0000A9 90r00r41         [24]  828 	mov	dptr,#_gpu8Data2
      0000AC 74 02            [12]  829 	mov	a,#0x02
      0000AE F0               [24]  830 	movx	@dptr,a
      0000AF 90r00r42         [24]  831 	mov	dptr,#(_gpu8Data2 + 0x0001)
      0000B2 F0               [24]  832 	movx	@dptr,a
      0000B3 90r00r43         [24]  833 	mov	dptr,#(_gpu8Data2 + 0x0002)
      0000B6 F0               [24]  834 	movx	@dptr,a
      0000B7 90r00r44         [24]  835 	mov	dptr,#(_gpu8Data2 + 0x0003)
      0000BA F0               [24]  836 	movx	@dptr,a
      0000BB 90r00r45         [24]  837 	mov	dptr,#(_gpu8Data2 + 0x0004)
      0000BE 14               [12]  838 	dec	a
      0000BF F0               [24]  839 	movx	@dptr,a
      0000C0 90r00r46         [24]  840 	mov	dptr,#(_gpu8Data2 + 0x0005)
      0000C3 F0               [24]  841 	movx	@dptr,a
      0000C4 90r00r47         [24]  842 	mov	dptr,#(_gpu8Data2 + 0x0006)
      0000C7 F0               [24]  843 	movx	@dptr,a
      0000C8 90r00r48         [24]  844 	mov	dptr,#(_gpu8Data2 + 0x0007)
      0000CB F0               [24]  845 	movx	@dptr,a
      0000CC 90r00r49         [24]  846 	mov	dptr,#(_gpu8Data2 + 0x0008)
      0000CF 74 04            [12]  847 	mov	a,#0x04
      0000D1 F0               [24]  848 	movx	@dptr,a
      0000D2 90r00r4A         [24]  849 	mov	dptr,#(_gpu8Data2 + 0x0009)
      0000D5 F0               [24]  850 	movx	@dptr,a
      0000D6 90r00r4B         [24]  851 	mov	dptr,#(_gpu8Data2 + 0x000a)
      0000D9 F0               [24]  852 	movx	@dptr,a
      0000DA 90r00r4C         [24]  853 	mov	dptr,#(_gpu8Data2 + 0x000b)
      0000DD F0               [24]  854 	movx	@dptr,a
      0000DE 90r00r4D         [24]  855 	mov	dptr,#(_gpu8Data2 + 0x000c)
      0000E1 14               [12]  856 	dec	a
      0000E2 F0               [24]  857 	movx	@dptr,a
      0000E3 90r00r4E         [24]  858 	mov	dptr,#(_gpu8Data2 + 0x000d)
      0000E6 F0               [24]  859 	movx	@dptr,a
      0000E7 90r00r4F         [24]  860 	mov	dptr,#(_gpu8Data2 + 0x000e)
      0000EA F0               [24]  861 	movx	@dptr,a
      0000EB 90r00r50         [24]  862 	mov	dptr,#(_gpu8Data2 + 0x000f)
      0000EE F0               [24]  863 	movx	@dptr,a
      0000EF 90r00r51         [24]  864 	mov	dptr,#(_gpu8Data2 + 0x0010)
      0000F2 74 05            [12]  865 	mov	a,#0x05
      0000F4 F0               [24]  866 	movx	@dptr,a
      0000F5 90r00r52         [24]  867 	mov	dptr,#(_gpu8Data2 + 0x0011)
      0000F8 F0               [24]  868 	movx	@dptr,a
      0000F9 90r00r53         [24]  869 	mov	dptr,#(_gpu8Data2 + 0x0012)
      0000FC F0               [24]  870 	movx	@dptr,a
      0000FD 90r00r54         [24]  871 	mov	dptr,#(_gpu8Data2 + 0x0013)
      000100 F0               [24]  872 	movx	@dptr,a
                                    873 ;	src/main.c:114: UINT8 __xdata gpu8Data3[28] = {
      000101 90r00r55         [24]  874 	mov	dptr,#_gpu8Data3
      000104 74 02            [12]  875 	mov	a,#0x02
      000106 F0               [24]  876 	movx	@dptr,a
      000107 90r00r56         [24]  877 	mov	dptr,#(_gpu8Data3 + 0x0001)
      00010A 74 FF            [12]  878 	mov	a,#0xff
      00010C F0               [24]  879 	movx	@dptr,a
      00010D 90r00r57         [24]  880 	mov	dptr,#(_gpu8Data3 + 0x0002)
      000110 F0               [24]  881 	movx	@dptr,a
      000111 90r00r58         [24]  882 	mov	dptr,#(_gpu8Data3 + 0x0003)
      000114 74 02            [12]  883 	mov	a,#0x02
      000116 F0               [24]  884 	movx	@dptr,a
      000117 90r00r59         [24]  885 	mov	dptr,#(_gpu8Data3 + 0x0004)
      00011A 14               [12]  886 	dec	a
      00011B F0               [24]  887 	movx	@dptr,a
      00011C 90r00r5A         [24]  888 	mov	dptr,#(_gpu8Data3 + 0x0005)
      00011F F0               [24]  889 	movx	@dptr,a
      000120 90r00r5B         [24]  890 	mov	dptr,#(_gpu8Data3 + 0x0006)
      000123 F0               [24]  891 	movx	@dptr,a
      000124 90r00r5C         [24]  892 	mov	dptr,#(_gpu8Data3 + 0x0007)
      000127 F0               [24]  893 	movx	@dptr,a
      000128 90r00r5D         [24]  894 	mov	dptr,#(_gpu8Data3 + 0x0008)
      00012B 74 04            [12]  895 	mov	a,#0x04
      00012D F0               [24]  896 	movx	@dptr,a
      00012E 90r00r5E         [24]  897 	mov	dptr,#(_gpu8Data3 + 0x0009)
      000131 F0               [24]  898 	movx	@dptr,a
      000132 90r00r5F         [24]  899 	mov	dptr,#(_gpu8Data3 + 0x000a)
      000135 F0               [24]  900 	movx	@dptr,a
      000136 90r00r60         [24]  901 	mov	dptr,#(_gpu8Data3 + 0x000b)
      000139 F0               [24]  902 	movx	@dptr,a
      00013A 90r00r61         [24]  903 	mov	dptr,#(_gpu8Data3 + 0x000c)
      00013D 14               [12]  904 	dec	a
      00013E F0               [24]  905 	movx	@dptr,a
      00013F 90r00r62         [24]  906 	mov	dptr,#(_gpu8Data3 + 0x000d)
      000142 F0               [24]  907 	movx	@dptr,a
      000143 90r00r63         [24]  908 	mov	dptr,#(_gpu8Data3 + 0x000e)
      000146 F0               [24]  909 	movx	@dptr,a
      000147 90r00r64         [24]  910 	mov	dptr,#(_gpu8Data3 + 0x000f)
      00014A F0               [24]  911 	movx	@dptr,a
      00014B 90r00r65         [24]  912 	mov	dptr,#(_gpu8Data3 + 0x0010)
      00014E 74 05            [12]  913 	mov	a,#0x05
      000150 F0               [24]  914 	movx	@dptr,a
      000151 90r00r66         [24]  915 	mov	dptr,#(_gpu8Data3 + 0x0011)
      000154 F0               [24]  916 	movx	@dptr,a
      000155 90r00r67         [24]  917 	mov	dptr,#(_gpu8Data3 + 0x0012)
      000158 F0               [24]  918 	movx	@dptr,a
      000159 90r00r68         [24]  919 	mov	dptr,#(_gpu8Data3 + 0x0013)
      00015C F0               [24]  920 	movx	@dptr,a
      00015D 90r00r69         [24]  921 	mov	dptr,#(_gpu8Data3 + 0x0014)
      000160 F0               [24]  922 	movx	@dptr,a
      000161 90r00r6A         [24]  923 	mov	dptr,#(_gpu8Data3 + 0x0015)
      000164 F0               [24]  924 	movx	@dptr,a
      000165 90r00r6B         [24]  925 	mov	dptr,#(_gpu8Data3 + 0x0016)
      000168 F0               [24]  926 	movx	@dptr,a
      000169 90r00r6C         [24]  927 	mov	dptr,#(_gpu8Data3 + 0x0017)
      00016C F0               [24]  928 	movx	@dptr,a
      00016D 90r00r6D         [24]  929 	mov	dptr,#(_gpu8Data3 + 0x0018)
      000170 F0               [24]  930 	movx	@dptr,a
      000171 90r00r6E         [24]  931 	mov	dptr,#(_gpu8Data3 + 0x0019)
      000174 F0               [24]  932 	movx	@dptr,a
      000175 90r00r6F         [24]  933 	mov	dptr,#(_gpu8Data3 + 0x001a)
      000178 F0               [24]  934 	movx	@dptr,a
      000179 90r00r70         [24]  935 	mov	dptr,#(_gpu8Data3 + 0x001b)
      00017C F0               [24]  936 	movx	@dptr,a
                                    937 ;	src/main.c:128: UINT32 __xdata gpu32UartSpeed[] = {
      00017D 90r00r75         [24]  938 	mov	dptr,#_gpu32UartSpeed
      000180 74 60            [12]  939 	mov	a,#0x60
      000182 F0               [24]  940 	movx	@dptr,a
      000183 74 09            [12]  941 	mov	a,#0x09
      000185 A3               [24]  942 	inc	dptr
      000186 F0               [24]  943 	movx	@dptr,a
      000187 E4               [12]  944 	clr	a
      000188 A3               [24]  945 	inc	dptr
      000189 F0               [24]  946 	movx	@dptr,a
      00018A A3               [24]  947 	inc	dptr
      00018B F0               [24]  948 	movx	@dptr,a
      00018C 90r00r79         [24]  949 	mov	dptr,#(_gpu32UartSpeed + 0x0004)
      00018F 74 80            [12]  950 	mov	a,#0x80
      000191 F0               [24]  951 	movx	@dptr,a
      000192 74 70            [12]  952 	mov	a,#0x70
      000194 A3               [24]  953 	inc	dptr
      000195 F0               [24]  954 	movx	@dptr,a
      000196 E4               [12]  955 	clr	a
      000197 A3               [24]  956 	inc	dptr
      000198 F0               [24]  957 	movx	@dptr,a
      000199 A3               [24]  958 	inc	dptr
      00019A F0               [24]  959 	movx	@dptr,a
      00019B 90r00r7D         [24]  960 	mov	dptr,#(_gpu32UartSpeed + 0x0008)
      00019E F0               [24]  961 	movx	@dptr,a
      00019F 74 96            [12]  962 	mov	a,#0x96
      0001A1 A3               [24]  963 	inc	dptr
      0001A2 F0               [24]  964 	movx	@dptr,a
      0001A3 E4               [12]  965 	clr	a
      0001A4 A3               [24]  966 	inc	dptr
      0001A5 F0               [24]  967 	movx	@dptr,a
      0001A6 A3               [24]  968 	inc	dptr
      0001A7 F0               [24]  969 	movx	@dptr,a
      0001A8 90r00r81         [24]  970 	mov	dptr,#(_gpu32UartSpeed + 0x000c)
      0001AB F0               [24]  971 	movx	@dptr,a
      0001AC 74 E1            [12]  972 	mov	a,#0xe1
      0001AE A3               [24]  973 	inc	dptr
      0001AF F0               [24]  974 	movx	@dptr,a
      0001B0 E4               [12]  975 	clr	a
      0001B1 A3               [24]  976 	inc	dptr
      0001B2 F0               [24]  977 	movx	@dptr,a
      0001B3 A3               [24]  978 	inc	dptr
      0001B4 F0               [24]  979 	movx	@dptr,a
      0001B5 90r00r85         [24]  980 	mov	dptr,#(_gpu32UartSpeed + 0x0010)
      0001B8 F0               [24]  981 	movx	@dptr,a
      0001B9 74 C2            [12]  982 	mov	a,#0xc2
      0001BB A3               [24]  983 	inc	dptr
      0001BC F0               [24]  984 	movx	@dptr,a
      0001BD 74 01            [12]  985 	mov	a,#0x01
      0001BF A3               [24]  986 	inc	dptr
      0001C0 F0               [24]  987 	movx	@dptr,a
      0001C1 E4               [12]  988 	clr	a
      0001C2 A3               [24]  989 	inc	dptr
      0001C3 F0               [24]  990 	movx	@dptr,a
      0001C4 90r00r89         [24]  991 	mov	dptr,#(_gpu32UartSpeed + 0x0014)
      0001C7 F0               [24]  992 	movx	@dptr,a
      0001C8 74 84            [12]  993 	mov	a,#0x84
      0001CA A3               [24]  994 	inc	dptr
      0001CB F0               [24]  995 	movx	@dptr,a
      0001CC 74 03            [12]  996 	mov	a,#0x03
      0001CE A3               [24]  997 	inc	dptr
      0001CF F0               [24]  998 	movx	@dptr,a
      0001D0 E4               [12]  999 	clr	a
      0001D1 A3               [24] 1000 	inc	dptr
      0001D2 F0               [24] 1001 	movx	@dptr,a
      0001D3 90r00r8D         [24] 1002 	mov	dptr,#(_gpu32UartSpeed + 0x0018)
      0001D6 74 E0            [12] 1003 	mov	a,#0xe0
      0001D8 F0               [24] 1004 	movx	@dptr,a
      0001D9 74 93            [12] 1005 	mov	a,#0x93
      0001DB A3               [24] 1006 	inc	dptr
      0001DC F0               [24] 1007 	movx	@dptr,a
      0001DD 74 04            [12] 1008 	mov	a,#0x04
      0001DF A3               [24] 1009 	inc	dptr
      0001E0 F0               [24] 1010 	movx	@dptr,a
      0001E1 E4               [12] 1011 	clr	a
      0001E2 A3               [24] 1012 	inc	dptr
      0001E3 F0               [24] 1013 	movx	@dptr,a
      0001E4 90r00r91         [24] 1014 	mov	dptr,#(_gpu32UartSpeed + 0x001c)
      0001E7 F0               [24] 1015 	movx	@dptr,a
      0001E8 74 08            [12] 1016 	mov	a,#0x08
      0001EA A3               [24] 1017 	inc	dptr
      0001EB F0               [24] 1018 	movx	@dptr,a
      0001EC 14               [12] 1019 	dec	a
      0001ED A3               [24] 1020 	inc	dptr
      0001EE F0               [24] 1021 	movx	@dptr,a
      0001EF E4               [12] 1022 	clr	a
      0001F0 A3               [24] 1023 	inc	dptr
      0001F1 F0               [24] 1024 	movx	@dptr,a
      0001F2 90r00r95         [24] 1025 	mov	dptr,#(_gpu32UartSpeed + 0x0020)
      0001F5 74 20            [12] 1026 	mov	a,#0x20
      0001F7 F0               [24] 1027 	movx	@dptr,a
      0001F8 74 A1            [12] 1028 	mov	a,#0xa1
      0001FA A3               [24] 1029 	inc	dptr
      0001FB F0               [24] 1030 	movx	@dptr,a
      0001FC 74 07            [12] 1031 	mov	a,#0x07
      0001FE A3               [24] 1032 	inc	dptr
      0001FF F0               [24] 1033 	movx	@dptr,a
      000200 E4               [12] 1034 	clr	a
      000201 A3               [24] 1035 	inc	dptr
      000202 F0               [24] 1036 	movx	@dptr,a
      000203 90r00r99         [24] 1037 	mov	dptr,#(_gpu32UartSpeed + 0x0024)
      000206 74 C0            [12] 1038 	mov	a,#0xc0
      000208 F0               [24] 1039 	movx	@dptr,a
      000209 74 27            [12] 1040 	mov	a,#0x27
      00020B A3               [24] 1041 	inc	dptr
      00020C F0               [24] 1042 	movx	@dptr,a
      00020D 74 09            [12] 1043 	mov	a,#0x09
      00020F A3               [24] 1044 	inc	dptr
      000210 F0               [24] 1045 	movx	@dptr,a
      000211 E4               [12] 1046 	clr	a
      000212 A3               [24] 1047 	inc	dptr
      000213 F0               [24] 1048 	movx	@dptr,a
      000214 90r00r9D         [24] 1049 	mov	dptr,#(_gpu32UartSpeed + 0x0028)
      000217 74 60            [12] 1050 	mov	a,#0x60
      000219 F0               [24] 1051 	movx	@dptr,a
      00021A 74 AE            [12] 1052 	mov	a,#0xae
      00021C A3               [24] 1053 	inc	dptr
      00021D F0               [24] 1054 	movx	@dptr,a
      00021E 74 0A            [12] 1055 	mov	a,#0x0a
      000220 A3               [24] 1056 	inc	dptr
      000221 F0               [24] 1057 	movx	@dptr,a
      000222 E4               [12] 1058 	clr	a
      000223 A3               [24] 1059 	inc	dptr
      000224 F0               [24] 1060 	movx	@dptr,a
      000225 90r00rA1         [24] 1061 	mov	dptr,#(_gpu32UartSpeed + 0x002c)
      000228 F0               [24] 1062 	movx	@dptr,a
      000229 74 35            [12] 1063 	mov	a,#0x35
      00022B A3               [24] 1064 	inc	dptr
      00022C F0               [24] 1065 	movx	@dptr,a
      00022D 74 0C            [12] 1066 	mov	a,#0x0c
      00022F A3               [24] 1067 	inc	dptr
      000230 F0               [24] 1068 	movx	@dptr,a
      000231 E4               [12] 1069 	clr	a
      000232 A3               [24] 1070 	inc	dptr
      000233 F0               [24] 1071 	movx	@dptr,a
      000234 90r00rA5         [24] 1072 	mov	dptr,#(_gpu32UartSpeed + 0x0030)
      000237 74 A0            [12] 1073 	mov	a,#0xa0
      000239 F0               [24] 1074 	movx	@dptr,a
      00023A 74 BB            [12] 1075 	mov	a,#0xbb
      00023C A3               [24] 1076 	inc	dptr
      00023D F0               [24] 1077 	movx	@dptr,a
      00023E 74 0D            [12] 1078 	mov	a,#0x0d
      000240 A3               [24] 1079 	inc	dptr
      000241 F0               [24] 1080 	movx	@dptr,a
      000242 E4               [12] 1081 	clr	a
      000243 A3               [24] 1082 	inc	dptr
      000244 F0               [24] 1083 	movx	@dptr,a
      000245 90r00rA9         [24] 1084 	mov	dptr,#(_gpu32UartSpeed + 0x0034)
      000248 F0               [24] 1085 	movx	@dptr,a
      000249 74 10            [12] 1086 	mov	a,#0x10
      00024B A3               [24] 1087 	inc	dptr
      00024C F0               [24] 1088 	movx	@dptr,a
      00024D 74 0E            [12] 1089 	mov	a,#0x0e
      00024F A3               [24] 1090 	inc	dptr
      000250 F0               [24] 1091 	movx	@dptr,a
      000251 E4               [12] 1092 	clr	a
      000252 A3               [24] 1093 	inc	dptr
      000253 F0               [24] 1094 	movx	@dptr,a
                                   1095 	.area GSFINAL (CODE)
      000000 02r00r3E         [24] 1096 	ljmp	__sdcc_program_startup
                                   1097 ;--------------------------------------------------------
                                   1098 ; Home
                                   1099 ;--------------------------------------------------------
                                   1100 	.area HOME    (CODE)
                                   1101 	.area HOME    (CODE)
      00003E                       1102 __sdcc_program_startup:
      00003E 02r0Er04         [24] 1103 	ljmp	_main
                                   1104 ;	return from main will return to caller
                                   1105 ;--------------------------------------------------------
                                   1106 ; code
                                   1107 ;--------------------------------------------------------
                                   1108 	.area CSEG    (CODE)
                                   1109 ;------------------------------------------------------------
                                   1110 ;Allocation info for local variables in function 'putchar'
                                   1111 ;------------------------------------------------------------
                                   1112 ;c                         Allocated to registers r6 r7 
                                   1113 ;------------------------------------------------------------
                                   1114 ;	src/main.c:148: int putchar (int c) 
                                   1115 ;	-----------------------------------------
                                   1116 ;	 function putchar
                                   1117 ;	-----------------------------------------
      000000                       1118 _putchar:
                           000007  1119 	ar7 = 0x07
                           000006  1120 	ar6 = 0x06
                           000005  1121 	ar5 = 0x05
                           000004  1122 	ar4 = 0x04
                           000003  1123 	ar3 = 0x03
                           000002  1124 	ar2 = 0x02
                           000001  1125 	ar1 = 0x01
                           000000  1126 	ar0 = 0x00
      000000 AE 82            [24] 1127 	mov	r6,dpl
                                   1128 ;	src/main.c:150: if (gu8UART == 0)  {
      000002 E5*00            [12] 1129 	mov	a,_gu8UART
      000004 70 09            [24] 1130 	jnz	00108$
                                   1131 ;	src/main.c:151: TI = 0;
                                   1132 ;	assignBit
      000006 C2 99            [12] 1133 	clr	_TI
                                   1134 ;	src/main.c:152: SBUF = c;
      000008 8E 99            [24] 1135 	mov	_SBUF,r6
                                   1136 ;	src/main.c:153: while(TI==0);
      00000A                       1137 00101$:
      00000A 20 99 09         [24] 1138 	jb	_TI,00109$
      00000D 80 FB            [24] 1139 	sjmp	00101$
      00000F                       1140 00108$:
                                   1141 ;	src/main.c:156: TI_1 = 0;
                                   1142 ;	assignBit
      00000F C2 F9            [12] 1143 	clr	_TI_1
                                   1144 ;	src/main.c:157: SBUF_1 = c;
      000011 8E 9A            [24] 1145 	mov	_SBUF_1,r6
                                   1146 ;	src/main.c:158: while(TI_1==0);
      000013                       1147 00104$:
      000013 30 F9 FD         [24] 1148 	jnb	_TI_1,00104$
      000016                       1149 00109$:
                                   1150 ;	src/main.c:160: return 0;
      000016 90 00 00         [24] 1151 	mov	dptr,#0x0000
                                   1152 ;	src/main.c:161: }
      000019 22               [24] 1153 	ret
                                   1154 ;------------------------------------------------------------
                                   1155 ;Allocation info for local variables in function 'print_esc'
                                   1156 ;------------------------------------------------------------
                                   1157 ;au8State                  Allocated to registers r7 
                                   1158 ;------------------------------------------------------------
                                   1159 ;	src/main.c:178: void print_esc(UINT8 au8State)
                                   1160 ;	-----------------------------------------
                                   1161 ;	 function print_esc
                                   1162 ;	-----------------------------------------
      00001A                       1163 _print_esc:
      00001A AF 82            [24] 1164 	mov	r7,dpl
                                   1165 ;	src/main.c:180: printf_fast_f("\n\r");
      00001C C0 07            [24] 1166 	push	ar7
      00001E 74r00            [12] 1167 	mov	a,#___str_0
      000020 C0 E0            [24] 1168 	push	acc
      000022 74s00            [12] 1169 	mov	a,#(___str_0 >> 8)
      000024 C0 E0            [24] 1170 	push	acc
      000026 12r00r00         [24] 1171 	lcall	_printf_fast_f
      000029 15 81            [12] 1172 	dec	sp
      00002B 15 81            [12] 1173 	dec	sp
      00002D D0 07            [24] 1174 	pop	ar7
                                   1175 ;	src/main.c:181: switch(au8State) {
      00002F BF 00 02         [24] 1176 	cjne	r7,#0x00,00119$
      000032 80 0A            [24] 1177 	sjmp	00101$
      000034                       1178 00119$:
      000034 BF 01 02         [24] 1179 	cjne	r7,#0x01,00120$
      000037 80 16            [24] 1180 	sjmp	00102$
      000039                       1181 00120$:
                                   1182 ;	src/main.c:182: case STATE_SELF :
      000039 BF 02 33         [24] 1183 	cjne	r7,#0x02,00104$
      00003C 80 22            [24] 1184 	sjmp	00103$
      00003E                       1185 00101$:
                                   1186 ;	src/main.c:183: printf_fast_f("self ");
      00003E 74r03            [12] 1187 	mov	a,#___str_1
      000040 C0 E0            [24] 1188 	push	acc
      000042 74s00            [12] 1189 	mov	a,#(___str_1 >> 8)
      000044 C0 E0            [24] 1190 	push	acc
      000046 12r00r00         [24] 1191 	lcall	_printf_fast_f
      000049 15 81            [12] 1192 	dec	sp
      00004B 15 81            [12] 1193 	dec	sp
                                   1194 ;	src/main.c:184: break;
                                   1195 ;	src/main.c:185: case STATE_CROSS :
      00004D 80 20            [24] 1196 	sjmp	00104$
      00004F                       1197 00102$:
                                   1198 ;	src/main.c:186: printf_fast_f("cross");
      00004F 74r09            [12] 1199 	mov	a,#___str_2
      000051 C0 E0            [24] 1200 	push	acc
      000053 74s00            [12] 1201 	mov	a,#(___str_2 >> 8)
      000055 C0 E0            [24] 1202 	push	acc
      000057 12r00r00         [24] 1203 	lcall	_printf_fast_f
      00005A 15 81            [12] 1204 	dec	sp
      00005C 15 81            [12] 1205 	dec	sp
                                   1206 ;	src/main.c:187: break;
                                   1207 ;	src/main.c:188: case STATE_BOTH :
      00005E 80 0F            [24] 1208 	sjmp	00104$
      000060                       1209 00103$:
                                   1210 ;	src/main.c:189: printf_fast_f("both ");
      000060 74r0F            [12] 1211 	mov	a,#___str_3
      000062 C0 E0            [24] 1212 	push	acc
      000064 74s00            [12] 1213 	mov	a,#(___str_3 >> 8)
      000066 C0 E0            [24] 1214 	push	acc
      000068 12r00r00         [24] 1215 	lcall	_printf_fast_f
      00006B 15 81            [12] 1216 	dec	sp
      00006D 15 81            [12] 1217 	dec	sp
                                   1218 ;	src/main.c:191: }
      00006F                       1219 00104$:
                                   1220 ;	src/main.c:192: printf_fast_f(" output:This is UART%d\n\r", gu8UART);
      00006F AE*00            [24] 1221 	mov	r6,_gu8UART
      000071 7F 00            [12] 1222 	mov	r7,#0x00
      000073 C0 06            [24] 1223 	push	ar6
      000075 C0 07            [24] 1224 	push	ar7
      000077 74r15            [12] 1225 	mov	a,#___str_4
      000079 C0 E0            [24] 1226 	push	acc
      00007B 74s00            [12] 1227 	mov	a,#(___str_4 >> 8)
      00007D C0 E0            [24] 1228 	push	acc
      00007F 12r00r00         [24] 1229 	lcall	_printf_fast_f
      000082 E5 81            [12] 1230 	mov	a,sp
      000084 24 FC            [12] 1231 	add	a,#0xfc
      000086 F5 81            [12] 1232 	mov	sp,a
                                   1233 ;	src/main.c:193: }
      000088 22               [24] 1234 	ret
                                   1235 ;------------------------------------------------------------
                                   1236 ;Allocation info for local variables in function 'print_char'
                                   1237 ;------------------------------------------------------------
                                   1238 ;au8Data                   Allocated to registers r7 
                                   1239 ;------------------------------------------------------------
                                   1240 ;	src/main.c:195: void print_char(char au8Data)
                                   1241 ;	-----------------------------------------
                                   1242 ;	 function print_char
                                   1243 ;	-----------------------------------------
      000089                       1244 _print_char:
      000089 AF 82            [24] 1245 	mov	r7,dpl
                                   1246 ;	src/main.c:197: switch(au8Data) {
      00008B BF 0D 02         [24] 1247 	cjne	r7,#0x0d,00115$
      00008E 80 04            [24] 1248 	sjmp	00102$
      000090                       1249 00115$:
      000090 BF 1B 11         [24] 1250 	cjne	r7,#0x1b,00103$
                                   1251 ;	src/main.c:199: break;
                                   1252 ;	src/main.c:200: case '\r' :
      000093 22               [24] 1253 	ret
      000094                       1254 00102$:
                                   1255 ;	src/main.c:201: printf_fast_f("\r\n");
      000094 74r2E            [12] 1256 	mov	a,#___str_5
      000096 C0 E0            [24] 1257 	push	acc
      000098 74s00            [12] 1258 	mov	a,#(___str_5 >> 8)
      00009A C0 E0            [24] 1259 	push	acc
      00009C 12r00r00         [24] 1260 	lcall	_printf_fast_f
      00009F 15 81            [12] 1261 	dec	sp
      0000A1 15 81            [12] 1262 	dec	sp
                                   1263 ;	src/main.c:202: break;
                                   1264 ;	src/main.c:203: default :
      0000A3 22               [24] 1265 	ret
      0000A4                       1266 00103$:
                                   1267 ;	src/main.c:204: printf_fast_f("%c",au8Data);
      0000A4 7E 00            [12] 1268 	mov	r6,#0x00
      0000A6 C0 07            [24] 1269 	push	ar7
      0000A8 C0 06            [24] 1270 	push	ar6
      0000AA 74r31            [12] 1271 	mov	a,#___str_6
      0000AC C0 E0            [24] 1272 	push	acc
      0000AE 74s00            [12] 1273 	mov	a,#(___str_6 >> 8)
      0000B0 C0 E0            [24] 1274 	push	acc
      0000B2 12r00r00         [24] 1275 	lcall	_printf_fast_f
      0000B5 E5 81            [12] 1276 	mov	a,sp
      0000B7 24 FC            [12] 1277 	add	a,#0xfc
      0000B9 F5 81            [12] 1278 	mov	sp,a
                                   1279 ;	src/main.c:205: }
                                   1280 ;	src/main.c:206: }
      0000BB 22               [24] 1281 	ret
                                   1282 ;------------------------------------------------------------
                                   1283 ;Allocation info for local variables in function 'state_machine'
                                   1284 ;------------------------------------------------------------
                                   1285 ;au8RxUART                 Allocated with name '_state_machine_PARM_2'
                                   1286 ;au8SelfID                 Allocated with name '_state_machine_PARM_3'
                                   1287 ;au8OtherID                Allocated with name '_state_machine_PARM_4'
                                   1288 ;au8State                  Allocated to registers r7 
                                   1289 ;------------------------------------------------------------
                                   1290 ;	src/main.c:208: UINT8 state_machine(UINT8 au8State, UINT8 au8RxUART, UINT8 au8SelfID, UINT8 au8OtherID)
                                   1291 ;	-----------------------------------------
                                   1292 ;	 function state_machine
                                   1293 ;	-----------------------------------------
      0000BC                       1294 _state_machine:
      0000BC AF 82            [24] 1295 	mov	r7,dpl
                                   1296 ;	src/main.c:210: if(au8RxUART == KEY_ESC) {
      0000BE 74 1B            [12] 1297 	mov	a,#0x1b
      0000C0 B5*01 02         [24] 1298 	cjne	a,_state_machine_PARM_2,00142$
      0000C3 80 02            [24] 1299 	sjmp	00143$
      0000C5                       1300 00142$:
      0000C5 80 79            [24] 1301 	sjmp	00110$
      0000C7                       1302 00143$:
                                   1303 ;	src/main.c:211: gu8UART = au8SelfID;
      0000C7 AE*02            [24] 1304 	mov	r6,_state_machine_PARM_3
      0000C9 8E*00            [24] 1305 	mov	_gu8UART,r6
                                   1306 ;	src/main.c:212: printf_fast_f("\r\ninput:This is UART%d", gu8UART);
      0000CB AC*00            [24] 1307 	mov	r4,_gu8UART
      0000CD 7D 00            [12] 1308 	mov	r5,#0x00
      0000CF C0 07            [24] 1309 	push	ar7
      0000D1 C0 06            [24] 1310 	push	ar6
      0000D3 C0 04            [24] 1311 	push	ar4
      0000D5 C0 05            [24] 1312 	push	ar5
      0000D7 74r34            [12] 1313 	mov	a,#___str_7
      0000D9 C0 E0            [24] 1314 	push	acc
      0000DB 74s00            [12] 1315 	mov	a,#(___str_7 >> 8)
      0000DD C0 E0            [24] 1316 	push	acc
      0000DF 12r00r00         [24] 1317 	lcall	_printf_fast_f
      0000E2 E5 81            [12] 1318 	mov	a,sp
      0000E4 24 FC            [12] 1319 	add	a,#0xfc
      0000E6 F5 81            [12] 1320 	mov	sp,a
      0000E8 D0 06            [24] 1321 	pop	ar6
      0000EA D0 07            [24] 1322 	pop	ar7
                                   1323 ;	src/main.c:213: switch(au8State) {
      0000EC BF 00 02         [24] 1324 	cjne	r7,#0x00,00144$
      0000EF 80 0D            [24] 1325 	sjmp	00101$
      0000F1                       1326 00144$:
      0000F1 BF 01 02         [24] 1327 	cjne	r7,#0x01,00145$
      0000F4 80 21            [24] 1328 	sjmp	00102$
      0000F6                       1329 00145$:
      0000F6 BF 02 02         [24] 1330 	cjne	r7,#0x02,00146$
      0000F9 80 35            [24] 1331 	sjmp	00103$
      0000FB                       1332 00146$:
      0000FB 02r01r83         [24] 1333 	ljmp	00111$
                                   1334 ;	src/main.c:214: case STATE_SELF :
      0000FE                       1335 00101$:
                                   1336 ;	src/main.c:215: au8State = STATE_CROSS;
      0000FE 7F 01            [12] 1337 	mov	r7,#0x01
                                   1338 ;	src/main.c:216: gu8UART = au8SelfID;
      000100 8E*00            [24] 1339 	mov	_gu8UART,r6
                                   1340 ;	src/main.c:217: print_esc(au8State);
      000102 75 82 01         [24] 1341 	mov	dpl,#0x01
      000105 C0 07            [24] 1342 	push	ar7
      000107 12r00r1A         [24] 1343 	lcall	_print_esc
                                   1344 ;	src/main.c:218: gu8UART = au8OtherID;
      00010A 85*03*00         [24] 1345 	mov	_gu8UART,_state_machine_PARM_4
                                   1346 ;	src/main.c:219: print_esc(au8State);
      00010D 75 82 01         [24] 1347 	mov	dpl,#0x01
      000110 12r00r1A         [24] 1348 	lcall	_print_esc
      000113 D0 07            [24] 1349 	pop	ar7
                                   1350 ;	src/main.c:220: break;
                                   1351 ;	src/main.c:221: case STATE_CROSS :
      000115 80 6C            [24] 1352 	sjmp	00111$
      000117                       1353 00102$:
                                   1354 ;	src/main.c:222: au8State = STATE_BOTH;
      000117 7F 02            [12] 1355 	mov	r7,#0x02
                                   1356 ;	src/main.c:223: gu8UART = au8SelfID;
      000119 8E*00            [24] 1357 	mov	_gu8UART,r6
                                   1358 ;	src/main.c:224: print_esc(au8State);
      00011B 75 82 02         [24] 1359 	mov	dpl,#0x02
      00011E C0 07            [24] 1360 	push	ar7
      000120 12r00r1A         [24] 1361 	lcall	_print_esc
                                   1362 ;	src/main.c:225: gu8UART = au8OtherID;
      000123 85*03*00         [24] 1363 	mov	_gu8UART,_state_machine_PARM_4
                                   1364 ;	src/main.c:226: print_esc(au8State);
      000126 75 82 02         [24] 1365 	mov	dpl,#0x02
      000129 12r00r1A         [24] 1366 	lcall	_print_esc
      00012C D0 07            [24] 1367 	pop	ar7
                                   1368 ;	src/main.c:227: break;
                                   1369 ;	src/main.c:228: case STATE_BOTH :
      00012E 80 53            [24] 1370 	sjmp	00111$
      000130                       1371 00103$:
                                   1372 ;	src/main.c:229: au8State = STATE_SELF;
      000130 7F 00            [12] 1373 	mov	r7,#0x00
                                   1374 ;	src/main.c:230: gu8UART = au8SelfID;
      000132 8E*00            [24] 1375 	mov	_gu8UART,r6
                                   1376 ;	src/main.c:231: print_esc(au8State);
      000134 75 82 00         [24] 1377 	mov	dpl,#0x00
      000137 C0 07            [24] 1378 	push	ar7
      000139 12r00r1A         [24] 1379 	lcall	_print_esc
      00013C D0 07            [24] 1380 	pop	ar7
                                   1381 ;	src/main.c:233: }
      00013E 80 43            [24] 1382 	sjmp	00111$
      000140                       1383 00110$:
                                   1384 ;	src/main.c:236: switch(au8State) {
      000140 BF 00 02         [24] 1385 	cjne	r7,#0x00,00147$
      000143 80 0A            [24] 1386 	sjmp	00105$
      000145                       1387 00147$:
      000145 BF 01 02         [24] 1388 	cjne	r7,#0x01,00148$
      000148 80 14            [24] 1389 	sjmp	00106$
      00014A                       1390 00148$:
                                   1391 ;	src/main.c:237: case STATE_SELF :
      00014A BF 02 36         [24] 1392 	cjne	r7,#0x02,00111$
      00014D 80 1E            [24] 1393 	sjmp	00107$
      00014F                       1394 00105$:
                                   1395 ;	src/main.c:238: gu8UART = au8SelfID;
      00014F 85*02*00         [24] 1396 	mov	_gu8UART,_state_machine_PARM_3
                                   1397 ;	src/main.c:239: print_char(au8RxUART);
      000152 85*01 82         [24] 1398 	mov	dpl,_state_machine_PARM_2
      000155 C0 07            [24] 1399 	push	ar7
      000157 12r00r89         [24] 1400 	lcall	_print_char
      00015A D0 07            [24] 1401 	pop	ar7
                                   1402 ;	src/main.c:240: break;
                                   1403 ;	src/main.c:241: case STATE_CROSS :
      00015C 80 25            [24] 1404 	sjmp	00111$
      00015E                       1405 00106$:
                                   1406 ;	src/main.c:242: gu8UART = au8OtherID;
      00015E 85*03*00         [24] 1407 	mov	_gu8UART,_state_machine_PARM_4
                                   1408 ;	src/main.c:243: print_char(au8RxUART);
      000161 85*01 82         [24] 1409 	mov	dpl,_state_machine_PARM_2
      000164 C0 07            [24] 1410 	push	ar7
      000166 12r00r89         [24] 1411 	lcall	_print_char
      000169 D0 07            [24] 1412 	pop	ar7
                                   1413 ;	src/main.c:244: break;
                                   1414 ;	src/main.c:245: case STATE_BOTH :
      00016B 80 16            [24] 1415 	sjmp	00111$
      00016D                       1416 00107$:
                                   1417 ;	src/main.c:246: gu8UART = au8SelfID;
      00016D 85*02*00         [24] 1418 	mov	_gu8UART,_state_machine_PARM_3
                                   1419 ;	src/main.c:247: print_char(au8RxUART);
      000170 85*01 82         [24] 1420 	mov	dpl,_state_machine_PARM_2
      000173 C0 07            [24] 1421 	push	ar7
      000175 12r00r89         [24] 1422 	lcall	_print_char
                                   1423 ;	src/main.c:248: gu8UART = au8OtherID;
      000178 85*03*00         [24] 1424 	mov	_gu8UART,_state_machine_PARM_4
                                   1425 ;	src/main.c:249: print_char(au8RxUART);
      00017B 85*01 82         [24] 1426 	mov	dpl,_state_machine_PARM_2
      00017E 12r00r89         [24] 1427 	lcall	_print_char
      000181 D0 07            [24] 1428 	pop	ar7
                                   1429 ;	src/main.c:251: }
      000183                       1430 00111$:
                                   1431 ;	src/main.c:253: return au8State;
      000183 8F 82            [24] 1432 	mov	dpl,r7
                                   1433 ;	src/main.c:254: }
      000185 22               [24] 1434 	ret
                                   1435 ;------------------------------------------------------------
                                   1436 ;Allocation info for local variables in function 'Timer0_ISR'
                                   1437 ;------------------------------------------------------------
                                   1438 ;	src/main.c:256: void Timer0_ISR (void) interrupt(1)  //interrupt address is 0x000B
                                   1439 ;	-----------------------------------------
                                   1440 ;	 function Timer0_ISR
                                   1441 ;	-----------------------------------------
      000186                       1442 _Timer0_ISR:
                           00000F  1443 	ar7 = 0x0f
                           00000E  1444 	ar6 = 0x0e
                           00000D  1445 	ar5 = 0x0d
                           00000C  1446 	ar4 = 0x0c
                           00000B  1447 	ar3 = 0x0b
                           00000A  1448 	ar2 = 0x0a
                           000009  1449 	ar1 = 0x09
                           000008  1450 	ar0 = 0x08
      000186 C0 E0            [24] 1451 	push	acc
      000188 C0 82            [24] 1452 	push	dpl
      00018A C0 83            [24] 1453 	push	dph
      00018C C0 D0            [24] 1454 	push	psw
                                   1455 ;	src/main.c:258: TH0 = TH0_INIT;
      00018E 75 8C D4         [24] 1456 	mov	_TH0,#0xd4
                                   1457 ;	src/main.c:259: TL0 = TL0_INIT;
      000191 75 8A 13         [24] 1458 	mov	_TL0,#0x13
                                   1459 ;	src/main.c:260: gu16TimeCnt++;
      000194 90r00r71         [24] 1460 	mov	dptr,#_gu16TimeCnt
      000197 E0               [24] 1461 	movx	a,@dptr
      000198 24 01            [12] 1462 	add	a,#0x01
      00019A F0               [24] 1463 	movx	@dptr,a
      00019B A3               [24] 1464 	inc	dptr
      00019C E0               [24] 1465 	movx	a,@dptr
      00019D 34 00            [12] 1466 	addc	a,#0x00
      00019F F0               [24] 1467 	movx	@dptr,a
                                   1468 ;	src/main.c:261: gu16TimeCntMilliSec++; // For periodic function
      0001A0 90r00r73         [24] 1469 	mov	dptr,#_gu16TimeCntMilliSec
      0001A3 E0               [24] 1470 	movx	a,@dptr
      0001A4 24 01            [12] 1471 	add	a,#0x01
      0001A6 F0               [24] 1472 	movx	@dptr,a
      0001A7 A3               [24] 1473 	inc	dptr
      0001A8 E0               [24] 1474 	movx	a,@dptr
      0001A9 34 00            [12] 1475 	addc	a,#0x00
      0001AB F0               [24] 1476 	movx	@dptr,a
                                   1477 ;	src/main.c:270: } //void Timer0_ISR (void) __interrupt 1  //interrupt address is 0x000B
      0001AC D0 D0            [24] 1478 	pop	psw
      0001AE D0 83            [24] 1479 	pop	dph
      0001B0 D0 82            [24] 1480 	pop	dpl
      0001B2 D0 E0            [24] 1481 	pop	acc
      0001B4 32               [24] 1482 	reti
                                   1483 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                   1484 ;	eliminated unneeded push/pop b
                                   1485 ;------------------------------------------------------------
                                   1486 ;Allocation info for local variables in function 'pin_interrupt_isr'
                                   1487 ;------------------------------------------------------------
                                   1488 ;	src/main.c:272: void pin_interrupt_isr(void) interrupt(7)
                                   1489 ;	-----------------------------------------
                                   1490 ;	 function pin_interrupt_isr
                                   1491 ;	-----------------------------------------
      0001B5                       1492 _pin_interrupt_isr:
      0001B5 C0 E0            [24] 1493 	push	acc
                                   1494 ;	src/main.c:274: if (PIF == 0x10) {
      0001B7 E5 EC            [12] 1495 	mov	a,_PIF
                                   1496 ;	src/main.c:276: PIF = 0;
      0001B9 75 EC 00         [24] 1497 	mov	_PIF,#0x00
                                   1498 ;	src/main.c:277: }// void pin_interrupt_isr (void) interrupt(7)
      0001BC D0 E0            [24] 1499 	pop	acc
      0001BE 32               [24] 1500 	reti
                                   1501 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                   1502 ;	eliminated unneeded push/pop psw
                                   1503 ;	eliminated unneeded push/pop dpl
                                   1504 ;	eliminated unneeded push/pop dph
                                   1505 ;	eliminated unneeded push/pop b
                                   1506 ;------------------------------------------------------------
                                   1507 ;Allocation info for local variables in function 'chk_manchester'
                                   1508 ;------------------------------------------------------------
                                   1509 ;c                         Allocated to registers r7 
                                   1510 ;i                         Allocated to registers r6 
                                   1511 ;------------------------------------------------------------
                                   1512 ;	src/main.c:279: UINT8 chk_manchester(UINT8 c)
                                   1513 ;	-----------------------------------------
                                   1514 ;	 function chk_manchester
                                   1515 ;	-----------------------------------------
      0001BF                       1516 _chk_manchester:
                           000007  1517 	ar7 = 0x07
                           000006  1518 	ar6 = 0x06
                           000005  1519 	ar5 = 0x05
                           000004  1520 	ar4 = 0x04
                           000003  1521 	ar3 = 0x03
                           000002  1522 	ar2 = 0x02
                           000001  1523 	ar1 = 0x01
                           000000  1524 	ar0 = 0x00
      0001BF AF 82            [24] 1525 	mov	r7,dpl
                                   1526 ;	src/main.c:282: for (i=0;i<4;i++) {
      0001C1 7E 00            [12] 1527 	mov	r6,#0x00
      0001C3                       1528 00104$:
                                   1529 ;	src/main.c:283: if (((c>>(2*i)) & 1) == ((c>>((2*i+1)))&1)) {
      0001C3 EE               [12] 1530 	mov	a,r6
      0001C4 2E               [12] 1531 	add	a,r6
      0001C5 FD               [12] 1532 	mov	r5,a
      0001C6 8D F0            [24] 1533 	mov	b,r5
      0001C8 05 F0            [12] 1534 	inc	b
      0001CA EF               [12] 1535 	mov	a,r7
      0001CB 80 02            [24] 1536 	sjmp	00121$
      0001CD                       1537 00120$:
      0001CD C3               [12] 1538 	clr	c
      0001CE 13               [12] 1539 	rrc	a
      0001CF                       1540 00121$:
      0001CF D5 F0 FB         [24] 1541 	djnz	b,00120$
      0001D2 FC               [12] 1542 	mov	r4,a
      0001D3 53 04 01         [24] 1543 	anl	ar4,#0x01
      0001D6 7B 00            [12] 1544 	mov	r3,#0x00
      0001D8 ED               [12] 1545 	mov	a,r5
      0001D9 04               [12] 1546 	inc	a
      0001DA F5 F0            [12] 1547 	mov	b,a
      0001DC 05 F0            [12] 1548 	inc	b
      0001DE EF               [12] 1549 	mov	a,r7
      0001DF 80 02            [24] 1550 	sjmp	00123$
      0001E1                       1551 00122$:
      0001E1 C3               [12] 1552 	clr	c
      0001E2 13               [12] 1553 	rrc	a
      0001E3                       1554 00123$:
      0001E3 D5 F0 FB         [24] 1555 	djnz	b,00122$
      0001E6 FD               [12] 1556 	mov	r5,a
      0001E7 53 05 01         [24] 1557 	anl	ar5,#0x01
      0001EA 7A 00            [12] 1558 	mov	r2,#0x00
      0001EC EC               [12] 1559 	mov	a,r4
      0001ED B5 05 08         [24] 1560 	cjne	a,ar5,00105$
      0001F0 EB               [12] 1561 	mov	a,r3
      0001F1 B5 02 04         [24] 1562 	cjne	a,ar2,00105$
                                   1563 ;	src/main.c:285: return 0;
      0001F4 75 82 00         [24] 1564 	mov	dpl,#0x00
      0001F7 22               [24] 1565 	ret
      0001F8                       1566 00105$:
                                   1567 ;	src/main.c:282: for (i=0;i<4;i++) {
      0001F8 0E               [12] 1568 	inc	r6
      0001F9 BE 04 00         [24] 1569 	cjne	r6,#0x04,00126$
      0001FC                       1570 00126$:
      0001FC 40 C5            [24] 1571 	jc	00104$
                                   1572 ;	src/main.c:288: return 1;
      0001FE 75 82 01         [24] 1573 	mov	dpl,#0x01
                                   1574 ;	src/main.c:289: }
      000201 22               [24] 1575 	ret
                                   1576 ;------------------------------------------------------------
                                   1577 ;Allocation info for local variables in function 'conv_manchester2nibble'
                                   1578 ;------------------------------------------------------------
                                   1579 ;c                         Allocated to registers r7 
                                   1580 ;i                         Allocated to registers r5 
                                   1581 ;u8Nibble                  Allocated to registers r6 
                                   1582 ;------------------------------------------------------------
                                   1583 ;	src/main.c:291: UINT8 conv_manchester2nibble(UINT8 c)
                                   1584 ;	-----------------------------------------
                                   1585 ;	 function conv_manchester2nibble
                                   1586 ;	-----------------------------------------
      000202                       1587 _conv_manchester2nibble:
      000202 AF 82            [24] 1588 	mov	r7,dpl
                                   1589 ;	src/main.c:294: UINT8 u8Nibble = 0;
      000204 7E 00            [12] 1590 	mov	r6,#0x00
                                   1591 ;	src/main.c:295: for (i=0;i<4;i++) {
      000206 7D 04            [12] 1592 	mov	r5,#0x04
      000208                       1593 00106$:
                                   1594 ;	src/main.c:296: if (c & 1) {
      000208 EF               [12] 1595 	mov	a,r7
      000209 30 E0 03         [24] 1596 	jnb	acc.0,00102$
                                   1597 ;	src/main.c:297: u8Nibble |= 0x80;
      00020C 43 06 80         [24] 1598 	orl	ar6,#0x80
      00020F                       1599 00102$:
                                   1600 ;	src/main.c:299: c >>= 2;
      00020F EF               [12] 1601 	mov	a,r7
      000210 03               [12] 1602 	rr	a
      000211 03               [12] 1603 	rr	a
      000212 54 3F            [12] 1604 	anl	a,#0x3f
      000214 FF               [12] 1605 	mov	r7,a
                                   1606 ;	src/main.c:300: u8Nibble >>= 1;
      000215 EE               [12] 1607 	mov	a,r6
      000216 C3               [12] 1608 	clr	c
      000217 13               [12] 1609 	rrc	a
      000218 FE               [12] 1610 	mov	r6,a
      000219 ED               [12] 1611 	mov	a,r5
      00021A 14               [12] 1612 	dec	a
                                   1613 ;	src/main.c:295: for (i=0;i<4;i++) {
      00021B FD               [12] 1614 	mov	r5,a
      00021C 70 EA            [24] 1615 	jnz	00106$
                                   1616 ;	src/main.c:302: return u8Nibble;
      00021E 8E 82            [24] 1617 	mov	dpl,r6
                                   1618 ;	src/main.c:303: }
      000220 22               [24] 1619 	ret
                                   1620 ;------------------------------------------------------------
                                   1621 ;Allocation info for local variables in function 'conv_manchester2highnibble'
                                   1622 ;------------------------------------------------------------
                                   1623 ;c                         Allocated to registers r7 
                                   1624 ;i                         Allocated to registers r5 
                                   1625 ;u8Nibble                  Allocated to registers r6 
                                   1626 ;------------------------------------------------------------
                                   1627 ;	src/main.c:305: UINT8 conv_manchester2highnibble(UINT8 c)
                                   1628 ;	-----------------------------------------
                                   1629 ;	 function conv_manchester2highnibble
                                   1630 ;	-----------------------------------------
      000221                       1631 _conv_manchester2highnibble:
      000221 AF 82            [24] 1632 	mov	r7,dpl
                                   1633 ;	src/main.c:308: UINT8 u8Nibble = 0;
      000223 7E 00            [12] 1634 	mov	r6,#0x00
                                   1635 ;	src/main.c:309: for (i=0;i<4;i++) {
      000225 7D 04            [12] 1636 	mov	r5,#0x04
      000227                       1637 00106$:
                                   1638 ;	src/main.c:310: u8Nibble >>= 1;
      000227 EE               [12] 1639 	mov	a,r6
      000228 C3               [12] 1640 	clr	c
      000229 13               [12] 1641 	rrc	a
      00022A FE               [12] 1642 	mov	r6,a
                                   1643 ;	src/main.c:311: if (c & 1) {
      00022B EF               [12] 1644 	mov	a,r7
      00022C 30 E0 03         [24] 1645 	jnb	acc.0,00102$
                                   1646 ;	src/main.c:312: u8Nibble |= 0x80;
      00022F 43 06 80         [24] 1647 	orl	ar6,#0x80
      000232                       1648 00102$:
                                   1649 ;	src/main.c:314: c >>= 2;
      000232 EF               [12] 1650 	mov	a,r7
      000233 03               [12] 1651 	rr	a
      000234 03               [12] 1652 	rr	a
      000235 54 3F            [12] 1653 	anl	a,#0x3f
      000237 FF               [12] 1654 	mov	r7,a
      000238 ED               [12] 1655 	mov	a,r5
      000239 14               [12] 1656 	dec	a
                                   1657 ;	src/main.c:309: for (i=0;i<4;i++) {
      00023A FD               [12] 1658 	mov	r5,a
      00023B 70 EA            [24] 1659 	jnz	00106$
                                   1660 ;	src/main.c:316: return u8Nibble;
      00023D 8E 82            [24] 1661 	mov	dpl,r6
                                   1662 ;	src/main.c:317: }
      00023F 22               [24] 1663 	ret
                                   1664 ;------------------------------------------------------------
                                   1665 ;Allocation info for local variables in function 'MODIFY_HIRC_166'
                                   1666 ;------------------------------------------------------------
                                   1667 ;hircmap0                  Allocated to registers r7 
                                   1668 ;hircmap1                  Allocated to registers r6 
                                   1669 ;trimvalue16bit            Allocated to registers r7 r5 
                                   1670 ;------------------------------------------------------------
                                   1671 ;	src/main.c:319: void MODIFY_HIRC_166(void)
                                   1672 ;	-----------------------------------------
                                   1673 ;	 function MODIFY_HIRC_166
                                   1674 ;	-----------------------------------------
      000240                       1675 _MODIFY_HIRC_166:
                                   1676 ;	src/main.c:324: if ((PCON&SET_BIT4)==SET_BIT4) {
      000240 AE 87            [24] 1677 	mov	r6,_PCON
      000242 53 06 10         [24] 1678 	anl	ar6,#0x10
      000245 7F 00            [12] 1679 	mov	r7,#0x00
      000247 BE 10 41         [24] 1680 	cjne	r6,#0x10,00103$
      00024A BF 00 3E         [24] 1681 	cjne	r7,#0x00,00103$
                                   1682 ;	src/main.c:325: hircmap0 = RCTRIM0;
      00024D AF 84            [24] 1683 	mov	r7,_RCTRIM0
                                   1684 ;	src/main.c:326: hircmap1 = RCTRIM1;
      00024F AE 85            [24] 1685 	mov	r6,_RCTRIM1
                                   1686 ;	src/main.c:327: trimvalue16bit = ((hircmap0<<1)+(hircmap1&0x01));
      000251 7D 00            [12] 1687 	mov	r5,#0x00
      000253 EF               [12] 1688 	mov	a,r7
      000254 2F               [12] 1689 	add	a,r7
      000255 FF               [12] 1690 	mov	r7,a
      000256 ED               [12] 1691 	mov	a,r5
      000257 33               [12] 1692 	rlc	a
      000258 FD               [12] 1693 	mov	r5,a
      000259 53 06 01         [24] 1694 	anl	ar6,#0x01
      00025C 7C 00            [12] 1695 	mov	r4,#0x00
      00025E EE               [12] 1696 	mov	a,r6
      00025F 2F               [12] 1697 	add	a,r7
      000260 FF               [12] 1698 	mov	r7,a
      000261 EC               [12] 1699 	mov	a,r4
      000262 3D               [12] 1700 	addc	a,r5
      000263 FD               [12] 1701 	mov	r5,a
                                   1702 ;	src/main.c:328: trimvalue16bit = trimvalue16bit - 15;
      000264 EF               [12] 1703 	mov	a,r7
      000265 24 F1            [12] 1704 	add	a,#0xf1
      000267 FF               [12] 1705 	mov	r7,a
      000268 ED               [12] 1706 	mov	a,r5
      000269 34 FF            [12] 1707 	addc	a,#0xff
      00026B FD               [12] 1708 	mov	r5,a
                                   1709 ;	src/main.c:329: hircmap1 = trimvalue16bit&0x01;
      00026C 8F 06            [24] 1710 	mov	ar6,r7
      00026E 53 06 01         [24] 1711 	anl	ar6,#0x01
                                   1712 ;	src/main.c:330: hircmap0 = trimvalue16bit>>1;
      000271 ED               [12] 1713 	mov	a,r5
      000272 C3               [12] 1714 	clr	c
      000273 13               [12] 1715 	rrc	a
      000274 CF               [12] 1716 	xch	a,r7
      000275 13               [12] 1717 	rrc	a
      000276 CF               [12] 1718 	xch	a,r7
      000277 FD               [12] 1719 	mov	r5,a
                                   1720 ;	src/main.c:331: TA=0XAA;
      000278 75 C7 AA         [24] 1721 	mov	_TA,#0xaa
                                   1722 ;	src/main.c:332: TA=0X55;
      00027B 75 C7 55         [24] 1723 	mov	_TA,#0x55
                                   1724 ;	src/main.c:333: RCTRIM0 = hircmap0;
      00027E 8F 84            [24] 1725 	mov	_RCTRIM0,r7
                                   1726 ;	src/main.c:334: TA=0XAA;
      000280 75 C7 AA         [24] 1727 	mov	_TA,#0xaa
                                   1728 ;	src/main.c:335: TA=0X55;
      000283 75 C7 55         [24] 1729 	mov	_TA,#0x55
                                   1730 ;	src/main.c:336: RCTRIM1 = hircmap1;
      000286 8E 85            [24] 1731 	mov	_RCTRIM1,r6
                                   1732 ;	src/main.c:338: PCON &= CLR_BIT4;
      000288 53 87 EF         [24] 1733 	anl	_PCON,#0xef
      00028B                       1734 00103$:
                                   1735 ;	src/main.c:340: }
      00028B 22               [24] 1736 	ret
                                   1737 ;------------------------------------------------------------
                                   1738 ;Allocation info for local variables in function 'disp_help'
                                   1739 ;------------------------------------------------------------
                                   1740 ;au8Code                   Allocated to registers r7 
                                   1741 ;------------------------------------------------------------
                                   1742 ;	src/main.c:341: void disp_help(UINT8 au8Code)
                                   1743 ;	-----------------------------------------
                                   1744 ;	 function disp_help
                                   1745 ;	-----------------------------------------
      00028C                       1746 _disp_help:
      00028C AF 82            [24] 1747 	mov	r7,dpl
                                   1748 ;	src/main.c:343: gu8UART = 1;
      00028E 75*00 01         [24] 1749 	mov	_gu8UART,#0x01
                                   1750 ;	src/main.c:344: switch(au8Code) {
      000291 BF 31 01         [24] 1751 	cjne	r7,#0x31,00165$
      000294 22               [24] 1752 	ret
      000295                       1753 00165$:
      000295 BF 32 01         [24] 1754 	cjne	r7,#0x32,00166$
      000298 22               [24] 1755 	ret
      000299                       1756 00166$:
      000299 BF 33 02         [24] 1757 	cjne	r7,#0x33,00167$
      00029C 80 32            [24] 1758 	sjmp	00103$
      00029E                       1759 00167$:
      00029E BF 34 01         [24] 1760 	cjne	r7,#0x34,00168$
      0002A1 22               [24] 1761 	ret
      0002A2                       1762 00168$:
      0002A2 BF 50 02         [24] 1763 	cjne	r7,#0x50,00169$
      0002A5 80 49            [24] 1764 	sjmp	00106$
      0002A7                       1765 00169$:
      0002A7 BF 53 03         [24] 1766 	cjne	r7,#0x53,00170$
      0002AA 02r03r30         [24] 1767 	ljmp	00110$
      0002AD                       1768 00170$:
      0002AD BF 54 02         [24] 1769 	cjne	r7,#0x54,00171$
      0002B0 80 5E            [24] 1770 	sjmp	00108$
      0002B2                       1771 00171$:
      0002B2 BF 56 03         [24] 1772 	cjne	r7,#0x56,00172$
      0002B5 02r03r40         [24] 1773 	ljmp	00112$
      0002B8                       1774 00172$:
      0002B8 BF 70 02         [24] 1775 	cjne	r7,#0x70,00173$
      0002BB 80 23            [24] 1776 	sjmp	00105$
      0002BD                       1777 00173$:
      0002BD BF 73 02         [24] 1778 	cjne	r7,#0x73,00174$
      0002C0 80 5E            [24] 1779 	sjmp	00109$
      0002C2                       1780 00174$:
      0002C2 BF 74 02         [24] 1781 	cjne	r7,#0x74,00175$
      0002C5 80 39            [24] 1782 	sjmp	00107$
      0002C7                       1783 00175$:
      0002C7 BF 76 03         [24] 1784 	cjne	r7,#0x76,00176$
      0002CA 02r03r40         [24] 1785 	ljmp	00112$
      0002CD                       1786 00176$:
      0002CD 02r03r50         [24] 1787 	ljmp	00113$
                                   1788 ;	src/main.c:349: case '3' :
      0002D0                       1789 00103$:
                                   1790 ;	src/main.c:350: printf_fast_f("Idle preamble on/off\r\n");
      0002D0 74r4B            [12] 1791 	mov	a,#___str_8
      0002D2 C0 E0            [24] 1792 	push	acc
      0002D4 74s00            [12] 1793 	mov	a,#(___str_8 >> 8)
      0002D6 C0 E0            [24] 1794 	push	acc
      0002D8 12r00r00         [24] 1795 	lcall	_printf_fast_f
      0002DB 15 81            [12] 1796 	dec	sp
      0002DD 15 81            [12] 1797 	dec	sp
                                   1798 ;	src/main.c:351: break;
      0002DF 22               [24] 1799 	ret
                                   1800 ;	src/main.c:354: case 'p' :
      0002E0                       1801 00105$:
                                   1802 ;	src/main.c:355: printf_fast_f("LineFi Power Off\r\n");
      0002E0 74r62            [12] 1803 	mov	a,#___str_9
      0002E2 C0 E0            [24] 1804 	push	acc
      0002E4 74s00            [12] 1805 	mov	a,#(___str_9 >> 8)
      0002E6 C0 E0            [24] 1806 	push	acc
      0002E8 12r00r00         [24] 1807 	lcall	_printf_fast_f
      0002EB 15 81            [12] 1808 	dec	sp
      0002ED 15 81            [12] 1809 	dec	sp
                                   1810 ;	src/main.c:356: break;
      0002EF 22               [24] 1811 	ret
                                   1812 ;	src/main.c:357: case 'P' :
      0002F0                       1813 00106$:
                                   1814 ;	src/main.c:358: printf_fast_f("LineFi Power On\r\n");
      0002F0 74r75            [12] 1815 	mov	a,#___str_10
      0002F2 C0 E0            [24] 1816 	push	acc
      0002F4 74s00            [12] 1817 	mov	a,#(___str_10 >> 8)
      0002F6 C0 E0            [24] 1818 	push	acc
      0002F8 12r00r00         [24] 1819 	lcall	_printf_fast_f
      0002FB 15 81            [12] 1820 	dec	sp
      0002FD 15 81            [12] 1821 	dec	sp
                                   1822 ;	src/main.c:359: break;
      0002FF 22               [24] 1823 	ret
                                   1824 ;	src/main.c:360: case 't' :
      000300                       1825 00107$:
                                   1826 ;	src/main.c:361: printf_fast_f("LineFi Uart Tx Low\r\n");
      000300 74r87            [12] 1827 	mov	a,#___str_11
      000302 C0 E0            [24] 1828 	push	acc
      000304 74s00            [12] 1829 	mov	a,#(___str_11 >> 8)
      000306 C0 E0            [24] 1830 	push	acc
      000308 12r00r00         [24] 1831 	lcall	_printf_fast_f
      00030B 15 81            [12] 1832 	dec	sp
      00030D 15 81            [12] 1833 	dec	sp
                                   1834 ;	src/main.c:362: break;
      00030F 22               [24] 1835 	ret
                                   1836 ;	src/main.c:363: case 'T' :
      000310                       1837 00108$:
                                   1838 ;	src/main.c:364: printf_fast_f("LineFi Uart Tx High\r\n");
      000310 74r9C            [12] 1839 	mov	a,#___str_12
      000312 C0 E0            [24] 1840 	push	acc
      000314 74s00            [12] 1841 	mov	a,#(___str_12 >> 8)
      000316 C0 E0            [24] 1842 	push	acc
      000318 12r00r00         [24] 1843 	lcall	_printf_fast_f
      00031B 15 81            [12] 1844 	dec	sp
      00031D 15 81            [12] 1845 	dec	sp
                                   1846 ;	src/main.c:365: break;
      00031F 22               [24] 1847 	ret
                                   1848 ;	src/main.c:366: case 's' :
      000320                       1849 00109$:
                                   1850 ;	src/main.c:367: printf_fast_f("LineFi CSC rx FSM Off\r\n");
      000320 74rB2            [12] 1851 	mov	a,#___str_13
      000322 C0 E0            [24] 1852 	push	acc
      000324 74s00            [12] 1853 	mov	a,#(___str_13 >> 8)
      000326 C0 E0            [24] 1854 	push	acc
      000328 12r00r00         [24] 1855 	lcall	_printf_fast_f
      00032B 15 81            [12] 1856 	dec	sp
      00032D 15 81            [12] 1857 	dec	sp
                                   1858 ;	src/main.c:368: break;
      00032F 22               [24] 1859 	ret
                                   1860 ;	src/main.c:369: case 'S' :
      000330                       1861 00110$:
                                   1862 ;	src/main.c:370: printf_fast_f("LineFi CSC rx FSM ON\r\n");
      000330 74rCA            [12] 1863 	mov	a,#___str_14
      000332 C0 E0            [24] 1864 	push	acc
      000334 74s00            [12] 1865 	mov	a,#(___str_14 >> 8)
      000336 C0 E0            [24] 1866 	push	acc
      000338 12r00r00         [24] 1867 	lcall	_printf_fast_f
      00033B 15 81            [12] 1868 	dec	sp
      00033D 15 81            [12] 1869 	dec	sp
                                   1870 ;	src/main.c:371: break;
                                   1871 ;	src/main.c:372: case 'v' : case 'V' :
      00033F 22               [24] 1872 	ret
      000340                       1873 00112$:
                                   1874 ;	src/main.c:373: printf_fast_f(__VERSION__);
      000340 74rE1            [12] 1875 	mov	a,#___str_15
      000342 C0 E0            [24] 1876 	push	acc
      000344 74s00            [12] 1877 	mov	a,#(___str_15 >> 8)
      000346 C0 E0            [24] 1878 	push	acc
      000348 12r00r00         [24] 1879 	lcall	_printf_fast_f
      00034B 15 81            [12] 1880 	dec	sp
      00034D 15 81            [12] 1881 	dec	sp
                                   1882 ;	src/main.c:374: break;
                                   1883 ;	src/main.c:375: default :
      00034F 22               [24] 1884 	ret
      000350                       1885 00113$:
                                   1886 ;	src/main.c:376: printf_fast_f("1: downlink packet 1\r\n");
      000350 74rFB            [12] 1887 	mov	a,#___str_16
      000352 C0 E0            [24] 1888 	push	acc
      000354 74s00            [12] 1889 	mov	a,#(___str_16 >> 8)
      000356 C0 E0            [24] 1890 	push	acc
      000358 12r00r00         [24] 1891 	lcall	_printf_fast_f
      00035B 15 81            [12] 1892 	dec	sp
      00035D 15 81            [12] 1893 	dec	sp
                                   1894 ;	src/main.c:377: printf_fast_f("2: downlink packet 2\r\n");
      00035F 74r12            [12] 1895 	mov	a,#___str_17
      000361 C0 E0            [24] 1896 	push	acc
      000363 74s01            [12] 1897 	mov	a,#(___str_17 >> 8)
      000365 C0 E0            [24] 1898 	push	acc
      000367 12r00r00         [24] 1899 	lcall	_printf_fast_f
      00036A 15 81            [12] 1900 	dec	sp
      00036C 15 81            [12] 1901 	dec	sp
                                   1902 ;	src/main.c:378: printf_fast_f("3: uplink idle preamble on/off\r\n");
      00036E 74r29            [12] 1903 	mov	a,#___str_18
      000370 C0 E0            [24] 1904 	push	acc
      000372 74s01            [12] 1905 	mov	a,#(___str_18 >> 8)
      000374 C0 E0            [24] 1906 	push	acc
      000376 12r00r00         [24] 1907 	lcall	_printf_fast_f
      000379 15 81            [12] 1908 	dec	sp
      00037B 15 81            [12] 1909 	dec	sp
                                   1910 ;	src/main.c:379: printf_fast_f("p/P: LineFi Power off/on\r\n");
      00037D 74r4A            [12] 1911 	mov	a,#___str_19
      00037F C0 E0            [24] 1912 	push	acc
      000381 74s01            [12] 1913 	mov	a,#(___str_19 >> 8)
      000383 C0 E0            [24] 1914 	push	acc
      000385 12r00r00         [24] 1915 	lcall	_printf_fast_f
      000388 15 81            [12] 1916 	dec	sp
      00038A 15 81            [12] 1917 	dec	sp
                                   1918 ;	src/main.c:380: printf_fast_f("t/T: LineFi Uart Tx Low/High\r\n");
      00038C 74r65            [12] 1919 	mov	a,#___str_20
      00038E C0 E0            [24] 1920 	push	acc
      000390 74s01            [12] 1921 	mov	a,#(___str_20 >> 8)
      000392 C0 E0            [24] 1922 	push	acc
      000394 12r00r00         [24] 1923 	lcall	_printf_fast_f
      000397 15 81            [12] 1924 	dec	sp
      000399 15 81            [12] 1925 	dec	sp
                                   1926 ;	src/main.c:381: printf_fast_f("s/S: LineFie CSC Rx FSM off/on\r\n");
      00039B 74r84            [12] 1927 	mov	a,#___str_21
      00039D C0 E0            [24] 1928 	push	acc
      00039F 74s01            [12] 1929 	mov	a,#(___str_21 >> 8)
      0003A1 C0 E0            [24] 1930 	push	acc
      0003A3 12r00r00         [24] 1931 	lcall	_printf_fast_f
      0003A6 15 81            [12] 1932 	dec	sp
      0003A8 15 81            [12] 1933 	dec	sp
                                   1934 ;	src/main.c:382: printf_fast_f("test procedure: p -> P -> T -> S -> 1 or 2\r\n");
      0003AA 74rA5            [12] 1935 	mov	a,#___str_22
      0003AC C0 E0            [24] 1936 	push	acc
      0003AE 74s01            [12] 1937 	mov	a,#(___str_22 >> 8)
      0003B0 C0 E0            [24] 1938 	push	acc
      0003B2 12r00r00         [24] 1939 	lcall	_printf_fast_f
      0003B5 15 81            [12] 1940 	dec	sp
      0003B7 15 81            [12] 1941 	dec	sp
                                   1942 ;	src/main.c:384: }
                                   1943 ;	src/main.c:385: }
      0003B9 22               [24] 1944 	ret
                                   1945 ;------------------------------------------------------------
                                   1946 ;Allocation info for local variables in function 'gpio_setup'
                                   1947 ;------------------------------------------------------------
                                   1948 ;	src/main.c:387: void gpio_setup()
                                   1949 ;	-----------------------------------------
                                   1950 ;	 function gpio_setup
                                   1951 ;	-----------------------------------------
      0003BA                       1952 _gpio_setup:
                                   1953 ;	src/main.c:415: Set_All_GPIO_Quasi_Mode;
      0003BA 75 B1 00         [24] 1954 	mov	_P0M1,#0x00
      0003BD 75 B2 00         [24] 1955 	mov	_P0M2,#0x00
      0003C0 75 B3 00         [24] 1956 	mov	_P1M1,#0x00
      0003C3 75 B4 00         [24] 1957 	mov	_P1M2,#0x00
      0003C6 75 AC 00         [24] 1958 	mov	_P3M1,#0x00
      0003C9 75 AD 00         [24] 1959 	mov	_P3M2,#0x00
                                   1960 ;	src/main.c:417: P13_Input_Mode;
      0003CC 43 B3 08         [24] 1961 	orl	_P1M1,#0x08
      0003CF 53 B4 F7         [24] 1962 	anl	_P1M2,#0xf7
                                   1963 ;	src/main.c:418: P30_Input_Mode;
      0003D2 43 AC 01         [24] 1964 	orl	_P3M1,#0x01
      0003D5 53 AD FE         [24] 1965 	anl	_P3M2,#0xfe
                                   1966 ;	src/main.c:419: P17_Input_Mode;
      0003D8 43 B3 80         [24] 1967 	orl	_P1M1,#0x80
      0003DB 53 B4 7F         [24] 1968 	anl	_P1M2,#0x7f
                                   1969 ;	src/main.c:420: P00_Input_Mode;
      0003DE 43 B1 01         [24] 1970 	orl	_P0M1,#0x01
      0003E1 53 B2 FE         [24] 1971 	anl	_P0M2,#0xfe
                                   1972 ;	src/main.c:421: P15_Input_Mode;
      0003E4 43 B3 20         [24] 1973 	orl	_P1M1,#0x20
      0003E7 53 B4 DF         [24] 1974 	anl	_P1M2,#0xdf
                                   1975 ;	src/main.c:423: P05_Input_Mode; // rx_level1
      0003EA 43 B1 20         [24] 1976 	orl	_P0M1,#0x20
      0003ED 53 B2 DF         [24] 1977 	anl	_P0M2,#0xdf
                                   1978 ;	src/main.c:424: P04_Input_Mode; // rx_level2
      0003F0 43 B1 10         [24] 1979 	orl	_P0M1,#0x10
      0003F3 53 B2 EF         [24] 1980 	anl	_P0M2,#0xef
                                   1981 ;	src/main.c:426: P10_PushPull_Mode; // line fi enable
      0003F6 53 B3 FE         [24] 1982 	anl	_P1M1,#0xfe
      0003F9 43 B4 01         [24] 1983 	orl	_P1M2,#0x01
                                   1984 ;	src/main.c:427: P11_PushPull_Mode; // line fi enable1
      0003FC 53 B3 FD         [24] 1985 	anl	_P1M1,#0xfd
      0003FF 43 B4 02         [24] 1986 	orl	_P1M2,#0x02
                                   1987 ;	src/main.c:428: P12_PushPull_Mode; // line fi enable2
      000402 53 B3 FB         [24] 1988 	anl	_P1M1,#0xfb
      000405 43 B4 04         [24] 1989 	orl	_P1M2,#0x04
                                   1990 ;	src/main.c:429: LINEFI_EN0 = 0;
                                   1991 ;	assignBit
      000408 C2 90            [12] 1992 	clr	_P10
                                   1993 ;	src/main.c:430: LINEFI_EN1 = 0;
                                   1994 ;	assignBit
      00040A C2 91            [12] 1995 	clr	_P11
                                   1996 ;	src/main.c:431: LINEFI_EN2 = 0;
                                   1997 ;	assignBit
      00040C C2 92            [12] 1998 	clr	_P12
                                   1999 ;	src/main.c:432: }
      00040E 22               [24] 2000 	ret
                                   2001 ;------------------------------------------------------------
                                   2002 ;Allocation info for local variables in function 'state_switches'
                                   2003 ;------------------------------------------------------------
                                   2004 ;su8PrevSW                 Allocated with name '_state_switches_su8PrevSW_65536_89'
                                   2005 ;apu8SwNum                 Allocated with name '_state_switches_PARM_2'
                                   2006 ;au8SW                     Allocated to registers r7 
                                   2007 ;i                         Allocated to registers r2 
                                   2008 ;u8Result                  Allocated to registers r6 
                                   2009 ;------------------------------------------------------------
                                   2010 ;	src/main.c:450: UINT8 state_switches(UINT8 au8SW, UINT8 *apu8SwNum)
                                   2011 ;	-----------------------------------------
                                   2012 ;	 function state_switches
                                   2013 ;	-----------------------------------------
      00040F                       2014 _state_switches:
      00040F AF 82            [24] 2015 	mov	r7,dpl
                                   2016 ;	src/main.c:455: UINT8 u8Result = SW_NONE;
      000411 7E 04            [12] 2017 	mov	r6,#0x04
                                   2018 ;	src/main.c:456: if (su8PrevSW == au8SW) {
      000413 EF               [12] 2019 	mov	a,r7
      000414 B5*04 14         [24] 2020 	cjne	a,_state_switches_su8PrevSW_65536_89,00102$
                                   2021 ;	src/main.c:457: *apu8SwNum = 0;
      000417 AB*00            [24] 2022 	mov	r3,_state_switches_PARM_2
      000419 AC*01            [24] 2023 	mov	r4,(_state_switches_PARM_2 + 1)
      00041B AD*02            [24] 2024 	mov	r5,(_state_switches_PARM_2 + 2)
      00041D 8B 82            [24] 2025 	mov	dpl,r3
      00041F 8C 83            [24] 2026 	mov	dph,r4
      000421 8D F0            [24] 2027 	mov	b,r5
      000423 E4               [12] 2028 	clr	a
      000424 12r00r00         [24] 2029 	lcall	__gptrput
                                   2030 ;	src/main.c:458: return SW_NONE;
      000427 75 82 04         [24] 2031 	mov	dpl,#0x04
      00042A 22               [24] 2032 	ret
      00042B                       2033 00102$:
                                   2034 ;	src/main.c:466: *apu8SwNum = 0;
      00042B AB*00            [24] 2035 	mov	r3,_state_switches_PARM_2
      00042D AC*01            [24] 2036 	mov	r4,(_state_switches_PARM_2 + 1)
      00042F AD*02            [24] 2037 	mov	r5,(_state_switches_PARM_2 + 2)
      000431 8B 82            [24] 2038 	mov	dpl,r3
      000433 8C 83            [24] 2039 	mov	dph,r4
      000435 8D F0            [24] 2040 	mov	b,r5
      000437 E4               [12] 2041 	clr	a
      000438 12r00r00         [24] 2042 	lcall	__gptrput
                                   2043 ;	src/main.c:468: for (i=0;i<5;i++) {
      00043B 7A 00            [12] 2044 	mov	r2,#0x00
      00043D                       2045 00113$:
                                   2046 ;	src/main.c:469: switch((su8PrevSW>>i)&1) {
      00043D 8A F0            [24] 2047 	mov	b,r2
      00043F 05 F0            [12] 2048 	inc	b
      000441 E5*04            [12] 2049 	mov	a,_state_switches_su8PrevSW_65536_89
      000443 80 02            [24] 2050 	sjmp	00153$
      000445                       2051 00152$:
      000445 C3               [12] 2052 	clr	c
      000446 13               [12] 2053 	rrc	a
      000447                       2054 00153$:
      000447 D5 F0 FB         [24] 2055 	djnz	b,00152$
      00044A F8               [12] 2056 	mov	r0,a
      00044B 53 00 01         [24] 2057 	anl	ar0,#0x01
      00044E 79 00            [12] 2058 	mov	r1,#0x00
      000450 B8 00 05         [24] 2059 	cjne	r0,#0x00,00154$
      000453 B9 00 02         [24] 2060 	cjne	r1,#0x00,00154$
      000456 80 55            [24] 2061 	sjmp	00107$
      000458                       2062 00154$:
      000458 B8 01 05         [24] 2063 	cjne	r0,#0x01,00155$
      00045B B9 00 02         [24] 2064 	cjne	r1,#0x00,00155$
      00045E 80 03            [24] 2065 	sjmp	00156$
      000460                       2066 00155$:
      000460 02r04rF8         [24] 2067 	ljmp	00114$
      000463                       2068 00156$:
                                   2069 ;	src/main.c:471: switch((au8SW>>i)&1) {
      000463 8A F0            [24] 2070 	mov	b,r2
      000465 05 F0            [12] 2071 	inc	b
      000467 EF               [12] 2072 	mov	a,r7
      000468 80 02            [24] 2073 	sjmp	00158$
      00046A                       2074 00157$:
      00046A C3               [12] 2075 	clr	c
      00046B 13               [12] 2076 	rrc	a
      00046C                       2077 00158$:
      00046C D5 F0 FB         [24] 2078 	djnz	b,00157$
      00046F F8               [12] 2079 	mov	r0,a
      000470 53 00 01         [24] 2080 	anl	ar0,#0x01
      000473 79 00            [12] 2081 	mov	r1,#0x00
      000475 B8 00 05         [24] 2082 	cjne	r0,#0x00,00159$
      000478 B9 00 02         [24] 2083 	cjne	r1,#0x00,00159$
      00047B 80 03            [24] 2084 	sjmp	00160$
      00047D                       2085 00159$:
      00047D 02r04rF8         [24] 2086 	ljmp	00114$
      000480                       2087 00160$:
                                   2088 ;	src/main.c:475: su8PrevSW = au8SW;
      000480 8F*04            [24] 2089 	mov	_state_switches_su8PrevSW_65536_89,r7
                                   2090 ;	src/main.c:476: *apu8SwNum |= 1<<i;
      000482 8B 82            [24] 2091 	mov	dpl,r3
      000484 8C 83            [24] 2092 	mov	dph,r4
      000486 8D F0            [24] 2093 	mov	b,r5
      000488 12r00r00         [24] 2094 	lcall	__gptrget
      00048B F9               [12] 2095 	mov	r1,a
      00048C 8A 00            [24] 2096 	mov	ar0,r2
      00048E 88 F0            [24] 2097 	mov	b,r0
      000490 05 F0            [12] 2098 	inc	b
      000492 74 01            [12] 2099 	mov	a,#0x01
      000494 80 02            [24] 2100 	sjmp	00163$
      000496                       2101 00161$:
      000496 25 E0            [12] 2102 	add	a,acc
      000498                       2103 00163$:
      000498 D5 F0 FB         [24] 2104 	djnz	b,00161$
      00049B F8               [12] 2105 	mov	r0,a
      00049C E9               [12] 2106 	mov	a,r1
      00049D 42 00            [12] 2107 	orl	ar0,a
      00049F 8B 82            [24] 2108 	mov	dpl,r3
      0004A1 8C 83            [24] 2109 	mov	dph,r4
      0004A3 8D F0            [24] 2110 	mov	b,r5
      0004A5 E8               [12] 2111 	mov	a,r0
      0004A6 12r00r00         [24] 2112 	lcall	__gptrput
                                   2113 ;	src/main.c:477: u8Result = SW_OFF;
      0004A9 7E 00            [12] 2114 	mov	r6,#0x00
                                   2115 ;	src/main.c:481: break;
                                   2116 ;	src/main.c:482: case SW_OFF :
      0004AB 80 4B            [24] 2117 	sjmp	00114$
      0004AD                       2118 00107$:
                                   2119 ;	src/main.c:483: switch((au8SW>>i)&1) {
      0004AD 8A F0            [24] 2120 	mov	b,r2
      0004AF 05 F0            [12] 2121 	inc	b
      0004B1 EF               [12] 2122 	mov	a,r7
      0004B2 80 02            [24] 2123 	sjmp	00165$
      0004B4                       2124 00164$:
      0004B4 C3               [12] 2125 	clr	c
      0004B5 13               [12] 2126 	rrc	a
      0004B6                       2127 00165$:
      0004B6 D5 F0 FB         [24] 2128 	djnz	b,00164$
      0004B9 F8               [12] 2129 	mov	r0,a
      0004BA 53 00 01         [24] 2130 	anl	ar0,#0x01
      0004BD 79 00            [12] 2131 	mov	r1,#0x00
      0004BF B8 00 05         [24] 2132 	cjne	r0,#0x00,00166$
      0004C2 B9 00 02         [24] 2133 	cjne	r1,#0x00,00166$
      0004C5 80 31            [24] 2134 	sjmp	00114$
      0004C7                       2135 00166$:
      0004C7 B8 01 2E         [24] 2136 	cjne	r0,#0x01,00114$
      0004CA B9 00 2B         [24] 2137 	cjne	r1,#0x00,00114$
                                   2138 ;	src/main.c:485: su8PrevSW = au8SW;
      0004CD 8F*04            [24] 2139 	mov	_state_switches_su8PrevSW_65536_89,r7
                                   2140 ;	src/main.c:486: *apu8SwNum |= 1<<i;
      0004CF 8B 82            [24] 2141 	mov	dpl,r3
      0004D1 8C 83            [24] 2142 	mov	dph,r4
      0004D3 8D F0            [24] 2143 	mov	b,r5
      0004D5 12r00r00         [24] 2144 	lcall	__gptrget
      0004D8 F9               [12] 2145 	mov	r1,a
      0004D9 8A 00            [24] 2146 	mov	ar0,r2
      0004DB 88 F0            [24] 2147 	mov	b,r0
      0004DD 05 F0            [12] 2148 	inc	b
      0004DF 74 01            [12] 2149 	mov	a,#0x01
      0004E1 80 02            [24] 2150 	sjmp	00171$
      0004E3                       2151 00169$:
      0004E3 25 E0            [12] 2152 	add	a,acc
      0004E5                       2153 00171$:
      0004E5 D5 F0 FB         [24] 2154 	djnz	b,00169$
      0004E8 F8               [12] 2155 	mov	r0,a
      0004E9 E9               [12] 2156 	mov	a,r1
      0004EA 42 00            [12] 2157 	orl	ar0,a
      0004EC 8B 82            [24] 2158 	mov	dpl,r3
      0004EE 8C 83            [24] 2159 	mov	dph,r4
      0004F0 8D F0            [24] 2160 	mov	b,r5
      0004F2 E8               [12] 2161 	mov	a,r0
      0004F3 12r00r00         [24] 2162 	lcall	__gptrput
                                   2163 ;	src/main.c:487: u8Result = SW_ON;
      0004F6 7E 01            [12] 2164 	mov	r6,#0x01
                                   2165 ;	src/main.c:495: }
      0004F8                       2166 00114$:
                                   2167 ;	src/main.c:468: for (i=0;i<5;i++) {
      0004F8 0A               [12] 2168 	inc	r2
      0004F9 BA 05 00         [24] 2169 	cjne	r2,#0x05,00172$
      0004FC                       2170 00172$:
      0004FC 50 03            [24] 2171 	jnc	00173$
      0004FE 02r04r3D         [24] 2172 	ljmp	00113$
      000501                       2173 00173$:
                                   2174 ;	src/main.c:499: return u8Result;
      000501 8E 82            [24] 2175 	mov	dpl,r6
                                   2176 ;	src/main.c:587: }
      000503 22               [24] 2177 	ret
                                   2178 ;------------------------------------------------------------
                                   2179 ;Allocation info for local variables in function 'printoutbuf'
                                   2180 ;------------------------------------------------------------
                                   2181 ;apcBuf                    Allocated with name '_printoutbuf_PARM_2'
                                   2182 ;aucBufIdx                 Allocated to registers r7 
                                   2183 ;i                         Allocated with name '_printoutbuf_i_65536_97'
                                   2184 ;------------------------------------------------------------
                                   2185 ;	src/main.c:591: void printoutbuf(uint8 aucBufIdx, char * apcBuf)
                                   2186 ;	-----------------------------------------
                                   2187 ;	 function printoutbuf
                                   2188 ;	-----------------------------------------
      000504                       2189 _printoutbuf:
      000504 AF 82            [24] 2190 	mov	r7,dpl
                                   2191 ;	src/main.c:594: for (i=0;i<aucBufIdx;i++) {
      000506 AC*05            [24] 2192 	mov	r4,_printoutbuf_PARM_2
      000508 AD*06            [24] 2193 	mov	r5,(_printoutbuf_PARM_2 + 1)
      00050A AE*07            [24] 2194 	mov	r6,(_printoutbuf_PARM_2 + 2)
      00050C 7B 00            [12] 2195 	mov	r3,#0x00
      00050E                       2196 00103$:
      00050E C3               [12] 2197 	clr	c
      00050F EB               [12] 2198 	mov	a,r3
      000510 9F               [12] 2199 	subb	a,r7
      000511 50 3F            [24] 2200 	jnc	00101$
                                   2201 ;	src/main.c:595: printf_fast_f("%c", *apcBuf++);
      000513 8C 82            [24] 2202 	mov	dpl,r4
      000515 8D 83            [24] 2203 	mov	dph,r5
      000517 8E F0            [24] 2204 	mov	b,r6
      000519 12r00r00         [24] 2205 	lcall	__gptrget
      00051C FA               [12] 2206 	mov	r2,a
      00051D A3               [24] 2207 	inc	dptr
      00051E AC 82            [24] 2208 	mov	r4,dpl
      000520 AD 83            [24] 2209 	mov	r5,dph
      000522 8A 01            [24] 2210 	mov	ar1,r2
      000524 7A 00            [12] 2211 	mov	r2,#0x00
      000526 C0 07            [24] 2212 	push	ar7
      000528 C0 06            [24] 2213 	push	ar6
      00052A C0 05            [24] 2214 	push	ar5
      00052C C0 04            [24] 2215 	push	ar4
      00052E C0 03            [24] 2216 	push	ar3
      000530 C0 01            [24] 2217 	push	ar1
      000532 C0 02            [24] 2218 	push	ar2
      000534 74r31            [12] 2219 	mov	a,#___str_6
      000536 C0 E0            [24] 2220 	push	acc
      000538 74s00            [12] 2221 	mov	a,#(___str_6 >> 8)
      00053A C0 E0            [24] 2222 	push	acc
      00053C 12r00r00         [24] 2223 	lcall	_printf_fast_f
      00053F E5 81            [12] 2224 	mov	a,sp
      000541 24 FC            [12] 2225 	add	a,#0xfc
      000543 F5 81            [12] 2226 	mov	sp,a
      000545 D0 03            [24] 2227 	pop	ar3
      000547 D0 04            [24] 2228 	pop	ar4
      000549 D0 05            [24] 2229 	pop	ar5
      00054B D0 06            [24] 2230 	pop	ar6
      00054D D0 07            [24] 2231 	pop	ar7
                                   2232 ;	src/main.c:594: for (i=0;i<aucBufIdx;i++) {
      00054F 0B               [12] 2233 	inc	r3
      000550 80 BC            [24] 2234 	sjmp	00103$
      000552                       2235 00101$:
                                   2236 ;	src/main.c:597: printf_fast_f("\r\n");
      000552 74r2E            [12] 2237 	mov	a,#___str_5
      000554 C0 E0            [24] 2238 	push	acc
      000556 74s00            [12] 2239 	mov	a,#(___str_5 >> 8)
      000558 C0 E0            [24] 2240 	push	acc
      00055A 12r00r00         [24] 2241 	lcall	_printf_fast_f
      00055D 15 81            [12] 2242 	dec	sp
      00055F 15 81            [12] 2243 	dec	sp
                                   2244 ;	src/main.c:598: }
      000561 22               [24] 2245 	ret
                                   2246 ;------------------------------------------------------------
                                   2247 ;Allocation info for local variables in function 'print_help'
                                   2248 ;------------------------------------------------------------
                                   2249 ;	src/main.c:601: void print_help()
                                   2250 ;	-----------------------------------------
                                   2251 ;	 function print_help
                                   2252 ;	-----------------------------------------
      000562                       2253 _print_help:
                                   2254 ;	src/main.c:603: printf_fast_f("t: timer\r\n");
      000562 74rD2            [12] 2255 	mov	a,#___str_23
      000564 C0 E0            [24] 2256 	push	acc
      000566 74s01            [12] 2257 	mov	a,#(___str_23 >> 8)
      000568 C0 E0            [24] 2258 	push	acc
      00056A 12r00r00         [24] 2259 	lcall	_printf_fast_f
      00056D 15 81            [12] 2260 	dec	sp
      00056F 15 81            [12] 2261 	dec	sp
                                   2262 ;	src/main.c:604: printf_fast_f("0: LineFi EN0,1,2 off\r\n");
      000571 74rDD            [12] 2263 	mov	a,#___str_24
      000573 C0 E0            [24] 2264 	push	acc
      000575 74s01            [12] 2265 	mov	a,#(___str_24 >> 8)
      000577 C0 E0            [24] 2266 	push	acc
      000579 12r00r00         [24] 2267 	lcall	_printf_fast_f
      00057C 15 81            [12] 2268 	dec	sp
      00057E 15 81            [12] 2269 	dec	sp
                                   2270 ;	src/main.c:605: printf_fast_f("1: LineFi EN0 = 1\r\n");
      000580 74rF5            [12] 2271 	mov	a,#___str_25
      000582 C0 E0            [24] 2272 	push	acc
      000584 74s01            [12] 2273 	mov	a,#(___str_25 >> 8)
      000586 C0 E0            [24] 2274 	push	acc
      000588 12r00r00         [24] 2275 	lcall	_printf_fast_f
      00058B 15 81            [12] 2276 	dec	sp
      00058D 15 81            [12] 2277 	dec	sp
                                   2278 ;	src/main.c:606: printf_fast_f("2:\r\n");
      00058F 74r09            [12] 2279 	mov	a,#___str_26
      000591 C0 E0            [24] 2280 	push	acc
      000593 74s02            [12] 2281 	mov	a,#(___str_26 >> 8)
      000595 C0 E0            [24] 2282 	push	acc
      000597 12r00r00         [24] 2283 	lcall	_printf_fast_f
      00059A 15 81            [12] 2284 	dec	sp
      00059C 15 81            [12] 2285 	dec	sp
                                   2286 ;	src/main.c:607: printf_fast_f("3:\r\n");
      00059E 74r0E            [12] 2287 	mov	a,#___str_27
      0005A0 C0 E0            [24] 2288 	push	acc
      0005A2 74s02            [12] 2289 	mov	a,#(___str_27 >> 8)
      0005A4 C0 E0            [24] 2290 	push	acc
      0005A6 12r00r00         [24] 2291 	lcall	_printf_fast_f
      0005A9 15 81            [12] 2292 	dec	sp
      0005AB 15 81            [12] 2293 	dec	sp
                                   2294 ;	src/main.c:608: printf_fast_f("4:\r\n");
      0005AD 74r13            [12] 2295 	mov	a,#___str_28
      0005AF C0 E0            [24] 2296 	push	acc
      0005B1 74s02            [12] 2297 	mov	a,#(___str_28 >> 8)
      0005B3 C0 E0            [24] 2298 	push	acc
      0005B5 12r00r00         [24] 2299 	lcall	_printf_fast_f
      0005B8 15 81            [12] 2300 	dec	sp
      0005BA 15 81            [12] 2301 	dec	sp
                                   2302 ;	src/main.c:609: printf_fast_f("5:\r\n");
      0005BC 74r18            [12] 2303 	mov	a,#___str_29
      0005BE C0 E0            [24] 2304 	push	acc
      0005C0 74s02            [12] 2305 	mov	a,#(___str_29 >> 8)
      0005C2 C0 E0            [24] 2306 	push	acc
      0005C4 12r00r00         [24] 2307 	lcall	_printf_fast_f
      0005C7 15 81            [12] 2308 	dec	sp
      0005C9 15 81            [12] 2309 	dec	sp
                                   2310 ;	src/main.c:610: printf_fast_f("6:\r\n");
      0005CB 74r1D            [12] 2311 	mov	a,#___str_30
      0005CD C0 E0            [24] 2312 	push	acc
      0005CF 74s02            [12] 2313 	mov	a,#(___str_30 >> 8)
      0005D1 C0 E0            [24] 2314 	push	acc
      0005D3 12r00r00         [24] 2315 	lcall	_printf_fast_f
      0005D6 15 81            [12] 2316 	dec	sp
      0005D8 15 81            [12] 2317 	dec	sp
                                   2318 ;	src/main.c:611: printf_fast_f("7:\r\n");
      0005DA 74r22            [12] 2319 	mov	a,#___str_31
      0005DC C0 E0            [24] 2320 	push	acc
      0005DE 74s02            [12] 2321 	mov	a,#(___str_31 >> 8)
      0005E0 C0 E0            [24] 2322 	push	acc
      0005E2 12r00r00         [24] 2323 	lcall	_printf_fast_f
      0005E5 15 81            [12] 2324 	dec	sp
      0005E7 15 81            [12] 2325 	dec	sp
                                   2326 ;	src/main.c:612: printf_fast_f("h: Addr--\r\n");
      0005E9 74r27            [12] 2327 	mov	a,#___str_32
      0005EB C0 E0            [24] 2328 	push	acc
      0005ED 74s02            [12] 2329 	mov	a,#(___str_32 >> 8)
      0005EF C0 E0            [24] 2330 	push	acc
      0005F1 12r00r00         [24] 2331 	lcall	_printf_fast_f
      0005F4 15 81            [12] 2332 	dec	sp
      0005F6 15 81            [12] 2333 	dec	sp
                                   2334 ;	src/main.c:613: printf_fast_f("j: Cmd--\r\n");
      0005F8 74r33            [12] 2335 	mov	a,#___str_33
      0005FA C0 E0            [24] 2336 	push	acc
      0005FC 74s02            [12] 2337 	mov	a,#(___str_33 >> 8)
      0005FE C0 E0            [24] 2338 	push	acc
      000600 12r00r00         [24] 2339 	lcall	_printf_fast_f
      000603 15 81            [12] 2340 	dec	sp
      000605 15 81            [12] 2341 	dec	sp
                                   2342 ;	src/main.c:614: printf_fast_f("k: Cmd++\r\n");
      000607 74r3E            [12] 2343 	mov	a,#___str_34
      000609 C0 E0            [24] 2344 	push	acc
      00060B 74s02            [12] 2345 	mov	a,#(___str_34 >> 8)
      00060D C0 E0            [24] 2346 	push	acc
      00060F 12r00r00         [24] 2347 	lcall	_printf_fast_f
      000612 15 81            [12] 2348 	dec	sp
      000614 15 81            [12] 2349 	dec	sp
                                   2350 ;	src/main.c:615: printf_fast_f("l: Addr++\r\n");
      000616 74r49            [12] 2351 	mov	a,#___str_35
      000618 C0 E0            [24] 2352 	push	acc
      00061A 74s02            [12] 2353 	mov	a,#(___str_35 >> 8)
      00061C C0 E0            [24] 2354 	push	acc
      00061E 12r00r00         [24] 2355 	lcall	_printf_fast_f
      000621 15 81            [12] 2356 	dec	sp
      000623 15 81            [12] 2357 	dec	sp
                                   2358 ;	src/main.c:616: printf_fast_f("s: sending\r\n");
      000625 74r55            [12] 2359 	mov	a,#___str_36
      000627 C0 E0            [24] 2360 	push	acc
      000629 74s02            [12] 2361 	mov	a,#(___str_36 >> 8)
      00062B C0 E0            [24] 2362 	push	acc
      00062D 12r00r00         [24] 2363 	lcall	_printf_fast_f
      000630 15 81            [12] 2364 	dec	sp
      000632 15 81            [12] 2365 	dec	sp
                                   2366 ;	src/main.c:617: }
      000634 22               [24] 2367 	ret
                                   2368 ;------------------------------------------------------------
                                   2369 ;Allocation info for local variables in function 'act_by_one_key'
                                   2370 ;------------------------------------------------------------
                                   2371 ;apu8LineFiCmd             Allocated with name '_act_by_one_key_PARM_2'
                                   2372 ;apu8LineFiAddr            Allocated with name '_act_by_one_key_PARM_3'
                                   2373 ;au8RxUART                 Allocated to registers r7 
                                   2374 ;sloc0                     Allocated with name '_act_by_one_key_sloc0_1_0'
                                   2375 ;u8Data                    Allocated with name '_act_by_one_key_u8Data_65536_102'
                                   2376 ;------------------------------------------------------------
                                   2377 ;	src/main.c:619: void act_by_one_key(uint8 au8RxUART, uint8 * apu8LineFiCmd, uint8 * apu8LineFiAddr)
                                   2378 ;	-----------------------------------------
                                   2379 ;	 function act_by_one_key
                                   2380 ;	-----------------------------------------
      000635                       2381 _act_by_one_key:
      000635 AF 82            [24] 2382 	mov	r7,dpl
                                   2383 ;	src/main.c:622: switch(au8RxUART) {
      000637 BF 2B 03         [24] 2384 	cjne	r7,#0x2b,00246$
      00063A 02r0Cr1E         [24] 2385 	ljmp	00129$
      00063D                       2386 00246$:
      00063D BF 2D 03         [24] 2387 	cjne	r7,#0x2d,00247$
      000640 02r0Cr43         [24] 2388 	ljmp	00130$
      000643                       2389 00247$:
      000643 BF 30 03         [24] 2390 	cjne	r7,#0x30,00248$
      000646 02r06rDE         [24] 2391 	ljmp	00102$
      000649                       2392 00248$:
      000649 BF 31 03         [24] 2393 	cjne	r7,#0x31,00249$
      00064C 02r06rF7         [24] 2394 	ljmp	00103$
      00064F                       2395 00249$:
      00064F BF 32 03         [24] 2396 	cjne	r7,#0x32,00250$
      000652 02r07r0C         [24] 2397 	ljmp	00104$
      000655                       2398 00250$:
      000655 BF 33 03         [24] 2399 	cjne	r7,#0x33,00251$
      000658 02r07r21         [24] 2400 	ljmp	00105$
      00065B                       2401 00251$:
      00065B BF 34 03         [24] 2402 	cjne	r7,#0x34,00252$
      00065E 02r07r36         [24] 2403 	ljmp	00106$
      000661                       2404 00252$:
      000661 BF 35 03         [24] 2405 	cjne	r7,#0x35,00253$
      000664 02r07r58         [24] 2406 	ljmp	00107$
      000667                       2407 00253$:
      000667 BF 36 03         [24] 2408 	cjne	r7,#0x36,00254$
      00066A 02r07r8E         [24] 2409 	ljmp	00110$
      00066D                       2410 00254$:
      00066D BF 37 03         [24] 2411 	cjne	r7,#0x37,00255$
      000670 02r07rBC         [24] 2412 	ljmp	00111$
      000673                       2413 00255$:
      000673 BF 48 03         [24] 2414 	cjne	r7,#0x48,00256$
      000676 02r05r62         [24] 2415 	ljmp	_print_help
      000679                       2416 00256$:
      000679 BF 53 03         [24] 2417 	cjne	r7,#0x53,00257$
      00067C 02r0BrF4         [24] 2418 	ljmp	00128$
      00067F                       2419 00257$:
      00067F BF 61 03         [24] 2420 	cjne	r7,#0x61,00258$
      000682 02r0Cr67         [24] 2421 	ljmp	00131$
      000685                       2422 00258$:
      000685 BF 62 03         [24] 2423 	cjne	r7,#0x62,00259$
      000688 02r0Cr6D         [24] 2424 	ljmp	00132$
      00068B                       2425 00259$:
      00068B BF 63 03         [24] 2426 	cjne	r7,#0x63,00260$
      00068E 02r0Cr73         [24] 2427 	ljmp	00133$
      000691                       2428 00260$:
      000691 BF 68 03         [24] 2429 	cjne	r7,#0x68,00261$
      000694 02r07rEA         [24] 2430 	ljmp	00112$
      000697                       2431 00261$:
      000697 BF 6A 03         [24] 2432 	cjne	r7,#0x6a,00262$
      00069A 02r08r76         [24] 2433 	ljmp	00116$
      00069D                       2434 00262$:
      00069D BF 6B 03         [24] 2435 	cjne	r7,#0x6b,00263$
      0006A0 02r08rA9         [24] 2436 	ljmp	00117$
      0006A3                       2437 00263$:
      0006A3 BF 6C 03         [24] 2438 	cjne	r7,#0x6c,00264$
      0006A6 02r08rDC         [24] 2439 	ljmp	00118$
      0006A9                       2440 00264$:
      0006A9 BF 73 03         [24] 2441 	cjne	r7,#0x73,00265$
      0006AC 02r09r68         [24] 2442 	ljmp	00122$
      0006AF                       2443 00265$:
      0006AF BF 74 02         [24] 2444 	cjne	r7,#0x74,00266$
      0006B2 80 07            [24] 2445 	sjmp	00101$
      0006B4                       2446 00266$:
      0006B4 BF 75 03         [24] 2447 	cjne	r7,#0x75,00267$
      0006B7 02r0Br35         [24] 2448 	ljmp	00127$
      0006BA                       2449 00267$:
      0006BA 22               [24] 2450 	ret
                                   2451 ;	src/main.c:623: case 't' : // 1msec 카운터 확인, 5초에 40,000
      0006BB                       2452 00101$:
                                   2453 ;	src/main.c:624: printf_fast_f("%u\n\r", gu16TimeCnt);
      0006BB 90r00r71         [24] 2454 	mov	dptr,#_gu16TimeCnt
      0006BE E0               [24] 2455 	movx	a,@dptr
      0006BF C0 E0            [24] 2456 	push	acc
      0006C1 A3               [24] 2457 	inc	dptr
      0006C2 E0               [24] 2458 	movx	a,@dptr
      0006C3 C0 E0            [24] 2459 	push	acc
      0006C5 74r62            [12] 2460 	mov	a,#___str_37
      0006C7 C0 E0            [24] 2461 	push	acc
      0006C9 74s02            [12] 2462 	mov	a,#(___str_37 >> 8)
      0006CB C0 E0            [24] 2463 	push	acc
      0006CD 12r00r00         [24] 2464 	lcall	_printf_fast_f
      0006D0 E5 81            [12] 2465 	mov	a,sp
      0006D2 24 FC            [12] 2466 	add	a,#0xfc
      0006D4 F5 81            [12] 2467 	mov	sp,a
                                   2468 ;	src/main.c:625: gu16TimeCnt = 0;
      0006D6 90r00r71         [24] 2469 	mov	dptr,#_gu16TimeCnt
      0006D9 E4               [12] 2470 	clr	a
      0006DA F0               [24] 2471 	movx	@dptr,a
      0006DB A3               [24] 2472 	inc	dptr
      0006DC F0               [24] 2473 	movx	@dptr,a
                                   2474 ;	src/main.c:626: break;
      0006DD 22               [24] 2475 	ret
                                   2476 ;	src/main.c:627: case '0' :
      0006DE                       2477 00102$:
                                   2478 ;	src/main.c:628: gu8UART = 0;
      0006DE 75*00 00         [24] 2479 	mov	_gu8UART,#0x00
                                   2480 ;	src/main.c:629: LINEFI_EN0 = 0;
                                   2481 ;	assignBit
      0006E1 C2 90            [12] 2482 	clr	_P10
                                   2483 ;	src/main.c:630: LINEFI_EN1 = 0;
                                   2484 ;	assignBit
      0006E3 C2 91            [12] 2485 	clr	_P11
                                   2486 ;	src/main.c:631: LINEFI_EN2 = 0;
                                   2487 ;	assignBit
      0006E5 C2 92            [12] 2488 	clr	_P12
                                   2489 ;	src/main.c:632: printf_fast_f("LINEFI_EN0=0\n\r");
      0006E7 74r67            [12] 2490 	mov	a,#___str_38
      0006E9 C0 E0            [24] 2491 	push	acc
      0006EB 74s02            [12] 2492 	mov	a,#(___str_38 >> 8)
      0006ED C0 E0            [24] 2493 	push	acc
      0006EF 12r00r00         [24] 2494 	lcall	_printf_fast_f
      0006F2 15 81            [12] 2495 	dec	sp
      0006F4 15 81            [12] 2496 	dec	sp
                                   2497 ;	src/main.c:633: break;
      0006F6 22               [24] 2498 	ret
                                   2499 ;	src/main.c:634: case '1' :
      0006F7                       2500 00103$:
                                   2501 ;	src/main.c:635: gu8UART = 0;
      0006F7 75*00 00         [24] 2502 	mov	_gu8UART,#0x00
                                   2503 ;	src/main.c:636: LINEFI_EN0 = 1;
                                   2504 ;	assignBit
      0006FA D2 90            [12] 2505 	setb	_P10
                                   2506 ;	src/main.c:637: printf_fast_f("LINEFI_EN0=1\n\r");
      0006FC 74r76            [12] 2507 	mov	a,#___str_39
      0006FE C0 E0            [24] 2508 	push	acc
      000700 74s02            [12] 2509 	mov	a,#(___str_39 >> 8)
      000702 C0 E0            [24] 2510 	push	acc
      000704 12r00r00         [24] 2511 	lcall	_printf_fast_f
      000707 15 81            [12] 2512 	dec	sp
      000709 15 81            [12] 2513 	dec	sp
                                   2514 ;	src/main.c:638: break;
      00070B 22               [24] 2515 	ret
                                   2516 ;	src/main.c:639: case '2' :
      00070C                       2517 00104$:
                                   2518 ;	src/main.c:640: gu8UART = 0;
      00070C 75*00 00         [24] 2519 	mov	_gu8UART,#0x00
                                   2520 ;	src/main.c:641: LINEFI_TX = 0;
                                   2521 ;	assignBit
      00070F C2 96            [12] 2522 	clr	_P16
                                   2523 ;	src/main.c:642: printf_fast_f("LINEFI_TX=0\n\r");
      000711 74r85            [12] 2524 	mov	a,#___str_40
      000713 C0 E0            [24] 2525 	push	acc
      000715 74s02            [12] 2526 	mov	a,#(___str_40 >> 8)
      000717 C0 E0            [24] 2527 	push	acc
      000719 12r00r00         [24] 2528 	lcall	_printf_fast_f
      00071C 15 81            [12] 2529 	dec	sp
      00071E 15 81            [12] 2530 	dec	sp
                                   2531 ;	src/main.c:643: break;
      000720 22               [24] 2532 	ret
                                   2533 ;	src/main.c:644: case '3' :
      000721                       2534 00105$:
                                   2535 ;	src/main.c:645: gu8UART = 0;
      000721 75*00 00         [24] 2536 	mov	_gu8UART,#0x00
                                   2537 ;	src/main.c:646: LINEFI_TX = 1;
                                   2538 ;	assignBit
      000724 D2 96            [12] 2539 	setb	_P16
                                   2540 ;	src/main.c:647: printf_fast_f("LINEFI_TX=1\n\r");
      000726 74r93            [12] 2541 	mov	a,#___str_41
      000728 C0 E0            [24] 2542 	push	acc
      00072A 74s02            [12] 2543 	mov	a,#(___str_41 >> 8)
      00072C C0 E0            [24] 2544 	push	acc
      00072E 12r00r00         [24] 2545 	lcall	_printf_fast_f
      000731 15 81            [12] 2546 	dec	sp
      000733 15 81            [12] 2547 	dec	sp
                                   2548 ;	src/main.c:648: break;
      000735 22               [24] 2549 	ret
                                   2550 ;	src/main.c:649: case '4' :
      000736                       2551 00106$:
                                   2552 ;	src/main.c:650: gu8UART = 0;
      000736 75*00 00         [24] 2553 	mov	_gu8UART,#0x00
                                   2554 ;	src/main.c:651: TOGGLE(LINEFI_TX);
      000739 B2 96            [12] 2555 	cpl	_P16
                                   2556 ;	src/main.c:652: printf_fast_f("LINEFI_TX=%d\n\r", LINEFI_TX);
      00073B A2 96            [12] 2557 	mov	c,_P16
      00073D E4               [12] 2558 	clr	a
      00073E 33               [12] 2559 	rlc	a
      00073F FE               [12] 2560 	mov	r6,a
      000740 7F 00            [12] 2561 	mov	r7,#0x00
      000742 C0 06            [24] 2562 	push	ar6
      000744 C0 07            [24] 2563 	push	ar7
      000746 74rA1            [12] 2564 	mov	a,#___str_42
      000748 C0 E0            [24] 2565 	push	acc
      00074A 74s02            [12] 2566 	mov	a,#(___str_42 >> 8)
      00074C C0 E0            [24] 2567 	push	acc
      00074E 12r00r00         [24] 2568 	lcall	_printf_fast_f
      000751 E5 81            [12] 2569 	mov	a,sp
      000753 24 FC            [12] 2570 	add	a,#0xfc
      000755 F5 81            [12] 2571 	mov	sp,a
                                   2572 ;	src/main.c:653: break;
      000757 22               [24] 2573 	ret
                                   2574 ;	src/main.c:654: case '5' :
      000758                       2575 00107$:
                                   2576 ;	src/main.c:655: gu8UART = 0;
      000758 75*00 00         [24] 2577 	mov	_gu8UART,#0x00
                                   2578 ;	src/main.c:656: if (LINEFI_EN0 == 0) {
      00075B 20 90 02         [24] 2579 	jb	_P10,00109$
                                   2580 ;	src/main.c:657: LINEFI_TX = 1;
                                   2581 ;	assignBit
      00075E D2 96            [12] 2582 	setb	_P16
      000760                       2583 00109$:
                                   2584 ;	src/main.c:659: TOGGLE(LINEFI_EN0);
      000760 B2 90            [12] 2585 	cpl	_P10
                                   2586 ;	src/main.c:660: printf_fast_f("LINEFI_EN0=");
      000762 74rB0            [12] 2587 	mov	a,#___str_43
      000764 C0 E0            [24] 2588 	push	acc
      000766 74s02            [12] 2589 	mov	a,#(___str_43 >> 8)
      000768 C0 E0            [24] 2590 	push	acc
      00076A 12r00r00         [24] 2591 	lcall	_printf_fast_f
      00076D 15 81            [12] 2592 	dec	sp
      00076F 15 81            [12] 2593 	dec	sp
                                   2594 ;	src/main.c:661: printf_fast_f("%d\n\r", LINEFI_EN0);
      000771 A2 90            [12] 2595 	mov	c,_P10
      000773 E4               [12] 2596 	clr	a
      000774 33               [12] 2597 	rlc	a
      000775 FE               [12] 2598 	mov	r6,a
      000776 7F 00            [12] 2599 	mov	r7,#0x00
      000778 C0 06            [24] 2600 	push	ar6
      00077A C0 07            [24] 2601 	push	ar7
      00077C 74rBC            [12] 2602 	mov	a,#___str_44
      00077E C0 E0            [24] 2603 	push	acc
      000780 74s02            [12] 2604 	mov	a,#(___str_44 >> 8)
      000782 C0 E0            [24] 2605 	push	acc
      000784 12r00r00         [24] 2606 	lcall	_printf_fast_f
      000787 E5 81            [12] 2607 	mov	a,sp
      000789 24 FC            [12] 2608 	add	a,#0xfc
      00078B F5 81            [12] 2609 	mov	sp,a
                                   2610 ;	src/main.c:662: break;
      00078D 22               [24] 2611 	ret
                                   2612 ;	src/main.c:663: case '6' :
      00078E                       2613 00110$:
                                   2614 ;	src/main.c:664: TOGGLE(LINEFI_EN1);
      00078E B2 91            [12] 2615 	cpl	_P11
                                   2616 ;	src/main.c:665: printf_fast_f("LINEFI_EN1=");
      000790 74rC1            [12] 2617 	mov	a,#___str_45
      000792 C0 E0            [24] 2618 	push	acc
      000794 74s02            [12] 2619 	mov	a,#(___str_45 >> 8)
      000796 C0 E0            [24] 2620 	push	acc
      000798 12r00r00         [24] 2621 	lcall	_printf_fast_f
      00079B 15 81            [12] 2622 	dec	sp
      00079D 15 81            [12] 2623 	dec	sp
                                   2624 ;	src/main.c:666: printf_fast_f("%d\n\r", LINEFI_EN1);
      00079F A2 91            [12] 2625 	mov	c,_P11
      0007A1 E4               [12] 2626 	clr	a
      0007A2 33               [12] 2627 	rlc	a
      0007A3 FE               [12] 2628 	mov	r6,a
      0007A4 7F 00            [12] 2629 	mov	r7,#0x00
      0007A6 C0 06            [24] 2630 	push	ar6
      0007A8 C0 07            [24] 2631 	push	ar7
      0007AA 74rBC            [12] 2632 	mov	a,#___str_44
      0007AC C0 E0            [24] 2633 	push	acc
      0007AE 74s02            [12] 2634 	mov	a,#(___str_44 >> 8)
      0007B0 C0 E0            [24] 2635 	push	acc
      0007B2 12r00r00         [24] 2636 	lcall	_printf_fast_f
      0007B5 E5 81            [12] 2637 	mov	a,sp
      0007B7 24 FC            [12] 2638 	add	a,#0xfc
      0007B9 F5 81            [12] 2639 	mov	sp,a
                                   2640 ;	src/main.c:667: break;
      0007BB 22               [24] 2641 	ret
                                   2642 ;	src/main.c:668: case '7' :
      0007BC                       2643 00111$:
                                   2644 ;	src/main.c:669: TOGGLE(LINEFI_EN2);
      0007BC B2 92            [12] 2645 	cpl	_P12
                                   2646 ;	src/main.c:670: printf_fast_f("LINEFI_EN2=");
      0007BE 74rCD            [12] 2647 	mov	a,#___str_46
      0007C0 C0 E0            [24] 2648 	push	acc
      0007C2 74s02            [12] 2649 	mov	a,#(___str_46 >> 8)
      0007C4 C0 E0            [24] 2650 	push	acc
      0007C6 12r00r00         [24] 2651 	lcall	_printf_fast_f
      0007C9 15 81            [12] 2652 	dec	sp
      0007CB 15 81            [12] 2653 	dec	sp
                                   2654 ;	src/main.c:671: printf_fast_f("%d\n\r", LINEFI_EN2);
      0007CD A2 92            [12] 2655 	mov	c,_P12
      0007CF E4               [12] 2656 	clr	a
      0007D0 33               [12] 2657 	rlc	a
      0007D1 FE               [12] 2658 	mov	r6,a
      0007D2 7F 00            [12] 2659 	mov	r7,#0x00
      0007D4 C0 06            [24] 2660 	push	ar6
      0007D6 C0 07            [24] 2661 	push	ar7
      0007D8 74rBC            [12] 2662 	mov	a,#___str_44
      0007DA C0 E0            [24] 2663 	push	acc
      0007DC 74s02            [12] 2664 	mov	a,#(___str_44 >> 8)
      0007DE C0 E0            [24] 2665 	push	acc
      0007E0 12r00r00         [24] 2666 	lcall	_printf_fast_f
      0007E3 E5 81            [12] 2667 	mov	a,sp
      0007E5 24 FC            [12] 2668 	add	a,#0xfc
      0007E7 F5 81            [12] 2669 	mov	sp,a
                                   2670 ;	src/main.c:672: break;
      0007E9 22               [24] 2671 	ret
                                   2672 ;	src/main.c:676: case 'h' : // <<
      0007EA                       2673 00112$:
                                   2674 ;	src/main.c:677: (*apu8LineFiAddr)--;
      0007EA AD*0B            [24] 2675 	mov	r5,_act_by_one_key_PARM_3
      0007EC AE*0C            [24] 2676 	mov	r6,(_act_by_one_key_PARM_3 + 1)
      0007EE AF*0D            [24] 2677 	mov	r7,(_act_by_one_key_PARM_3 + 2)
      0007F0 8D 82            [24] 2678 	mov	dpl,r5
      0007F2 8E 83            [24] 2679 	mov	dph,r6
      0007F4 8F F0            [24] 2680 	mov	b,r7
      0007F6 12r00r00         [24] 2681 	lcall	__gptrget
      0007F9 FC               [12] 2682 	mov	r4,a
      0007FA 1C               [12] 2683 	dec	r4
      0007FB 8D 82            [24] 2684 	mov	dpl,r5
      0007FD 8E 83            [24] 2685 	mov	dph,r6
      0007FF 8F F0            [24] 2686 	mov	b,r7
      000801 EC               [12] 2687 	mov	a,r4
      000802 12r00r00         [24] 2688 	lcall	__gptrput
                                   2689 ;	src/main.c:678: if (*apu8LineFiCmd == 1) {
      000805 AA*08            [24] 2690 	mov	r2,_act_by_one_key_PARM_2
      000807 AB*09            [24] 2691 	mov	r3,(_act_by_one_key_PARM_2 + 1)
      000809 AC*0A            [24] 2692 	mov	r4,(_act_by_one_key_PARM_2 + 2)
      00080B 8A 82            [24] 2693 	mov	dpl,r2
      00080D 8B 83            [24] 2694 	mov	dph,r3
      00080F 8C F0            [24] 2695 	mov	b,r4
      000811 12r00r00         [24] 2696 	lcall	__gptrget
      000814 FA               [12] 2697 	mov	r2,a
      000815 BA 01 3C         [24] 2698 	cjne	r2,#0x01,00114$
                                   2699 ;	src/main.c:679: printf_fast_f("uart speed: %lu:\n\r", gpu32UartSpeed[*apu8LineFiAddr]);
      000818 8D 82            [24] 2700 	mov	dpl,r5
      00081A 8E 83            [24] 2701 	mov	dph,r6
      00081C 8F F0            [24] 2702 	mov	b,r7
      00081E 12r00r00         [24] 2703 	lcall	__gptrget
      000821 75 F0 04         [24] 2704 	mov	b,#0x04
      000824 A4               [48] 2705 	mul	ab
      000825 24r75            [12] 2706 	add	a,#_gpu32UartSpeed
      000827 F5 82            [12] 2707 	mov	dpl,a
      000829 74s00            [12] 2708 	mov	a,#(_gpu32UartSpeed >> 8)
      00082B 35 F0            [12] 2709 	addc	a,b
      00082D F5 83            [12] 2710 	mov	dph,a
      00082F E0               [24] 2711 	movx	a,@dptr
      000830 F9               [12] 2712 	mov	r1,a
      000831 A3               [24] 2713 	inc	dptr
      000832 E0               [24] 2714 	movx	a,@dptr
      000833 FA               [12] 2715 	mov	r2,a
      000834 A3               [24] 2716 	inc	dptr
      000835 E0               [24] 2717 	movx	a,@dptr
      000836 FB               [12] 2718 	mov	r3,a
      000837 A3               [24] 2719 	inc	dptr
      000838 E0               [24] 2720 	movx	a,@dptr
      000839 FC               [12] 2721 	mov	r4,a
      00083A C0 01            [24] 2722 	push	ar1
      00083C C0 02            [24] 2723 	push	ar2
      00083E C0 03            [24] 2724 	push	ar3
      000840 C0 04            [24] 2725 	push	ar4
      000842 74rD9            [12] 2726 	mov	a,#___str_47
      000844 C0 E0            [24] 2727 	push	acc
      000846 74s02            [12] 2728 	mov	a,#(___str_47 >> 8)
      000848 C0 E0            [24] 2729 	push	acc
      00084A 12r00r00         [24] 2730 	lcall	_printf_fast_f
      00084D E5 81            [12] 2731 	mov	a,sp
      00084F 24 FA            [12] 2732 	add	a,#0xfa
      000851 F5 81            [12] 2733 	mov	sp,a
      000853 22               [24] 2734 	ret
      000854                       2735 00114$:
                                   2736 ;	src/main.c:682: printf_fast_f("address: %d\n\r", *apu8LineFiAddr);
      000854 8D 82            [24] 2737 	mov	dpl,r5
      000856 8E 83            [24] 2738 	mov	dph,r6
      000858 8F F0            [24] 2739 	mov	b,r7
      00085A 12r00r00         [24] 2740 	lcall	__gptrget
      00085D FD               [12] 2741 	mov	r5,a
      00085E 7F 00            [12] 2742 	mov	r7,#0x00
      000860 C0 05            [24] 2743 	push	ar5
      000862 C0 07            [24] 2744 	push	ar7
      000864 74rEC            [12] 2745 	mov	a,#___str_48
      000866 C0 E0            [24] 2746 	push	acc
      000868 74s02            [12] 2747 	mov	a,#(___str_48 >> 8)
      00086A C0 E0            [24] 2748 	push	acc
      00086C 12r00r00         [24] 2749 	lcall	_printf_fast_f
      00086F E5 81            [12] 2750 	mov	a,sp
      000871 24 FC            [12] 2751 	add	a,#0xfc
      000873 F5 81            [12] 2752 	mov	sp,a
                                   2753 ;	src/main.c:684: break;
      000875 22               [24] 2754 	ret
                                   2755 ;	src/main.c:685: case 'j' : //  down
      000876                       2756 00116$:
                                   2757 ;	src/main.c:686: (*apu8LineFiCmd)--;
      000876 AD*08            [24] 2758 	mov	r5,_act_by_one_key_PARM_2
      000878 AE*09            [24] 2759 	mov	r6,(_act_by_one_key_PARM_2 + 1)
      00087A AF*0A            [24] 2760 	mov	r7,(_act_by_one_key_PARM_2 + 2)
      00087C 8D 82            [24] 2761 	mov	dpl,r5
      00087E 8E 83            [24] 2762 	mov	dph,r6
      000880 8F F0            [24] 2763 	mov	b,r7
      000882 12r00r00         [24] 2764 	lcall	__gptrget
      000885 FC               [12] 2765 	mov	r4,a
      000886 1C               [12] 2766 	dec	r4
      000887 8D 82            [24] 2767 	mov	dpl,r5
      000889 8E 83            [24] 2768 	mov	dph,r6
      00088B 8F F0            [24] 2769 	mov	b,r7
      00088D EC               [12] 2770 	mov	a,r4
      00088E 12r00r00         [24] 2771 	lcall	__gptrput
                                   2772 ;	src/main.c:687: printf_fast_f("command: %d\n\r", *apu8LineFiCmd);
      000891 7F 00            [12] 2773 	mov	r7,#0x00
      000893 C0 04            [24] 2774 	push	ar4
      000895 C0 07            [24] 2775 	push	ar7
      000897 74rFA            [12] 2776 	mov	a,#___str_49
      000899 C0 E0            [24] 2777 	push	acc
      00089B 74s02            [12] 2778 	mov	a,#(___str_49 >> 8)
      00089D C0 E0            [24] 2779 	push	acc
      00089F 12r00r00         [24] 2780 	lcall	_printf_fast_f
      0008A2 E5 81            [12] 2781 	mov	a,sp
      0008A4 24 FC            [12] 2782 	add	a,#0xfc
      0008A6 F5 81            [12] 2783 	mov	sp,a
                                   2784 ;	src/main.c:688: break;
      0008A8 22               [24] 2785 	ret
                                   2786 ;	src/main.c:689: case 'k' : // up
      0008A9                       2787 00117$:
                                   2788 ;	src/main.c:690: (*apu8LineFiCmd)++;
      0008A9 AD*08            [24] 2789 	mov	r5,_act_by_one_key_PARM_2
      0008AB AE*09            [24] 2790 	mov	r6,(_act_by_one_key_PARM_2 + 1)
      0008AD AF*0A            [24] 2791 	mov	r7,(_act_by_one_key_PARM_2 + 2)
      0008AF 8D 82            [24] 2792 	mov	dpl,r5
      0008B1 8E 83            [24] 2793 	mov	dph,r6
      0008B3 8F F0            [24] 2794 	mov	b,r7
      0008B5 12r00r00         [24] 2795 	lcall	__gptrget
      0008B8 FC               [12] 2796 	mov	r4,a
      0008B9 0C               [12] 2797 	inc	r4
      0008BA 8D 82            [24] 2798 	mov	dpl,r5
      0008BC 8E 83            [24] 2799 	mov	dph,r6
      0008BE 8F F0            [24] 2800 	mov	b,r7
      0008C0 EC               [12] 2801 	mov	a,r4
      0008C1 12r00r00         [24] 2802 	lcall	__gptrput
                                   2803 ;	src/main.c:691: printf_fast_f("command: %d\n\r", *apu8LineFiCmd);
      0008C4 7F 00            [12] 2804 	mov	r7,#0x00
      0008C6 C0 04            [24] 2805 	push	ar4
      0008C8 C0 07            [24] 2806 	push	ar7
      0008CA 74rFA            [12] 2807 	mov	a,#___str_49
      0008CC C0 E0            [24] 2808 	push	acc
      0008CE 74s02            [12] 2809 	mov	a,#(___str_49 >> 8)
      0008D0 C0 E0            [24] 2810 	push	acc
      0008D2 12r00r00         [24] 2811 	lcall	_printf_fast_f
      0008D5 E5 81            [12] 2812 	mov	a,sp
      0008D7 24 FC            [12] 2813 	add	a,#0xfc
      0008D9 F5 81            [12] 2814 	mov	sp,a
                                   2815 ;	src/main.c:692: break;
      0008DB 22               [24] 2816 	ret
                                   2817 ;	src/main.c:693: case 'l' : // >>
      0008DC                       2818 00118$:
                                   2819 ;	src/main.c:694: (*apu8LineFiAddr)++;
      0008DC AD*0B            [24] 2820 	mov	r5,_act_by_one_key_PARM_3
      0008DE AE*0C            [24] 2821 	mov	r6,(_act_by_one_key_PARM_3 + 1)
      0008E0 AF*0D            [24] 2822 	mov	r7,(_act_by_one_key_PARM_3 + 2)
      0008E2 8D 82            [24] 2823 	mov	dpl,r5
      0008E4 8E 83            [24] 2824 	mov	dph,r6
      0008E6 8F F0            [24] 2825 	mov	b,r7
      0008E8 12r00r00         [24] 2826 	lcall	__gptrget
      0008EB FC               [12] 2827 	mov	r4,a
      0008EC 0C               [12] 2828 	inc	r4
      0008ED 8D 82            [24] 2829 	mov	dpl,r5
      0008EF 8E 83            [24] 2830 	mov	dph,r6
      0008F1 8F F0            [24] 2831 	mov	b,r7
      0008F3 EC               [12] 2832 	mov	a,r4
      0008F4 12r00r00         [24] 2833 	lcall	__gptrput
                                   2834 ;	src/main.c:695: if (*apu8LineFiCmd == 1) {
      0008F7 AA*08            [24] 2835 	mov	r2,_act_by_one_key_PARM_2
      0008F9 AB*09            [24] 2836 	mov	r3,(_act_by_one_key_PARM_2 + 1)
      0008FB AC*0A            [24] 2837 	mov	r4,(_act_by_one_key_PARM_2 + 2)
      0008FD 8A 82            [24] 2838 	mov	dpl,r2
      0008FF 8B 83            [24] 2839 	mov	dph,r3
      000901 8C F0            [24] 2840 	mov	b,r4
      000903 12r00r00         [24] 2841 	lcall	__gptrget
      000906 FA               [12] 2842 	mov	r2,a
      000907 BA 01 3C         [24] 2843 	cjne	r2,#0x01,00120$
                                   2844 ;	src/main.c:696: printf_fast_f("uart speed: %lu:\n\r", gpu32UartSpeed[*apu8LineFiAddr]);
      00090A 8D 82            [24] 2845 	mov	dpl,r5
      00090C 8E 83            [24] 2846 	mov	dph,r6
      00090E 8F F0            [24] 2847 	mov	b,r7
      000910 12r00r00         [24] 2848 	lcall	__gptrget
      000913 75 F0 04         [24] 2849 	mov	b,#0x04
      000916 A4               [48] 2850 	mul	ab
      000917 24r75            [12] 2851 	add	a,#_gpu32UartSpeed
      000919 F5 82            [12] 2852 	mov	dpl,a
      00091B 74s00            [12] 2853 	mov	a,#(_gpu32UartSpeed >> 8)
      00091D 35 F0            [12] 2854 	addc	a,b
      00091F F5 83            [12] 2855 	mov	dph,a
      000921 E0               [24] 2856 	movx	a,@dptr
      000922 F9               [12] 2857 	mov	r1,a
      000923 A3               [24] 2858 	inc	dptr
      000924 E0               [24] 2859 	movx	a,@dptr
      000925 FA               [12] 2860 	mov	r2,a
      000926 A3               [24] 2861 	inc	dptr
      000927 E0               [24] 2862 	movx	a,@dptr
      000928 FB               [12] 2863 	mov	r3,a
      000929 A3               [24] 2864 	inc	dptr
      00092A E0               [24] 2865 	movx	a,@dptr
      00092B FC               [12] 2866 	mov	r4,a
      00092C C0 01            [24] 2867 	push	ar1
      00092E C0 02            [24] 2868 	push	ar2
      000930 C0 03            [24] 2869 	push	ar3
      000932 C0 04            [24] 2870 	push	ar4
      000934 74rD9            [12] 2871 	mov	a,#___str_47
      000936 C0 E0            [24] 2872 	push	acc
      000938 74s02            [12] 2873 	mov	a,#(___str_47 >> 8)
      00093A C0 E0            [24] 2874 	push	acc
      00093C 12r00r00         [24] 2875 	lcall	_printf_fast_f
      00093F E5 81            [12] 2876 	mov	a,sp
      000941 24 FA            [12] 2877 	add	a,#0xfa
      000943 F5 81            [12] 2878 	mov	sp,a
      000945 22               [24] 2879 	ret
      000946                       2880 00120$:
                                   2881 ;	src/main.c:699: printf_fast_f("address: %d\n\r", *apu8LineFiAddr);
      000946 8D 82            [24] 2882 	mov	dpl,r5
      000948 8E 83            [24] 2883 	mov	dph,r6
      00094A 8F F0            [24] 2884 	mov	b,r7
      00094C 12r00r00         [24] 2885 	lcall	__gptrget
      00094F FD               [12] 2886 	mov	r5,a
      000950 7F 00            [12] 2887 	mov	r7,#0x00
      000952 C0 05            [24] 2888 	push	ar5
      000954 C0 07            [24] 2889 	push	ar7
      000956 74rEC            [12] 2890 	mov	a,#___str_48
      000958 C0 E0            [24] 2891 	push	acc
      00095A 74s02            [12] 2892 	mov	a,#(___str_48 >> 8)
      00095C C0 E0            [24] 2893 	push	acc
      00095E 12r00r00         [24] 2894 	lcall	_printf_fast_f
      000961 E5 81            [12] 2895 	mov	a,sp
      000963 24 FC            [12] 2896 	add	a,#0xfc
      000965 F5 81            [12] 2897 	mov	sp,a
                                   2898 ;	src/main.c:701: break;
      000967 22               [24] 2899 	ret
                                   2900 ;	src/main.c:702: case 's' :
      000968                       2901 00122$:
                                   2902 ;	src/main.c:703: switch (*apu8LineFiCmd) {
      000968 AD*08            [24] 2903 	mov	r5,_act_by_one_key_PARM_2
      00096A AE*09            [24] 2904 	mov	r6,(_act_by_one_key_PARM_2 + 1)
      00096C AF*0A            [24] 2905 	mov	r7,(_act_by_one_key_PARM_2 + 2)
      00096E 8D 82            [24] 2906 	mov	dpl,r5
      000970 8E 83            [24] 2907 	mov	dph,r6
      000972 8F F0            [24] 2908 	mov	b,r7
      000974 12r00r00         [24] 2909 	lcall	__gptrget
      000977 FC               [12] 2910 	mov	r4,a
      000978 60 09            [24] 2911 	jz	00123$
      00097A BC 01 03         [24] 2912 	cjne	r4,#0x01,00274$
      00097D 02r0Ar16         [24] 2913 	ljmp	00124$
      000980                       2914 00274$:
      000980 02r0ArC3         [24] 2915 	ljmp	00125$
                                   2916 ;	src/main.c:704: case 0 : // address setting
      000983                       2917 00123$:
                                   2918 ;	src/main.c:705: send_octet_to_linefi((((*apu8LineFiAddr)<<4)&0xF0) | (*apu8LineFiCmd)&0x0F);
      000983 85*0B*0E         [24] 2919 	mov	_act_by_one_key_sloc0_1_0,_act_by_one_key_PARM_3
      000986 85*0C*0F         [24] 2920 	mov	(_act_by_one_key_sloc0_1_0 + 1),(_act_by_one_key_PARM_3 + 1)
      000989 85*0D*10         [24] 2921 	mov	(_act_by_one_key_sloc0_1_0 + 2),(_act_by_one_key_PARM_3 + 2)
      00098C 85*0E 82         [24] 2922 	mov	dpl,_act_by_one_key_sloc0_1_0
      00098F 85*0F 83         [24] 2923 	mov	dph,(_act_by_one_key_sloc0_1_0 + 1)
      000992 85*10 F0         [24] 2924 	mov	b,(_act_by_one_key_sloc0_1_0 + 2)
      000995 12r00r00         [24] 2925 	lcall	__gptrget
      000998 C4               [12] 2926 	swap	a
      000999 54 F0            [12] 2927 	anl	a,#0xf0
      00099B F8               [12] 2928 	mov	r0,a
      00099C 53 00 F0         [24] 2929 	anl	ar0,#0xf0
      00099F 74 0F            [12] 2930 	mov	a,#0x0f
      0009A1 5C               [12] 2931 	anl	a,r4
      0009A2 48               [12] 2932 	orl	a,r0
      0009A3 F5 82            [12] 2933 	mov	dpl,a
      0009A5 C0 07            [24] 2934 	push	ar7
      0009A7 C0 06            [24] 2935 	push	ar6
      0009A9 C0 05            [24] 2936 	push	ar5
      0009AB 12r00r00         [24] 2937 	lcall	_send_octet_to_linefi
      0009AE D0 05            [24] 2938 	pop	ar5
      0009B0 D0 06            [24] 2939 	pop	ar6
      0009B2 D0 07            [24] 2940 	pop	ar7
                                   2941 ;	src/main.c:706: printf_fast_f("LineFi Sending: 0x%x:\n\r", ((*apu8LineFiAddr)<<4) | *apu8LineFiCmd);
      0009B4 85*0E 82         [24] 2942 	mov	dpl,_act_by_one_key_sloc0_1_0
      0009B7 85*0F 83         [24] 2943 	mov	dph,(_act_by_one_key_sloc0_1_0 + 1)
      0009BA 85*10 F0         [24] 2944 	mov	b,(_act_by_one_key_sloc0_1_0 + 2)
      0009BD 12r00r00         [24] 2945 	lcall	__gptrget
      0009C0 F8               [12] 2946 	mov	r0,a
      0009C1 E4               [12] 2947 	clr	a
      0009C2 C8               [12] 2948 	xch	a,r0
      0009C3 C4               [12] 2949 	swap	a
      0009C4 C8               [12] 2950 	xch	a,r0
      0009C5 68               [12] 2951 	xrl	a,r0
      0009C6 C8               [12] 2952 	xch	a,r0
      0009C7 54 F0            [12] 2953 	anl	a,#0xf0
      0009C9 C8               [12] 2954 	xch	a,r0
      0009CA 68               [12] 2955 	xrl	a,r0
      0009CB FB               [12] 2956 	mov	r3,a
      0009CC 8D 82            [24] 2957 	mov	dpl,r5
      0009CE 8E 83            [24] 2958 	mov	dph,r6
      0009D0 8F F0            [24] 2959 	mov	b,r7
      0009D2 12r00r00         [24] 2960 	lcall	__gptrget
      0009D5 7A 00            [12] 2961 	mov	r2,#0x00
      0009D7 42 00            [12] 2962 	orl	ar0,a
      0009D9 EA               [12] 2963 	mov	a,r2
      0009DA 42 03            [12] 2964 	orl	ar3,a
      0009DC C0 00            [24] 2965 	push	ar0
      0009DE C0 03            [24] 2966 	push	ar3
      0009E0 74r08            [12] 2967 	mov	a,#___str_50
      0009E2 C0 E0            [24] 2968 	push	acc
      0009E4 74s03            [12] 2969 	mov	a,#(___str_50 >> 8)
      0009E6 C0 E0            [24] 2970 	push	acc
      0009E8 12r00r00         [24] 2971 	lcall	_printf_fast_f
      0009EB E5 81            [12] 2972 	mov	a,sp
      0009ED 24 FC            [12] 2973 	add	a,#0xfc
      0009EF F5 81            [12] 2974 	mov	sp,a
                                   2975 ;	src/main.c:707: printf_fast_f("address: 0x%d:\n\r", *apu8LineFiAddr);
      0009F1 85*0E 82         [24] 2976 	mov	dpl,_act_by_one_key_sloc0_1_0
      0009F4 85*0F 83         [24] 2977 	mov	dph,(_act_by_one_key_sloc0_1_0 + 1)
      0009F7 85*10 F0         [24] 2978 	mov	b,(_act_by_one_key_sloc0_1_0 + 2)
      0009FA 12r00r00         [24] 2979 	lcall	__gptrget
      0009FD FB               [12] 2980 	mov	r3,a
      0009FE 7A 00            [12] 2981 	mov	r2,#0x00
      000A00 C0 03            [24] 2982 	push	ar3
      000A02 C0 02            [24] 2983 	push	ar2
      000A04 74r20            [12] 2984 	mov	a,#___str_51
      000A06 C0 E0            [24] 2985 	push	acc
      000A08 74s03            [12] 2986 	mov	a,#(___str_51 >> 8)
      000A0A C0 E0            [24] 2987 	push	acc
      000A0C 12r00r00         [24] 2988 	lcall	_printf_fast_f
      000A0F E5 81            [12] 2989 	mov	a,sp
      000A11 24 FC            [12] 2990 	add	a,#0xfc
      000A13 F5 81            [12] 2991 	mov	sp,a
                                   2992 ;	src/main.c:708: break;
      000A15 22               [24] 2993 	ret
                                   2994 ;	src/main.c:709: case 1 : // uart speed setting
      000A16                       2995 00124$:
                                   2996 ;	src/main.c:710: send_octet_to_linefi((((*apu8LineFiAddr)<<4)&0xF0) | (*apu8LineFiCmd)&0x0F);
      000A16 85*0B*0E         [24] 2997 	mov	_act_by_one_key_sloc0_1_0,_act_by_one_key_PARM_3
      000A19 85*0C*0F         [24] 2998 	mov	(_act_by_one_key_sloc0_1_0 + 1),(_act_by_one_key_PARM_3 + 1)
      000A1C 85*0D*10         [24] 2999 	mov	(_act_by_one_key_sloc0_1_0 + 2),(_act_by_one_key_PARM_3 + 2)
      000A1F 85*0E 82         [24] 3000 	mov	dpl,_act_by_one_key_sloc0_1_0
      000A22 85*0F 83         [24] 3001 	mov	dph,(_act_by_one_key_sloc0_1_0 + 1)
      000A25 85*10 F0         [24] 3002 	mov	b,(_act_by_one_key_sloc0_1_0 + 2)
      000A28 12r00r00         [24] 3003 	lcall	__gptrget
      000A2B C4               [12] 3004 	swap	a
      000A2C 54 F0            [12] 3005 	anl	a,#0xf0
      000A2E F8               [12] 3006 	mov	r0,a
      000A2F 53 00 F0         [24] 3007 	anl	ar0,#0xf0
      000A32 74 0F            [12] 3008 	mov	a,#0x0f
      000A34 5C               [12] 3009 	anl	a,r4
      000A35 48               [12] 3010 	orl	a,r0
      000A36 F5 82            [12] 3011 	mov	dpl,a
      000A38 C0 07            [24] 3012 	push	ar7
      000A3A C0 06            [24] 3013 	push	ar6
      000A3C C0 05            [24] 3014 	push	ar5
      000A3E 12r00r00         [24] 3015 	lcall	_send_octet_to_linefi
      000A41 D0 05            [24] 3016 	pop	ar5
      000A43 D0 06            [24] 3017 	pop	ar6
      000A45 D0 07            [24] 3018 	pop	ar7
                                   3019 ;	src/main.c:711: printf_fast_f("LineFi Sending: 0x%x:\n\r", ((*apu8LineFiAddr)<<4) | *apu8LineFiCmd);
      000A47 85*0E 82         [24] 3020 	mov	dpl,_act_by_one_key_sloc0_1_0
      000A4A 85*0F 83         [24] 3021 	mov	dph,(_act_by_one_key_sloc0_1_0 + 1)
      000A4D 85*10 F0         [24] 3022 	mov	b,(_act_by_one_key_sloc0_1_0 + 2)
      000A50 12r00r00         [24] 3023 	lcall	__gptrget
      000A53 F8               [12] 3024 	mov	r0,a
      000A54 E4               [12] 3025 	clr	a
      000A55 C8               [12] 3026 	xch	a,r0
      000A56 C4               [12] 3027 	swap	a
      000A57 C8               [12] 3028 	xch	a,r0
      000A58 68               [12] 3029 	xrl	a,r0
      000A59 C8               [12] 3030 	xch	a,r0
      000A5A 54 F0            [12] 3031 	anl	a,#0xf0
      000A5C C8               [12] 3032 	xch	a,r0
      000A5D 68               [12] 3033 	xrl	a,r0
      000A5E FB               [12] 3034 	mov	r3,a
      000A5F 8D 82            [24] 3035 	mov	dpl,r5
      000A61 8E 83            [24] 3036 	mov	dph,r6
      000A63 8F F0            [24] 3037 	mov	b,r7
      000A65 12r00r00         [24] 3038 	lcall	__gptrget
      000A68 7A 00            [12] 3039 	mov	r2,#0x00
      000A6A 42 00            [12] 3040 	orl	ar0,a
      000A6C EA               [12] 3041 	mov	a,r2
      000A6D 42 03            [12] 3042 	orl	ar3,a
      000A6F C0 00            [24] 3043 	push	ar0
      000A71 C0 03            [24] 3044 	push	ar3
      000A73 74r08            [12] 3045 	mov	a,#___str_50
      000A75 C0 E0            [24] 3046 	push	acc
      000A77 74s03            [12] 3047 	mov	a,#(___str_50 >> 8)
      000A79 C0 E0            [24] 3048 	push	acc
      000A7B 12r00r00         [24] 3049 	lcall	_printf_fast_f
      000A7E E5 81            [12] 3050 	mov	a,sp
      000A80 24 FC            [12] 3051 	add	a,#0xfc
      000A82 F5 81            [12] 3052 	mov	sp,a
                                   3053 ;	src/main.c:712: printf_fast_f("uart speed: %lu:\n\r", gpu32UartSpeed[*apu8LineFiAddr]);
      000A84 85*0E 82         [24] 3054 	mov	dpl,_act_by_one_key_sloc0_1_0
      000A87 85*0F 83         [24] 3055 	mov	dph,(_act_by_one_key_sloc0_1_0 + 1)
      000A8A 85*10 F0         [24] 3056 	mov	b,(_act_by_one_key_sloc0_1_0 + 2)
      000A8D 12r00r00         [24] 3057 	lcall	__gptrget
      000A90 75 F0 04         [24] 3058 	mov	b,#0x04
      000A93 A4               [48] 3059 	mul	ab
      000A94 24r75            [12] 3060 	add	a,#_gpu32UartSpeed
      000A96 F5 82            [12] 3061 	mov	dpl,a
      000A98 74s00            [12] 3062 	mov	a,#(_gpu32UartSpeed >> 8)
      000A9A 35 F0            [12] 3063 	addc	a,b
      000A9C F5 83            [12] 3064 	mov	dph,a
      000A9E E0               [24] 3065 	movx	a,@dptr
      000A9F F8               [12] 3066 	mov	r0,a
      000AA0 A3               [24] 3067 	inc	dptr
      000AA1 E0               [24] 3068 	movx	a,@dptr
      000AA2 F9               [12] 3069 	mov	r1,a
      000AA3 A3               [24] 3070 	inc	dptr
      000AA4 E0               [24] 3071 	movx	a,@dptr
      000AA5 FA               [12] 3072 	mov	r2,a
      000AA6 A3               [24] 3073 	inc	dptr
      000AA7 E0               [24] 3074 	movx	a,@dptr
      000AA8 FB               [12] 3075 	mov	r3,a
      000AA9 C0 00            [24] 3076 	push	ar0
      000AAB C0 01            [24] 3077 	push	ar1
      000AAD C0 02            [24] 3078 	push	ar2
      000AAF C0 03            [24] 3079 	push	ar3
      000AB1 74rD9            [12] 3080 	mov	a,#___str_47
      000AB3 C0 E0            [24] 3081 	push	acc
      000AB5 74s02            [12] 3082 	mov	a,#(___str_47 >> 8)
      000AB7 C0 E0            [24] 3083 	push	acc
      000AB9 12r00r00         [24] 3084 	lcall	_printf_fast_f
      000ABC E5 81            [12] 3085 	mov	a,sp
      000ABE 24 FA            [12] 3086 	add	a,#0xfa
      000AC0 F5 81            [12] 3087 	mov	sp,a
                                   3088 ;	src/main.c:713: break;
      000AC2 22               [24] 3089 	ret
                                   3090 ;	src/main.c:714: default :
      000AC3                       3091 00125$:
                                   3092 ;	src/main.c:715: send_octet_to_linefi((((*apu8LineFiAddr)<<4)&0xF0) | (*apu8LineFiCmd)&0x0F);
      000AC3 A9*0B            [24] 3093 	mov	r1,_act_by_one_key_PARM_3
      000AC5 AA*0C            [24] 3094 	mov	r2,(_act_by_one_key_PARM_3 + 1)
      000AC7 AB*0D            [24] 3095 	mov	r3,(_act_by_one_key_PARM_3 + 2)
      000AC9 89 82            [24] 3096 	mov	dpl,r1
      000ACB 8A 83            [24] 3097 	mov	dph,r2
      000ACD 8B F0            [24] 3098 	mov	b,r3
      000ACF 12r00r00         [24] 3099 	lcall	__gptrget
      000AD2 C4               [12] 3100 	swap	a
      000AD3 54 F0            [12] 3101 	anl	a,#0xf0
      000AD5 F8               [12] 3102 	mov	r0,a
      000AD6 53 00 F0         [24] 3103 	anl	ar0,#0xf0
      000AD9 74 0F            [12] 3104 	mov	a,#0x0f
      000ADB 5C               [12] 3105 	anl	a,r4
      000ADC 48               [12] 3106 	orl	a,r0
      000ADD F5 82            [12] 3107 	mov	dpl,a
      000ADF C0 07            [24] 3108 	push	ar7
      000AE1 C0 06            [24] 3109 	push	ar6
      000AE3 C0 05            [24] 3110 	push	ar5
      000AE5 C0 03            [24] 3111 	push	ar3
      000AE7 C0 02            [24] 3112 	push	ar2
      000AE9 C0 01            [24] 3113 	push	ar1
      000AEB 12r00r00         [24] 3114 	lcall	_send_octet_to_linefi
      000AEE D0 01            [24] 3115 	pop	ar1
      000AF0 D0 02            [24] 3116 	pop	ar2
      000AF2 D0 03            [24] 3117 	pop	ar3
      000AF4 D0 05            [24] 3118 	pop	ar5
      000AF6 D0 06            [24] 3119 	pop	ar6
      000AF8 D0 07            [24] 3120 	pop	ar7
                                   3121 ;	src/main.c:716: printf_fast_f("LineFi Sending: 0x%x:\n\r", ((*apu8LineFiAddr)<<4) | *apu8LineFiCmd);
      000AFA 89 82            [24] 3122 	mov	dpl,r1
      000AFC 8A 83            [24] 3123 	mov	dph,r2
      000AFE 8B F0            [24] 3124 	mov	b,r3
      000B00 12r00r00         [24] 3125 	lcall	__gptrget
      000B03 F9               [12] 3126 	mov	r1,a
      000B04 E4               [12] 3127 	clr	a
      000B05 C9               [12] 3128 	xch	a,r1
      000B06 C4               [12] 3129 	swap	a
      000B07 C9               [12] 3130 	xch	a,r1
      000B08 69               [12] 3131 	xrl	a,r1
      000B09 C9               [12] 3132 	xch	a,r1
      000B0A 54 F0            [12] 3133 	anl	a,#0xf0
      000B0C C9               [12] 3134 	xch	a,r1
      000B0D 69               [12] 3135 	xrl	a,r1
      000B0E FC               [12] 3136 	mov	r4,a
      000B0F 8D 82            [24] 3137 	mov	dpl,r5
      000B11 8E 83            [24] 3138 	mov	dph,r6
      000B13 8F F0            [24] 3139 	mov	b,r7
      000B15 12r00r00         [24] 3140 	lcall	__gptrget
      000B18 7F 00            [12] 3141 	mov	r7,#0x00
      000B1A 42 01            [12] 3142 	orl	ar1,a
      000B1C EF               [12] 3143 	mov	a,r7
      000B1D 42 04            [12] 3144 	orl	ar4,a
      000B1F C0 01            [24] 3145 	push	ar1
      000B21 C0 04            [24] 3146 	push	ar4
      000B23 74r08            [12] 3147 	mov	a,#___str_50
      000B25 C0 E0            [24] 3148 	push	acc
      000B27 74s03            [12] 3149 	mov	a,#(___str_50 >> 8)
      000B29 C0 E0            [24] 3150 	push	acc
      000B2B 12r00r00         [24] 3151 	lcall	_printf_fast_f
      000B2E E5 81            [12] 3152 	mov	a,sp
      000B30 24 FC            [12] 3153 	add	a,#0xfc
      000B32 F5 81            [12] 3154 	mov	sp,a
                                   3155 ;	src/main.c:719: break;
      000B34 22               [24] 3156 	ret
                                   3157 ;	src/main.c:720: case 'u' :
      000B35                       3158 00127$:
                                   3159 ;	src/main.c:721: printf_fast_f("uart speed: %lu:\n\r", gpu32UartSpeed[*apu8LineFiAddr]);
      000B35 AD*0B            [24] 3160 	mov	r5,_act_by_one_key_PARM_3
      000B37 AE*0C            [24] 3161 	mov	r6,(_act_by_one_key_PARM_3 + 1)
      000B39 AF*0D            [24] 3162 	mov	r7,(_act_by_one_key_PARM_3 + 2)
      000B3B 8D 82            [24] 3163 	mov	dpl,r5
      000B3D 8E 83            [24] 3164 	mov	dph,r6
      000B3F 8F F0            [24] 3165 	mov	b,r7
      000B41 12r00r00         [24] 3166 	lcall	__gptrget
      000B44 75 F0 04         [24] 3167 	mov	b,#0x04
      000B47 A4               [48] 3168 	mul	ab
      000B48 24r75            [12] 3169 	add	a,#_gpu32UartSpeed
      000B4A F5 82            [12] 3170 	mov	dpl,a
      000B4C 74s00            [12] 3171 	mov	a,#(_gpu32UartSpeed >> 8)
      000B4E 35 F0            [12] 3172 	addc	a,b
      000B50 F5 83            [12] 3173 	mov	dph,a
      000B52 E0               [24] 3174 	movx	a,@dptr
      000B53 F9               [12] 3175 	mov	r1,a
      000B54 A3               [24] 3176 	inc	dptr
      000B55 E0               [24] 3177 	movx	a,@dptr
      000B56 FA               [12] 3178 	mov	r2,a
      000B57 A3               [24] 3179 	inc	dptr
      000B58 E0               [24] 3180 	movx	a,@dptr
      000B59 FB               [12] 3181 	mov	r3,a
      000B5A A3               [24] 3182 	inc	dptr
      000B5B E0               [24] 3183 	movx	a,@dptr
      000B5C FC               [12] 3184 	mov	r4,a
      000B5D C0 07            [24] 3185 	push	ar7
      000B5F C0 06            [24] 3186 	push	ar6
      000B61 C0 05            [24] 3187 	push	ar5
      000B63 C0 01            [24] 3188 	push	ar1
      000B65 C0 02            [24] 3189 	push	ar2
      000B67 C0 03            [24] 3190 	push	ar3
      000B69 C0 04            [24] 3191 	push	ar4
      000B6B 74rD9            [12] 3192 	mov	a,#___str_47
      000B6D C0 E0            [24] 3193 	push	acc
      000B6F 74s02            [12] 3194 	mov	a,#(___str_47 >> 8)
      000B71 C0 E0            [24] 3195 	push	acc
      000B73 12r00r00         [24] 3196 	lcall	_printf_fast_f
      000B76 E5 81            [12] 3197 	mov	a,sp
      000B78 24 FA            [12] 3198 	add	a,#0xfa
      000B7A F5 81            [12] 3199 	mov	sp,a
      000B7C D0 05            [24] 3200 	pop	ar5
      000B7E D0 06            [24] 3201 	pop	ar6
      000B80 D0 07            [24] 3202 	pop	ar7
                                   3203 ;	src/main.c:722: InitialUART1_Timer3(gpu32UartSpeed[*apu8LineFiAddr]);
      000B82 8D 82            [24] 3204 	mov	dpl,r5
      000B84 8E 83            [24] 3205 	mov	dph,r6
      000B86 8F F0            [24] 3206 	mov	b,r7
      000B88 12r00r00         [24] 3207 	lcall	__gptrget
      000B8B 75 F0 04         [24] 3208 	mov	b,#0x04
      000B8E A4               [48] 3209 	mul	ab
      000B8F 24r75            [12] 3210 	add	a,#_gpu32UartSpeed
      000B91 F5 82            [12] 3211 	mov	dpl,a
      000B93 74s00            [12] 3212 	mov	a,#(_gpu32UartSpeed >> 8)
      000B95 35 F0            [12] 3213 	addc	a,b
      000B97 F5 83            [12] 3214 	mov	dph,a
      000B99 E0               [24] 3215 	movx	a,@dptr
      000B9A F9               [12] 3216 	mov	r1,a
      000B9B A3               [24] 3217 	inc	dptr
      000B9C E0               [24] 3218 	movx	a,@dptr
      000B9D FA               [12] 3219 	mov	r2,a
      000B9E A3               [24] 3220 	inc	dptr
      000B9F E0               [24] 3221 	movx	a,@dptr
      000BA0 FB               [12] 3222 	mov	r3,a
      000BA1 A3               [24] 3223 	inc	dptr
      000BA2 E0               [24] 3224 	movx	a,@dptr
      000BA3 89 82            [24] 3225 	mov	dpl,r1
      000BA5 8A 83            [24] 3226 	mov	dph,r2
      000BA7 8B F0            [24] 3227 	mov	b,r3
      000BA9 C0 07            [24] 3228 	push	ar7
      000BAB C0 06            [24] 3229 	push	ar6
      000BAD C0 05            [24] 3230 	push	ar5
      000BAF 12r00r00         [24] 3231 	lcall	_InitialUART1_Timer3
      000BB2 D0 05            [24] 3232 	pop	ar5
      000BB4 D0 06            [24] 3233 	pop	ar6
      000BB6 D0 07            [24] 3234 	pop	ar7
                                   3235 ;	src/main.c:723: printf_fast_f("Setting uart speed as: %lu:\n\r", gpu32UartSpeed[*apu8LineFiAddr]);
      000BB8 8D 82            [24] 3236 	mov	dpl,r5
      000BBA 8E 83            [24] 3237 	mov	dph,r6
      000BBC 8F F0            [24] 3238 	mov	b,r7
      000BBE 12r00r00         [24] 3239 	lcall	__gptrget
      000BC1 75 F0 04         [24] 3240 	mov	b,#0x04
      000BC4 A4               [48] 3241 	mul	ab
      000BC5 24r75            [12] 3242 	add	a,#_gpu32UartSpeed
      000BC7 F5 82            [12] 3243 	mov	dpl,a
      000BC9 74s00            [12] 3244 	mov	a,#(_gpu32UartSpeed >> 8)
      000BCB 35 F0            [12] 3245 	addc	a,b
      000BCD F5 83            [12] 3246 	mov	dph,a
      000BCF E0               [24] 3247 	movx	a,@dptr
      000BD0 FC               [12] 3248 	mov	r4,a
      000BD1 A3               [24] 3249 	inc	dptr
      000BD2 E0               [24] 3250 	movx	a,@dptr
      000BD3 FD               [12] 3251 	mov	r5,a
      000BD4 A3               [24] 3252 	inc	dptr
      000BD5 E0               [24] 3253 	movx	a,@dptr
      000BD6 FE               [12] 3254 	mov	r6,a
      000BD7 A3               [24] 3255 	inc	dptr
      000BD8 E0               [24] 3256 	movx	a,@dptr
      000BD9 FF               [12] 3257 	mov	r7,a
      000BDA C0 04            [24] 3258 	push	ar4
      000BDC C0 05            [24] 3259 	push	ar5
      000BDE C0 06            [24] 3260 	push	ar6
      000BE0 C0 07            [24] 3261 	push	ar7
      000BE2 74r31            [12] 3262 	mov	a,#___str_52
      000BE4 C0 E0            [24] 3263 	push	acc
      000BE6 74s03            [12] 3264 	mov	a,#(___str_52 >> 8)
      000BE8 C0 E0            [24] 3265 	push	acc
      000BEA 12r00r00         [24] 3266 	lcall	_printf_fast_f
      000BED E5 81            [12] 3267 	mov	a,sp
      000BEF 24 FA            [12] 3268 	add	a,#0xfa
      000BF1 F5 81            [12] 3269 	mov	sp,a
                                   3270 ;	src/main.c:724: break;
      000BF3 22               [24] 3271 	ret
                                   3272 ;	src/main.c:726: case 'S' :
      000BF4                       3273 00128$:
                                   3274 ;	src/main.c:727: send_octet_to_linefi(u8Data);
      000BF4 90r00rAD         [24] 3275 	mov	dptr,#_act_by_one_key_u8Data_65536_102
      000BF7 E0               [24] 3276 	movx	a,@dptr
      000BF8 F5 82            [12] 3277 	mov	dpl,a
      000BFA 12r00r00         [24] 3278 	lcall	_send_octet_to_linefi
                                   3279 ;	src/main.c:728: printf_fast_f("LineFi Sending: %d(0x%x)\n\r", u8Data, u8Data);
      000BFD 90r00rAD         [24] 3280 	mov	dptr,#_act_by_one_key_u8Data_65536_102
      000C00 E0               [24] 3281 	movx	a,@dptr
      000C01 FF               [12] 3282 	mov	r7,a
      000C02 7E 00            [12] 3283 	mov	r6,#0x00
      000C04 C0 07            [24] 3284 	push	ar7
      000C06 C0 06            [24] 3285 	push	ar6
      000C08 C0 07            [24] 3286 	push	ar7
      000C0A C0 06            [24] 3287 	push	ar6
      000C0C 74r4F            [12] 3288 	mov	a,#___str_53
      000C0E C0 E0            [24] 3289 	push	acc
      000C10 74s03            [12] 3290 	mov	a,#(___str_53 >> 8)
      000C12 C0 E0            [24] 3291 	push	acc
      000C14 12r00r00         [24] 3292 	lcall	_printf_fast_f
      000C17 E5 81            [12] 3293 	mov	a,sp
      000C19 24 FA            [12] 3294 	add	a,#0xfa
      000C1B F5 81            [12] 3295 	mov	sp,a
                                   3296 ;	src/main.c:729: break;
                                   3297 ;	src/main.c:730: case '+' :
      000C1D 22               [24] 3298 	ret
      000C1E                       3299 00129$:
                                   3300 ;	src/main.c:731: u8Data++;
      000C1E 90r00rAD         [24] 3301 	mov	dptr,#_act_by_one_key_u8Data_65536_102
      000C21 E0               [24] 3302 	movx	a,@dptr
      000C22 24 01            [12] 3303 	add	a,#0x01
      000C24 F0               [24] 3304 	movx	@dptr,a
                                   3305 ;	src/main.c:732: printf_fast_f("send data %d(0x%x)\n\r", u8Data, u8Data);
      000C25 E0               [24] 3306 	movx	a,@dptr
      000C26 FF               [12] 3307 	mov	r7,a
      000C27 7E 00            [12] 3308 	mov	r6,#0x00
      000C29 C0 07            [24] 3309 	push	ar7
      000C2B C0 06            [24] 3310 	push	ar6
      000C2D C0 07            [24] 3311 	push	ar7
      000C2F C0 06            [24] 3312 	push	ar6
      000C31 74r6A            [12] 3313 	mov	a,#___str_54
      000C33 C0 E0            [24] 3314 	push	acc
      000C35 74s03            [12] 3315 	mov	a,#(___str_54 >> 8)
      000C37 C0 E0            [24] 3316 	push	acc
      000C39 12r00r00         [24] 3317 	lcall	_printf_fast_f
      000C3C E5 81            [12] 3318 	mov	a,sp
      000C3E 24 FA            [12] 3319 	add	a,#0xfa
      000C40 F5 81            [12] 3320 	mov	sp,a
                                   3321 ;	src/main.c:733: break;
                                   3322 ;	src/main.c:734: case '-' :
      000C42 22               [24] 3323 	ret
      000C43                       3324 00130$:
                                   3325 ;	src/main.c:735: u8Data--;
      000C43 90r00rAD         [24] 3326 	mov	dptr,#_act_by_one_key_u8Data_65536_102
      000C46 E0               [24] 3327 	movx	a,@dptr
      000C47 14               [12] 3328 	dec	a
      000C48 F0               [24] 3329 	movx	@dptr,a
                                   3330 ;	src/main.c:736: printf_fast_f("send data %d(0x%x)\n\r", u8Data, u8Data);
      000C49 E0               [24] 3331 	movx	a,@dptr
      000C4A FF               [12] 3332 	mov	r7,a
      000C4B 7E 00            [12] 3333 	mov	r6,#0x00
      000C4D C0 07            [24] 3334 	push	ar7
      000C4F C0 06            [24] 3335 	push	ar6
      000C51 C0 07            [24] 3336 	push	ar7
      000C53 C0 06            [24] 3337 	push	ar6
      000C55 74r6A            [12] 3338 	mov	a,#___str_54
      000C57 C0 E0            [24] 3339 	push	acc
      000C59 74s03            [12] 3340 	mov	a,#(___str_54 >> 8)
      000C5B C0 E0            [24] 3341 	push	acc
      000C5D 12r00r00         [24] 3342 	lcall	_printf_fast_f
      000C60 E5 81            [12] 3343 	mov	a,sp
      000C62 24 FA            [12] 3344 	add	a,#0xfa
      000C64 F5 81            [12] 3345 	mov	sp,a
                                   3346 ;	src/main.c:737: break;
                                   3347 ;	src/main.c:739: case 'a' :
      000C66 22               [24] 3348 	ret
      000C67                       3349 00131$:
                                   3350 ;	src/main.c:740: send_octet_to_linefi(0x11);
      000C67 75 82 11         [24] 3351 	mov	dpl,#0x11
                                   3352 ;	src/main.c:741: break;
                                   3353 ;	src/main.c:742: case 'b' :
      000C6A 02r00r00         [24] 3354 	ljmp	_send_octet_to_linefi
      000C6D                       3355 00132$:
                                   3356 ;	src/main.c:743: send_octet_to_linefi(0x12);
      000C6D 75 82 12         [24] 3357 	mov	dpl,#0x12
                                   3358 ;	src/main.c:744: break;
                                   3359 ;	src/main.c:745: case 'c' :
      000C70 02r00r00         [24] 3360 	ljmp	_send_octet_to_linefi
      000C73                       3361 00133$:
                                   3362 ;	src/main.c:746: send_octet_to_linefi(0x13);
      000C73 75 82 13         [24] 3363 	mov	dpl,#0x13
                                   3364 ;	src/main.c:747: break;
                                   3365 ;	src/main.c:748: case 'H' :
                                   3366 ;	src/main.c:749: print_help();
                                   3367 ;	src/main.c:751: } //switch(au8RxUART)
                                   3368 ;	src/main.c:752: }
      000C76 02r00r00         [24] 3369 	ljmp	_send_octet_to_linefi
                                   3370 ;------------------------------------------------------------
                                   3371 ;Allocation info for local variables in function 'struct_to_uint8'
                                   3372 ;------------------------------------------------------------
                                   3373 ;apcPkt                    Allocated with name '_struct_to_uint8_apcPkt_65536_110'
                                   3374 ;cntIdx                    Allocated with name '_struct_to_uint8_cntIdx_65536_111'
                                   3375 ;i                         Allocated with name '_struct_to_uint8_i_65537_112'
                                   3376 ;------------------------------------------------------------
                                   3377 ;	src/main.c:764: void struct_to_uint8(linefi_packet_t * apcPkt)
                                   3378 ;	-----------------------------------------
                                   3379 ;	 function struct_to_uint8
                                   3380 ;	-----------------------------------------
      000C79                       3381 _struct_to_uint8:
                                   3382 ;	src/main.c:767: pu8buff[cntIdx++] = apcPkt->u8Ver;
      000C79 85 82*00         [24] 3383 	mov	_struct_to_uint8_apcPkt_65536_110,dpl
      000C7C 85 83*01         [24] 3384 	mov	(_struct_to_uint8_apcPkt_65536_110 + 1),dph
      000C7F 85 F0*02         [24] 3385 	mov	(_struct_to_uint8_apcPkt_65536_110 + 2),b
      000C82 12r00r00         [24] 3386 	lcall	__gptrget
      000C85 90r00r00         [24] 3387 	mov	dptr,#_pu8buff
      000C88 F0               [24] 3388 	movx	@dptr,a
                                   3389 ;	src/main.c:768: pu8buff[cntIdx++] = apcPkt->u8Type;
      000C89 74 01            [12] 3390 	mov	a,#0x01
      000C8B 25*00            [12] 3391 	add	a,_struct_to_uint8_apcPkt_65536_110
      000C8D FA               [12] 3392 	mov	r2,a
      000C8E E4               [12] 3393 	clr	a
      000C8F 35*01            [12] 3394 	addc	a,(_struct_to_uint8_apcPkt_65536_110 + 1)
      000C91 FB               [12] 3395 	mov	r3,a
      000C92 AC*02            [24] 3396 	mov	r4,(_struct_to_uint8_apcPkt_65536_110 + 2)
      000C94 8A 82            [24] 3397 	mov	dpl,r2
      000C96 8B 83            [24] 3398 	mov	dph,r3
      000C98 8C F0            [24] 3399 	mov	b,r4
      000C9A 12r00r00         [24] 3400 	lcall	__gptrget
      000C9D 90r00r01         [24] 3401 	mov	dptr,#(_pu8buff + 0x0001)
      000CA0 F0               [24] 3402 	movx	@dptr,a
                                   3403 ;	src/main.c:769: pu8buff[cntIdx++] = apcPkt->u8Addr;
      000CA1 74 02            [12] 3404 	mov	a,#0x02
      000CA3 25*00            [12] 3405 	add	a,_struct_to_uint8_apcPkt_65536_110
      000CA5 FA               [12] 3406 	mov	r2,a
      000CA6 E4               [12] 3407 	clr	a
      000CA7 35*01            [12] 3408 	addc	a,(_struct_to_uint8_apcPkt_65536_110 + 1)
      000CA9 FB               [12] 3409 	mov	r3,a
      000CAA AC*02            [24] 3410 	mov	r4,(_struct_to_uint8_apcPkt_65536_110 + 2)
      000CAC 8A 82            [24] 3411 	mov	dpl,r2
      000CAE 8B 83            [24] 3412 	mov	dph,r3
      000CB0 8C F0            [24] 3413 	mov	b,r4
      000CB2 12r00r00         [24] 3414 	lcall	__gptrget
      000CB5 90r00r02         [24] 3415 	mov	dptr,#(_pu8buff + 0x0002)
      000CB8 F0               [24] 3416 	movx	@dptr,a
                                   3417 ;	src/main.c:770: pu8buff[cntIdx++] = apcPkt->u8Size;
      000CB9 74 03            [12] 3418 	mov	a,#0x03
      000CBB 25*00            [12] 3419 	add	a,_struct_to_uint8_apcPkt_65536_110
      000CBD FA               [12] 3420 	mov	r2,a
      000CBE E4               [12] 3421 	clr	a
      000CBF 35*01            [12] 3422 	addc	a,(_struct_to_uint8_apcPkt_65536_110 + 1)
      000CC1 FB               [12] 3423 	mov	r3,a
      000CC2 AC*02            [24] 3424 	mov	r4,(_struct_to_uint8_apcPkt_65536_110 + 2)
      000CC4 8A 82            [24] 3425 	mov	dpl,r2
      000CC6 8B 83            [24] 3426 	mov	dph,r3
      000CC8 8C F0            [24] 3427 	mov	b,r4
      000CCA 12r00r00         [24] 3428 	lcall	__gptrget
      000CCD 90r00r03         [24] 3429 	mov	dptr,#(_pu8buff + 0x0003)
      000CD0 F0               [24] 3430 	movx	@dptr,a
                                   3431 ;	src/main.c:771: pu8buff[cntIdx++] = apcPkt->u8CRC;
      000CD1 74 04            [12] 3432 	mov	a,#0x04
      000CD3 25*00            [12] 3433 	add	a,_struct_to_uint8_apcPkt_65536_110
      000CD5 F8               [12] 3434 	mov	r0,a
      000CD6 E4               [12] 3435 	clr	a
      000CD7 35*01            [12] 3436 	addc	a,(_struct_to_uint8_apcPkt_65536_110 + 1)
      000CD9 F9               [12] 3437 	mov	r1,a
      000CDA AF*02            [24] 3438 	mov	r7,(_struct_to_uint8_apcPkt_65536_110 + 2)
      000CDC 88 82            [24] 3439 	mov	dpl,r0
      000CDE 89 83            [24] 3440 	mov	dph,r1
      000CE0 8F F0            [24] 3441 	mov	b,r7
      000CE2 12r00r00         [24] 3442 	lcall	__gptrget
      000CE5 F8               [12] 3443 	mov	r0,a
      000CE6 90r00r04         [24] 3444 	mov	dptr,#(_pu8buff + 0x0004)
      000CE9 F0               [24] 3445 	movx	@dptr,a
                                   3446 ;	src/main.c:773: for (i=0; i<apcPkt->u8Size; i++) {
      000CEA 74 05            [12] 3447 	mov	a,#0x05
      000CEC 25*00            [12] 3448 	add	a,_struct_to_uint8_apcPkt_65536_110
      000CEE FD               [12] 3449 	mov	r5,a
      000CEF E4               [12] 3450 	clr	a
      000CF0 35*01            [12] 3451 	addc	a,(_struct_to_uint8_apcPkt_65536_110 + 1)
      000CF2 FE               [12] 3452 	mov	r6,a
      000CF3 AF*02            [24] 3453 	mov	r7,(_struct_to_uint8_apcPkt_65536_110 + 2)
      000CF5 75*03 05         [24] 3454 	mov	_struct_to_uint8_cntIdx_65536_111,#0x05
      000CF8 75*04 00         [24] 3455 	mov	_struct_to_uint8_i_65537_112,#0x00
      000CFB                       3456 00103$:
      000CFB 8A 82            [24] 3457 	mov	dpl,r2
      000CFD 8B 83            [24] 3458 	mov	dph,r3
      000CFF 8C F0            [24] 3459 	mov	b,r4
      000D01 12r00r00         [24] 3460 	lcall	__gptrget
      000D04 F9               [12] 3461 	mov	r1,a
      000D05 C3               [12] 3462 	clr	c
      000D06 E5*04            [12] 3463 	mov	a,_struct_to_uint8_i_65537_112
      000D08 99               [12] 3464 	subb	a,r1
      000D09 50 44            [24] 3465 	jnc	00105$
                                   3466 ;	src/main.c:774: pu8buff[cntIdx++] = apcPkt->pu8Data[i];
      000D0B C0 02            [24] 3467 	push	ar2
      000D0D C0 03            [24] 3468 	push	ar3
      000D0F C0 04            [24] 3469 	push	ar4
      000D11 E5*03            [12] 3470 	mov	a,_struct_to_uint8_cntIdx_65536_111
      000D13 24r00            [12] 3471 	add	a,#_pu8buff
      000D15 F8               [12] 3472 	mov	r0,a
      000D16 E4               [12] 3473 	clr	a
      000D17 34s00            [12] 3474 	addc	a,#(_pu8buff >> 8)
      000D19 F9               [12] 3475 	mov	r1,a
      000D1A 05*03            [12] 3476 	inc	_struct_to_uint8_cntIdx_65536_111
      000D1C 8D 82            [24] 3477 	mov	dpl,r5
      000D1E 8E 83            [24] 3478 	mov	dph,r6
      000D20 8F F0            [24] 3479 	mov	b,r7
      000D22 12r00r00         [24] 3480 	lcall	__gptrget
      000D25 FA               [12] 3481 	mov	r2,a
      000D26 A3               [24] 3482 	inc	dptr
      000D27 12r00r00         [24] 3483 	lcall	__gptrget
      000D2A FB               [12] 3484 	mov	r3,a
      000D2B A3               [24] 3485 	inc	dptr
      000D2C 12r00r00         [24] 3486 	lcall	__gptrget
      000D2F FC               [12] 3487 	mov	r4,a
      000D30 E5*04            [12] 3488 	mov	a,_struct_to_uint8_i_65537_112
      000D32 2A               [12] 3489 	add	a,r2
      000D33 FA               [12] 3490 	mov	r2,a
      000D34 E4               [12] 3491 	clr	a
      000D35 3B               [12] 3492 	addc	a,r3
      000D36 FB               [12] 3493 	mov	r3,a
      000D37 8A 82            [24] 3494 	mov	dpl,r2
      000D39 8B 83            [24] 3495 	mov	dph,r3
      000D3B 8C F0            [24] 3496 	mov	b,r4
      000D3D 12r00r00         [24] 3497 	lcall	__gptrget
      000D40 88 82            [24] 3498 	mov	dpl,r0
      000D42 89 83            [24] 3499 	mov	dph,r1
      000D44 F0               [24] 3500 	movx	@dptr,a
                                   3501 ;	src/main.c:773: for (i=0; i<apcPkt->u8Size; i++) {
      000D45 05*04            [12] 3502 	inc	_struct_to_uint8_i_65537_112
      000D47 D0 04            [24] 3503 	pop	ar4
      000D49 D0 03            [24] 3504 	pop	ar3
      000D4B D0 02            [24] 3505 	pop	ar2
      000D4D 80 AC            [24] 3506 	sjmp	00103$
      000D4F                       3507 00105$:
                                   3508 ;	src/main.c:777: }
      000D4F 22               [24] 3509 	ret
                                   3510 ;------------------------------------------------------------
                                   3511 ;Allocation info for local variables in function 'periodic_func'
                                   3512 ;------------------------------------------------------------
                                   3513 ;su8Cnt                    Allocated with name '_periodic_func_su8Cnt_65536_116'
                                   3514 ;apcStr                    Allocated to registers r5 r6 r7 
                                   3515 ;total_size                Allocated to registers r4 
                                   3516 ;------------------------------------------------------------
                                   3517 ;	src/main.c:787: void periodic_func(linefi_packet_t * apcStr)
                                   3518 ;	-----------------------------------------
                                   3519 ;	 function periodic_func
                                   3520 ;	-----------------------------------------
      000D50                       3521 _periodic_func:
                                   3522 ;	src/main.c:790: uint8 total_size = size_linefi_packet(apcStr);
      000D50 AD 82            [24] 3523 	mov	r5,dpl
      000D52 AE 83            [24] 3524 	mov	r6,dph
      000D54 AF F0            [24] 3525 	mov	r7,b
      000D56 C0 07            [24] 3526 	push	ar7
      000D58 C0 06            [24] 3527 	push	ar6
      000D5A C0 05            [24] 3528 	push	ar5
      000D5C 12r00r00         [24] 3529 	lcall	_size_linefi_packet
      000D5F AC 82            [24] 3530 	mov	r4,dpl
                                   3531 ;	src/main.c:792: if (su8Cnt * 17 % 15 < 4) {
      000D61 85*11*00         [24] 3532 	mov	__mulint_PARM_2,_periodic_func_su8Cnt_65536_116
      000D64 75*01 00         [24] 3533 	mov	(__mulint_PARM_2 + 1),#0x00
      000D67 90 00 11         [24] 3534 	mov	dptr,#0x0011
      000D6A C0 04            [24] 3535 	push	ar4
      000D6C 12r00r00         [24] 3536 	lcall	__mulint
      000D6F 75*00 0F         [24] 3537 	mov	__modsint_PARM_2,#0x0f
      000D72 75*01 00         [24] 3538 	mov	(__modsint_PARM_2 + 1),#0x00
      000D75 12r00r00         [24] 3539 	lcall	__modsint
      000D78 AA 82            [24] 3540 	mov	r2,dpl
      000D7A AB 83            [24] 3541 	mov	r3,dph
      000D7C D0 04            [24] 3542 	pop	ar4
      000D7E D0 05            [24] 3543 	pop	ar5
      000D80 D0 06            [24] 3544 	pop	ar6
      000D82 D0 07            [24] 3545 	pop	ar7
      000D84 C3               [12] 3546 	clr	c
      000D85 EA               [12] 3547 	mov	a,r2
      000D86 94 04            [12] 3548 	subb	a,#0x04
      000D88 EB               [12] 3549 	mov	a,r3
      000D89 64 80            [12] 3550 	xrl	a,#0x80
      000D8B 94 80            [12] 3551 	subb	a,#0x80
      000D8D 50 67            [24] 3552 	jnc	00102$
                                   3553 ;	src/main.c:793: printf_fast_f("%d\r\n",(int)(su8Cnt * 17 % 15));
      000D8F C0 07            [24] 3554 	push	ar7
      000D91 C0 06            [24] 3555 	push	ar6
      000D93 C0 05            [24] 3556 	push	ar5
      000D95 C0 04            [24] 3557 	push	ar4
      000D97 C0 02            [24] 3558 	push	ar2
      000D99 C0 03            [24] 3559 	push	ar3
      000D9B 74r7F            [12] 3560 	mov	a,#___str_55
      000D9D C0 E0            [24] 3561 	push	acc
      000D9F 74s03            [12] 3562 	mov	a,#(___str_55 >> 8)
      000DA1 C0 E0            [24] 3563 	push	acc
      000DA3 12r00r00         [24] 3564 	lcall	_printf_fast_f
      000DA6 E5 81            [12] 3565 	mov	a,sp
      000DA8 24 FC            [12] 3566 	add	a,#0xfc
      000DAA F5 81            [12] 3567 	mov	sp,a
      000DAC D0 04            [24] 3568 	pop	ar4
      000DAE D0 05            [24] 3569 	pop	ar5
      000DB0 D0 06            [24] 3570 	pop	ar6
      000DB2 D0 07            [24] 3571 	pop	ar7
                                   3572 ;	src/main.c:794: apcStr->u8Ver = su8Cnt++;
      000DB4 AB*11            [24] 3573 	mov	r3,_periodic_func_su8Cnt_65536_116
      000DB6 05*11            [12] 3574 	inc	_periodic_func_su8Cnt_65536_116
      000DB8 8D 82            [24] 3575 	mov	dpl,r5
      000DBA 8E 83            [24] 3576 	mov	dph,r6
      000DBC 8F F0            [24] 3577 	mov	b,r7
      000DBE EB               [12] 3578 	mov	a,r3
      000DBF 12r00r00         [24] 3579 	lcall	__gptrput
                                   3580 ;	src/main.c:795: send_linefi_packet(apcStr);	
      000DC2 8D 82            [24] 3581 	mov	dpl,r5
      000DC4 8E 83            [24] 3582 	mov	dph,r6
      000DC6 8F F0            [24] 3583 	mov	b,r7
      000DC8 C0 07            [24] 3584 	push	ar7
      000DCA C0 06            [24] 3585 	push	ar6
      000DCC C0 05            [24] 3586 	push	ar5
      000DCE C0 04            [24] 3587 	push	ar4
      000DD0 12r00r00         [24] 3588 	lcall	_send_linefi_packet
      000DD3 D0 04            [24] 3589 	pop	ar4
      000DD5 D0 05            [24] 3590 	pop	ar5
      000DD7 D0 06            [24] 3591 	pop	ar6
      000DD9 D0 07            [24] 3592 	pop	ar7
                                   3593 ;	src/main.c:796: struct_to_uint8(apcStr);	
      000DDB 8D 82            [24] 3594 	mov	dpl,r5
      000DDD 8E 83            [24] 3595 	mov	dph,r6
      000DDF 8F F0            [24] 3596 	mov	b,r7
      000DE1 C0 04            [24] 3597 	push	ar4
      000DE3 12r0Cr79         [24] 3598 	lcall	_struct_to_uint8
      000DE6 D0 04            [24] 3599 	pop	ar4
                                   3600 ;	src/main.c:797: print_raw_packet(total_size, pu8buff); 
      000DE8 75*00r00         [24] 3601 	mov	_print_raw_packet_PARM_2,#_pu8buff
      000DEB 75*01s00         [24] 3602 	mov	(_print_raw_packet_PARM_2 + 1),#(_pu8buff >> 8)
      000DEE 75*02 00         [24] 3603 	mov	(_print_raw_packet_PARM_2 + 2),#0x00
      000DF1 8C 82            [24] 3604 	mov	dpl,r4
      000DF3 02r00r00         [24] 3605 	ljmp	_print_raw_packet
      000DF6                       3606 00102$:
                                   3607 ;	src/main.c:800: apcStr->u8Ver = su8Cnt++;
      000DF6 AC*11            [24] 3608 	mov	r4,_periodic_func_su8Cnt_65536_116
      000DF8 05*11            [12] 3609 	inc	_periodic_func_su8Cnt_65536_116
      000DFA 8D 82            [24] 3610 	mov	dpl,r5
      000DFC 8E 83            [24] 3611 	mov	dph,r6
      000DFE 8F F0            [24] 3612 	mov	b,r7
      000E00 EC               [12] 3613 	mov	a,r4
                                   3614 ;	src/main.c:811: }
      000E01 02r00r00         [24] 3615 	ljmp	__gptrput
                                   3616 ;------------------------------------------------------------
                                   3617 ;Allocation info for local variables in function 'main'
                                   3618 ;------------------------------------------------------------
                                   3619 ;su8SW                     Allocated to registers 
                                   3620 ;u8EnCnt                   Allocated to registers 
                                   3621 ;u8RxUART                  Allocated with name '_main_u8RxUART_65536_120'
                                   3622 ;u16Cnt                    Allocated to registers r2 r3 
                                   3623 ;u8OutputState             Allocated to registers 
                                   3624 ;u8StateRxCSC              Allocated to registers 
                                   3625 ;u8LineFiAddr              Allocated with name '_main_u8LineFiAddr_65536_120'
                                   3626 ;u8LineFiSpeed             Allocated to registers 
                                   3627 ;u8LineFiCmd               Allocated with name '_main_u8LineFiCmd_65536_120'
                                   3628 ;u8PwrOnFirstFlag          Allocated to registers r7 
                                   3629 ;u8SwNum                   Allocated with name '_main_u8SwNum_65536_120'
                                   3630 ;u8StatePeriodicSend       Allocated with name '_main_u8StatePeriodicSend_65536_120'
                                   3631 ;u8PSCmd                   Allocated with name '_main_u8PSCmd_65536_120'
                                   3632 ;u8StateUart0InputMode     Allocated to registers r4 
                                   3633 ;stLineFiPkt               Allocated with name '_main_stLineFiPkt_65536_120'
                                   3634 ;u8RxBufIdx                Allocated to registers 
                                   3635 ;u8Count2                  Allocated to registers 
                                   3636 ;u8RxPktCnt                Allocated to registers 
                                   3637 ;u8PreambleCnt             Allocated to registers 
                                   3638 ;i                         Allocated to registers r6 
                                   3639 ;pcBuf                     Allocated with name '_main_pcBuf_65536_120'
                                   3640 ;pu8Data                   Allocated with name '_main_pu8Data_65536_120'
                                   3641 ;u8DataIdx                 Allocated with name '_main_u8DataIdx_65536_120'
                                   3642 ;ucBufIdx                  Allocated with name '_main_ucBufIdx_65536_120'
                                   3643 ;pstLineFiPkt              Allocated with name '_main_pstLineFiPkt_65536_120'
                                   3644 ;stLineFiPkt_test          Allocated with name '_main_stLineFiPkt_test_65536_120'
                                   3645 ;------------------------------------------------------------
                                   3646 ;	src/main.c:819: void main (void)
                                   3647 ;	-----------------------------------------
                                   3648 ;	 function main
                                   3649 ;	-----------------------------------------
      000E04                       3650 _main:
                                   3651 ;	src/main.c:827: UINT8 u8LineFiAddr = 1;
      000E04 75*13 01         [24] 3652 	mov	_main_u8LineFiAddr_65536_120,#0x01
                                   3653 ;	src/main.c:829: UINT8 u8LineFiCmd = 1;
      000E07 75*14 01         [24] 3654 	mov	_main_u8LineFiCmd_65536_120,#0x01
                                   3655 ;	src/main.c:830: UINT8 u8PwrOnFirstFlag = 1;
      000E0A 7F 01            [12] 3656 	mov	r7,#0x01
                                   3657 ;	src/main.c:833: UINT8 u8StatePeriodicSend = STATE_PS_INIT;
      000E0C 75*16 00         [24] 3658 	mov	_main_u8StatePeriodicSend_65536_120,#0x00
                                   3659 ;	src/main.c:834: UINT8 u8PSCmd = STATE_PS_INIT;
      000E0F 75*17 00         [24] 3660 	mov	_main_u8PSCmd_65536_120,#0x00
                                   3661 ;	src/main.c:836: uint8 u8StateUart0InputMode = UART0_INPUT_MODE0;
      000E12 7C 00            [12] 3662 	mov	r4,#0x00
                                   3663 ;	src/main.c:840: unsigned char __xdata pu8Data[MAX_DATA] = {0,0,0,0,0,0,0,0,0,0};
      000E14 90r01r12         [24] 3664 	mov	dptr,#_main_pu8Data_65536_120
      000E17 E4               [12] 3665 	clr	a
      000E18 F0               [24] 3666 	movx	@dptr,a
      000E19 90r01r13         [24] 3667 	mov	dptr,#(_main_pu8Data_65536_120 + 0x0001)
      000E1C F0               [24] 3668 	movx	@dptr,a
      000E1D 90r01r14         [24] 3669 	mov	dptr,#(_main_pu8Data_65536_120 + 0x0002)
      000E20 F0               [24] 3670 	movx	@dptr,a
      000E21 90r01r15         [24] 3671 	mov	dptr,#(_main_pu8Data_65536_120 + 0x0003)
      000E24 F0               [24] 3672 	movx	@dptr,a
      000E25 90r01r16         [24] 3673 	mov	dptr,#(_main_pu8Data_65536_120 + 0x0004)
      000E28 F0               [24] 3674 	movx	@dptr,a
      000E29 90r01r17         [24] 3675 	mov	dptr,#(_main_pu8Data_65536_120 + 0x0005)
      000E2C F0               [24] 3676 	movx	@dptr,a
      000E2D 90r01r18         [24] 3677 	mov	dptr,#(_main_pu8Data_65536_120 + 0x0006)
      000E30 F0               [24] 3678 	movx	@dptr,a
      000E31 90r01r19         [24] 3679 	mov	dptr,#(_main_pu8Data_65536_120 + 0x0007)
      000E34 F0               [24] 3680 	movx	@dptr,a
      000E35 90r01r1A         [24] 3681 	mov	dptr,#(_main_pu8Data_65536_120 + 0x0008)
      000E38 F0               [24] 3682 	movx	@dptr,a
      000E39 90r01r1B         [24] 3683 	mov	dptr,#(_main_pu8Data_65536_120 + 0x0009)
      000E3C F0               [24] 3684 	movx	@dptr,a
                                   3685 ;	src/main.c:841: unsigned char __xdata u8DataIdx = 0;
      000E3D 90r01r1C         [24] 3686 	mov	dptr,#_main_u8DataIdx_65536_120
      000E40 F0               [24] 3687 	movx	@dptr,a
                                   3688 ;	src/main.c:842: uint8  __xdata ucBufIdx = 0;
      000E41 90r01r1D         [24] 3689 	mov	dptr,#_main_ucBufIdx_65536_120
      000E44 F0               [24] 3690 	movx	@dptr,a
                                   3691 ;	src/main.c:844: linefi_packet_t __xdata pstLineFiPkt[] = {
      000E45 90r01r1E         [24] 3692 	mov	dptr,#_main_pstLineFiPkt_65536_120
      000E48 04               [12] 3693 	inc	a
      000E49 F0               [24] 3694 	movx	@dptr,a
      000E4A 90r01r1F         [24] 3695 	mov	dptr,#(_main_pstLineFiPkt_65536_120 + 0x0001)
      000E4D 04               [12] 3696 	inc	a
      000E4E F0               [24] 3697 	movx	@dptr,a
      000E4F 90r01r20         [24] 3698 	mov	dptr,#(_main_pstLineFiPkt_65536_120 + 0x0002)
      000E52 14               [12] 3699 	dec	a
      000E53 F0               [24] 3700 	movx	@dptr,a
      000E54 90r01r21         [24] 3701 	mov	dptr,#(_main_pstLineFiPkt_65536_120 + 0x0003)
      000E57 74 0A            [12] 3702 	mov	a,#0x0a
      000E59 F0               [24] 3703 	movx	@dptr,a
      000E5A 90r01r22         [24] 3704 	mov	dptr,#(_main_pstLineFiPkt_65536_120 + 0x0004)
      000E5D 03               [12] 3705 	rr	a
      000E5E F0               [24] 3706 	movx	@dptr,a
      000E5F 90r01r23         [24] 3707 	mov	dptr,#(_main_pstLineFiPkt_65536_120 + 0x0005)
      000E62 74r2D            [12] 3708 	mov	a,#_gpu8Data
      000E64 F0               [24] 3709 	movx	@dptr,a
      000E65 74s00            [12] 3710 	mov	a,#(_gpu8Data >> 8)
      000E67 A3               [24] 3711 	inc	dptr
      000E68 F0               [24] 3712 	movx	@dptr,a
      000E69 E4               [12] 3713 	clr	a
      000E6A A3               [24] 3714 	inc	dptr
      000E6B F0               [24] 3715 	movx	@dptr,a
      000E6C 90r01r26         [24] 3716 	mov	dptr,#(_main_pstLineFiPkt_65536_120 + 0x0008)
      000E6F 04               [12] 3717 	inc	a
      000E70 F0               [24] 3718 	movx	@dptr,a
      000E71 90r01r27         [24] 3719 	mov	dptr,#(_main_pstLineFiPkt_65536_120 + 0x0009)
      000E74 04               [12] 3720 	inc	a
      000E75 F0               [24] 3721 	movx	@dptr,a
      000E76 90r01r28         [24] 3722 	mov	dptr,#(_main_pstLineFiPkt_65536_120 + 0x000a)
      000E79 F0               [24] 3723 	movx	@dptr,a
      000E7A 90r01r29         [24] 3724 	mov	dptr,#(_main_pstLineFiPkt_65536_120 + 0x000b)
      000E7D 74 0A            [12] 3725 	mov	a,#0x0a
      000E7F F0               [24] 3726 	movx	@dptr,a
      000E80 90r01r2A         [24] 3727 	mov	dptr,#(_main_pstLineFiPkt_65536_120 + 0x000c)
      000E83 03               [12] 3728 	rr	a
      000E84 F0               [24] 3729 	movx	@dptr,a
      000E85 90r01r2B         [24] 3730 	mov	dptr,#(_main_pstLineFiPkt_65536_120 + 0x000d)
      000E88 74r2D            [12] 3731 	mov	a,#_gpu8Data
      000E8A F0               [24] 3732 	movx	@dptr,a
      000E8B 74s00            [12] 3733 	mov	a,#(_gpu8Data >> 8)
      000E8D A3               [24] 3734 	inc	dptr
      000E8E F0               [24] 3735 	movx	@dptr,a
      000E8F E4               [12] 3736 	clr	a
      000E90 A3               [24] 3737 	inc	dptr
      000E91 F0               [24] 3738 	movx	@dptr,a
      000E92 90r01r2E         [24] 3739 	mov	dptr,#(_main_pstLineFiPkt_65536_120 + 0x0010)
      000E95 04               [12] 3740 	inc	a
      000E96 F0               [24] 3741 	movx	@dptr,a
      000E97 90r01r2F         [24] 3742 	mov	dptr,#(_main_pstLineFiPkt_65536_120 + 0x0011)
      000E9A 04               [12] 3743 	inc	a
      000E9B F0               [24] 3744 	movx	@dptr,a
      000E9C 90r01r30         [24] 3745 	mov	dptr,#(_main_pstLineFiPkt_65536_120 + 0x0012)
      000E9F 04               [12] 3746 	inc	a
      000EA0 F0               [24] 3747 	movx	@dptr,a
      000EA1 90r01r31         [24] 3748 	mov	dptr,#(_main_pstLineFiPkt_65536_120 + 0x0013)
      000EA4 74 0A            [12] 3749 	mov	a,#0x0a
      000EA6 F0               [24] 3750 	movx	@dptr,a
      000EA7 90r01r32         [24] 3751 	mov	dptr,#(_main_pstLineFiPkt_65536_120 + 0x0014)
      000EAA 03               [12] 3752 	rr	a
      000EAB F0               [24] 3753 	movx	@dptr,a
      000EAC 90r01r33         [24] 3754 	mov	dptr,#(_main_pstLineFiPkt_65536_120 + 0x0015)
      000EAF 74r2D            [12] 3755 	mov	a,#_gpu8Data
      000EB1 F0               [24] 3756 	movx	@dptr,a
      000EB2 74s00            [12] 3757 	mov	a,#(_gpu8Data >> 8)
      000EB4 A3               [24] 3758 	inc	dptr
      000EB5 F0               [24] 3759 	movx	@dptr,a
      000EB6 E4               [12] 3760 	clr	a
      000EB7 A3               [24] 3761 	inc	dptr
      000EB8 F0               [24] 3762 	movx	@dptr,a
      000EB9 90r01r36         [24] 3763 	mov	dptr,#(_main_pstLineFiPkt_65536_120 + 0x0018)
      000EBC 04               [12] 3764 	inc	a
      000EBD F0               [24] 3765 	movx	@dptr,a
      000EBE 90r01r37         [24] 3766 	mov	dptr,#(_main_pstLineFiPkt_65536_120 + 0x0019)
      000EC1 04               [12] 3767 	inc	a
      000EC2 F0               [24] 3768 	movx	@dptr,a
      000EC3 90r01r38         [24] 3769 	mov	dptr,#(_main_pstLineFiPkt_65536_120 + 0x001a)
      000EC6 23               [12] 3770 	rl	a
      000EC7 F0               [24] 3771 	movx	@dptr,a
      000EC8 90r01r39         [24] 3772 	mov	dptr,#(_main_pstLineFiPkt_65536_120 + 0x001b)
      000ECB 74 0A            [12] 3773 	mov	a,#0x0a
      000ECD F0               [24] 3774 	movx	@dptr,a
      000ECE 90r01r3A         [24] 3775 	mov	dptr,#(_main_pstLineFiPkt_65536_120 + 0x001c)
      000ED1 03               [12] 3776 	rr	a
      000ED2 F0               [24] 3777 	movx	@dptr,a
      000ED3 90r01r3B         [24] 3778 	mov	dptr,#(_main_pstLineFiPkt_65536_120 + 0x001d)
      000ED6 74r2D            [12] 3779 	mov	a,#_gpu8Data
      000ED8 F0               [24] 3780 	movx	@dptr,a
      000ED9 74s00            [12] 3781 	mov	a,#(_gpu8Data >> 8)
      000EDB A3               [24] 3782 	inc	dptr
      000EDC F0               [24] 3783 	movx	@dptr,a
      000EDD E4               [12] 3784 	clr	a
      000EDE A3               [24] 3785 	inc	dptr
      000EDF F0               [24] 3786 	movx	@dptr,a
      000EE0 90r01r3E         [24] 3787 	mov	dptr,#(_main_pstLineFiPkt_65536_120 + 0x0020)
      000EE3 04               [12] 3788 	inc	a
      000EE4 F0               [24] 3789 	movx	@dptr,a
      000EE5 90r01r3F         [24] 3790 	mov	dptr,#(_main_pstLineFiPkt_65536_120 + 0x0021)
      000EE8 04               [12] 3791 	inc	a
      000EE9 F0               [24] 3792 	movx	@dptr,a
      000EEA 90r01r40         [24] 3793 	mov	dptr,#(_main_pstLineFiPkt_65536_120 + 0x0022)
      000EED 74 05            [12] 3794 	mov	a,#0x05
      000EEF F0               [24] 3795 	movx	@dptr,a
      000EF0 90r01r41         [24] 3796 	mov	dptr,#(_main_pstLineFiPkt_65536_120 + 0x0023)
      000EF3 23               [12] 3797 	rl	a
      000EF4 F0               [24] 3798 	movx	@dptr,a
      000EF5 90r01r42         [24] 3799 	mov	dptr,#(_main_pstLineFiPkt_65536_120 + 0x0024)
      000EF8 03               [12] 3800 	rr	a
      000EF9 F0               [24] 3801 	movx	@dptr,a
      000EFA 90r01r43         [24] 3802 	mov	dptr,#(_main_pstLineFiPkt_65536_120 + 0x0025)
      000EFD 74r2D            [12] 3803 	mov	a,#_gpu8Data
      000EFF F0               [24] 3804 	movx	@dptr,a
      000F00 74s00            [12] 3805 	mov	a,#(_gpu8Data >> 8)
      000F02 A3               [24] 3806 	inc	dptr
      000F03 F0               [24] 3807 	movx	@dptr,a
      000F04 E4               [12] 3808 	clr	a
      000F05 A3               [24] 3809 	inc	dptr
      000F06 F0               [24] 3810 	movx	@dptr,a
                                   3811 ;	src/main.c:852: linefi_packet_t stLineFiPkt = {
                                   3812 ;	1-genFromRTrack replaced	mov	_main_stLineFiPkt_65536_120,#0x01
      000F07 8F*18            [24] 3813 	mov	_main_stLineFiPkt_65536_120,r7
      000F09 75*19 02         [24] 3814 	mov	(_main_stLineFiPkt_65536_120 + 0x0001),#0x02
      000F0C 75*1A 03         [24] 3815 	mov	(_main_stLineFiPkt_65536_120 + 0x0002),#0x03
      000F0F 75*1B 0A         [24] 3816 	mov	(_main_stLineFiPkt_65536_120 + 0x0003),#0x0a
      000F12 75*1C 05         [24] 3817 	mov	(_main_stLineFiPkt_65536_120 + 0x0004),#0x05
      000F15 75*1Dr2D         [24] 3818 	mov	((_main_stLineFiPkt_65536_120 + 0x0005) + 0),#_gpu8Data
      000F18 75*1Es00         [24] 3819 	mov	((_main_stLineFiPkt_65536_120 + 0x0005) + 1),#(_gpu8Data >> 8)
                                   3820 ;	1-genFromRTrack replaced	mov	((_main_stLineFiPkt_65536_120 + 0x0005) + 2),#0x00
      000F1B F5*1F            [12] 3821 	mov	((_main_stLineFiPkt_65536_120 + 0x0005) + 2),a
                                   3822 ;	src/main.c:861: linefi_packet_t __xdata stLineFiPkt_test = { // For sending periodic packet
      000F1D 90r01r46         [24] 3823 	mov	dptr,#_main_stLineFiPkt_test_65536_120
      000F20 04               [12] 3824 	inc	a
      000F21 F0               [24] 3825 	movx	@dptr,a
      000F22 90r01r47         [24] 3826 	mov	dptr,#(_main_stLineFiPkt_test_65536_120 + 0x0001)
      000F25 04               [12] 3827 	inc	a
      000F26 F0               [24] 3828 	movx	@dptr,a
      000F27 90r01r48         [24] 3829 	mov	dptr,#(_main_stLineFiPkt_test_65536_120 + 0x0002)
      000F2A 14               [12] 3830 	dec	a
      000F2B F0               [24] 3831 	movx	@dptr,a
      000F2C 90r01r49         [24] 3832 	mov	dptr,#(_main_stLineFiPkt_test_65536_120 + 0x0003)
      000F2F 74 03            [12] 3833 	mov	a,#0x03
      000F31 F0               [24] 3834 	movx	@dptr,a
      000F32 90r01r4A         [24] 3835 	mov	dptr,#(_main_stLineFiPkt_test_65536_120 + 0x0004)
      000F35 74 05            [12] 3836 	mov	a,#0x05
      000F37 F0               [24] 3837 	movx	@dptr,a
      000F38 90r01r4B         [24] 3838 	mov	dptr,#(_main_stLineFiPkt_test_65536_120 + 0x0005)
      000F3B 74r55            [12] 3839 	mov	a,#_gpu8Data3
      000F3D F0               [24] 3840 	movx	@dptr,a
      000F3E 74s00            [12] 3841 	mov	a,#(_gpu8Data3 >> 8)
      000F40 A3               [24] 3842 	inc	dptr
      000F41 F0               [24] 3843 	movx	@dptr,a
      000F42 E4               [12] 3844 	clr	a
      000F43 A3               [24] 3845 	inc	dptr
      000F44 F0               [24] 3846 	movx	@dptr,a
                                   3847 ;	src/main.c:870: gpio_setup();
      000F45 C0 07            [24] 3848 	push	ar7
      000F47 C0 04            [24] 3849 	push	ar4
      000F49 12r03rBA         [24] 3850 	lcall	_gpio_setup
                                   3851 ;	src/main.c:871: uart_setup();
      000F4C 12r00r00         [24] 3852 	lcall	_uart_setup
                                   3853 ;	src/main.c:873: MODIFY_HIRC_166();
      000F4F 12r02r40         [24] 3854 	lcall	_MODIFY_HIRC_166
                                   3855 ;	src/main.c:875: clr_T0M;// 16/12 MHz
      000F52 53 8E F7         [24] 3856 	anl	_CKCON,#0xf7
                                   3857 ;	src/main.c:878: set_ET0;                                    //enable Timer0 interrupt
                                   3858 ;	assignBit
      000F55 D2 A9            [12] 3859 	setb	_ET0
                                   3860 ;	src/main.c:879: set_TR0;                                    //Timer0 run
                                   3861 ;	assignBit
      000F57 D2 8C            [12] 3862 	setb	_TR0
                                   3863 ;	src/main.c:881: gu8UART = 0;
      000F59 75*00 00         [24] 3864 	mov	_gu8UART,#0x00
                                   3865 ;	src/main.c:882: printf_fast_f("This is UART0\n\r");
      000F5C 74r84            [12] 3866 	mov	a,#___str_56
      000F5E C0 E0            [24] 3867 	push	acc
      000F60 74s03            [12] 3868 	mov	a,#(___str_56 >> 8)
      000F62 C0 E0            [24] 3869 	push	acc
      000F64 12r00r00         [24] 3870 	lcall	_printf_fast_f
      000F67 15 81            [12] 3871 	dec	sp
      000F69 15 81            [12] 3872 	dec	sp
                                   3873 ;	src/main.c:883: printf_fast_f("LineFi Master\n\r");
      000F6B 74r94            [12] 3874 	mov	a,#___str_57
      000F6D C0 E0            [24] 3875 	push	acc
      000F6F 74s03            [12] 3876 	mov	a,#(___str_57 >> 8)
      000F71 C0 E0            [24] 3877 	push	acc
      000F73 12r00r00         [24] 3878 	lcall	_printf_fast_f
      000F76 15 81            [12] 3879 	dec	sp
      000F78 15 81            [12] 3880 	dec	sp
                                   3881 ;	src/main.c:884: gu8UART = 1;
      000F7A 75*00 01         [24] 3882 	mov	_gu8UART,#0x01
                                   3883 ;	src/main.c:885: printf_fast_f("This is UART1\n\r");
      000F7D 74rA4            [12] 3884 	mov	a,#___str_58
      000F7F C0 E0            [24] 3885 	push	acc
      000F81 74s03            [12] 3886 	mov	a,#(___str_58 >> 8)
      000F83 C0 E0            [24] 3887 	push	acc
      000F85 12r00r00         [24] 3888 	lcall	_printf_fast_f
      000F88 15 81            [12] 3889 	dec	sp
      000F8A 15 81            [12] 3890 	dec	sp
      000F8C D0 04            [24] 3891 	pop	ar4
      000F8E D0 07            [24] 3892 	pop	ar7
                                   3893 ;	src/main.c:892: for (u16Cnt = 0 ; u16Cnt < 30000; u16Cnt++) {
      000F90 7A 30            [12] 3894 	mov	r2,#0x30
      000F92 7B 75            [12] 3895 	mov	r3,#0x75
      000F94                       3896 00209$:
                                   3897 ;	src/main.c:893: nop; nop; nop; nop; nop;
      000F94 00               [12] 3898 	NOP
      000F95 00               [12] 3899 	NOP
      000F96 00               [12] 3900 	NOP
      000F97 00               [12] 3901 	NOP
      000F98 00               [12] 3902 	NOP
      000F99 1A               [12] 3903 	dec	r2
      000F9A BA FF 01         [24] 3904 	cjne	r2,#0xff,00461$
      000F9D 1B               [12] 3905 	dec	r3
      000F9E                       3906 00461$:
                                   3907 ;	src/main.c:892: for (u16Cnt = 0 ; u16Cnt < 30000; u16Cnt++) {
      000F9E EA               [12] 3908 	mov	a,r2
      000F9F 4B               [12] 3909 	orl	a,r3
      000FA0 70 F2            [24] 3910 	jnz	00209$
                                   3911 ;	src/main.c:895: LINEFI_TX = 1;
                                   3912 ;	assignBit
      000FA2 D2 96            [12] 3913 	setb	_P16
                                   3914 ;	src/main.c:896: LINEFI_EN0 = 0;
                                   3915 ;	assignBit
      000FA4 C2 90            [12] 3916 	clr	_P10
                                   3917 ;	src/main.c:897: gu8UART = 0;
      000FA6 75*00 00         [24] 3918 	mov	_gu8UART,#0x00
                                   3919 ;	src/main.c:901: InitialUART1_Timer3(gpu32UartSpeed[0]);
      000FA9 90r00r75         [24] 3920 	mov	dptr,#_gpu32UartSpeed
      000FAC E0               [24] 3921 	movx	a,@dptr
      000FAD FA               [12] 3922 	mov	r2,a
      000FAE A3               [24] 3923 	inc	dptr
      000FAF E0               [24] 3924 	movx	a,@dptr
      000FB0 FB               [12] 3925 	mov	r3,a
      000FB1 A3               [24] 3926 	inc	dptr
      000FB2 E0               [24] 3927 	movx	a,@dptr
      000FB3 FD               [12] 3928 	mov	r5,a
      000FB4 A3               [24] 3929 	inc	dptr
      000FB5 E0               [24] 3930 	movx	a,@dptr
      000FB6 8A 82            [24] 3931 	mov	dpl,r2
      000FB8 8B 83            [24] 3932 	mov	dph,r3
      000FBA 8D F0            [24] 3933 	mov	b,r5
      000FBC C0 07            [24] 3934 	push	ar7
      000FBE C0 04            [24] 3935 	push	ar4
      000FC0 12r00r00         [24] 3936 	lcall	_InitialUART1_Timer3
                                   3937 ;	src/main.c:902: send_octet_to_linefi(((LINEFI_DEFAULT_RATE<<4)&0xF0) | (1)&0x0F);
      000FC3 75 82 51         [24] 3938 	mov	dpl,#0x51
      000FC6 12r00r00         [24] 3939 	lcall	_send_octet_to_linefi
      000FC9 D0 04            [24] 3940 	pop	ar4
      000FCB D0 07            [24] 3941 	pop	ar7
                                   3942 ;	src/main.c:904: for (u16Cnt = 0 ; u16Cnt < 30000; u16Cnt++) {
      000FCD 7D 30            [12] 3943 	mov	r5,#0x30
      000FCF 7E 75            [12] 3944 	mov	r6,#0x75
      000FD1                       3945 00212$:
                                   3946 ;	src/main.c:905: nop; nop; nop; nop; nop;
      000FD1 00               [12] 3947 	NOP
      000FD2 00               [12] 3948 	NOP
      000FD3 00               [12] 3949 	NOP
      000FD4 00               [12] 3950 	NOP
      000FD5 00               [12] 3951 	NOP
      000FD6 1D               [12] 3952 	dec	r5
      000FD7 BD FF 01         [24] 3953 	cjne	r5,#0xff,00463$
      000FDA 1E               [12] 3954 	dec	r6
      000FDB                       3955 00463$:
                                   3956 ;	src/main.c:904: for (u16Cnt = 0 ; u16Cnt < 30000; u16Cnt++) {
      000FDB ED               [12] 3957 	mov	a,r5
      000FDC 4E               [12] 3958 	orl	a,r6
      000FDD 70 F2            [24] 3959 	jnz	00212$
                                   3960 ;	src/main.c:908: InitialUART1_Timer3(gpu32UartSpeed[LINEFI_DEFAULT_RATE]);
      000FDF 90r00r89         [24] 3961 	mov	dptr,#(_gpu32UartSpeed + 0x0014)
      000FE2 E0               [24] 3962 	movx	a,@dptr
      000FE3 FA               [12] 3963 	mov	r2,a
      000FE4 A3               [24] 3964 	inc	dptr
      000FE5 E0               [24] 3965 	movx	a,@dptr
      000FE6 FB               [12] 3966 	mov	r3,a
      000FE7 A3               [24] 3967 	inc	dptr
      000FE8 E0               [24] 3968 	movx	a,@dptr
      000FE9 FD               [12] 3969 	mov	r5,a
      000FEA A3               [24] 3970 	inc	dptr
      000FEB E0               [24] 3971 	movx	a,@dptr
      000FEC 8A 82            [24] 3972 	mov	dpl,r2
      000FEE 8B 83            [24] 3973 	mov	dph,r3
      000FF0 8D F0            [24] 3974 	mov	b,r5
      000FF2 C0 07            [24] 3975 	push	ar7
      000FF4 C0 04            [24] 3976 	push	ar4
      000FF6 12r00r00         [24] 3977 	lcall	_InitialUART1_Timer3
      000FF9 D0 04            [24] 3978 	pop	ar4
      000FFB D0 07            [24] 3979 	pop	ar7
                                   3980 ;	src/main.c:910: for (u16Cnt = 0 ; u16Cnt < 30000; u16Cnt++) {
      000FFD 7D 30            [12] 3981 	mov	r5,#0x30
      000FFF 7E 75            [12] 3982 	mov	r6,#0x75
      001001                       3983 00215$:
                                   3984 ;	src/main.c:911: nop; nop; nop; nop; nop;
      001001 00               [12] 3985 	NOP
      001002 00               [12] 3986 	NOP
      001003 00               [12] 3987 	NOP
      001004 00               [12] 3988 	NOP
      001005 00               [12] 3989 	NOP
      001006 1D               [12] 3990 	dec	r5
      001007 BD FF 01         [24] 3991 	cjne	r5,#0xff,00465$
      00100A 1E               [12] 3992 	dec	r6
      00100B                       3993 00465$:
                                   3994 ;	src/main.c:910: for (u16Cnt = 0 ; u16Cnt < 30000; u16Cnt++) {
      00100B ED               [12] 3995 	mov	a,r5
      00100C 4E               [12] 3996 	orl	a,r6
      00100D 70 F2            [24] 3997 	jnz	00215$
                                   3998 ;	src/main.c:913: LINEFI_TX = 1;
                                   3999 ;	assignBit
      00100F D2 96            [12] 4000 	setb	_P16
                                   4001 ;	src/main.c:915: LINEFI_EN0 = 0;
                                   4002 ;	assignBit
      001011 C2 90            [12] 4003 	clr	_P10
                                   4004 ;	src/main.c:916: LINEFI_EN1 = 1;
                                   4005 ;	assignBit
      001013 D2 91            [12] 4006 	setb	_P11
                                   4007 ;	src/main.c:917: LINEFI_EN2 = 0;
                                   4008 ;	assignBit
      001015 C2 92            [12] 4009 	clr	_P12
                                   4010 ;	src/main.c:918: printf("%s\r\n", gcUartInputMode[u8StateUart0InputMode]);
      001017 90r00r1E         [24] 4011 	mov	dptr,#_gcUartInputMode
      00101A E0               [24] 4012 	movx	a,@dptr
      00101B FB               [12] 4013 	mov	r3,a
      00101C A3               [24] 4014 	inc	dptr
      00101D E0               [24] 4015 	movx	a,@dptr
      00101E FD               [12] 4016 	mov	r5,a
      00101F A3               [24] 4017 	inc	dptr
      001020 E0               [24] 4018 	movx	a,@dptr
      001021 FE               [12] 4019 	mov	r6,a
      001022 C0 07            [24] 4020 	push	ar7
      001024 C0 04            [24] 4021 	push	ar4
      001026 C0 03            [24] 4022 	push	ar3
      001028 C0 05            [24] 4023 	push	ar5
      00102A C0 06            [24] 4024 	push	ar6
      00102C 74rB4            [12] 4025 	mov	a,#___str_59
      00102E C0 E0            [24] 4026 	push	acc
      001030 74s03            [12] 4027 	mov	a,#(___str_59 >> 8)
      001032 C0 E0            [24] 4028 	push	acc
      001034 74 80            [12] 4029 	mov	a,#0x80
      001036 C0 E0            [24] 4030 	push	acc
      001038 12r00r00         [24] 4031 	lcall	_printf
      00103B E5 81            [12] 4032 	mov	a,sp
      00103D 24 FA            [12] 4033 	add	a,#0xfa
      00103F F5 81            [12] 4034 	mov	sp,a
      001041 D0 04            [24] 4035 	pop	ar4
      001043 D0 07            [24] 4036 	pop	ar7
                                   4037 ;	src/main.c:920: while(1) {
      001045                       4038 00205$:
                                   4039 ;	src/main.c:923: if (Receive_Data_From_UART0_nb(&u8RxUART)) { // 유아트 입력이 있을 때
      001045 90r00r12         [24] 4040 	mov	dptr,#_main_u8RxUART_65536_120
      001048 75 F0 40         [24] 4041 	mov	b,#0x40
      00104B C0 07            [24] 4042 	push	ar7
      00104D C0 04            [24] 4043 	push	ar4
      00104F 12r00r00         [24] 4044 	lcall	_Receive_Data_From_UART0_nb
      001052 E5 82            [12] 4045 	mov	a,dpl
      001054 D0 04            [24] 4046 	pop	ar4
      001056 D0 07            [24] 4047 	pop	ar7
      001058 70 03            [24] 4048 	jnz	00467$
      00105A 02r13r44         [24] 4049 	ljmp	00163$
      00105D                       4050 00467$:
                                   4051 ;	src/main.c:924: switch(u8RxUART) {
      00105D 74 1B            [12] 4052 	mov	a,#0x1b
      00105F B5*12 43         [24] 4053 	cjne	a,_main_u8RxUART_65536_120,00107$
                                   4054 ;	src/main.c:926: u8StateUart0InputMode++;
      001062 0C               [12] 4055 	inc	r4
                                   4056 ;	src/main.c:927: if (u8StateUart0InputMode == MAX_STATE_UART0_INPUT) {
      001063 BC 05 02         [24] 4057 	cjne	r4,#0x05,00106$
                                   4058 ;	src/main.c:928: u8StateUart0InputMode = 0;
      001066 7C 00            [12] 4059 	mov	r4,#0x00
      001068                       4060 00106$:
                                   4061 ;	src/main.c:930: printf("%s\r\n", gcUartInputMode[u8StateUart0InputMode]);
      001068 EC               [12] 4062 	mov	a,r4
      001069 75 F0 03         [24] 4063 	mov	b,#0x03
      00106C A4               [48] 4064 	mul	ab
      00106D 24r1E            [12] 4065 	add	a,#_gcUartInputMode
      00106F F5 82            [12] 4066 	mov	dpl,a
      001071 74s00            [12] 4067 	mov	a,#(_gcUartInputMode >> 8)
      001073 35 F0            [12] 4068 	addc	a,b
      001075 F5 83            [12] 4069 	mov	dph,a
      001077 E0               [24] 4070 	movx	a,@dptr
      001078 FB               [12] 4071 	mov	r3,a
      001079 A3               [24] 4072 	inc	dptr
      00107A E0               [24] 4073 	movx	a,@dptr
      00107B FD               [12] 4074 	mov	r5,a
      00107C A3               [24] 4075 	inc	dptr
      00107D E0               [24] 4076 	movx	a,@dptr
      00107E FE               [12] 4077 	mov	r6,a
      00107F C0 07            [24] 4078 	push	ar7
      001081 C0 04            [24] 4079 	push	ar4
      001083 C0 03            [24] 4080 	push	ar3
      001085 C0 05            [24] 4081 	push	ar5
      001087 C0 06            [24] 4082 	push	ar6
      001089 74rB4            [12] 4083 	mov	a,#___str_59
      00108B C0 E0            [24] 4084 	push	acc
      00108D 74s03            [12] 4085 	mov	a,#(___str_59 >> 8)
      00108F C0 E0            [24] 4086 	push	acc
      001091 74 80            [12] 4087 	mov	a,#0x80
      001093 C0 E0            [24] 4088 	push	acc
      001095 12r00r00         [24] 4089 	lcall	_printf
      001098 E5 81            [12] 4090 	mov	a,sp
      00109A 24 FA            [12] 4091 	add	a,#0xfa
      00109C F5 81            [12] 4092 	mov	sp,a
      00109E D0 04            [24] 4093 	pop	ar4
      0010A0 D0 07            [24] 4094 	pop	ar7
                                   4095 ;	src/main.c:931: break;
      0010A2 02r13r8C         [24] 4096 	ljmp	00164$
                                   4097 ;	src/main.c:932: default :
      0010A5                       4098 00107$:
                                   4099 ;	src/main.c:933: switch(u8StateUart0InputMode) {
      0010A5 EC               [12] 4100 	mov	a,r4
      0010A6 24 FB            [12] 4101 	add	a,#0xff - 0x04
      0010A8 50 03            [24] 4102 	jnc	00472$
      0010AA 02r13r8C         [24] 4103 	ljmp	00164$
      0010AD                       4104 00472$:
      0010AD EC               [12] 4105 	mov	a,r4
      0010AE 2C               [12] 4106 	add	a,r4
      0010AF 2C               [12] 4107 	add	a,r4
      0010B0 90r10rB4         [24] 4108 	mov	dptr,#00473$
      0010B3 73               [24] 4109 	jmp	@a+dptr
      0010B4                       4110 00473$:
      0010B4 02r10rC3         [24] 4111 	ljmp	00108$
      0010B7 02r10rE6         [24] 4112 	ljmp	00109$
      0010BA 02r11r04         [24] 4113 	ljmp	00110$
      0010BD 02r11rF5         [24] 4114 	ljmp	00131$
      0010C0 02r12rFB         [24] 4115 	ljmp	00147$
                                   4116 ;	src/main.c:934: case UART0_INPUT_MODE0 :
      0010C3                       4117 00108$:
                                   4118 ;	src/main.c:935: act_by_one_key(u8RxUART, &u8LineFiCmd, &u8LineFiAddr);
      0010C3 75*08r14         [24] 4119 	mov	_act_by_one_key_PARM_2,#_main_u8LineFiCmd_65536_120
      0010C6 75*09 00         [24] 4120 	mov	(_act_by_one_key_PARM_2 + 1),#0x00
      0010C9 75*0A 40         [24] 4121 	mov	(_act_by_one_key_PARM_2 + 2),#0x40
      0010CC 75*0Br13         [24] 4122 	mov	_act_by_one_key_PARM_3,#_main_u8LineFiAddr_65536_120
      0010CF 75*0C 00         [24] 4123 	mov	(_act_by_one_key_PARM_3 + 1),#0x00
      0010D2 75*0D 40         [24] 4124 	mov	(_act_by_one_key_PARM_3 + 2),#0x40
      0010D5 85*12 82         [24] 4125 	mov	dpl,_main_u8RxUART_65536_120
      0010D8 C0 07            [24] 4126 	push	ar7
      0010DA C0 04            [24] 4127 	push	ar4
      0010DC 12r06r35         [24] 4128 	lcall	_act_by_one_key
      0010DF D0 04            [24] 4129 	pop	ar4
      0010E1 D0 07            [24] 4130 	pop	ar7
                                   4131 ;	src/main.c:936: break;
      0010E3 02r13r8C         [24] 4132 	ljmp	00164$
                                   4133 ;	src/main.c:937: case UART0_INPUT_MODE1 :
      0010E6                       4134 00109$:
                                   4135 ;	src/main.c:938: gu16TimeCnt = 0;
      0010E6 90r00r71         [24] 4136 	mov	dptr,#_gu16TimeCnt
      0010E9 E4               [12] 4137 	clr	a
      0010EA F0               [24] 4138 	movx	@dptr,a
      0010EB A3               [24] 4139 	inc	dptr
      0010EC F0               [24] 4140 	movx	@dptr,a
                                   4141 ;	src/main.c:939: pcBuf[ucBufIdx++] = u8RxUART;
      0010ED 90r01r1D         [24] 4142 	mov	dptr,#_main_ucBufIdx_65536_120
      0010F0 E0               [24] 4143 	movx	a,@dptr
      0010F1 FE               [12] 4144 	mov	r6,a
      0010F2 04               [12] 4145 	inc	a
      0010F3 F0               [24] 4146 	movx	@dptr,a
      0010F4 EE               [12] 4147 	mov	a,r6
      0010F5 24rAE            [12] 4148 	add	a,#_main_pcBuf_65536_120
      0010F7 F5 82            [12] 4149 	mov	dpl,a
      0010F9 E4               [12] 4150 	clr	a
      0010FA 34s00            [12] 4151 	addc	a,#(_main_pcBuf_65536_120 >> 8)
      0010FC F5 83            [12] 4152 	mov	dph,a
      0010FE E5*12            [12] 4153 	mov	a,_main_u8RxUART_65536_120
      001100 F0               [24] 4154 	movx	@dptr,a
                                   4155 ;	src/main.c:941: break;
      001101 02r13r8C         [24] 4156 	ljmp	00164$
                                   4157 ;	src/main.c:942: case UART0_INPUT_MODE2 : // mimic 5keys on board
      001104                       4158 00110$:
                                   4159 ;	src/main.c:943: switch(u8RxUART) {
      001104 74 66            [12] 4160 	mov	a,#0x66
      001106 B5*12 02         [24] 4161 	cjne	a,_main_u8RxUART_65536_120,00474$
      001109 80 1F            [24] 4162 	sjmp	00111$
      00110B                       4163 00474$:
      00110B 74 67            [12] 4164 	mov	a,#0x67
      00110D B5*12 02         [24] 4165 	cjne	a,_main_u8RxUART_65536_120,00475$
      001110 80 26            [24] 4166 	sjmp	00114$
      001112                       4167 00475$:
      001112 74 68            [12] 4168 	mov	a,#0x68
      001114 B5*12 02         [24] 4169 	cjne	a,_main_u8RxUART_65536_120,00476$
      001117 80 27            [24] 4170 	sjmp	00117$
      001119                       4171 00476$:
      001119 74 6A            [12] 4172 	mov	a,#0x6a
      00111B B5*12 02         [24] 4173 	cjne	a,_main_u8RxUART_65536_120,00477$
      00111E 80 3C            [24] 4174 	sjmp	00118$
      001120                       4175 00477$:
      001120 74 6B            [12] 4176 	mov	a,#0x6b
      001122 B5*12 02         [24] 4177 	cjne	a,_main_u8RxUART_65536_120,00478$
      001125 80 62            [24] 4178 	sjmp	00121$
      001127                       4179 00478$:
      001127 02r11rB4         [24] 4180 	ljmp	00124$
                                   4181 ;	src/main.c:944: case 'f' : // down SW1
      00112A                       4182 00111$:
                                   4183 ;	src/main.c:945: u8LineFiAddr--;
      00112A 15*13            [12] 4184 	dec	_main_u8LineFiAddr_65536_120
                                   4185 ;	src/main.c:946: if (u8LineFiAddr == 0) {
      00112C E5*13            [12] 4186 	mov	a,_main_u8LineFiAddr_65536_120
      00112E 60 03            [24] 4187 	jz	00479$
      001130 02r11rB4         [24] 4188 	ljmp	00124$
      001133                       4189 00479$:
                                   4190 ;	src/main.c:947: u8LineFiAddr = 1;
      001133 75*13 01         [24] 4191 	mov	_main_u8LineFiAddr_65536_120,#0x01
                                   4192 ;	src/main.c:949: break;
                                   4193 ;	src/main.c:950: case 'g' : // right SW2
      001136 80 7C            [24] 4194 	sjmp	00124$
      001138                       4195 00114$:
                                   4196 ;	src/main.c:951: u8LineFiCmd--;
                                   4197 ;	src/main.c:952: if (u8LineFiCmd == 0) {
      001138 D5*14 79         [24] 4198 	djnz	_main_u8LineFiCmd_65536_120,00124$
                                   4199 ;	src/main.c:953: u8LineFiCmd = 1;
      00113B 75*14 01         [24] 4200 	mov	_main_u8LineFiCmd_65536_120,#0x01
                                   4201 ;	src/main.c:955: break;
                                   4202 ;	src/main.c:956: case 'h' : // center SW3
      00113E 80 74            [24] 4203 	sjmp	00124$
      001140                       4204 00117$:
                                   4205 ;	src/main.c:957: stLineFiPkt.pu8Data = pu8Data;
      001140 75*1Dr12         [24] 4206 	mov	((_main_stLineFiPkt_65536_120 + 0x0005) + 0),#_main_pu8Data_65536_120
      001143 75*1Es01         [24] 4207 	mov	((_main_stLineFiPkt_65536_120 + 0x0005) + 1),#(_main_pu8Data_65536_120 >> 8)
      001146 75*1F 00         [24] 4208 	mov	((_main_stLineFiPkt_65536_120 + 0x0005) + 2),#0x00
                                   4209 ;	src/main.c:958: send_linefi_packet(&stLineFiPkt);
      001149 90r00r18         [24] 4210 	mov	dptr,#_main_stLineFiPkt_65536_120
      00114C 75 F0 40         [24] 4211 	mov	b,#0x40
      00114F C0 07            [24] 4212 	push	ar7
      001151 C0 04            [24] 4213 	push	ar4
      001153 12r00r00         [24] 4214 	lcall	_send_linefi_packet
      001156 D0 04            [24] 4215 	pop	ar4
      001158 D0 07            [24] 4216 	pop	ar7
                                   4217 ;	src/main.c:959: break;
                                   4218 ;	src/main.c:961: case 'j' : //  left SW4
      00115A 80 58            [24] 4219 	sjmp	00124$
      00115C                       4220 00118$:
                                   4221 ;	src/main.c:962: u8LineFiCmd++;
      00115C 05*14            [12] 4222 	inc	_main_u8LineFiCmd_65536_120
                                   4223 ;	src/main.c:963: if (u8LineFiCmd == 101) {
      00115E 74 65            [12] 4224 	mov	a,#0x65
      001160 B5*14 03         [24] 4225 	cjne	a,_main_u8LineFiCmd_65536_120,00120$
                                   4226 ;	src/main.c:964: u8LineFiCmd = 100;
      001163 75*14 64         [24] 4227 	mov	_main_u8LineFiCmd_65536_120,#0x64
      001166                       4228 00120$:
                                   4229 ;	src/main.c:966: printf_fast_f("command: %d\n\r", u8LineFiCmd);
      001166 AD*14            [24] 4230 	mov	r5,_main_u8LineFiCmd_65536_120
      001168 7E 00            [12] 4231 	mov	r6,#0x00
      00116A C0 07            [24] 4232 	push	ar7
      00116C C0 04            [24] 4233 	push	ar4
      00116E C0 05            [24] 4234 	push	ar5
      001170 C0 06            [24] 4235 	push	ar6
      001172 74rFA            [12] 4236 	mov	a,#___str_49
      001174 C0 E0            [24] 4237 	push	acc
      001176 74s02            [12] 4238 	mov	a,#(___str_49 >> 8)
      001178 C0 E0            [24] 4239 	push	acc
      00117A 12r00r00         [24] 4240 	lcall	_printf_fast_f
      00117D E5 81            [12] 4241 	mov	a,sp
      00117F 24 FC            [12] 4242 	add	a,#0xfc
      001181 F5 81            [12] 4243 	mov	sp,a
      001183 D0 04            [24] 4244 	pop	ar4
      001185 D0 07            [24] 4245 	pop	ar7
                                   4246 ;	src/main.c:967: break;
                                   4247 ;	src/main.c:968: case 'k' : // up SW5
      001187 80 2B            [24] 4248 	sjmp	00124$
      001189                       4249 00121$:
                                   4250 ;	src/main.c:969: u8LineFiAddr++;
      001189 05*13            [12] 4251 	inc	_main_u8LineFiAddr_65536_120
                                   4252 ;	src/main.c:970: if (u8LineFiAddr == 16) {
      00118B 74 10            [12] 4253 	mov	a,#0x10
      00118D B5*13 03         [24] 4254 	cjne	a,_main_u8LineFiAddr_65536_120,00123$
                                   4255 ;	src/main.c:971: u8LineFiAddr = 15;
      001190 75*13 0F         [24] 4256 	mov	_main_u8LineFiAddr_65536_120,#0x0f
      001193                       4257 00123$:
                                   4258 ;	src/main.c:973: printf_fast_f("address: %d\n\r", u8LineFiAddr);
      001193 AD*13            [24] 4259 	mov	r5,_main_u8LineFiAddr_65536_120
      001195 7E 00            [12] 4260 	mov	r6,#0x00
      001197 C0 07            [24] 4261 	push	ar7
      001199 C0 04            [24] 4262 	push	ar4
      00119B C0 05            [24] 4263 	push	ar5
      00119D C0 06            [24] 4264 	push	ar6
      00119F 74rEC            [12] 4265 	mov	a,#___str_48
      0011A1 C0 E0            [24] 4266 	push	acc
      0011A3 74s02            [12] 4267 	mov	a,#(___str_48 >> 8)
      0011A5 C0 E0            [24] 4268 	push	acc
      0011A7 12r00r00         [24] 4269 	lcall	_printf_fast_f
      0011AA E5 81            [12] 4270 	mov	a,sp
      0011AC 24 FC            [12] 4271 	add	a,#0xfc
      0011AE F5 81            [12] 4272 	mov	sp,a
      0011B0 D0 04            [24] 4273 	pop	ar4
      0011B2 D0 07            [24] 4274 	pop	ar7
                                   4275 ;	src/main.c:975: }
      0011B4                       4276 00124$:
                                   4277 ;	src/main.c:977: switch(u8RxUART) {
      0011B4 74 66            [12] 4278 	mov	a,#0x66
      0011B6 B5*12 02         [24] 4279 	cjne	a,_main_u8RxUART_65536_120,00485$
      0011B9 80 20            [24] 4280 	sjmp	00128$
      0011BB                       4281 00485$:
      0011BB 74 67            [12] 4282 	mov	a,#0x67
      0011BD B5*12 02         [24] 4283 	cjne	a,_main_u8RxUART_65536_120,00486$
      0011C0 80 19            [24] 4284 	sjmp	00128$
      0011C2                       4285 00486$:
      0011C2 74 68            [12] 4286 	mov	a,#0x68
      0011C4 B5*12 03         [24] 4287 	cjne	a,_main_u8RxUART_65536_120,00487$
      0011C7 02r13r8C         [24] 4288 	ljmp	00164$
      0011CA                       4289 00487$:
      0011CA 74 6A            [12] 4290 	mov	a,#0x6a
      0011CC B5*12 02         [24] 4291 	cjne	a,_main_u8RxUART_65536_120,00488$
      0011CF 80 0A            [24] 4292 	sjmp	00128$
      0011D1                       4293 00488$:
      0011D1 74 6B            [12] 4294 	mov	a,#0x6b
      0011D3 B5*12 02         [24] 4295 	cjne	a,_main_u8RxUART_65536_120,00489$
      0011D6 80 03            [24] 4296 	sjmp	00490$
      0011D8                       4297 00489$:
      0011D8 02r13r8C         [24] 4298 	ljmp	00164$
      0011DB                       4299 00490$:
                                   4300 ;	src/main.c:981: case 'k' : // up SW5
      0011DB                       4301 00128$:
                                   4302 ;	src/main.c:982: stLineFiPkt.u8Addr = u8LineFiAddr;
      0011DB 85*13*1A         [24] 4303 	mov	(_main_stLineFiPkt_65536_120 + 0x0002),_main_u8LineFiAddr_65536_120
                                   4304 ;	src/main.c:983: stLineFiPkt.u8Type = u8LineFiCmd;
      0011DE 85*14*19         [24] 4305 	mov	(_main_stLineFiPkt_65536_120 + 0x0001),_main_u8LineFiCmd_65536_120
                                   4306 ;	src/main.c:984: print_linefipacket(&stLineFiPkt);
      0011E1 90r00r18         [24] 4307 	mov	dptr,#_main_stLineFiPkt_65536_120
      0011E4 75 F0 40         [24] 4308 	mov	b,#0x40
      0011E7 C0 07            [24] 4309 	push	ar7
      0011E9 C0 04            [24] 4310 	push	ar4
      0011EB 12r00r00         [24] 4311 	lcall	_print_linefipacket
      0011EE D0 04            [24] 4312 	pop	ar4
      0011F0 D0 07            [24] 4313 	pop	ar7
                                   4314 ;	src/main.c:985: break;
      0011F2 02r13r8C         [24] 4315 	ljmp	00164$
                                   4316 ;	src/main.c:992: case UART0_INPUT_MODE3 : // slave gpio pin setting
      0011F5                       4317 00131$:
                                   4318 ;	src/main.c:993: switch(u8RxUART) {
      0011F5 74 68            [12] 4319 	mov	a,#0x68
      0011F7 B5*12 02         [24] 4320 	cjne	a,_main_u8RxUART_65536_120,00491$
      0011FA 80 15            [24] 4321 	sjmp	00132$
      0011FC                       4322 00491$:
      0011FC 74 6A            [12] 4323 	mov	a,#0x6a
      0011FE B5*12 02         [24] 4324 	cjne	a,_main_u8RxUART_65536_120,00492$
      001201 80 20            [24] 4325 	sjmp	00135$
      001203                       4326 00492$:
      001203 74 6B            [12] 4327 	mov	a,#0x6b
      001205 B5*12 02         [24] 4328 	cjne	a,_main_u8RxUART_65536_120,00493$
      001208 80 33            [24] 4329 	sjmp	00136$
      00120A                       4330 00493$:
      00120A 74 6C            [12] 4331 	mov	a,#0x6c
                                   4332 ;	src/main.c:994: case 'h' : // left
      00120C B5*12 5A         [24] 4333 	cjne	a,_main_u8RxUART_65536_120,00140$
      00120F 80 46            [24] 4334 	sjmp	00137$
      001211                       4335 00132$:
                                   4336 ;	src/main.c:995: u8DataIdx--;
      001211 90r01r1C         [24] 4337 	mov	dptr,#_main_u8DataIdx_65536_120
      001214 E0               [24] 4338 	movx	a,@dptr
      001215 14               [12] 4339 	dec	a
      001216 F0               [24] 4340 	movx	@dptr,a
                                   4341 ;	src/main.c:996: if (u8DataIdx == 255) {
      001217 E0               [24] 4342 	movx	a,@dptr
      001218 FE               [12] 4343 	mov	r6,a
      001219 BE FF 4D         [24] 4344 	cjne	r6,#0xff,00140$
                                   4345 ;	src/main.c:997: u8DataIdx = 0;
      00121C 90r01r1C         [24] 4346 	mov	dptr,#_main_u8DataIdx_65536_120
      00121F E4               [12] 4347 	clr	a
      001220 F0               [24] 4348 	movx	@dptr,a
                                   4349 ;	src/main.c:999: break;
                                   4350 ;	src/main.c:1000: case 'j' : // down 
      001221 80 46            [24] 4351 	sjmp	00140$
      001223                       4352 00135$:
                                   4353 ;	src/main.c:1001: pu8Data[u8DataIdx]--;
      001223 90r01r1C         [24] 4354 	mov	dptr,#_main_u8DataIdx_65536_120
      001226 E0               [24] 4355 	movx	a,@dptr
      001227 24r12            [12] 4356 	add	a,#_main_pu8Data_65536_120
      001229 FE               [12] 4357 	mov	r6,a
      00122A E4               [12] 4358 	clr	a
      00122B 34s01            [12] 4359 	addc	a,#(_main_pu8Data_65536_120 >> 8)
      00122D FD               [12] 4360 	mov	r5,a
      00122E 8E 82            [24] 4361 	mov	dpl,r6
      001230 8D 83            [24] 4362 	mov	dph,r5
      001232 E0               [24] 4363 	movx	a,@dptr
      001233 FB               [12] 4364 	mov	r3,a
      001234 1B               [12] 4365 	dec	r3
      001235 8E 82            [24] 4366 	mov	dpl,r6
      001237 8D 83            [24] 4367 	mov	dph,r5
      001239 EB               [12] 4368 	mov	a,r3
      00123A F0               [24] 4369 	movx	@dptr,a
                                   4370 ;	src/main.c:1002: break;
                                   4371 ;	src/main.c:1003: case 'k' : // up 
      00123B 80 2C            [24] 4372 	sjmp	00140$
      00123D                       4373 00136$:
                                   4374 ;	src/main.c:1004: pu8Data[u8DataIdx]++;
      00123D 90r01r1C         [24] 4375 	mov	dptr,#_main_u8DataIdx_65536_120
      001240 E0               [24] 4376 	movx	a,@dptr
      001241 24r12            [12] 4377 	add	a,#_main_pu8Data_65536_120
      001243 FE               [12] 4378 	mov	r6,a
      001244 E4               [12] 4379 	clr	a
      001245 34s01            [12] 4380 	addc	a,#(_main_pu8Data_65536_120 >> 8)
      001247 FD               [12] 4381 	mov	r5,a
      001248 8E 82            [24] 4382 	mov	dpl,r6
      00124A 8D 83            [24] 4383 	mov	dph,r5
      00124C E0               [24] 4384 	movx	a,@dptr
      00124D FB               [12] 4385 	mov	r3,a
      00124E 0B               [12] 4386 	inc	r3
      00124F 8E 82            [24] 4387 	mov	dpl,r6
      001251 8D 83            [24] 4388 	mov	dph,r5
      001253 EB               [12] 4389 	mov	a,r3
      001254 F0               [24] 4390 	movx	@dptr,a
                                   4391 ;	src/main.c:1005: break;
                                   4392 ;	src/main.c:1006: case 'l' : // right 
      001255 80 12            [24] 4393 	sjmp	00140$
      001257                       4394 00137$:
                                   4395 ;	src/main.c:1007: u8DataIdx++;
      001257 90r01r1C         [24] 4396 	mov	dptr,#_main_u8DataIdx_65536_120
      00125A E0               [24] 4397 	movx	a,@dptr
      00125B 24 01            [12] 4398 	add	a,#0x01
      00125D F0               [24] 4399 	movx	@dptr,a
                                   4400 ;	src/main.c:1008: if (u8DataIdx == MAX_DATA) {
      00125E E0               [24] 4401 	movx	a,@dptr
      00125F FE               [12] 4402 	mov	r6,a
      001260 BE 0A 06         [24] 4403 	cjne	r6,#0x0a,00140$
                                   4404 ;	src/main.c:1009: u8DataIdx--;;
      001263 EE               [12] 4405 	mov	a,r6
      001264 14               [12] 4406 	dec	a
      001265 90r01r1C         [24] 4407 	mov	dptr,#_main_u8DataIdx_65536_120
      001268 F0               [24] 4408 	movx	@dptr,a
                                   4409 ;	src/main.c:1012: }
      001269                       4410 00140$:
                                   4411 ;	src/main.c:1013: switch(u8RxUART) {
      001269 74 68            [12] 4412 	mov	a,#0x68
      00126B B5*12 02         [24] 4413 	cjne	a,_main_u8RxUART_65536_120,00499$
      00126E 80 13            [24] 4414 	sjmp	00142$
      001270                       4415 00499$:
      001270 74 6A            [12] 4416 	mov	a,#0x6a
      001272 B5*12 02         [24] 4417 	cjne	a,_main_u8RxUART_65536_120,00500$
      001275 80 32            [24] 4418 	sjmp	00252$
      001277                       4419 00500$:
      001277 74 6B            [12] 4420 	mov	a,#0x6b
      001279 B5*12 02         [24] 4421 	cjne	a,_main_u8RxUART_65536_120,00501$
      00127C 80 2B            [24] 4422 	sjmp	00252$
      00127E                       4423 00501$:
      00127E 74 6C            [12] 4424 	mov	a,#0x6c
      001280 B5*12 78         [24] 4425 	cjne	a,_main_u8RxUART_65536_120,00147$
                                   4426 ;	src/main.c:1015: case 'l' : // right
      001283                       4427 00142$:
                                   4428 ;	src/main.c:1016: printf_fast_f("DataIdx:%d\r\n", u8DataIdx);
      001283 90r01r1C         [24] 4429 	mov	dptr,#_main_u8DataIdx_65536_120
      001286 E0               [24] 4430 	movx	a,@dptr
      001287 FE               [12] 4431 	mov	r6,a
      001288 7D 00            [12] 4432 	mov	r5,#0x00
      00128A C0 07            [24] 4433 	push	ar7
      00128C C0 04            [24] 4434 	push	ar4
      00128E C0 06            [24] 4435 	push	ar6
      001290 C0 05            [24] 4436 	push	ar5
      001292 74rB9            [12] 4437 	mov	a,#___str_60
      001294 C0 E0            [24] 4438 	push	acc
      001296 74s03            [12] 4439 	mov	a,#(___str_60 >> 8)
      001298 C0 E0            [24] 4440 	push	acc
      00129A 12r00r00         [24] 4441 	lcall	_printf_fast_f
      00129D E5 81            [12] 4442 	mov	a,sp
      00129F 24 FC            [12] 4443 	add	a,#0xfc
      0012A1 F5 81            [12] 4444 	mov	sp,a
      0012A3 D0 04            [24] 4445 	pop	ar4
      0012A5 D0 07            [24] 4446 	pop	ar7
                                   4447 ;	src/main.c:1017: break;
                                   4448 ;	src/main.c:1022: for (i=0;i<MAX_DATA;i++) {
      0012A7 80 52            [24] 4449 	sjmp	00147$
      0012A9                       4450 00252$:
      0012A9 7E 00            [12] 4451 	mov	r6,#0x00
      0012AB                       4452 00216$:
                                   4453 ;	src/main.c:1023: printf("0x%x ", pu8Data[i]);
      0012AB EE               [12] 4454 	mov	a,r6
      0012AC 24r12            [12] 4455 	add	a,#_main_pu8Data_65536_120
      0012AE F5 82            [12] 4456 	mov	dpl,a
      0012B0 E4               [12] 4457 	clr	a
      0012B1 34s01            [12] 4458 	addc	a,#(_main_pu8Data_65536_120 >> 8)
      0012B3 F5 83            [12] 4459 	mov	dph,a
      0012B5 E0               [24] 4460 	movx	a,@dptr
      0012B6 FD               [12] 4461 	mov	r5,a
      0012B7 7B 00            [12] 4462 	mov	r3,#0x00
      0012B9 C0 07            [24] 4463 	push	ar7
      0012BB C0 06            [24] 4464 	push	ar6
      0012BD C0 04            [24] 4465 	push	ar4
      0012BF C0 05            [24] 4466 	push	ar5
      0012C1 C0 03            [24] 4467 	push	ar3
      0012C3 74rC6            [12] 4468 	mov	a,#___str_61
      0012C5 C0 E0            [24] 4469 	push	acc
      0012C7 74s03            [12] 4470 	mov	a,#(___str_61 >> 8)
      0012C9 C0 E0            [24] 4471 	push	acc
      0012CB 74 80            [12] 4472 	mov	a,#0x80
      0012CD C0 E0            [24] 4473 	push	acc
      0012CF 12r00r00         [24] 4474 	lcall	_printf
      0012D2 E5 81            [12] 4475 	mov	a,sp
      0012D4 24 FB            [12] 4476 	add	a,#0xfb
      0012D6 F5 81            [12] 4477 	mov	sp,a
      0012D8 D0 04            [24] 4478 	pop	ar4
      0012DA D0 06            [24] 4479 	pop	ar6
      0012DC D0 07            [24] 4480 	pop	ar7
                                   4481 ;	src/main.c:1022: for (i=0;i<MAX_DATA;i++) {
      0012DE 0E               [12] 4482 	inc	r6
      0012DF BE 0A 00         [24] 4483 	cjne	r6,#0x0a,00504$
      0012E2                       4484 00504$:
      0012E2 40 C7            [24] 4485 	jc	00216$
                                   4486 ;	src/main.c:1025: printf_fast_f("\r\n");
      0012E4 C0 07            [24] 4487 	push	ar7
      0012E6 C0 04            [24] 4488 	push	ar4
      0012E8 74r2E            [12] 4489 	mov	a,#___str_5
      0012EA C0 E0            [24] 4490 	push	acc
      0012EC 74s00            [12] 4491 	mov	a,#(___str_5 >> 8)
      0012EE C0 E0            [24] 4492 	push	acc
      0012F0 12r00r00         [24] 4493 	lcall	_printf_fast_f
      0012F3 15 81            [12] 4494 	dec	sp
      0012F5 15 81            [12] 4495 	dec	sp
      0012F7 D0 04            [24] 4496 	pop	ar4
      0012F9 D0 07            [24] 4497 	pop	ar7
                                   4498 ;	src/main.c:1029: case UART0_INPUT_MODE4 : // 주기적으로 하향 패킷 생성 스테이트머신 제어용 CLI
      0012FB                       4499 00147$:
                                   4500 ;	src/main.c:1030: switch(u8RxUART) {
      0012FB 74 65            [12] 4501 	mov	a,#0x65
      0012FD B5*12 02         [24] 4502 	cjne	a,_main_u8RxUART_65536_120,00506$
      001300 80 26            [24] 4503 	sjmp	00149$
      001302                       4504 00506$:
      001302 74 73            [12] 4505 	mov	a,#0x73
      001304 B5*12 02         [24] 4506 	cjne	a,_main_u8RxUART_65536_120,00507$
      001307 80 03            [24] 4507 	sjmp	00508$
      001309                       4508 00507$:
      001309 02r13r8C         [24] 4509 	ljmp	00164$
      00130C                       4510 00508$:
                                   4511 ;	src/main.c:1032: printf_fast_f("START periodic packet generating..\r\n");
      00130C C0 07            [24] 4512 	push	ar7
      00130E C0 04            [24] 4513 	push	ar4
      001310 74rCC            [12] 4514 	mov	a,#___str_62
      001312 C0 E0            [24] 4515 	push	acc
      001314 74s03            [12] 4516 	mov	a,#(___str_62 >> 8)
      001316 C0 E0            [24] 4517 	push	acc
      001318 12r00r00         [24] 4518 	lcall	_printf_fast_f
      00131B 15 81            [12] 4519 	dec	sp
      00131D 15 81            [12] 4520 	dec	sp
      00131F D0 04            [24] 4521 	pop	ar4
      001321 D0 07            [24] 4522 	pop	ar7
                                   4523 ;	src/main.c:1033: u8PSCmd = CMD_PS_START;
      001323 75*17 03         [24] 4524 	mov	_main_u8PSCmd_65536_120,#0x03
                                   4525 ;	src/main.c:1034: break;
                                   4526 ;	src/main.c:1035: case 'e' : // 종료
      001326 80 64            [24] 4527 	sjmp	00164$
      001328                       4528 00149$:
                                   4529 ;	src/main.c:1036: printf_fast_f("STOP  periodic packet generating..\r\n");
      001328 C0 07            [24] 4530 	push	ar7
      00132A C0 04            [24] 4531 	push	ar4
      00132C 74rF1            [12] 4532 	mov	a,#___str_63
      00132E C0 E0            [24] 4533 	push	acc
      001330 74s03            [12] 4534 	mov	a,#(___str_63 >> 8)
      001332 C0 E0            [24] 4535 	push	acc
      001334 12r00r00         [24] 4536 	lcall	_printf_fast_f
      001337 15 81            [12] 4537 	dec	sp
      001339 15 81            [12] 4538 	dec	sp
      00133B D0 04            [24] 4539 	pop	ar4
      00133D D0 07            [24] 4540 	pop	ar7
                                   4541 ;	src/main.c:1037: u8PSCmd = CMD_PS_END;
      00133F 75*17 04         [24] 4542 	mov	_main_u8PSCmd_65536_120,#0x04
                                   4543 ;	src/main.c:1046: } //switch(u8RxUART)
      001342 80 48            [24] 4544 	sjmp	00164$
      001344                       4545 00163$:
                                   4546 ;	src/main.c:1049: switch(u8StateUart0InputMode) {
      001344 EC               [12] 4547 	mov	a,r4
      001345 24 FB            [12] 4548 	add	a,#0xff - 0x04
      001347 40 43            [24] 4549 	jc	00164$
      001349 EC               [12] 4550 	mov	a,r4
      00134A 2C               [12] 4551 	add	a,r4
                                   4552 ;	src/main.c:1052: case UART0_INPUT_MODE1 :
      00134B 90r13r4F         [24] 4553 	mov	dptr,#00510$
      00134E 73               [24] 4554 	jmp	@a+dptr
      00134F                       4555 00510$:
      00134F 80 3B            [24] 4556 	sjmp	00164$
      001351 80 06            [24] 4557 	sjmp	00154$
      001353 80 37            [24] 4558 	sjmp	00164$
      001355 80 35            [24] 4559 	sjmp	00164$
      001357 80 33            [24] 4560 	sjmp	00164$
      001359                       4561 00154$:
                                   4562 ;	src/main.c:1053: if (gu16TimeCnt > 10 && ucBufIdx != 0) {
      001359 90r00r71         [24] 4563 	mov	dptr,#_gu16TimeCnt
      00135C E0               [24] 4564 	movx	a,@dptr
      00135D FD               [12] 4565 	mov	r5,a
      00135E A3               [24] 4566 	inc	dptr
      00135F E0               [24] 4567 	movx	a,@dptr
      001360 FE               [12] 4568 	mov	r6,a
      001361 C3               [12] 4569 	clr	c
      001362 74 0A            [12] 4570 	mov	a,#0x0a
      001364 9D               [12] 4571 	subb	a,r5
      001365 E4               [12] 4572 	clr	a
      001366 9E               [12] 4573 	subb	a,r6
      001367 50 23            [24] 4574 	jnc	00164$
      001369 90r01r1D         [24] 4575 	mov	dptr,#_main_ucBufIdx_65536_120
      00136C E0               [24] 4576 	movx	a,@dptr
      00136D FE               [12] 4577 	mov	r6,a
      00136E E0               [24] 4578 	movx	a,@dptr
      00136F 60 1B            [24] 4579 	jz	00164$
                                   4580 ;	src/main.c:1054: printoutbuf(ucBufIdx, pcBuf);
      001371 75*05rAE         [24] 4581 	mov	_printoutbuf_PARM_2,#_main_pcBuf_65536_120
      001374 75*06s00         [24] 4582 	mov	(_printoutbuf_PARM_2 + 1),#(_main_pcBuf_65536_120 >> 8)
      001377 75*07 00         [24] 4583 	mov	(_printoutbuf_PARM_2 + 2),#0x00
      00137A 8E 82            [24] 4584 	mov	dpl,r6
      00137C C0 07            [24] 4585 	push	ar7
      00137E C0 04            [24] 4586 	push	ar4
      001380 12r05r04         [24] 4587 	lcall	_printoutbuf
      001383 D0 04            [24] 4588 	pop	ar4
      001385 D0 07            [24] 4589 	pop	ar7
                                   4590 ;	src/main.c:1055: ucBufIdx = 0;
      001387 90r01r1D         [24] 4591 	mov	dptr,#_main_ucBufIdx_65536_120
      00138A E4               [12] 4592 	clr	a
      00138B F0               [24] 4593 	movx	@dptr,a
                                   4594 ;	src/main.c:1064: } //switch(u8StateUart0InputMode)
      00138C                       4595 00164$:
                                   4596 ;	src/main.c:1072: if (u8PwrOnFirstFlag) { // 전원 켜진 후, 한 번만 동작
      00138C EF               [12] 4597 	mov	a,r7
      00138D 70 03            [24] 4598 	jnz	00513$
      00138F 02r14r78         [24] 4599 	ljmp	00193$
      001392                       4600 00513$:
                                   4601 ;	src/main.c:1073: switch (state_switches((SW_U<<0)| (SW_R<<1)| (SW_L<<2)| (SW_D<<3) | (SW_C<<4), &u8SwNum)) {
      001392 A2 95            [12] 4602 	mov	c,_P15
      001394 E4               [12] 4603 	clr	a
      001395 33               [12] 4604 	rlc	a
      001396 FE               [12] 4605 	mov	r6,a
      001397 A2 B0            [12] 4606 	mov	c,_P30
      001399 E4               [12] 4607 	clr	a
      00139A 33               [12] 4608 	rlc	a
      00139B 25 E0            [12] 4609 	add	a,acc
      00139D 42 06            [12] 4610 	orl	ar6,a
      00139F A2 80            [12] 4611 	mov	c,_P00
      0013A1 E4               [12] 4612 	clr	a
      0013A2 33               [12] 4613 	rlc	a
      0013A3 25 E0            [12] 4614 	add	a,acc
      0013A5 25 E0            [12] 4615 	add	a,acc
      0013A7 42 06            [12] 4616 	orl	ar6,a
      0013A9 A2 93            [12] 4617 	mov	c,_P13
      0013AB E4               [12] 4618 	clr	a
      0013AC 33               [12] 4619 	rlc	a
      0013AD C4               [12] 4620 	swap	a
      0013AE 03               [12] 4621 	rr	a
      0013AF 54 F8            [12] 4622 	anl	a,#0xf8
      0013B1 42 06            [12] 4623 	orl	ar6,a
      0013B3 A2 97            [12] 4624 	mov	c,_P17
      0013B5 E4               [12] 4625 	clr	a
      0013B6 33               [12] 4626 	rlc	a
      0013B7 C4               [12] 4627 	swap	a
      0013B8 54 F0            [12] 4628 	anl	a,#0xf0
      0013BA 4E               [12] 4629 	orl	a,r6
      0013BB F5 82            [12] 4630 	mov	dpl,a
      0013BD 75*00r15         [24] 4631 	mov	_state_switches_PARM_2,#_main_u8SwNum_65536_120
      0013C0 75*01 00         [24] 4632 	mov	(_state_switches_PARM_2 + 1),#0x00
      0013C3 75*02 40         [24] 4633 	mov	(_state_switches_PARM_2 + 2),#0x40
      0013C6 C0 07            [24] 4634 	push	ar7
      0013C8 C0 04            [24] 4635 	push	ar4
      0013CA 12r04r0F         [24] 4636 	lcall	_state_switches
      0013CD AE 82            [24] 4637 	mov	r6,dpl
      0013CF D0 04            [24] 4638 	pop	ar4
      0013D1 D0 07            [24] 4639 	pop	ar7
      0013D3 BE 01 02         [24] 4640 	cjne	r6,#0x01,00514$
      0013D6 80 03            [24] 4641 	sjmp	00515$
      0013D8                       4642 00514$:
      0013D8 02r15rC7         [24] 4643 	ljmp	00194$
      0013DB                       4644 00515$:
                                   4645 ;	src/main.c:1075: switch(u8PwrOnFirstFlag) {
      0013DB EF               [12] 4646 	mov	a,r7
      0013DC 24 FA            [12] 4647 	add	a,#0xff - 0x05
      0013DE 50 03            [24] 4648 	jnc	00516$
      0013E0 02r15rC7         [24] 4649 	ljmp	00194$
      0013E3                       4650 00516$:
      0013E3 EF               [12] 4651 	mov	a,r7
      0013E4 2F               [12] 4652 	add	a,r7
      0013E5 2F               [12] 4653 	add	a,r7
      0013E6 90r13rEA         [24] 4654 	mov	dptr,#00517$
      0013E9 73               [24] 4655 	jmp	@a+dptr
      0013EA                       4656 00517$:
      0013EA 02r15rC7         [24] 4657 	ljmp	00194$
      0013ED 02r13rFC         [24] 4658 	ljmp	00166$
      0013F0 02r14r04         [24] 4659 	ljmp	00167$
      0013F3 02r14r6C         [24] 4660 	ljmp	00168$
      0013F6 02r14r70         [24] 4661 	ljmp	00169$
      0013F9 02r14r74         [24] 4662 	ljmp	00170$
                                   4663 ;	src/main.c:1076: case 1 :
      0013FC                       4664 00166$:
                                   4665 ;	src/main.c:1077: LINEFI_TX = 1;
                                   4666 ;	assignBit
      0013FC D2 96            [12] 4667 	setb	_P16
                                   4668 ;	src/main.c:1078: LINEFI_EN0 = 1;
                                   4669 ;	assignBit
      0013FE D2 90            [12] 4670 	setb	_P10
                                   4671 ;	src/main.c:1079: u8PwrOnFirstFlag++;
      001400 0F               [12] 4672 	inc	r7
                                   4673 ;	src/main.c:1080: break;
      001401 02r15rC7         [24] 4674 	ljmp	00194$
                                   4675 ;	src/main.c:1081: case 2 :
      001404                       4676 00167$:
                                   4677 ;	src/main.c:1082: InitialUART1_Timer3(gpu32UartSpeed[0]);
      001404 90r00r75         [24] 4678 	mov	dptr,#_gpu32UartSpeed
      001407 E0               [24] 4679 	movx	a,@dptr
      001408 FA               [12] 4680 	mov	r2,a
      001409 A3               [24] 4681 	inc	dptr
      00140A E0               [24] 4682 	movx	a,@dptr
      00140B FB               [12] 4683 	mov	r3,a
      00140C A3               [24] 4684 	inc	dptr
      00140D E0               [24] 4685 	movx	a,@dptr
      00140E FD               [12] 4686 	mov	r5,a
      00140F A3               [24] 4687 	inc	dptr
      001410 E0               [24] 4688 	movx	a,@dptr
      001411 8A 82            [24] 4689 	mov	dpl,r2
      001413 8B 83            [24] 4690 	mov	dph,r3
      001415 8D F0            [24] 4691 	mov	b,r5
      001417 C0 04            [24] 4692 	push	ar4
      001419 12r00r00         [24] 4693 	lcall	_InitialUART1_Timer3
                                   4694 ;	src/main.c:1083: send_octet_to_linefi(((LINEFI_DEFAULT_RATE<<4)&0xF0) | (1)&0x0F);
      00141C 75 82 51         [24] 4695 	mov	dpl,#0x51
      00141F 12r00r00         [24] 4696 	lcall	_send_octet_to_linefi
                                   4697 ;	src/main.c:1084: printf_fast_f("uart speed: %lu:\n\r", gpu32UartSpeed[LINEFI_DEFAULT_RATE]);
      001422 90r00r89         [24] 4698 	mov	dptr,#(_gpu32UartSpeed + 0x0014)
      001425 E0               [24] 4699 	movx	a,@dptr
      001426 FA               [12] 4700 	mov	r2,a
      001427 A3               [24] 4701 	inc	dptr
      001428 E0               [24] 4702 	movx	a,@dptr
      001429 FB               [12] 4703 	mov	r3,a
      00142A A3               [24] 4704 	inc	dptr
      00142B E0               [24] 4705 	movx	a,@dptr
      00142C FD               [12] 4706 	mov	r5,a
      00142D A3               [24] 4707 	inc	dptr
      00142E E0               [24] 4708 	movx	a,@dptr
      00142F FE               [12] 4709 	mov	r6,a
      001430 C0 02            [24] 4710 	push	ar2
      001432 C0 03            [24] 4711 	push	ar3
      001434 C0 05            [24] 4712 	push	ar5
      001436 C0 06            [24] 4713 	push	ar6
      001438 74rD9            [12] 4714 	mov	a,#___str_47
      00143A C0 E0            [24] 4715 	push	acc
      00143C 74s02            [12] 4716 	mov	a,#(___str_47 >> 8)
      00143E C0 E0            [24] 4717 	push	acc
      001440 12r00r00         [24] 4718 	lcall	_printf_fast_f
      001443 E5 81            [12] 4719 	mov	a,sp
      001445 24 FA            [12] 4720 	add	a,#0xfa
      001447 F5 81            [12] 4721 	mov	sp,a
                                   4722 ;	src/main.c:1085: InitialUART1_Timer3(gpu32UartSpeed[LINEFI_DEFAULT_RATE]);
      001449 90r00r89         [24] 4723 	mov	dptr,#(_gpu32UartSpeed + 0x0014)
      00144C E0               [24] 4724 	movx	a,@dptr
      00144D FA               [12] 4725 	mov	r2,a
      00144E A3               [24] 4726 	inc	dptr
      00144F E0               [24] 4727 	movx	a,@dptr
      001450 FB               [12] 4728 	mov	r3,a
      001451 A3               [24] 4729 	inc	dptr
      001452 E0               [24] 4730 	movx	a,@dptr
      001453 FD               [12] 4731 	mov	r5,a
      001454 A3               [24] 4732 	inc	dptr
      001455 E0               [24] 4733 	movx	a,@dptr
      001456 8A 82            [24] 4734 	mov	dpl,r2
      001458 8B 83            [24] 4735 	mov	dph,r3
      00145A 8D F0            [24] 4736 	mov	b,r5
      00145C 12r00r00         [24] 4737 	lcall	_InitialUART1_Timer3
      00145F D0 04            [24] 4738 	pop	ar4
                                   4739 ;	src/main.c:1087: u8LineFiCmd = 2;
      001461 75*14 02         [24] 4740 	mov	_main_u8LineFiCmd_65536_120,#0x02
                                   4741 ;	src/main.c:1088: u8LineFiAddr = 1;
      001464 75*13 01         [24] 4742 	mov	_main_u8LineFiAddr_65536_120,#0x01
                                   4743 ;	src/main.c:1089: u8PwrOnFirstFlag = 0;
      001467 7F 00            [12] 4744 	mov	r7,#0x00
                                   4745 ;	src/main.c:1090: break;
      001469 02r15rC7         [24] 4746 	ljmp	00194$
                                   4747 ;	src/main.c:1091: case 3 :
      00146C                       4748 00168$:
                                   4749 ;	src/main.c:1092: u8PwrOnFirstFlag++;
      00146C 0F               [12] 4750 	inc	r7
                                   4751 ;	src/main.c:1093: break;
      00146D 02r15rC7         [24] 4752 	ljmp	00194$
                                   4753 ;	src/main.c:1094: case 4 :
      001470                       4754 00169$:
                                   4755 ;	src/main.c:1095: u8PwrOnFirstFlag++;
      001470 0F               [12] 4756 	inc	r7
                                   4757 ;	src/main.c:1096: break;
      001471 02r15rC7         [24] 4758 	ljmp	00194$
                                   4759 ;	src/main.c:1097: case 5 :
      001474                       4760 00170$:
                                   4761 ;	src/main.c:1098: u8PwrOnFirstFlag++;
      001474 0F               [12] 4762 	inc	r7
                                   4763 ;	src/main.c:1130: } //switch (state_switches((SW1<<0)| (SW2<<1)| (SW3<<2)| (SW4<<3) | (SW5<<4), &u8SwNum))
      001475 02r15rC7         [24] 4764 	ljmp	00194$
      001478                       4765 00193$:
                                   4766 ;	src/main.c:1133: switch (state_switches((SW_U<<0)| (SW_R<<1)| (SW_L<<2)| (SW_D<<3) | (SW_C<<4), &u8SwNum)) {
      001478 A2 95            [12] 4767 	mov	c,_P15
      00147A E4               [12] 4768 	clr	a
      00147B 33               [12] 4769 	rlc	a
      00147C FE               [12] 4770 	mov	r6,a
      00147D A2 B0            [12] 4771 	mov	c,_P30
      00147F E4               [12] 4772 	clr	a
      001480 33               [12] 4773 	rlc	a
      001481 25 E0            [12] 4774 	add	a,acc
      001483 42 06            [12] 4775 	orl	ar6,a
      001485 A2 80            [12] 4776 	mov	c,_P00
      001487 E4               [12] 4777 	clr	a
      001488 33               [12] 4778 	rlc	a
      001489 25 E0            [12] 4779 	add	a,acc
      00148B 25 E0            [12] 4780 	add	a,acc
      00148D 42 06            [12] 4781 	orl	ar6,a
      00148F A2 93            [12] 4782 	mov	c,_P13
      001491 E4               [12] 4783 	clr	a
      001492 33               [12] 4784 	rlc	a
      001493 C4               [12] 4785 	swap	a
      001494 03               [12] 4786 	rr	a
      001495 54 F8            [12] 4787 	anl	a,#0xf8
      001497 42 06            [12] 4788 	orl	ar6,a
      001499 A2 97            [12] 4789 	mov	c,_P17
      00149B E4               [12] 4790 	clr	a
      00149C 33               [12] 4791 	rlc	a
      00149D C4               [12] 4792 	swap	a
      00149E 54 F0            [12] 4793 	anl	a,#0xf0
      0014A0 4E               [12] 4794 	orl	a,r6
      0014A1 F5 82            [12] 4795 	mov	dpl,a
      0014A3 75*00r15         [24] 4796 	mov	_state_switches_PARM_2,#_main_u8SwNum_65536_120
      0014A6 75*01 00         [24] 4797 	mov	(_state_switches_PARM_2 + 1),#0x00
      0014A9 75*02 40         [24] 4798 	mov	(_state_switches_PARM_2 + 2),#0x40
      0014AC C0 07            [24] 4799 	push	ar7
      0014AE C0 04            [24] 4800 	push	ar4
      0014B0 12r04r0F         [24] 4801 	lcall	_state_switches
      0014B3 AE 82            [24] 4802 	mov	r6,dpl
      0014B5 D0 04            [24] 4803 	pop	ar4
      0014B7 D0 07            [24] 4804 	pop	ar7
      0014B9 BE 01 02         [24] 4805 	cjne	r6,#0x01,00518$
      0014BC 80 03            [24] 4806 	sjmp	00519$
      0014BE                       4807 00518$:
      0014BE 02r15rC7         [24] 4808 	ljmp	00194$
      0014C1                       4809 00519$:
                                   4810 ;	src/main.c:1216: switch(u8SwNum) {
      0014C1 AE*15            [24] 4811 	mov	r6,_main_u8SwNum_65536_120
      0014C3 BE 01 03         [24] 4812 	cjne	r6,#0x01,00520$
      0014C6 02r15r9C         [24] 4813 	ljmp	00187$
      0014C9                       4814 00520$:
      0014C9 74 02            [12] 4815 	mov	a,#0x02
      0014CB B5*15 02         [24] 4816 	cjne	a,_main_u8SwNum_65536_120,00521$
      0014CE 80 43            [24] 4817 	sjmp	00177$
      0014D0                       4818 00521$:
      0014D0 74 04            [12] 4819 	mov	a,#0x04
      0014D2 B5*15 03         [24] 4820 	cjne	a,_main_u8SwNum_65536_120,00522$
      0014D5 02r15r6F         [24] 4821 	ljmp	00184$
      0014D8                       4822 00522$:
      0014D8 74 08            [12] 4823 	mov	a,#0x08
      0014DA B5*15 02         [24] 4824 	cjne	a,_main_u8SwNum_65536_120,00523$
      0014DD 80 0A            [24] 4825 	sjmp	00174$
      0014DF                       4826 00523$:
      0014DF 74 10            [12] 4827 	mov	a,#0x10
      0014E1 B5*15 02         [24] 4828 	cjne	a,_main_u8SwNum_65536_120,00524$
      0014E4 80 57            [24] 4829 	sjmp	00180$
      0014E6                       4830 00524$:
      0014E6 02r15rC7         [24] 4831 	ljmp	00194$
                                   4832 ;	src/main.c:1217: case (1<<3) : // down SW1
      0014E9                       4833 00174$:
                                   4834 ;	src/main.c:1218: u8LineFiAddr--;
                                   4835 ;	src/main.c:1219: if (u8LineFiAddr == 0) {
      0014E9 D5*13 03         [24] 4836 	djnz	_main_u8LineFiAddr_65536_120,00176$
                                   4837 ;	src/main.c:1220: u8LineFiAddr = 1;
      0014EC 75*13 01         [24] 4838 	mov	_main_u8LineFiAddr_65536_120,#0x01
      0014EF                       4839 00176$:
                                   4840 ;	src/main.c:1223: printf_fast_f("address: %d\n\r", u8LineFiAddr);
      0014EF AD*13            [24] 4841 	mov	r5,_main_u8LineFiAddr_65536_120
      0014F1 7E 00            [12] 4842 	mov	r6,#0x00
      0014F3 C0 07            [24] 4843 	push	ar7
      0014F5 C0 04            [24] 4844 	push	ar4
      0014F7 C0 05            [24] 4845 	push	ar5
      0014F9 C0 06            [24] 4846 	push	ar6
      0014FB 74rEC            [12] 4847 	mov	a,#___str_48
      0014FD C0 E0            [24] 4848 	push	acc
      0014FF 74s02            [12] 4849 	mov	a,#(___str_48 >> 8)
      001501 C0 E0            [24] 4850 	push	acc
      001503 12r00r00         [24] 4851 	lcall	_printf_fast_f
      001506 E5 81            [12] 4852 	mov	a,sp
      001508 24 FC            [12] 4853 	add	a,#0xfc
      00150A F5 81            [12] 4854 	mov	sp,a
      00150C D0 04            [24] 4855 	pop	ar4
      00150E D0 07            [24] 4856 	pop	ar7
                                   4857 ;	src/main.c:1224: break;
      001510 02r15rC7         [24] 4858 	ljmp	00194$
                                   4859 ;	src/main.c:1225: case (1<<1) : // right SW2
      001513                       4860 00177$:
                                   4861 ;	src/main.c:1226: u8LineFiCmd--;
                                   4862 ;	src/main.c:1227: if (u8LineFiCmd == 0) {
      001513 D5*14 03         [24] 4863 	djnz	_main_u8LineFiCmd_65536_120,00179$
                                   4864 ;	src/main.c:1228: u8LineFiCmd = 1;
      001516 75*14 01         [24] 4865 	mov	_main_u8LineFiCmd_65536_120,#0x01
      001519                       4866 00179$:
                                   4867 ;	src/main.c:1232: printf_fast_f("command: %d\n\r", u8LineFiCmd);
      001519 AD*14            [24] 4868 	mov	r5,_main_u8LineFiCmd_65536_120
      00151B 7E 00            [12] 4869 	mov	r6,#0x00
      00151D C0 07            [24] 4870 	push	ar7
      00151F C0 04            [24] 4871 	push	ar4
      001521 C0 05            [24] 4872 	push	ar5
      001523 C0 06            [24] 4873 	push	ar6
      001525 74rFA            [12] 4874 	mov	a,#___str_49
      001527 C0 E0            [24] 4875 	push	acc
      001529 74s02            [12] 4876 	mov	a,#(___str_49 >> 8)
      00152B C0 E0            [24] 4877 	push	acc
      00152D 12r00r00         [24] 4878 	lcall	_printf_fast_f
      001530 E5 81            [12] 4879 	mov	a,sp
      001532 24 FC            [12] 4880 	add	a,#0xfc
      001534 F5 81            [12] 4881 	mov	sp,a
      001536 D0 04            [24] 4882 	pop	ar4
      001538 D0 07            [24] 4883 	pop	ar7
                                   4884 ;	src/main.c:1233: break;
      00153A 02r15rC7         [24] 4885 	ljmp	00194$
                                   4886 ;	src/main.c:1235: case (1<<4) : // center SW3
      00153D                       4887 00180$:
                                   4888 ;	src/main.c:1236: stLineFiPkt.u8Addr = u8LineFiAddr;
      00153D 85*13*1A         [24] 4889 	mov	(_main_stLineFiPkt_65536_120 + 0x0002),_main_u8LineFiAddr_65536_120
                                   4890 ;	src/main.c:1237: stLineFiPkt.u8Type = u8LineFiCmd;
      001540 85*14*19         [24] 4891 	mov	(_main_stLineFiPkt_65536_120 + 0x0001),_main_u8LineFiCmd_65536_120
                                   4892 ;	src/main.c:1238: if (u8LineFiAddr&1) {
      001543 E5*13            [12] 4893 	mov	a,_main_u8LineFiAddr_65536_120
      001545 30 E0 0B         [24] 4894 	jnb	acc.0,00182$
                                   4895 ;	src/main.c:1239: stLineFiPkt.pu8Data = gpu8Data;
      001548 75*1Dr2D         [24] 4896 	mov	((_main_stLineFiPkt_65536_120 + 0x0005) + 0),#_gpu8Data
      00154B 75*1Es00         [24] 4897 	mov	((_main_stLineFiPkt_65536_120 + 0x0005) + 1),#(_gpu8Data >> 8)
      00154E 75*1F 00         [24] 4898 	mov	((_main_stLineFiPkt_65536_120 + 0x0005) + 2),#0x00
      001551 80 09            [24] 4899 	sjmp	00183$
      001553                       4900 00182$:
                                   4901 ;	src/main.c:1242: stLineFiPkt.pu8Data = gpu8Data2;
      001553 75*1Dr41         [24] 4902 	mov	((_main_stLineFiPkt_65536_120 + 0x0005) + 0),#_gpu8Data2
      001556 75*1Es00         [24] 4903 	mov	((_main_stLineFiPkt_65536_120 + 0x0005) + 1),#(_gpu8Data2 >> 8)
      001559 75*1F 00         [24] 4904 	mov	((_main_stLineFiPkt_65536_120 + 0x0005) + 2),#0x00
      00155C                       4905 00183$:
                                   4906 ;	src/main.c:1244: send_linefi_packet(&stLineFiPkt);
      00155C 90r00r18         [24] 4907 	mov	dptr,#_main_stLineFiPkt_65536_120
      00155F 75 F0 40         [24] 4908 	mov	b,#0x40
      001562 C0 07            [24] 4909 	push	ar7
      001564 C0 04            [24] 4910 	push	ar4
      001566 12r00r00         [24] 4911 	lcall	_send_linefi_packet
      001569 D0 04            [24] 4912 	pop	ar4
      00156B D0 07            [24] 4913 	pop	ar7
                                   4914 ;	src/main.c:1245: break;
                                   4915 ;	src/main.c:1247: case (1<<2) : //  left SW4
      00156D 80 58            [24] 4916 	sjmp	00194$
      00156F                       4917 00184$:
                                   4918 ;	src/main.c:1248: u8LineFiCmd++;
      00156F 05*14            [12] 4919 	inc	_main_u8LineFiCmd_65536_120
                                   4920 ;	src/main.c:1249: if (u8LineFiCmd == 101) {
      001571 74 65            [12] 4921 	mov	a,#0x65
      001573 B5*14 03         [24] 4922 	cjne	a,_main_u8LineFiCmd_65536_120,00186$
                                   4923 ;	src/main.c:1250: u8LineFiCmd = 100;
      001576 75*14 64         [24] 4924 	mov	_main_u8LineFiCmd_65536_120,#0x64
      001579                       4925 00186$:
                                   4926 ;	src/main.c:1252: printf_fast_f("command: %d\n\r", u8LineFiCmd);
      001579 AD*14            [24] 4927 	mov	r5,_main_u8LineFiCmd_65536_120
      00157B 7E 00            [12] 4928 	mov	r6,#0x00
      00157D C0 07            [24] 4929 	push	ar7
      00157F C0 04            [24] 4930 	push	ar4
      001581 C0 05            [24] 4931 	push	ar5
      001583 C0 06            [24] 4932 	push	ar6
      001585 74rFA            [12] 4933 	mov	a,#___str_49
      001587 C0 E0            [24] 4934 	push	acc
      001589 74s02            [12] 4935 	mov	a,#(___str_49 >> 8)
      00158B C0 E0            [24] 4936 	push	acc
      00158D 12r00r00         [24] 4937 	lcall	_printf_fast_f
      001590 E5 81            [12] 4938 	mov	a,sp
      001592 24 FC            [12] 4939 	add	a,#0xfc
      001594 F5 81            [12] 4940 	mov	sp,a
      001596 D0 04            [24] 4941 	pop	ar4
      001598 D0 07            [24] 4942 	pop	ar7
                                   4943 ;	src/main.c:1255: break;
                                   4944 ;	src/main.c:1256: case (1<<0) : // up SW5
      00159A 80 2B            [24] 4945 	sjmp	00194$
      00159C                       4946 00187$:
                                   4947 ;	src/main.c:1257: u8LineFiAddr++;
      00159C 05*13            [12] 4948 	inc	_main_u8LineFiAddr_65536_120
                                   4949 ;	src/main.c:1258: if (u8LineFiAddr == 16) {
      00159E 74 10            [12] 4950 	mov	a,#0x10
      0015A0 B5*13 03         [24] 4951 	cjne	a,_main_u8LineFiAddr_65536_120,00189$
                                   4952 ;	src/main.c:1259: u8LineFiAddr = 15;
      0015A3 75*13 0F         [24] 4953 	mov	_main_u8LineFiAddr_65536_120,#0x0f
      0015A6                       4954 00189$:
                                   4955 ;	src/main.c:1261: printf_fast_f("address: %d\n\r", u8LineFiAddr);
      0015A6 AD*13            [24] 4956 	mov	r5,_main_u8LineFiAddr_65536_120
      0015A8 7E 00            [12] 4957 	mov	r6,#0x00
      0015AA C0 07            [24] 4958 	push	ar7
      0015AC C0 04            [24] 4959 	push	ar4
      0015AE C0 05            [24] 4960 	push	ar5
      0015B0 C0 06            [24] 4961 	push	ar6
      0015B2 74rEC            [12] 4962 	mov	a,#___str_48
      0015B4 C0 E0            [24] 4963 	push	acc
      0015B6 74s02            [12] 4964 	mov	a,#(___str_48 >> 8)
      0015B8 C0 E0            [24] 4965 	push	acc
      0015BA 12r00r00         [24] 4966 	lcall	_printf_fast_f
      0015BD E5 81            [12] 4967 	mov	a,sp
      0015BF 24 FC            [12] 4968 	add	a,#0xfc
      0015C1 F5 81            [12] 4969 	mov	sp,a
      0015C3 D0 04            [24] 4970 	pop	ar4
      0015C5 D0 07            [24] 4971 	pop	ar7
                                   4972 ;	src/main.c:1265: } //switch (state_switches((SW_U<<0)| (SW_R<<1)| (SW_L<<2)| (SW_D<<3) | (SW_C<<4), &u8SwNum))
      0015C7                       4973 00194$:
                                   4974 ;	src/main.c:1290: switch(u8StatePeriodicSend) {
      0015C7 E4               [12] 4975 	clr	a
      0015C8 B5*16 02         [24] 4976 	cjne	a,_main_u8StatePeriodicSend_65536_120,00532$
      0015CB 80 0A            [24] 4977 	sjmp	00195$
      0015CD                       4978 00532$:
      0015CD 74 01            [12] 4979 	mov	a,#0x01
      0015CF B5*16 02         [24] 4980 	cjne	a,_main_u8StatePeriodicSend_65536_120,00533$
      0015D2 80 31            [24] 4981 	sjmp	00198$
      0015D4                       4982 00533$:
      0015D4 02r10r45         [24] 4983 	ljmp	00205$
                                   4984 ;	src/main.c:1291: case STATE_PS_INIT :
      0015D7                       4985 00195$:
                                   4986 ;	src/main.c:1292: if (u8PSCmd == CMD_PS_START) {
      0015D7 74 03            [12] 4987 	mov	a,#0x03
      0015D9 B5*17 02         [24] 4988 	cjne	a,_main_u8PSCmd_65536_120,00534$
      0015DC 80 03            [24] 4989 	sjmp	00535$
      0015DE                       4990 00534$:
      0015DE 02r10r45         [24] 4991 	ljmp	00205$
      0015E1                       4992 00535$:
                                   4993 ;	src/main.c:1293: u8StatePeriodicSend = STATE_PS_SENDING;
      0015E1 75*16 01         [24] 4994 	mov	_main_u8StatePeriodicSend_65536_120,#0x01
                                   4995 ;	src/main.c:1294: gu16TimeCntMilliSec = 0;
      0015E4 90r00r73         [24] 4996 	mov	dptr,#_gu16TimeCntMilliSec
      0015E7 E4               [12] 4997 	clr	a
      0015E8 F0               [24] 4998 	movx	@dptr,a
      0015E9 A3               [24] 4999 	inc	dptr
      0015EA F0               [24] 5000 	movx	@dptr,a
                                   5001 ;	src/main.c:1295: printf_fast_f("starting...\r\n");
      0015EB C0 07            [24] 5002 	push	ar7
      0015ED C0 04            [24] 5003 	push	ar4
      0015EF 74r16            [12] 5004 	mov	a,#___str_64
      0015F1 C0 E0            [24] 5005 	push	acc
      0015F3 74s04            [12] 5006 	mov	a,#(___str_64 >> 8)
      0015F5 C0 E0            [24] 5007 	push	acc
      0015F7 12r00r00         [24] 5008 	lcall	_printf_fast_f
      0015FA 15 81            [12] 5009 	dec	sp
      0015FC 15 81            [12] 5010 	dec	sp
      0015FE D0 04            [24] 5011 	pop	ar4
      001600 D0 07            [24] 5012 	pop	ar7
                                   5013 ;	src/main.c:1297: break;
      001602 02r10r45         [24] 5014 	ljmp	00205$
                                   5015 ;	src/main.c:1298: case STATE_PS_SENDING :
      001605                       5016 00198$:
                                   5017 ;	src/main.c:1299: if (gu16TimeCntMilliSec > 3000) { // 1sec 넘으면
      001605 90r00r73         [24] 5018 	mov	dptr,#_gu16TimeCntMilliSec
      001608 E0               [24] 5019 	movx	a,@dptr
      001609 FD               [12] 5020 	mov	r5,a
      00160A A3               [24] 5021 	inc	dptr
      00160B E0               [24] 5022 	movx	a,@dptr
      00160C FE               [12] 5023 	mov	r6,a
      00160D C3               [12] 5024 	clr	c
      00160E 74 B8            [12] 5025 	mov	a,#0xb8
      001610 9D               [12] 5026 	subb	a,r5
      001611 74 0B            [12] 5027 	mov	a,#0x0b
      001613 9E               [12] 5028 	subb	a,r6
      001614 50 18            [24] 5029 	jnc	00200$
                                   5030 ;	src/main.c:1300: gu16TimeCntMilliSec = 0;
      001616 90r00r73         [24] 5031 	mov	dptr,#_gu16TimeCntMilliSec
      001619 E4               [12] 5032 	clr	a
      00161A F0               [24] 5033 	movx	@dptr,a
      00161B A3               [24] 5034 	inc	dptr
      00161C F0               [24] 5035 	movx	@dptr,a
                                   5036 ;	src/main.c:1301: periodic_func(&stLineFiPkt_test);
      00161D 90r01r46         [24] 5037 	mov	dptr,#_main_stLineFiPkt_test_65536_120
      001620 75 F0 00         [24] 5038 	mov	b,#0x00
      001623 C0 07            [24] 5039 	push	ar7
      001625 C0 04            [24] 5040 	push	ar4
      001627 12r0Dr50         [24] 5041 	lcall	_periodic_func
      00162A D0 04            [24] 5042 	pop	ar4
      00162C D0 07            [24] 5043 	pop	ar7
      00162E                       5044 00200$:
                                   5045 ;	src/main.c:1318: if (u8PSCmd == CMD_PS_END) {
      00162E 74 04            [12] 5046 	mov	a,#0x04
      001630 B5*17 02         [24] 5047 	cjne	a,_main_u8PSCmd_65536_120,00537$
      001633 80 03            [24] 5048 	sjmp	00538$
      001635                       5049 00537$:
      001635 02r10r45         [24] 5050 	ljmp	00205$
      001638                       5051 00538$:
                                   5052 ;	src/main.c:1319: u8StatePeriodicSend = STATE_PS_INIT;
      001638 75*16 00         [24] 5053 	mov	_main_u8StatePeriodicSend_65536_120,#0x00
                                   5054 ;	src/main.c:1320: printf_fast_f("stopping...");
      00163B C0 07            [24] 5055 	push	ar7
      00163D C0 04            [24] 5056 	push	ar4
      00163F 74r24            [12] 5057 	mov	a,#___str_65
      001641 C0 E0            [24] 5058 	push	acc
      001643 74s04            [12] 5059 	mov	a,#(___str_65 >> 8)
      001645 C0 E0            [24] 5060 	push	acc
      001647 12r00r00         [24] 5061 	lcall	_printf_fast_f
      00164A 15 81            [12] 5062 	dec	sp
      00164C 15 81            [12] 5063 	dec	sp
      00164E D0 04            [24] 5064 	pop	ar4
      001650 D0 07            [24] 5065 	pop	ar7
                                   5066 ;	src/main.c:1323: }
                                   5067 ;	src/main.c:1328: }
      001652 02r10r45         [24] 5068 	ljmp	00205$
                                   5069 	.area CSEG    (CODE)
                                   5070 	.area CONST   (CODE)
                                   5071 	.area CONST   (CODE)
      000000                       5072 ___str_0:
      000000 0A                    5073 	.db 0x0a
      000001 0D                    5074 	.db 0x0d
      000002 00                    5075 	.db 0x00
                                   5076 	.area CSEG    (CODE)
                                   5077 	.area CONST   (CODE)
      000003                       5078 ___str_1:
      000003 73 65 6C 66 20        5079 	.ascii "self "
      000008 00                    5080 	.db 0x00
                                   5081 	.area CSEG    (CODE)
                                   5082 	.area CONST   (CODE)
      000009                       5083 ___str_2:
      000009 63 72 6F 73 73        5084 	.ascii "cross"
      00000E 00                    5085 	.db 0x00
                                   5086 	.area CSEG    (CODE)
                                   5087 	.area CONST   (CODE)
      00000F                       5088 ___str_3:
      00000F 62 6F 74 68 20        5089 	.ascii "both "
      000014 00                    5090 	.db 0x00
                                   5091 	.area CSEG    (CODE)
                                   5092 	.area CONST   (CODE)
      000015                       5093 ___str_4:
      000015 20 6F 75 74 70 75 74  5094 	.ascii " output:This is UART%d"
             3A 54 68 69 73 20 69
             73 20 55 41 52 54 25
             64
      00002B 0A                    5095 	.db 0x0a
      00002C 0D                    5096 	.db 0x0d
      00002D 00                    5097 	.db 0x00
                                   5098 	.area CSEG    (CODE)
                                   5099 	.area CONST   (CODE)
      00002E                       5100 ___str_5:
      00002E 0D                    5101 	.db 0x0d
      00002F 0A                    5102 	.db 0x0a
      000030 00                    5103 	.db 0x00
                                   5104 	.area CSEG    (CODE)
                                   5105 	.area CONST   (CODE)
      000031                       5106 ___str_6:
      000031 25 63                 5107 	.ascii "%c"
      000033 00                    5108 	.db 0x00
                                   5109 	.area CSEG    (CODE)
                                   5110 	.area CONST   (CODE)
      000034                       5111 ___str_7:
      000034 0D                    5112 	.db 0x0d
      000035 0A                    5113 	.db 0x0a
      000036 69 6E 70 75 74 3A 54  5114 	.ascii "input:This is UART%d"
             68 69 73 20 69 73 20
             55 41 52 54 25 64
      00004A 00                    5115 	.db 0x00
                                   5116 	.area CSEG    (CODE)
                                   5117 	.area CONST   (CODE)
      00004B                       5118 ___str_8:
      00004B 49 64 6C 65 20 70 72  5119 	.ascii "Idle preamble on/off"
             65 61 6D 62 6C 65 20
             6F 6E 2F 6F 66 66
      00005F 0D                    5120 	.db 0x0d
      000060 0A                    5121 	.db 0x0a
      000061 00                    5122 	.db 0x00
                                   5123 	.area CSEG    (CODE)
                                   5124 	.area CONST   (CODE)
      000062                       5125 ___str_9:
      000062 4C 69 6E 65 46 69 20  5126 	.ascii "LineFi Power Off"
             50 6F 77 65 72 20 4F
             66 66
      000072 0D                    5127 	.db 0x0d
      000073 0A                    5128 	.db 0x0a
      000074 00                    5129 	.db 0x00
                                   5130 	.area CSEG    (CODE)
                                   5131 	.area CONST   (CODE)
      000075                       5132 ___str_10:
      000075 4C 69 6E 65 46 69 20  5133 	.ascii "LineFi Power On"
             50 6F 77 65 72 20 4F
             6E
      000084 0D                    5134 	.db 0x0d
      000085 0A                    5135 	.db 0x0a
      000086 00                    5136 	.db 0x00
                                   5137 	.area CSEG    (CODE)
                                   5138 	.area CONST   (CODE)
      000087                       5139 ___str_11:
      000087 4C 69 6E 65 46 69 20  5140 	.ascii "LineFi Uart Tx Low"
             55 61 72 74 20 54 78
             20 4C 6F 77
      000099 0D                    5141 	.db 0x0d
      00009A 0A                    5142 	.db 0x0a
      00009B 00                    5143 	.db 0x00
                                   5144 	.area CSEG    (CODE)
                                   5145 	.area CONST   (CODE)
      00009C                       5146 ___str_12:
      00009C 4C 69 6E 65 46 69 20  5147 	.ascii "LineFi Uart Tx High"
             55 61 72 74 20 54 78
             20 48 69 67 68
      0000AF 0D                    5148 	.db 0x0d
      0000B0 0A                    5149 	.db 0x0a
      0000B1 00                    5150 	.db 0x00
                                   5151 	.area CSEG    (CODE)
                                   5152 	.area CONST   (CODE)
      0000B2                       5153 ___str_13:
      0000B2 4C 69 6E 65 46 69 20  5154 	.ascii "LineFi CSC rx FSM Off"
             43 53 43 20 72 78 20
             46 53 4D 20 4F 66 66
      0000C7 0D                    5155 	.db 0x0d
      0000C8 0A                    5156 	.db 0x0a
      0000C9 00                    5157 	.db 0x00
                                   5158 	.area CSEG    (CODE)
                                   5159 	.area CONST   (CODE)
      0000CA                       5160 ___str_14:
      0000CA 4C 69 6E 65 46 69 20  5161 	.ascii "LineFi CSC rx FSM ON"
             43 53 43 20 72 78 20
             46 53 4D 20 4F 4E
      0000DE 0D                    5162 	.db 0x0d
      0000DF 0A                    5163 	.db 0x0a
      0000E0 00                    5164 	.db 0x00
                                   5165 	.area CSEG    (CODE)
                                   5166 	.area CONST   (CODE)
      0000E1                       5167 ___str_15:
      0000E1 56 65 72 73 69 6F 6E  5168 	.ascii "Version 1.4 on 20231026"
             20 31 2E 34 20 6F 6E
             20 32 30 32 33 31 30
             32 36
      0000F8 0D                    5169 	.db 0x0d
      0000F9 0A                    5170 	.db 0x0a
      0000FA 00                    5171 	.db 0x00
                                   5172 	.area CSEG    (CODE)
                                   5173 	.area CONST   (CODE)
      0000FB                       5174 ___str_16:
      0000FB 31 3A 20 64 6F 77 6E  5175 	.ascii "1: downlink packet 1"
             6C 69 6E 6B 20 70 61
             63 6B 65 74 20 31
      00010F 0D                    5176 	.db 0x0d
      000110 0A                    5177 	.db 0x0a
      000111 00                    5178 	.db 0x00
                                   5179 	.area CSEG    (CODE)
                                   5180 	.area CONST   (CODE)
      000112                       5181 ___str_17:
      000112 32 3A 20 64 6F 77 6E  5182 	.ascii "2: downlink packet 2"
             6C 69 6E 6B 20 70 61
             63 6B 65 74 20 32
      000126 0D                    5183 	.db 0x0d
      000127 0A                    5184 	.db 0x0a
      000128 00                    5185 	.db 0x00
                                   5186 	.area CSEG    (CODE)
                                   5187 	.area CONST   (CODE)
      000129                       5188 ___str_18:
      000129 33 3A 20 75 70 6C 69  5189 	.ascii "3: uplink idle preamble on/off"
             6E 6B 20 69 64 6C 65
             20 70 72 65 61 6D 62
             6C 65 20 6F 6E 2F 6F
             66 66
      000147 0D                    5190 	.db 0x0d
      000148 0A                    5191 	.db 0x0a
      000149 00                    5192 	.db 0x00
                                   5193 	.area CSEG    (CODE)
                                   5194 	.area CONST   (CODE)
      00014A                       5195 ___str_19:
      00014A 70 2F 50 3A 20 4C 69  5196 	.ascii "p/P: LineFi Power off/on"
             6E 65 46 69 20 50 6F
             77 65 72 20 6F 66 66
             2F 6F 6E
      000162 0D                    5197 	.db 0x0d
      000163 0A                    5198 	.db 0x0a
      000164 00                    5199 	.db 0x00
                                   5200 	.area CSEG    (CODE)
                                   5201 	.area CONST   (CODE)
      000165                       5202 ___str_20:
      000165 74 2F 54 3A 20 4C 69  5203 	.ascii "t/T: LineFi Uart Tx Low/High"
             6E 65 46 69 20 55 61
             72 74 20 54 78 20 4C
             6F 77 2F 48 69 67 68
      000181 0D                    5204 	.db 0x0d
      000182 0A                    5205 	.db 0x0a
      000183 00                    5206 	.db 0x00
                                   5207 	.area CSEG    (CODE)
                                   5208 	.area CONST   (CODE)
      000184                       5209 ___str_21:
      000184 73 2F 53 3A 20 4C 69  5210 	.ascii "s/S: LineFie CSC Rx FSM off/on"
             6E 65 46 69 65 20 43
             53 43 20 52 78 20 46
             53 4D 20 6F 66 66 2F
             6F 6E
      0001A2 0D                    5211 	.db 0x0d
      0001A3 0A                    5212 	.db 0x0a
      0001A4 00                    5213 	.db 0x00
                                   5214 	.area CSEG    (CODE)
                                   5215 	.area CONST   (CODE)
      0001A5                       5216 ___str_22:
      0001A5 74 65 73 74 20 70 72  5217 	.ascii "test procedure: p -> P -> T -> S -> 1 or 2"
             6F 63 65 64 75 72 65
             3A 20 70 20 2D 3E 20
             50 20 2D 3E 20 54 20
             2D 3E 20 53 20 2D 3E
             20 31 20 6F 72 20 32
      0001CF 0D                    5218 	.db 0x0d
      0001D0 0A                    5219 	.db 0x0a
      0001D1 00                    5220 	.db 0x00
                                   5221 	.area CSEG    (CODE)
                                   5222 	.area CONST   (CODE)
      0001D2                       5223 ___str_23:
      0001D2 74 3A 20 74 69 6D 65  5224 	.ascii "t: timer"
             72
      0001DA 0D                    5225 	.db 0x0d
      0001DB 0A                    5226 	.db 0x0a
      0001DC 00                    5227 	.db 0x00
                                   5228 	.area CSEG    (CODE)
                                   5229 	.area CONST   (CODE)
      0001DD                       5230 ___str_24:
      0001DD 30 3A 20 4C 69 6E 65  5231 	.ascii "0: LineFi EN0,1,2 off"
             46 69 20 45 4E 30 2C
             31 2C 32 20 6F 66 66
      0001F2 0D                    5232 	.db 0x0d
      0001F3 0A                    5233 	.db 0x0a
      0001F4 00                    5234 	.db 0x00
                                   5235 	.area CSEG    (CODE)
                                   5236 	.area CONST   (CODE)
      0001F5                       5237 ___str_25:
      0001F5 31 3A 20 4C 69 6E 65  5238 	.ascii "1: LineFi EN0 = 1"
             46 69 20 45 4E 30 20
             3D 20 31
      000206 0D                    5239 	.db 0x0d
      000207 0A                    5240 	.db 0x0a
      000208 00                    5241 	.db 0x00
                                   5242 	.area CSEG    (CODE)
                                   5243 	.area CONST   (CODE)
      000209                       5244 ___str_26:
      000209 32 3A                 5245 	.ascii "2:"
      00020B 0D                    5246 	.db 0x0d
      00020C 0A                    5247 	.db 0x0a
      00020D 00                    5248 	.db 0x00
                                   5249 	.area CSEG    (CODE)
                                   5250 	.area CONST   (CODE)
      00020E                       5251 ___str_27:
      00020E 33 3A                 5252 	.ascii "3:"
      000210 0D                    5253 	.db 0x0d
      000211 0A                    5254 	.db 0x0a
      000212 00                    5255 	.db 0x00
                                   5256 	.area CSEG    (CODE)
                                   5257 	.area CONST   (CODE)
      000213                       5258 ___str_28:
      000213 34 3A                 5259 	.ascii "4:"
      000215 0D                    5260 	.db 0x0d
      000216 0A                    5261 	.db 0x0a
      000217 00                    5262 	.db 0x00
                                   5263 	.area CSEG    (CODE)
                                   5264 	.area CONST   (CODE)
      000218                       5265 ___str_29:
      000218 35 3A                 5266 	.ascii "5:"
      00021A 0D                    5267 	.db 0x0d
      00021B 0A                    5268 	.db 0x0a
      00021C 00                    5269 	.db 0x00
                                   5270 	.area CSEG    (CODE)
                                   5271 	.area CONST   (CODE)
      00021D                       5272 ___str_30:
      00021D 36 3A                 5273 	.ascii "6:"
      00021F 0D                    5274 	.db 0x0d
      000220 0A                    5275 	.db 0x0a
      000221 00                    5276 	.db 0x00
                                   5277 	.area CSEG    (CODE)
                                   5278 	.area CONST   (CODE)
      000222                       5279 ___str_31:
      000222 37 3A                 5280 	.ascii "7:"
      000224 0D                    5281 	.db 0x0d
      000225 0A                    5282 	.db 0x0a
      000226 00                    5283 	.db 0x00
                                   5284 	.area CSEG    (CODE)
                                   5285 	.area CONST   (CODE)
      000227                       5286 ___str_32:
      000227 68 3A 20 41 64 64 72  5287 	.ascii "h: Addr--"
             2D 2D
      000230 0D                    5288 	.db 0x0d
      000231 0A                    5289 	.db 0x0a
      000232 00                    5290 	.db 0x00
                                   5291 	.area CSEG    (CODE)
                                   5292 	.area CONST   (CODE)
      000233                       5293 ___str_33:
      000233 6A 3A 20 43 6D 64 2D  5294 	.ascii "j: Cmd--"
             2D
      00023B 0D                    5295 	.db 0x0d
      00023C 0A                    5296 	.db 0x0a
      00023D 00                    5297 	.db 0x00
                                   5298 	.area CSEG    (CODE)
                                   5299 	.area CONST   (CODE)
      00023E                       5300 ___str_34:
      00023E 6B 3A 20 43 6D 64 2B  5301 	.ascii "k: Cmd++"
             2B
      000246 0D                    5302 	.db 0x0d
      000247 0A                    5303 	.db 0x0a
      000248 00                    5304 	.db 0x00
                                   5305 	.area CSEG    (CODE)
                                   5306 	.area CONST   (CODE)
      000249                       5307 ___str_35:
      000249 6C 3A 20 41 64 64 72  5308 	.ascii "l: Addr++"
             2B 2B
      000252 0D                    5309 	.db 0x0d
      000253 0A                    5310 	.db 0x0a
      000254 00                    5311 	.db 0x00
                                   5312 	.area CSEG    (CODE)
                                   5313 	.area CONST   (CODE)
      000255                       5314 ___str_36:
      000255 73 3A 20 73 65 6E 64  5315 	.ascii "s: sending"
             69 6E 67
      00025F 0D                    5316 	.db 0x0d
      000260 0A                    5317 	.db 0x0a
      000261 00                    5318 	.db 0x00
                                   5319 	.area CSEG    (CODE)
                                   5320 	.area CONST   (CODE)
      000262                       5321 ___str_37:
      000262 25 75                 5322 	.ascii "%u"
      000264 0A                    5323 	.db 0x0a
      000265 0D                    5324 	.db 0x0d
      000266 00                    5325 	.db 0x00
                                   5326 	.area CSEG    (CODE)
                                   5327 	.area CONST   (CODE)
      000267                       5328 ___str_38:
      000267 4C 49 4E 45 46 49 5F  5329 	.ascii "LINEFI_EN0=0"
             45 4E 30 3D 30
      000273 0A                    5330 	.db 0x0a
      000274 0D                    5331 	.db 0x0d
      000275 00                    5332 	.db 0x00
                                   5333 	.area CSEG    (CODE)
                                   5334 	.area CONST   (CODE)
      000276                       5335 ___str_39:
      000276 4C 49 4E 45 46 49 5F  5336 	.ascii "LINEFI_EN0=1"
             45 4E 30 3D 31
      000282 0A                    5337 	.db 0x0a
      000283 0D                    5338 	.db 0x0d
      000284 00                    5339 	.db 0x00
                                   5340 	.area CSEG    (CODE)
                                   5341 	.area CONST   (CODE)
      000285                       5342 ___str_40:
      000285 4C 49 4E 45 46 49 5F  5343 	.ascii "LINEFI_TX=0"
             54 58 3D 30
      000290 0A                    5344 	.db 0x0a
      000291 0D                    5345 	.db 0x0d
      000292 00                    5346 	.db 0x00
                                   5347 	.area CSEG    (CODE)
                                   5348 	.area CONST   (CODE)
      000293                       5349 ___str_41:
      000293 4C 49 4E 45 46 49 5F  5350 	.ascii "LINEFI_TX=1"
             54 58 3D 31
      00029E 0A                    5351 	.db 0x0a
      00029F 0D                    5352 	.db 0x0d
      0002A0 00                    5353 	.db 0x00
                                   5354 	.area CSEG    (CODE)
                                   5355 	.area CONST   (CODE)
      0002A1                       5356 ___str_42:
      0002A1 4C 49 4E 45 46 49 5F  5357 	.ascii "LINEFI_TX=%d"
             54 58 3D 25 64
      0002AD 0A                    5358 	.db 0x0a
      0002AE 0D                    5359 	.db 0x0d
      0002AF 00                    5360 	.db 0x00
                                   5361 	.area CSEG    (CODE)
                                   5362 	.area CONST   (CODE)
      0002B0                       5363 ___str_43:
      0002B0 4C 49 4E 45 46 49 5F  5364 	.ascii "LINEFI_EN0="
             45 4E 30 3D
      0002BB 00                    5365 	.db 0x00
                                   5366 	.area CSEG    (CODE)
                                   5367 	.area CONST   (CODE)
      0002BC                       5368 ___str_44:
      0002BC 25 64                 5369 	.ascii "%d"
      0002BE 0A                    5370 	.db 0x0a
      0002BF 0D                    5371 	.db 0x0d
      0002C0 00                    5372 	.db 0x00
                                   5373 	.area CSEG    (CODE)
                                   5374 	.area CONST   (CODE)
      0002C1                       5375 ___str_45:
      0002C1 4C 49 4E 45 46 49 5F  5376 	.ascii "LINEFI_EN1="
             45 4E 31 3D
      0002CC 00                    5377 	.db 0x00
                                   5378 	.area CSEG    (CODE)
                                   5379 	.area CONST   (CODE)
      0002CD                       5380 ___str_46:
      0002CD 4C 49 4E 45 46 49 5F  5381 	.ascii "LINEFI_EN2="
             45 4E 32 3D
      0002D8 00                    5382 	.db 0x00
                                   5383 	.area CSEG    (CODE)
                                   5384 	.area CONST   (CODE)
      0002D9                       5385 ___str_47:
      0002D9 75 61 72 74 20 73 70  5386 	.ascii "uart speed: %lu:"
             65 65 64 3A 20 25 6C
             75 3A
      0002E9 0A                    5387 	.db 0x0a
      0002EA 0D                    5388 	.db 0x0d
      0002EB 00                    5389 	.db 0x00
                                   5390 	.area CSEG    (CODE)
                                   5391 	.area CONST   (CODE)
      0002EC                       5392 ___str_48:
      0002EC 61 64 64 72 65 73 73  5393 	.ascii "address: %d"
             3A 20 25 64
      0002F7 0A                    5394 	.db 0x0a
      0002F8 0D                    5395 	.db 0x0d
      0002F9 00                    5396 	.db 0x00
                                   5397 	.area CSEG    (CODE)
                                   5398 	.area CONST   (CODE)
      0002FA                       5399 ___str_49:
      0002FA 63 6F 6D 6D 61 6E 64  5400 	.ascii "command: %d"
             3A 20 25 64
      000305 0A                    5401 	.db 0x0a
      000306 0D                    5402 	.db 0x0d
      000307 00                    5403 	.db 0x00
                                   5404 	.area CSEG    (CODE)
                                   5405 	.area CONST   (CODE)
      000308                       5406 ___str_50:
      000308 4C 69 6E 65 46 69 20  5407 	.ascii "LineFi Sending: 0x%x:"
             53 65 6E 64 69 6E 67
             3A 20 30 78 25 78 3A
      00031D 0A                    5408 	.db 0x0a
      00031E 0D                    5409 	.db 0x0d
      00031F 00                    5410 	.db 0x00
                                   5411 	.area CSEG    (CODE)
                                   5412 	.area CONST   (CODE)
      000320                       5413 ___str_51:
      000320 61 64 64 72 65 73 73  5414 	.ascii "address: 0x%d:"
             3A 20 30 78 25 64 3A
      00032E 0A                    5415 	.db 0x0a
      00032F 0D                    5416 	.db 0x0d
      000330 00                    5417 	.db 0x00
                                   5418 	.area CSEG    (CODE)
                                   5419 	.area CONST   (CODE)
      000331                       5420 ___str_52:
      000331 53 65 74 74 69 6E 67  5421 	.ascii "Setting uart speed as: %lu:"
             20 75 61 72 74 20 73
             70 65 65 64 20 61 73
             3A 20 25 6C 75 3A
      00034C 0A                    5422 	.db 0x0a
      00034D 0D                    5423 	.db 0x0d
      00034E 00                    5424 	.db 0x00
                                   5425 	.area CSEG    (CODE)
                                   5426 	.area CONST   (CODE)
      00034F                       5427 ___str_53:
      00034F 4C 69 6E 65 46 69 20  5428 	.ascii "LineFi Sending: %d(0x%x)"
             53 65 6E 64 69 6E 67
             3A 20 25 64 28 30 78
             25 78 29
      000367 0A                    5429 	.db 0x0a
      000368 0D                    5430 	.db 0x0d
      000369 00                    5431 	.db 0x00
                                   5432 	.area CSEG    (CODE)
                                   5433 	.area CONST   (CODE)
      00036A                       5434 ___str_54:
      00036A 73 65 6E 64 20 64 61  5435 	.ascii "send data %d(0x%x)"
             74 61 20 25 64 28 30
             78 25 78 29
      00037C 0A                    5436 	.db 0x0a
      00037D 0D                    5437 	.db 0x0d
      00037E 00                    5438 	.db 0x00
                                   5439 	.area CSEG    (CODE)
                                   5440 	.area CONST   (CODE)
      00037F                       5441 ___str_55:
      00037F 25 64                 5442 	.ascii "%d"
      000381 0D                    5443 	.db 0x0d
      000382 0A                    5444 	.db 0x0a
      000383 00                    5445 	.db 0x00
                                   5446 	.area CSEG    (CODE)
                                   5447 	.area CONST   (CODE)
      000384                       5448 ___str_56:
      000384 54 68 69 73 20 69 73  5449 	.ascii "This is UART0"
             20 55 41 52 54 30
      000391 0A                    5450 	.db 0x0a
      000392 0D                    5451 	.db 0x0d
      000393 00                    5452 	.db 0x00
                                   5453 	.area CSEG    (CODE)
                                   5454 	.area CONST   (CODE)
      000394                       5455 ___str_57:
      000394 4C 69 6E 65 46 69 20  5456 	.ascii "LineFi Master"
             4D 61 73 74 65 72
      0003A1 0A                    5457 	.db 0x0a
      0003A2 0D                    5458 	.db 0x0d
      0003A3 00                    5459 	.db 0x00
                                   5460 	.area CSEG    (CODE)
                                   5461 	.area CONST   (CODE)
      0003A4                       5462 ___str_58:
      0003A4 54 68 69 73 20 69 73  5463 	.ascii "This is UART1"
             20 55 41 52 54 31
      0003B1 0A                    5464 	.db 0x0a
      0003B2 0D                    5465 	.db 0x0d
      0003B3 00                    5466 	.db 0x00
                                   5467 	.area CSEG    (CODE)
                                   5468 	.area CONST   (CODE)
      0003B4                       5469 ___str_59:
      0003B4 25 73                 5470 	.ascii "%s"
      0003B6 0D                    5471 	.db 0x0d
      0003B7 0A                    5472 	.db 0x0a
      0003B8 00                    5473 	.db 0x00
                                   5474 	.area CSEG    (CODE)
                                   5475 	.area CONST   (CODE)
      0003B9                       5476 ___str_60:
      0003B9 44 61 74 61 49 64 78  5477 	.ascii "DataIdx:%d"
             3A 25 64
      0003C3 0D                    5478 	.db 0x0d
      0003C4 0A                    5479 	.db 0x0a
      0003C5 00                    5480 	.db 0x00
                                   5481 	.area CSEG    (CODE)
                                   5482 	.area CONST   (CODE)
      0003C6                       5483 ___str_61:
      0003C6 30 78 25 78 20        5484 	.ascii "0x%x "
      0003CB 00                    5485 	.db 0x00
                                   5486 	.area CSEG    (CODE)
                                   5487 	.area CONST   (CODE)
      0003CC                       5488 ___str_62:
      0003CC 53 54 41 52 54 20 70  5489 	.ascii "START periodic packet generating.."
             65 72 69 6F 64 69 63
             20 70 61 63 6B 65 74
             20 67 65 6E 65 72 61
             74 69 6E 67 2E 2E
      0003EE 0D                    5490 	.db 0x0d
      0003EF 0A                    5491 	.db 0x0a
      0003F0 00                    5492 	.db 0x00
                                   5493 	.area CSEG    (CODE)
                                   5494 	.area CONST   (CODE)
      0003F1                       5495 ___str_63:
      0003F1 53 54 4F 50 20 20 70  5496 	.ascii "STOP  periodic packet generating.."
             65 72 69 6F 64 69 63
             20 70 61 63 6B 65 74
             20 67 65 6E 65 72 61
             74 69 6E 67 2E 2E
      000413 0D                    5497 	.db 0x0d
      000414 0A                    5498 	.db 0x0a
      000415 00                    5499 	.db 0x00
                                   5500 	.area CSEG    (CODE)
                                   5501 	.area CONST   (CODE)
      000416                       5502 ___str_64:
      000416 73 74 61 72 74 69 6E  5503 	.ascii "starting..."
             67 2E 2E 2E
      000421 0D                    5504 	.db 0x0d
      000422 0A                    5505 	.db 0x0a
      000423 00                    5506 	.db 0x00
                                   5507 	.area CSEG    (CODE)
                                   5508 	.area CONST   (CODE)
      000424                       5509 ___str_65:
      000424 73 74 6F 70 70 69 6E  5510 	.ascii "stopping..."
             67 2E 2E 2E
      00042F 00                    5511 	.db 0x00
                                   5512 	.area CSEG    (CODE)
                                   5513 	.area CONST   (CODE)
      000430                       5514 ___str_66:
      000430 55 41 52 54 30 5F 49  5515 	.ascii "UART0_INPUT_MODE0:one key control"
             4E 50 55 54 5F 4D 4F
             44 45 30 3A 6F 6E 65
             20 6B 65 79 20 63 6F
             6E 74 72 6F 6C
      000451 00                    5516 	.db 0x00
                                   5517 	.area CSEG    (CODE)
                                   5518 	.area CONST   (CODE)
      000452                       5519 ___str_67:
      000452 55 41 52 54 30 5F 49  5520 	.ascii "UART0_INPUT_MODE1:string input"
             4E 50 55 54 5F 4D 4F
             44 45 31 3A 73 74 72
             69 6E 67 20 69 6E 70
             75 74
      000470 00                    5521 	.db 0x00
                                   5522 	.area CSEG    (CODE)
                                   5523 	.area CONST   (CODE)
      000471                       5524 ___str_68:
      000471 55 41 52 54 30 5F 49  5525 	.ascii "UART0_INPUT_MODE2:mimic 5keys on board"
             4E 50 55 54 5F 4D 4F
             44 45 32 3A 6D 69 6D
             69 63 20 35 6B 65 79
             73 20 6F 6E 20 62 6F
             61 72 64
      000497 00                    5526 	.db 0x00
                                   5527 	.area CSEG    (CODE)
                                   5528 	.area CONST   (CODE)
      000498                       5529 ___str_69:
      000498 55 41 52 54 30 5F 49  5530 	.ascii "UART0_INPUT_MODE3:data setting"
             4E 50 55 54 5F 4D 4F
             44 45 33 3A 64 61 74
             61 20 73 65 74 74 69
             6E 67
      0004B6 00                    5531 	.db 0x00
                                   5532 	.area CSEG    (CODE)
                                   5533 	.area CONST   (CODE)
      0004B7                       5534 ___str_70:
      0004B7 55 41 52 54 30 5F 49  5535 	.ascii "UART0_INPUT_MODE4:periodic function"
             4E 50 55 54 5F 4D 4F
             44 45 34 3A 70 65 72
             69 6F 64 69 63 20 66
             75 6E 63 74 69 6F 6E
      0004DA 00                    5536 	.db 0x00
                                   5537 	.area CSEG    (CODE)
                                   5538 	.area CABS    (ABS,CODE)
