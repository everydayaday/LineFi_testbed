                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _state_switches_PARM_2
                                     12 	.globl _main
                                     13 	.globl _periodic_func
                                     14 	.globl _struct_to_uint8
                                     15 	.globl _act_by_one_key
                                     16 	.globl _print_help
                                     17 	.globl _printoutbuf
                                     18 	.globl _state_switches
                                     19 	.globl _gpio_setup
                                     20 	.globl _disp_help
                                     21 	.globl _MODIFY_HIRC_166
                                     22 	.globl _conv_manchester2highnibble
                                     23 	.globl _conv_manchester2nibble
                                     24 	.globl _chk_manchester
                                     25 	.globl _pin_interrupt_isr
                                     26 	.globl _Timer0_ISR
                                     27 	.globl _state_machine
                                     28 	.globl _print_char
                                     29 	.globl _print_esc
                                     30 	.globl _print_raw_packet
                                     31 	.globl _print_linefipacket
                                     32 	.globl _send_linefi_packet
                                     33 	.globl _send_octet_to_linefi
                                     34 	.globl _size_linefi_packet
                                     35 	.globl _uart_setup
                                     36 	.globl _Receive_Data_From_UART0_nb
                                     37 	.globl _InitialUART1_Timer3
                                     38 	.globl _printf_fast_f
                                     39 	.globl _printf
                                     40 	.globl _MOSI
                                     41 	.globl _P00
                                     42 	.globl _MISO
                                     43 	.globl _P01
                                     44 	.globl _RXD_1
                                     45 	.globl _P02
                                     46 	.globl _P03
                                     47 	.globl _STADC
                                     48 	.globl _P04
                                     49 	.globl _P05
                                     50 	.globl _TXD
                                     51 	.globl _P06
                                     52 	.globl _RXD
                                     53 	.globl _P07
                                     54 	.globl _IT0
                                     55 	.globl _IE0
                                     56 	.globl _IT1
                                     57 	.globl _IE1
                                     58 	.globl _TR0
                                     59 	.globl _TF0
                                     60 	.globl _TR1
                                     61 	.globl _TF1
                                     62 	.globl _P10
                                     63 	.globl _P11
                                     64 	.globl _P12
                                     65 	.globl _SCL
                                     66 	.globl _P13
                                     67 	.globl _SDA
                                     68 	.globl _P14
                                     69 	.globl _P15
                                     70 	.globl _TXD_1
                                     71 	.globl _P16
                                     72 	.globl _P17
                                     73 	.globl _RI
                                     74 	.globl _TI
                                     75 	.globl _RB8
                                     76 	.globl _TB8
                                     77 	.globl _REN
                                     78 	.globl _SM2
                                     79 	.globl _SM1
                                     80 	.globl _FE
                                     81 	.globl _SM0
                                     82 	.globl _P20
                                     83 	.globl _EX0
                                     84 	.globl _ET0
                                     85 	.globl _EX1
                                     86 	.globl _ET1
                                     87 	.globl _ES
                                     88 	.globl _EBOD
                                     89 	.globl _EADC
                                     90 	.globl _EA
                                     91 	.globl _P30
                                     92 	.globl _PX0
                                     93 	.globl _PT0
                                     94 	.globl _PX1
                                     95 	.globl _PT1
                                     96 	.globl _PS
                                     97 	.globl _PBOD
                                     98 	.globl _PADC
                                     99 	.globl _I2CPX
                                    100 	.globl _AA
                                    101 	.globl _SI
                                    102 	.globl _STO
                                    103 	.globl _STA
                                    104 	.globl _I2CEN
                                    105 	.globl _CM_RL2
                                    106 	.globl _TR2
                                    107 	.globl _TF2
                                    108 	.globl _P
                                    109 	.globl _OV
                                    110 	.globl _RS0
                                    111 	.globl _RS1
                                    112 	.globl _F0
                                    113 	.globl _AC
                                    114 	.globl _CY
                                    115 	.globl _CLRPWM
                                    116 	.globl _PWMF
                                    117 	.globl _LOAD
                                    118 	.globl _PWMRUN
                                    119 	.globl _ADCHS0
                                    120 	.globl _ADCHS1
                                    121 	.globl _ADCHS2
                                    122 	.globl _ADCHS3
                                    123 	.globl _ETGSEL0
                                    124 	.globl _ETGSEL1
                                    125 	.globl _ADCS
                                    126 	.globl _ADCF
                                    127 	.globl _RI_1
                                    128 	.globl _TI_1
                                    129 	.globl _RB8_1
                                    130 	.globl _TB8_1
                                    131 	.globl _REN_1
                                    132 	.globl _SM2_1
                                    133 	.globl _SM1_1
                                    134 	.globl _FE_1
                                    135 	.globl _SM0_1
                                    136 	.globl _EIPH1
                                    137 	.globl _EIP1
                                    138 	.globl _PMD
                                    139 	.globl _PMEN
                                    140 	.globl _PDTCNT
                                    141 	.globl _PDTEN
                                    142 	.globl _SCON_1
                                    143 	.globl _EIPH
                                    144 	.globl _AINDIDS
                                    145 	.globl _SPDR
                                    146 	.globl _SPSR
                                    147 	.globl _SPCR2
                                    148 	.globl _SPCR
                                    149 	.globl _CAPCON4
                                    150 	.globl _CAPCON3
                                    151 	.globl _B
                                    152 	.globl _EIP
                                    153 	.globl _C2H
                                    154 	.globl _C2L
                                    155 	.globl _PIF
                                    156 	.globl _PIPEN
                                    157 	.globl _PINEN
                                    158 	.globl _PICON
                                    159 	.globl _ADCCON0
                                    160 	.globl _C1H
                                    161 	.globl _C1L
                                    162 	.globl _C0H
                                    163 	.globl _C0L
                                    164 	.globl _ADCDLY
                                    165 	.globl _ADCCON2
                                    166 	.globl _ADCCON1
                                    167 	.globl _ACC
                                    168 	.globl _PWMCON1
                                    169 	.globl _PIOCON0
                                    170 	.globl _PWM3L
                                    171 	.globl _PWM2L
                                    172 	.globl _PWM1L
                                    173 	.globl _PWM0L
                                    174 	.globl _PWMPL
                                    175 	.globl _PWMCON0
                                    176 	.globl _FBD
                                    177 	.globl _PNP
                                    178 	.globl _PWM3H
                                    179 	.globl _PWM2H
                                    180 	.globl _PWM1H
                                    181 	.globl _PWM0H
                                    182 	.globl _PWMPH
                                    183 	.globl _PSW
                                    184 	.globl _ADCMPH
                                    185 	.globl _ADCMPL
                                    186 	.globl _PWM5L
                                    187 	.globl _TH2
                                    188 	.globl _PWM4L
                                    189 	.globl _TL2
                                    190 	.globl _RCMP2H
                                    191 	.globl _RCMP2L
                                    192 	.globl _T2MOD
                                    193 	.globl _T2CON
                                    194 	.globl _TA
                                    195 	.globl _PIOCON1
                                    196 	.globl _RH3
                                    197 	.globl _PWM5H
                                    198 	.globl _RL3
                                    199 	.globl _PWM4H
                                    200 	.globl _T3CON
                                    201 	.globl _ADCRH
                                    202 	.globl _ADCRL
                                    203 	.globl _I2ADDR
                                    204 	.globl _I2CON
                                    205 	.globl _I2TOC
                                    206 	.globl _I2CLK
                                    207 	.globl _I2STAT
                                    208 	.globl _I2DAT
                                    209 	.globl _SADDR_1
                                    210 	.globl _SADEN_1
                                    211 	.globl _SADEN
                                    212 	.globl _IP
                                    213 	.globl _PWMINTC
                                    214 	.globl _IPH
                                    215 	.globl _P2S
                                    216 	.globl _P1SR
                                    217 	.globl _P1M2
                                    218 	.globl _P1S
                                    219 	.globl _P1M1
                                    220 	.globl _P0SR
                                    221 	.globl _P0M2
                                    222 	.globl _P0S
                                    223 	.globl _P0M1
                                    224 	.globl _P3
                                    225 	.globl _IAPCN
                                    226 	.globl _IAPFD
                                    227 	.globl _P3SR
                                    228 	.globl _P3M2
                                    229 	.globl _P3S
                                    230 	.globl _P3M1
                                    231 	.globl _BODCON1
                                    232 	.globl _WDCON
                                    233 	.globl _SADDR
                                    234 	.globl _IE
                                    235 	.globl _IAPAH
                                    236 	.globl _IAPAL
                                    237 	.globl _IAPUEN
                                    238 	.globl _IAPTRG
                                    239 	.globl _BODCON0
                                    240 	.globl _AUXR1
                                    241 	.globl _P2
                                    242 	.globl _CHPCON
                                    243 	.globl _EIE1
                                    244 	.globl _EIE
                                    245 	.globl _SBUF_1
                                    246 	.globl _SBUF
                                    247 	.globl _SCON
                                    248 	.globl _CKEN
                                    249 	.globl _CKSWT
                                    250 	.globl _CKDIV
                                    251 	.globl _CAPCON2
                                    252 	.globl _CAPCON1
                                    253 	.globl _CAPCON0
                                    254 	.globl _SFRS
                                    255 	.globl _P1
                                    256 	.globl _WKCON
                                    257 	.globl _CKCON
                                    258 	.globl _TH1
                                    259 	.globl _TH0
                                    260 	.globl _TL1
                                    261 	.globl _TL0
                                    262 	.globl _TMOD
                                    263 	.globl _TCON
                                    264 	.globl _PCON
                                    265 	.globl _RWK
                                    266 	.globl _RCTRIM1
                                    267 	.globl _RCTRIM0
                                    268 	.globl _DPH
                                    269 	.globl _DPL
                                    270 	.globl _SP
                                    271 	.globl _P0
                                    272 	.globl _gpu32UartSpeed
                                    273 	.globl _gu16TimeCntMilliSec
                                    274 	.globl _gu16TimeCnt
                                    275 	.globl _gpu8Data3
                                    276 	.globl _gpu8Data2
                                    277 	.globl _gpu8Data
                                    278 	.globl _gcUartInputMode
                                    279 	.globl _pu8buff
                                    280 	.globl _act_by_one_key_PARM_3
                                    281 	.globl _act_by_one_key_PARM_2
                                    282 	.globl _printoutbuf_PARM_2
                                    283 	.globl _state_machine_PARM_4
                                    284 	.globl _state_machine_PARM_3
                                    285 	.globl _state_machine_PARM_2
                                    286 	.globl _gu8UART
                                    287 	.globl _putchar
                                    288 ;--------------------------------------------------------
                                    289 ; special function registers
                                    290 ;--------------------------------------------------------
                                    291 	.area RSEG    (ABS,DATA)
      000000                        292 	.org 0x0000
                           000080   293 _P0	=	0x0080
                           000081   294 _SP	=	0x0081
                           000082   295 _DPL	=	0x0082
                           000083   296 _DPH	=	0x0083
                           000084   297 _RCTRIM0	=	0x0084
                           000085   298 _RCTRIM1	=	0x0085
                           000086   299 _RWK	=	0x0086
                           000087   300 _PCON	=	0x0087
                           000088   301 _TCON	=	0x0088
                           000089   302 _TMOD	=	0x0089
                           00008A   303 _TL0	=	0x008a
                           00008B   304 _TL1	=	0x008b
                           00008C   305 _TH0	=	0x008c
                           00008D   306 _TH1	=	0x008d
                           00008E   307 _CKCON	=	0x008e
                           00008F   308 _WKCON	=	0x008f
                           000090   309 _P1	=	0x0090
                           000091   310 _SFRS	=	0x0091
                           000092   311 _CAPCON0	=	0x0092
                           000093   312 _CAPCON1	=	0x0093
                           000094   313 _CAPCON2	=	0x0094
                           000095   314 _CKDIV	=	0x0095
                           000096   315 _CKSWT	=	0x0096
                           000097   316 _CKEN	=	0x0097
                           000098   317 _SCON	=	0x0098
                           000099   318 _SBUF	=	0x0099
                           00009A   319 _SBUF_1	=	0x009a
                           00009B   320 _EIE	=	0x009b
                           00009C   321 _EIE1	=	0x009c
                           00009F   322 _CHPCON	=	0x009f
                           0000A0   323 _P2	=	0x00a0
                           0000A2   324 _AUXR1	=	0x00a2
                           0000A3   325 _BODCON0	=	0x00a3
                           0000A4   326 _IAPTRG	=	0x00a4
                           0000A5   327 _IAPUEN	=	0x00a5
                           0000A6   328 _IAPAL	=	0x00a6
                           0000A7   329 _IAPAH	=	0x00a7
                           0000A8   330 _IE	=	0x00a8
                           0000A9   331 _SADDR	=	0x00a9
                           0000AA   332 _WDCON	=	0x00aa
                           0000AB   333 _BODCON1	=	0x00ab
                           0000AC   334 _P3M1	=	0x00ac
                           0000AC   335 _P3S	=	0x00ac
                           0000AD   336 _P3M2	=	0x00ad
                           0000AD   337 _P3SR	=	0x00ad
                           0000AE   338 _IAPFD	=	0x00ae
                           0000AF   339 _IAPCN	=	0x00af
                           0000B0   340 _P3	=	0x00b0
                           0000B1   341 _P0M1	=	0x00b1
                           0000B1   342 _P0S	=	0x00b1
                           0000B2   343 _P0M2	=	0x00b2
                           0000B2   344 _P0SR	=	0x00b2
                           0000B3   345 _P1M1	=	0x00b3
                           0000B3   346 _P1S	=	0x00b3
                           0000B4   347 _P1M2	=	0x00b4
                           0000B4   348 _P1SR	=	0x00b4
                           0000B5   349 _P2S	=	0x00b5
                           0000B7   350 _IPH	=	0x00b7
                           0000B7   351 _PWMINTC	=	0x00b7
                           0000B8   352 _IP	=	0x00b8
                           0000B9   353 _SADEN	=	0x00b9
                           0000BA   354 _SADEN_1	=	0x00ba
                           0000BB   355 _SADDR_1	=	0x00bb
                           0000BC   356 _I2DAT	=	0x00bc
                           0000BD   357 _I2STAT	=	0x00bd
                           0000BE   358 _I2CLK	=	0x00be
                           0000BF   359 _I2TOC	=	0x00bf
                           0000C0   360 _I2CON	=	0x00c0
                           0000C1   361 _I2ADDR	=	0x00c1
                           0000C2   362 _ADCRL	=	0x00c2
                           0000C3   363 _ADCRH	=	0x00c3
                           0000C4   364 _T3CON	=	0x00c4
                           0000C4   365 _PWM4H	=	0x00c4
                           0000C5   366 _RL3	=	0x00c5
                           0000C5   367 _PWM5H	=	0x00c5
                           0000C6   368 _RH3	=	0x00c6
                           0000C6   369 _PIOCON1	=	0x00c6
                           0000C7   370 _TA	=	0x00c7
                           0000C8   371 _T2CON	=	0x00c8
                           0000C9   372 _T2MOD	=	0x00c9
                           0000CA   373 _RCMP2L	=	0x00ca
                           0000CB   374 _RCMP2H	=	0x00cb
                           0000CC   375 _TL2	=	0x00cc
                           0000CC   376 _PWM4L	=	0x00cc
                           0000CD   377 _TH2	=	0x00cd
                           0000CD   378 _PWM5L	=	0x00cd
                           0000CE   379 _ADCMPL	=	0x00ce
                           0000CF   380 _ADCMPH	=	0x00cf
                           0000D0   381 _PSW	=	0x00d0
                           0000D1   382 _PWMPH	=	0x00d1
                           0000D2   383 _PWM0H	=	0x00d2
                           0000D3   384 _PWM1H	=	0x00d3
                           0000D4   385 _PWM2H	=	0x00d4
                           0000D5   386 _PWM3H	=	0x00d5
                           0000D6   387 _PNP	=	0x00d6
                           0000D7   388 _FBD	=	0x00d7
                           0000D8   389 _PWMCON0	=	0x00d8
                           0000D9   390 _PWMPL	=	0x00d9
                           0000DA   391 _PWM0L	=	0x00da
                           0000DB   392 _PWM1L	=	0x00db
                           0000DC   393 _PWM2L	=	0x00dc
                           0000DD   394 _PWM3L	=	0x00dd
                           0000DE   395 _PIOCON0	=	0x00de
                           0000DF   396 _PWMCON1	=	0x00df
                           0000E0   397 _ACC	=	0x00e0
                           0000E1   398 _ADCCON1	=	0x00e1
                           0000E2   399 _ADCCON2	=	0x00e2
                           0000E3   400 _ADCDLY	=	0x00e3
                           0000E4   401 _C0L	=	0x00e4
                           0000E5   402 _C0H	=	0x00e5
                           0000E6   403 _C1L	=	0x00e6
                           0000E7   404 _C1H	=	0x00e7
                           0000E8   405 _ADCCON0	=	0x00e8
                           0000E9   406 _PICON	=	0x00e9
                           0000EA   407 _PINEN	=	0x00ea
                           0000EB   408 _PIPEN	=	0x00eb
                           0000EC   409 _PIF	=	0x00ec
                           0000ED   410 _C2L	=	0x00ed
                           0000EE   411 _C2H	=	0x00ee
                           0000EF   412 _EIP	=	0x00ef
                           0000F0   413 _B	=	0x00f0
                           0000F1   414 _CAPCON3	=	0x00f1
                           0000F2   415 _CAPCON4	=	0x00f2
                           0000F3   416 _SPCR	=	0x00f3
                           0000F3   417 _SPCR2	=	0x00f3
                           0000F4   418 _SPSR	=	0x00f4
                           0000F5   419 _SPDR	=	0x00f5
                           0000F6   420 _AINDIDS	=	0x00f6
                           0000F7   421 _EIPH	=	0x00f7
                           0000F8   422 _SCON_1	=	0x00f8
                           0000F9   423 _PDTEN	=	0x00f9
                           0000FA   424 _PDTCNT	=	0x00fa
                           0000FB   425 _PMEN	=	0x00fb
                           0000FC   426 _PMD	=	0x00fc
                           0000FE   427 _EIP1	=	0x00fe
                           0000FF   428 _EIPH1	=	0x00ff
                                    429 ;--------------------------------------------------------
                                    430 ; special function bits
                                    431 ;--------------------------------------------------------
                                    432 	.area RSEG    (ABS,DATA)
      000000                        433 	.org 0x0000
                           0000FF   434 _SM0_1	=	0x00ff
                           0000FF   435 _FE_1	=	0x00ff
                           0000FE   436 _SM1_1	=	0x00fe
                           0000FD   437 _SM2_1	=	0x00fd
                           0000FC   438 _REN_1	=	0x00fc
                           0000FB   439 _TB8_1	=	0x00fb
                           0000FA   440 _RB8_1	=	0x00fa
                           0000F9   441 _TI_1	=	0x00f9
                           0000F8   442 _RI_1	=	0x00f8
                           0000EF   443 _ADCF	=	0x00ef
                           0000EE   444 _ADCS	=	0x00ee
                           0000ED   445 _ETGSEL1	=	0x00ed
                           0000EC   446 _ETGSEL0	=	0x00ec
                           0000EB   447 _ADCHS3	=	0x00eb
                           0000EA   448 _ADCHS2	=	0x00ea
                           0000E9   449 _ADCHS1	=	0x00e9
                           0000E8   450 _ADCHS0	=	0x00e8
                           0000DF   451 _PWMRUN	=	0x00df
                           0000DE   452 _LOAD	=	0x00de
                           0000DD   453 _PWMF	=	0x00dd
                           0000DC   454 _CLRPWM	=	0x00dc
                           0000D7   455 _CY	=	0x00d7
                           0000D6   456 _AC	=	0x00d6
                           0000D5   457 _F0	=	0x00d5
                           0000D4   458 _RS1	=	0x00d4
                           0000D3   459 _RS0	=	0x00d3
                           0000D2   460 _OV	=	0x00d2
                           0000D0   461 _P	=	0x00d0
                           0000CF   462 _TF2	=	0x00cf
                           0000CA   463 _TR2	=	0x00ca
                           0000C8   464 _CM_RL2	=	0x00c8
                           0000C6   465 _I2CEN	=	0x00c6
                           0000C5   466 _STA	=	0x00c5
                           0000C4   467 _STO	=	0x00c4
                           0000C3   468 _SI	=	0x00c3
                           0000C2   469 _AA	=	0x00c2
                           0000C0   470 _I2CPX	=	0x00c0
                           0000BE   471 _PADC	=	0x00be
                           0000BD   472 _PBOD	=	0x00bd
                           0000BC   473 _PS	=	0x00bc
                           0000BB   474 _PT1	=	0x00bb
                           0000BA   475 _PX1	=	0x00ba
                           0000B9   476 _PT0	=	0x00b9
                           0000B8   477 _PX0	=	0x00b8
                           0000B0   478 _P30	=	0x00b0
                           0000AF   479 _EA	=	0x00af
                           0000AE   480 _EADC	=	0x00ae
                           0000AD   481 _EBOD	=	0x00ad
                           0000AC   482 _ES	=	0x00ac
                           0000AB   483 _ET1	=	0x00ab
                           0000AA   484 _EX1	=	0x00aa
                           0000A9   485 _ET0	=	0x00a9
                           0000A8   486 _EX0	=	0x00a8
                           0000A0   487 _P20	=	0x00a0
                           00009F   488 _SM0	=	0x009f
                           00009F   489 _FE	=	0x009f
                           00009E   490 _SM1	=	0x009e
                           00009D   491 _SM2	=	0x009d
                           00009C   492 _REN	=	0x009c
                           00009B   493 _TB8	=	0x009b
                           00009A   494 _RB8	=	0x009a
                           000099   495 _TI	=	0x0099
                           000098   496 _RI	=	0x0098
                           000097   497 _P17	=	0x0097
                           000096   498 _P16	=	0x0096
                           000096   499 _TXD_1	=	0x0096
                           000095   500 _P15	=	0x0095
                           000094   501 _P14	=	0x0094
                           000094   502 _SDA	=	0x0094
                           000093   503 _P13	=	0x0093
                           000093   504 _SCL	=	0x0093
                           000092   505 _P12	=	0x0092
                           000091   506 _P11	=	0x0091
                           000090   507 _P10	=	0x0090
                           00008F   508 _TF1	=	0x008f
                           00008E   509 _TR1	=	0x008e
                           00008D   510 _TF0	=	0x008d
                           00008C   511 _TR0	=	0x008c
                           00008B   512 _IE1	=	0x008b
                           00008A   513 _IT1	=	0x008a
                           000089   514 _IE0	=	0x0089
                           000088   515 _IT0	=	0x0088
                           000087   516 _P07	=	0x0087
                           000087   517 _RXD	=	0x0087
                           000086   518 _P06	=	0x0086
                           000086   519 _TXD	=	0x0086
                           000085   520 _P05	=	0x0085
                           000084   521 _P04	=	0x0084
                           000084   522 _STADC	=	0x0084
                           000083   523 _P03	=	0x0083
                           000082   524 _P02	=	0x0082
                           000082   525 _RXD_1	=	0x0082
                           000081   526 _P01	=	0x0081
                           000081   527 _MISO	=	0x0081
                           000080   528 _P00	=	0x0080
                           000080   529 _MOSI	=	0x0080
                                    530 ;--------------------------------------------------------
                                    531 ; overlayable register banks
                                    532 ;--------------------------------------------------------
                                    533 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        534 	.ds 8
                                    535 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        536 	.ds 8
                                    537 ;--------------------------------------------------------
                                    538 ; internal ram data
                                    539 ;--------------------------------------------------------
                                    540 	.area DSEG    (DATA)
      000000                        541 _gu8UART::
      000000                        542 	.ds 1
      000001                        543 _state_machine_PARM_2:
      000001                        544 	.ds 1
      000002                        545 _state_machine_PARM_3:
      000002                        546 	.ds 1
      000003                        547 _state_machine_PARM_4:
      000003                        548 	.ds 1
      000004                        549 _state_switches_su8PrevSW_65536_83:
      000004                        550 	.ds 1
      000005                        551 _printoutbuf_PARM_2:
      000005                        552 	.ds 3
      000008                        553 _act_by_one_key_PARM_2:
      000008                        554 	.ds 3
      00000B                        555 _act_by_one_key_PARM_3:
      00000B                        556 	.ds 3
      00000E                        557 _act_by_one_key_sloc0_1_0:
      00000E                        558 	.ds 3
      000011                        559 _periodic_func_su8Cnt_65536_110:
      000011                        560 	.ds 1
      000012                        561 _main_u8RxUART_65536_112:
      000012                        562 	.ds 1
      000013                        563 _main_u8LineFiAddr_65536_112:
      000013                        564 	.ds 1
      000014                        565 _main_u8LineFiCmd_65536_112:
      000014                        566 	.ds 1
      000015                        567 _main_u8SwNum_65536_112:
      000015                        568 	.ds 1
      000016                        569 _main_u8StatePeriodicSend_65536_112:
      000016                        570 	.ds 1
      000017                        571 _main_u8PSCmd_65536_112:
      000017                        572 	.ds 1
      000018                        573 _main_stLineFiPkt_65536_112:
      000018                        574 	.ds 8
                                    575 ;--------------------------------------------------------
                                    576 ; overlayable items in internal ram 
                                    577 ;--------------------------------------------------------
                                    578 	.area	OSEG    (OVR,DATA)
                                    579 	.area	OSEG    (OVR,DATA)
                                    580 	.area	OSEG    (OVR,DATA)
                                    581 	.area	OSEG    (OVR,DATA)
                                    582 	.area	OSEG    (OVR,DATA)
                                    583 	.area	OSEG    (OVR,DATA)
      000000                        584 _state_switches_PARM_2:
      000000                        585 	.ds 3
                                    586 	.area	OSEG    (OVR,DATA)
      000000                        587 _struct_to_uint8_apcPkt_65536_104:
      000000                        588 	.ds 3
      000003                        589 _struct_to_uint8_cntIdx_65536_105:
      000003                        590 	.ds 1
      000004                        591 _struct_to_uint8_i_65537_106:
      000004                        592 	.ds 1
                                    593 ;--------------------------------------------------------
                                    594 ; Stack segment in internal ram 
                                    595 ;--------------------------------------------------------
                                    596 	.area	SSEG
      000000                        597 __start__stack:
      000000                        598 	.ds	1
                                    599 
                                    600 ;--------------------------------------------------------
                                    601 ; indirectly addressable internal ram data
                                    602 ;--------------------------------------------------------
                                    603 	.area ISEG    (DATA)
                                    604 ;--------------------------------------------------------
                                    605 ; absolute internal ram data
                                    606 ;--------------------------------------------------------
                                    607 	.area IABS    (ABS,DATA)
                                    608 	.area IABS    (ABS,DATA)
                                    609 ;--------------------------------------------------------
                                    610 ; bit data
                                    611 ;--------------------------------------------------------
                                    612 	.area BSEG    (BIT)
                                    613 ;--------------------------------------------------------
                                    614 ; paged external ram data
                                    615 ;--------------------------------------------------------
                                    616 	.area PSEG    (PAG,XDATA)
                                    617 ;--------------------------------------------------------
                                    618 ; external ram data
                                    619 ;--------------------------------------------------------
                                    620 	.area XSEG    (XDATA)
      000000                        621 _pu8buff::
      000000                        622 	.ds 30
      00001E                        623 _gcUartInputMode::
      00001E                        624 	.ds 15
      00002D                        625 _gpu8Data::
      00002D                        626 	.ds 20
      000041                        627 _gpu8Data2::
      000041                        628 	.ds 20
      000055                        629 _gpu8Data3::
      000055                        630 	.ds 28
      000071                        631 _gu16TimeCnt::
      000071                        632 	.ds 2
      000073                        633 _gu16TimeCntMilliSec::
      000073                        634 	.ds 2
      000075                        635 _gpu32UartSpeed::
      000075                        636 	.ds 56
      0000AD                        637 _act_by_one_key_u8Data_65536_96:
      0000AD                        638 	.ds 1
      0000AE                        639 _main_pcBuf_65536_112:
      0000AE                        640 	.ds 100
      000112                        641 _main_pu8Data_65536_112:
      000112                        642 	.ds 10
      00011C                        643 _main_u8DataIdx_65536_112:
      00011C                        644 	.ds 1
      00011D                        645 _main_ucBufIdx_65536_112:
      00011D                        646 	.ds 1
      00011E                        647 _main_pstLineFiPkt_65536_112:
      00011E                        648 	.ds 40
      000146                        649 _main_stLineFiPkt_test_65536_112:
      000146                        650 	.ds 8
                                    651 ;--------------------------------------------------------
                                    652 ; absolute external ram data
                                    653 ;--------------------------------------------------------
                                    654 	.area XABS    (ABS,XDATA)
                                    655 ;--------------------------------------------------------
                                    656 ; external initialized ram data
                                    657 ;--------------------------------------------------------
                                    658 	.area HOME    (CODE)
                                    659 	.area GSINIT0 (CODE)
                                    660 	.area GSINIT1 (CODE)
                                    661 	.area GSINIT2 (CODE)
                                    662 	.area GSINIT3 (CODE)
                                    663 	.area GSINIT4 (CODE)
                                    664 	.area GSINIT5 (CODE)
                                    665 	.area GSINIT  (CODE)
                                    666 	.area GSFINAL (CODE)
                                    667 	.area CSEG    (CODE)
                                    668 ;--------------------------------------------------------
                                    669 ; interrupt vector 
                                    670 ;--------------------------------------------------------
                                    671 	.area HOME    (CODE)
      000000                        672 __interrupt_vect:
      000000 02r00r00         [24]  673 	ljmp	__sdcc_gsinit_startup
      000003 32               [24]  674 	reti
      000004                        675 	.ds	7
      00000B 02r01r86         [24]  676 	ljmp	_Timer0_ISR
      00000E                        677 	.ds	5
      000013 32               [24]  678 	reti
      000014                        679 	.ds	7
      00001B 32               [24]  680 	reti
      00001C                        681 	.ds	7
      000023 32               [24]  682 	reti
      000024                        683 	.ds	7
      00002B 32               [24]  684 	reti
      00002C                        685 	.ds	7
      000033 32               [24]  686 	reti
      000034                        687 	.ds	7
      00003B 02r01rB5         [24]  688 	ljmp	_pin_interrupt_isr
                                    689 ;--------------------------------------------------------
                                    690 ; global & static initialisations
                                    691 ;--------------------------------------------------------
                                    692 	.area HOME    (CODE)
                                    693 	.area GSINIT  (CODE)
                                    694 	.area GSFINAL (CODE)
                                    695 	.area GSINIT  (CODE)
                                    696 	.globl __sdcc_gsinit_startup
                                    697 	.globl __sdcc_program_startup
                                    698 	.globl __start__stack
                                    699 	.globl __mcs51_genRAMCLEAR
                                    700 ;------------------------------------------------------------
                                    701 ;Allocation info for local variables in function 'state_switches'
                                    702 ;------------------------------------------------------------
                                    703 ;su8PrevSW                 Allocated with name '_state_switches_su8PrevSW_65536_83'
                                    704 ;apu8SwNum                 Allocated with name '_state_switches_PARM_2'
                                    705 ;au8SW                     Allocated to registers r7 
                                    706 ;i                         Allocated to registers r2 
                                    707 ;u8Result                  Allocated to registers r6 
                                    708 ;------------------------------------------------------------
                                    709 ;	src/main.c:449: static UINT8 su8PrevSW = 0;
      000000 75*04 00         [24]  710 	mov	_state_switches_su8PrevSW_65536_83,#0x00
                                    711 ;------------------------------------------------------------
                                    712 ;Allocation info for local variables in function 'act_by_one_key'
                                    713 ;------------------------------------------------------------
                                    714 ;apu8LineFiCmd             Allocated with name '_act_by_one_key_PARM_2'
                                    715 ;apu8LineFiAddr            Allocated with name '_act_by_one_key_PARM_3'
                                    716 ;au8RxUART                 Allocated to registers r7 
                                    717 ;sloc0                     Allocated with name '_act_by_one_key_sloc0_1_0'
                                    718 ;u8Data                    Allocated with name '_act_by_one_key_u8Data_65536_96'
                                    719 ;------------------------------------------------------------
                                    720 ;	src/main.c:618: static UINT8 __xdata u8Data = 0;
      000003 90r00rAD         [24]  721 	mov	dptr,#_act_by_one_key_u8Data_65536_96
      000006 E4               [12]  722 	clr	a
      000007 F0               [24]  723 	movx	@dptr,a
                                    724 ;------------------------------------------------------------
                                    725 ;Allocation info for local variables in function 'periodic_func'
                                    726 ;------------------------------------------------------------
                                    727 ;su8Cnt                    Allocated with name '_periodic_func_su8Cnt_65536_110'
                                    728 ;apcStr                    Allocated to registers r5 r6 r7 
                                    729 ;total_size                Allocated to registers r4 
                                    730 ;------------------------------------------------------------
                                    731 ;	src/main.c:783: static UINT8 su8Cnt = 0;
      000008 75*11 00         [24]  732 	mov	_periodic_func_su8Cnt_65536_110,#0x00
                                    733 ;	src/main.c:142: UINT8 gu8UART = 0;
      00000B 75*00 00         [24]  734 	mov	_gu8UART,#0x00
                                    735 ;	src/main.c:79: const char * __xdata  gcUartInputMode[MAX_STATE_UART0_INPUT] = {
      00000E 90r00r1E         [24]  736 	mov	dptr,#_gcUartInputMode
      000011 74r2B            [12]  737 	mov	a,#___str_65
      000013 F0               [24]  738 	movx	@dptr,a
      000014 74s04            [12]  739 	mov	a,#(___str_65 >> 8)
      000016 A3               [24]  740 	inc	dptr
      000017 F0               [24]  741 	movx	@dptr,a
      000018 74 80            [12]  742 	mov	a,#0x80
      00001A A3               [24]  743 	inc	dptr
      00001B F0               [24]  744 	movx	@dptr,a
      00001C 90r00r21         [24]  745 	mov	dptr,#(_gcUartInputMode + 0x0003)
      00001F 74r4D            [12]  746 	mov	a,#___str_66
      000021 F0               [24]  747 	movx	@dptr,a
      000022 74s04            [12]  748 	mov	a,#(___str_66 >> 8)
      000024 A3               [24]  749 	inc	dptr
      000025 F0               [24]  750 	movx	@dptr,a
      000026 74 80            [12]  751 	mov	a,#0x80
      000028 A3               [24]  752 	inc	dptr
      000029 F0               [24]  753 	movx	@dptr,a
      00002A 90r00r24         [24]  754 	mov	dptr,#(_gcUartInputMode + 0x0006)
      00002D 74r6C            [12]  755 	mov	a,#___str_67
      00002F F0               [24]  756 	movx	@dptr,a
      000030 74s04            [12]  757 	mov	a,#(___str_67 >> 8)
      000032 A3               [24]  758 	inc	dptr
      000033 F0               [24]  759 	movx	@dptr,a
      000034 74 80            [12]  760 	mov	a,#0x80
      000036 A3               [24]  761 	inc	dptr
      000037 F0               [24]  762 	movx	@dptr,a
      000038 90r00r27         [24]  763 	mov	dptr,#(_gcUartInputMode + 0x0009)
      00003B 74r93            [12]  764 	mov	a,#___str_68
      00003D F0               [24]  765 	movx	@dptr,a
      00003E 74s04            [12]  766 	mov	a,#(___str_68 >> 8)
      000040 A3               [24]  767 	inc	dptr
      000041 F0               [24]  768 	movx	@dptr,a
      000042 74 80            [12]  769 	mov	a,#0x80
      000044 A3               [24]  770 	inc	dptr
      000045 F0               [24]  771 	movx	@dptr,a
      000046 90r00r2A         [24]  772 	mov	dptr,#(_gcUartInputMode + 0x000c)
      000049 74rB2            [12]  773 	mov	a,#___str_69
      00004B F0               [24]  774 	movx	@dptr,a
      00004C 74s04            [12]  775 	mov	a,#(___str_69 >> 8)
      00004E A3               [24]  776 	inc	dptr
      00004F F0               [24]  777 	movx	@dptr,a
      000050 74 80            [12]  778 	mov	a,#0x80
      000052 A3               [24]  779 	inc	dptr
      000053 F0               [24]  780 	movx	@dptr,a
                                    781 ;	src/main.c:96: UINT8 __xdata gpu8Data[20] = {
      000054 90r00r2D         [24]  782 	mov	dptr,#_gpu8Data
      000057 23               [12]  783 	rl	a
      000058 F0               [24]  784 	movx	@dptr,a
      000059 90r00r2E         [24]  785 	mov	dptr,#(_gpu8Data + 0x0001)
      00005C F0               [24]  786 	movx	@dptr,a
      00005D 90r00r2F         [24]  787 	mov	dptr,#(_gpu8Data + 0x0002)
      000060 F0               [24]  788 	movx	@dptr,a
      000061 90r00r30         [24]  789 	mov	dptr,#(_gpu8Data + 0x0003)
      000064 F0               [24]  790 	movx	@dptr,a
      000065 90r00r31         [24]  791 	mov	dptr,#(_gpu8Data + 0x0004)
      000068 04               [12]  792 	inc	a
      000069 F0               [24]  793 	movx	@dptr,a
      00006A 90r00r32         [24]  794 	mov	dptr,#(_gpu8Data + 0x0005)
      00006D F0               [24]  795 	movx	@dptr,a
      00006E 90r00r33         [24]  796 	mov	dptr,#(_gpu8Data + 0x0006)
      000071 F0               [24]  797 	movx	@dptr,a
      000072 90r00r34         [24]  798 	mov	dptr,#(_gpu8Data + 0x0007)
      000075 F0               [24]  799 	movx	@dptr,a
      000076 90r00r35         [24]  800 	mov	dptr,#(_gpu8Data + 0x0008)
      000079 04               [12]  801 	inc	a
      00007A F0               [24]  802 	movx	@dptr,a
      00007B 90r00r36         [24]  803 	mov	dptr,#(_gpu8Data + 0x0009)
      00007E F0               [24]  804 	movx	@dptr,a
      00007F 90r00r37         [24]  805 	mov	dptr,#(_gpu8Data + 0x000a)
      000082 F0               [24]  806 	movx	@dptr,a
      000083 90r00r38         [24]  807 	mov	dptr,#(_gpu8Data + 0x000b)
      000086 F0               [24]  808 	movx	@dptr,a
      000087 90r00r39         [24]  809 	mov	dptr,#(_gpu8Data + 0x000c)
      00008A 04               [12]  810 	inc	a
      00008B F0               [24]  811 	movx	@dptr,a
      00008C 90r00r3A         [24]  812 	mov	dptr,#(_gpu8Data + 0x000d)
      00008F F0               [24]  813 	movx	@dptr,a
      000090 90r00r3B         [24]  814 	mov	dptr,#(_gpu8Data + 0x000e)
      000093 F0               [24]  815 	movx	@dptr,a
      000094 90r00r3C         [24]  816 	mov	dptr,#(_gpu8Data + 0x000f)
      000097 F0               [24]  817 	movx	@dptr,a
      000098 90r00r3D         [24]  818 	mov	dptr,#(_gpu8Data + 0x0010)
      00009B 04               [12]  819 	inc	a
      00009C F0               [24]  820 	movx	@dptr,a
      00009D 90r00r3E         [24]  821 	mov	dptr,#(_gpu8Data + 0x0011)
      0000A0 F0               [24]  822 	movx	@dptr,a
      0000A1 90r00r3F         [24]  823 	mov	dptr,#(_gpu8Data + 0x0012)
      0000A4 F0               [24]  824 	movx	@dptr,a
      0000A5 90r00r40         [24]  825 	mov	dptr,#(_gpu8Data + 0x0013)
      0000A8 F0               [24]  826 	movx	@dptr,a
                                    827 ;	src/main.c:104: UINT8 __xdata gpu8Data2[20] = {
      0000A9 90r00r41         [24]  828 	mov	dptr,#_gpu8Data2
      0000AC 74 02            [12]  829 	mov	a,#0x02
      0000AE F0               [24]  830 	movx	@dptr,a
      0000AF 90r00r42         [24]  831 	mov	dptr,#(_gpu8Data2 + 0x0001)
      0000B2 F0               [24]  832 	movx	@dptr,a
      0000B3 90r00r43         [24]  833 	mov	dptr,#(_gpu8Data2 + 0x0002)
      0000B6 F0               [24]  834 	movx	@dptr,a
      0000B7 90r00r44         [24]  835 	mov	dptr,#(_gpu8Data2 + 0x0003)
      0000BA F0               [24]  836 	movx	@dptr,a
      0000BB 90r00r45         [24]  837 	mov	dptr,#(_gpu8Data2 + 0x0004)
      0000BE 14               [12]  838 	dec	a
      0000BF F0               [24]  839 	movx	@dptr,a
      0000C0 90r00r46         [24]  840 	mov	dptr,#(_gpu8Data2 + 0x0005)
      0000C3 F0               [24]  841 	movx	@dptr,a
      0000C4 90r00r47         [24]  842 	mov	dptr,#(_gpu8Data2 + 0x0006)
      0000C7 F0               [24]  843 	movx	@dptr,a
      0000C8 90r00r48         [24]  844 	mov	dptr,#(_gpu8Data2 + 0x0007)
      0000CB F0               [24]  845 	movx	@dptr,a
      0000CC 90r00r49         [24]  846 	mov	dptr,#(_gpu8Data2 + 0x0008)
      0000CF 74 04            [12]  847 	mov	a,#0x04
      0000D1 F0               [24]  848 	movx	@dptr,a
      0000D2 90r00r4A         [24]  849 	mov	dptr,#(_gpu8Data2 + 0x0009)
      0000D5 F0               [24]  850 	movx	@dptr,a
      0000D6 90r00r4B         [24]  851 	mov	dptr,#(_gpu8Data2 + 0x000a)
      0000D9 F0               [24]  852 	movx	@dptr,a
      0000DA 90r00r4C         [24]  853 	mov	dptr,#(_gpu8Data2 + 0x000b)
      0000DD F0               [24]  854 	movx	@dptr,a
      0000DE 90r00r4D         [24]  855 	mov	dptr,#(_gpu8Data2 + 0x000c)
      0000E1 14               [12]  856 	dec	a
      0000E2 F0               [24]  857 	movx	@dptr,a
      0000E3 90r00r4E         [24]  858 	mov	dptr,#(_gpu8Data2 + 0x000d)
      0000E6 F0               [24]  859 	movx	@dptr,a
      0000E7 90r00r4F         [24]  860 	mov	dptr,#(_gpu8Data2 + 0x000e)
      0000EA F0               [24]  861 	movx	@dptr,a
      0000EB 90r00r50         [24]  862 	mov	dptr,#(_gpu8Data2 + 0x000f)
      0000EE F0               [24]  863 	movx	@dptr,a
      0000EF 90r00r51         [24]  864 	mov	dptr,#(_gpu8Data2 + 0x0010)
      0000F2 74 05            [12]  865 	mov	a,#0x05
      0000F4 F0               [24]  866 	movx	@dptr,a
      0000F5 90r00r52         [24]  867 	mov	dptr,#(_gpu8Data2 + 0x0011)
      0000F8 F0               [24]  868 	movx	@dptr,a
      0000F9 90r00r53         [24]  869 	mov	dptr,#(_gpu8Data2 + 0x0012)
      0000FC F0               [24]  870 	movx	@dptr,a
      0000FD 90r00r54         [24]  871 	mov	dptr,#(_gpu8Data2 + 0x0013)
      000100 F0               [24]  872 	movx	@dptr,a
                                    873 ;	src/main.c:111: UINT8 __xdata gpu8Data3[28] = {
      000101 90r00r55         [24]  874 	mov	dptr,#_gpu8Data3
      000104 74 02            [12]  875 	mov	a,#0x02
      000106 F0               [24]  876 	movx	@dptr,a
      000107 90r00r56         [24]  877 	mov	dptr,#(_gpu8Data3 + 0x0001)
      00010A F0               [24]  878 	movx	@dptr,a
      00010B 90r00r57         [24]  879 	mov	dptr,#(_gpu8Data3 + 0x0002)
      00010E F0               [24]  880 	movx	@dptr,a
      00010F 90r00r58         [24]  881 	mov	dptr,#(_gpu8Data3 + 0x0003)
      000112 F0               [24]  882 	movx	@dptr,a
      000113 90r00r59         [24]  883 	mov	dptr,#(_gpu8Data3 + 0x0004)
      000116 14               [12]  884 	dec	a
      000117 F0               [24]  885 	movx	@dptr,a
      000118 90r00r5A         [24]  886 	mov	dptr,#(_gpu8Data3 + 0x0005)
      00011B F0               [24]  887 	movx	@dptr,a
      00011C 90r00r5B         [24]  888 	mov	dptr,#(_gpu8Data3 + 0x0006)
      00011F F0               [24]  889 	movx	@dptr,a
      000120 90r00r5C         [24]  890 	mov	dptr,#(_gpu8Data3 + 0x0007)
      000123 F0               [24]  891 	movx	@dptr,a
      000124 90r00r5D         [24]  892 	mov	dptr,#(_gpu8Data3 + 0x0008)
      000127 74 04            [12]  893 	mov	a,#0x04
      000129 F0               [24]  894 	movx	@dptr,a
      00012A 90r00r5E         [24]  895 	mov	dptr,#(_gpu8Data3 + 0x0009)
      00012D F0               [24]  896 	movx	@dptr,a
      00012E 90r00r5F         [24]  897 	mov	dptr,#(_gpu8Data3 + 0x000a)
      000131 F0               [24]  898 	movx	@dptr,a
      000132 90r00r60         [24]  899 	mov	dptr,#(_gpu8Data3 + 0x000b)
      000135 F0               [24]  900 	movx	@dptr,a
      000136 90r00r61         [24]  901 	mov	dptr,#(_gpu8Data3 + 0x000c)
      000139 14               [12]  902 	dec	a
      00013A F0               [24]  903 	movx	@dptr,a
      00013B 90r00r62         [24]  904 	mov	dptr,#(_gpu8Data3 + 0x000d)
      00013E F0               [24]  905 	movx	@dptr,a
      00013F 90r00r63         [24]  906 	mov	dptr,#(_gpu8Data3 + 0x000e)
      000142 F0               [24]  907 	movx	@dptr,a
      000143 90r00r64         [24]  908 	mov	dptr,#(_gpu8Data3 + 0x000f)
      000146 F0               [24]  909 	movx	@dptr,a
      000147 90r00r65         [24]  910 	mov	dptr,#(_gpu8Data3 + 0x0010)
      00014A 74 05            [12]  911 	mov	a,#0x05
      00014C F0               [24]  912 	movx	@dptr,a
      00014D 90r00r66         [24]  913 	mov	dptr,#(_gpu8Data3 + 0x0011)
      000150 F0               [24]  914 	movx	@dptr,a
      000151 90r00r67         [24]  915 	mov	dptr,#(_gpu8Data3 + 0x0012)
      000154 F0               [24]  916 	movx	@dptr,a
      000155 90r00r68         [24]  917 	mov	dptr,#(_gpu8Data3 + 0x0013)
      000158 F0               [24]  918 	movx	@dptr,a
      000159 90r00r69         [24]  919 	mov	dptr,#(_gpu8Data3 + 0x0014)
      00015C F0               [24]  920 	movx	@dptr,a
      00015D 90r00r6A         [24]  921 	mov	dptr,#(_gpu8Data3 + 0x0015)
      000160 F0               [24]  922 	movx	@dptr,a
      000161 90r00r6B         [24]  923 	mov	dptr,#(_gpu8Data3 + 0x0016)
      000164 F0               [24]  924 	movx	@dptr,a
      000165 90r00r6C         [24]  925 	mov	dptr,#(_gpu8Data3 + 0x0017)
      000168 F0               [24]  926 	movx	@dptr,a
      000169 90r00r6D         [24]  927 	mov	dptr,#(_gpu8Data3 + 0x0018)
      00016C F0               [24]  928 	movx	@dptr,a
      00016D 90r00r6E         [24]  929 	mov	dptr,#(_gpu8Data3 + 0x0019)
      000170 F0               [24]  930 	movx	@dptr,a
      000171 90r00r6F         [24]  931 	mov	dptr,#(_gpu8Data3 + 0x001a)
      000174 F0               [24]  932 	movx	@dptr,a
      000175 90r00r70         [24]  933 	mov	dptr,#(_gpu8Data3 + 0x001b)
      000178 F0               [24]  934 	movx	@dptr,a
                                    935 ;	src/main.c:125: UINT32 __xdata gpu32UartSpeed[] = {
      000179 90r00r75         [24]  936 	mov	dptr,#_gpu32UartSpeed
      00017C 74 60            [12]  937 	mov	a,#0x60
      00017E F0               [24]  938 	movx	@dptr,a
      00017F 74 09            [12]  939 	mov	a,#0x09
      000181 A3               [24]  940 	inc	dptr
      000182 F0               [24]  941 	movx	@dptr,a
      000183 E4               [12]  942 	clr	a
      000184 A3               [24]  943 	inc	dptr
      000185 F0               [24]  944 	movx	@dptr,a
      000186 A3               [24]  945 	inc	dptr
      000187 F0               [24]  946 	movx	@dptr,a
      000188 90r00r79         [24]  947 	mov	dptr,#(_gpu32UartSpeed + 0x0004)
      00018B 74 80            [12]  948 	mov	a,#0x80
      00018D F0               [24]  949 	movx	@dptr,a
      00018E 74 70            [12]  950 	mov	a,#0x70
      000190 A3               [24]  951 	inc	dptr
      000191 F0               [24]  952 	movx	@dptr,a
      000192 E4               [12]  953 	clr	a
      000193 A3               [24]  954 	inc	dptr
      000194 F0               [24]  955 	movx	@dptr,a
      000195 A3               [24]  956 	inc	dptr
      000196 F0               [24]  957 	movx	@dptr,a
      000197 90r00r7D         [24]  958 	mov	dptr,#(_gpu32UartSpeed + 0x0008)
      00019A F0               [24]  959 	movx	@dptr,a
      00019B 74 96            [12]  960 	mov	a,#0x96
      00019D A3               [24]  961 	inc	dptr
      00019E F0               [24]  962 	movx	@dptr,a
      00019F E4               [12]  963 	clr	a
      0001A0 A3               [24]  964 	inc	dptr
      0001A1 F0               [24]  965 	movx	@dptr,a
      0001A2 A3               [24]  966 	inc	dptr
      0001A3 F0               [24]  967 	movx	@dptr,a
      0001A4 90r00r81         [24]  968 	mov	dptr,#(_gpu32UartSpeed + 0x000c)
      0001A7 F0               [24]  969 	movx	@dptr,a
      0001A8 74 E1            [12]  970 	mov	a,#0xe1
      0001AA A3               [24]  971 	inc	dptr
      0001AB F0               [24]  972 	movx	@dptr,a
      0001AC E4               [12]  973 	clr	a
      0001AD A3               [24]  974 	inc	dptr
      0001AE F0               [24]  975 	movx	@dptr,a
      0001AF A3               [24]  976 	inc	dptr
      0001B0 F0               [24]  977 	movx	@dptr,a
      0001B1 90r00r85         [24]  978 	mov	dptr,#(_gpu32UartSpeed + 0x0010)
      0001B4 F0               [24]  979 	movx	@dptr,a
      0001B5 74 C2            [12]  980 	mov	a,#0xc2
      0001B7 A3               [24]  981 	inc	dptr
      0001B8 F0               [24]  982 	movx	@dptr,a
      0001B9 74 01            [12]  983 	mov	a,#0x01
      0001BB A3               [24]  984 	inc	dptr
      0001BC F0               [24]  985 	movx	@dptr,a
      0001BD E4               [12]  986 	clr	a
      0001BE A3               [24]  987 	inc	dptr
      0001BF F0               [24]  988 	movx	@dptr,a
      0001C0 90r00r89         [24]  989 	mov	dptr,#(_gpu32UartSpeed + 0x0014)
      0001C3 F0               [24]  990 	movx	@dptr,a
      0001C4 74 84            [12]  991 	mov	a,#0x84
      0001C6 A3               [24]  992 	inc	dptr
      0001C7 F0               [24]  993 	movx	@dptr,a
      0001C8 74 03            [12]  994 	mov	a,#0x03
      0001CA A3               [24]  995 	inc	dptr
      0001CB F0               [24]  996 	movx	@dptr,a
      0001CC E4               [12]  997 	clr	a
      0001CD A3               [24]  998 	inc	dptr
      0001CE F0               [24]  999 	movx	@dptr,a
      0001CF 90r00r8D         [24] 1000 	mov	dptr,#(_gpu32UartSpeed + 0x0018)
      0001D2 74 E0            [12] 1001 	mov	a,#0xe0
      0001D4 F0               [24] 1002 	movx	@dptr,a
      0001D5 74 93            [12] 1003 	mov	a,#0x93
      0001D7 A3               [24] 1004 	inc	dptr
      0001D8 F0               [24] 1005 	movx	@dptr,a
      0001D9 74 04            [12] 1006 	mov	a,#0x04
      0001DB A3               [24] 1007 	inc	dptr
      0001DC F0               [24] 1008 	movx	@dptr,a
      0001DD E4               [12] 1009 	clr	a
      0001DE A3               [24] 1010 	inc	dptr
      0001DF F0               [24] 1011 	movx	@dptr,a
      0001E0 90r00r91         [24] 1012 	mov	dptr,#(_gpu32UartSpeed + 0x001c)
      0001E3 F0               [24] 1013 	movx	@dptr,a
      0001E4 74 08            [12] 1014 	mov	a,#0x08
      0001E6 A3               [24] 1015 	inc	dptr
      0001E7 F0               [24] 1016 	movx	@dptr,a
      0001E8 14               [12] 1017 	dec	a
      0001E9 A3               [24] 1018 	inc	dptr
      0001EA F0               [24] 1019 	movx	@dptr,a
      0001EB E4               [12] 1020 	clr	a
      0001EC A3               [24] 1021 	inc	dptr
      0001ED F0               [24] 1022 	movx	@dptr,a
      0001EE 90r00r95         [24] 1023 	mov	dptr,#(_gpu32UartSpeed + 0x0020)
      0001F1 74 20            [12] 1024 	mov	a,#0x20
      0001F3 F0               [24] 1025 	movx	@dptr,a
      0001F4 74 A1            [12] 1026 	mov	a,#0xa1
      0001F6 A3               [24] 1027 	inc	dptr
      0001F7 F0               [24] 1028 	movx	@dptr,a
      0001F8 74 07            [12] 1029 	mov	a,#0x07
      0001FA A3               [24] 1030 	inc	dptr
      0001FB F0               [24] 1031 	movx	@dptr,a
      0001FC E4               [12] 1032 	clr	a
      0001FD A3               [24] 1033 	inc	dptr
      0001FE F0               [24] 1034 	movx	@dptr,a
      0001FF 90r00r99         [24] 1035 	mov	dptr,#(_gpu32UartSpeed + 0x0024)
      000202 74 C0            [12] 1036 	mov	a,#0xc0
      000204 F0               [24] 1037 	movx	@dptr,a
      000205 74 27            [12] 1038 	mov	a,#0x27
      000207 A3               [24] 1039 	inc	dptr
      000208 F0               [24] 1040 	movx	@dptr,a
      000209 74 09            [12] 1041 	mov	a,#0x09
      00020B A3               [24] 1042 	inc	dptr
      00020C F0               [24] 1043 	movx	@dptr,a
      00020D E4               [12] 1044 	clr	a
      00020E A3               [24] 1045 	inc	dptr
      00020F F0               [24] 1046 	movx	@dptr,a
      000210 90r00r9D         [24] 1047 	mov	dptr,#(_gpu32UartSpeed + 0x0028)
      000213 74 60            [12] 1048 	mov	a,#0x60
      000215 F0               [24] 1049 	movx	@dptr,a
      000216 74 AE            [12] 1050 	mov	a,#0xae
      000218 A3               [24] 1051 	inc	dptr
      000219 F0               [24] 1052 	movx	@dptr,a
      00021A 74 0A            [12] 1053 	mov	a,#0x0a
      00021C A3               [24] 1054 	inc	dptr
      00021D F0               [24] 1055 	movx	@dptr,a
      00021E E4               [12] 1056 	clr	a
      00021F A3               [24] 1057 	inc	dptr
      000220 F0               [24] 1058 	movx	@dptr,a
      000221 90r00rA1         [24] 1059 	mov	dptr,#(_gpu32UartSpeed + 0x002c)
      000224 F0               [24] 1060 	movx	@dptr,a
      000225 74 35            [12] 1061 	mov	a,#0x35
      000227 A3               [24] 1062 	inc	dptr
      000228 F0               [24] 1063 	movx	@dptr,a
      000229 74 0C            [12] 1064 	mov	a,#0x0c
      00022B A3               [24] 1065 	inc	dptr
      00022C F0               [24] 1066 	movx	@dptr,a
      00022D E4               [12] 1067 	clr	a
      00022E A3               [24] 1068 	inc	dptr
      00022F F0               [24] 1069 	movx	@dptr,a
      000230 90r00rA5         [24] 1070 	mov	dptr,#(_gpu32UartSpeed + 0x0030)
      000233 74 A0            [12] 1071 	mov	a,#0xa0
      000235 F0               [24] 1072 	movx	@dptr,a
      000236 74 BB            [12] 1073 	mov	a,#0xbb
      000238 A3               [24] 1074 	inc	dptr
      000239 F0               [24] 1075 	movx	@dptr,a
      00023A 74 0D            [12] 1076 	mov	a,#0x0d
      00023C A3               [24] 1077 	inc	dptr
      00023D F0               [24] 1078 	movx	@dptr,a
      00023E E4               [12] 1079 	clr	a
      00023F A3               [24] 1080 	inc	dptr
      000240 F0               [24] 1081 	movx	@dptr,a
      000241 90r00rA9         [24] 1082 	mov	dptr,#(_gpu32UartSpeed + 0x0034)
      000244 F0               [24] 1083 	movx	@dptr,a
      000245 74 10            [12] 1084 	mov	a,#0x10
      000247 A3               [24] 1085 	inc	dptr
      000248 F0               [24] 1086 	movx	@dptr,a
      000249 74 0E            [12] 1087 	mov	a,#0x0e
      00024B A3               [24] 1088 	inc	dptr
      00024C F0               [24] 1089 	movx	@dptr,a
      00024D E4               [12] 1090 	clr	a
      00024E A3               [24] 1091 	inc	dptr
      00024F F0               [24] 1092 	movx	@dptr,a
                                   1093 	.area GSFINAL (CODE)
      000000 02r00r3E         [24] 1094 	ljmp	__sdcc_program_startup
                                   1095 ;--------------------------------------------------------
                                   1096 ; Home
                                   1097 ;--------------------------------------------------------
                                   1098 	.area HOME    (CODE)
                                   1099 	.area HOME    (CODE)
      00003E                       1100 __sdcc_program_startup:
      00003E 02r0DrA9         [24] 1101 	ljmp	_main
                                   1102 ;	return from main will return to caller
                                   1103 ;--------------------------------------------------------
                                   1104 ; code
                                   1105 ;--------------------------------------------------------
                                   1106 	.area CSEG    (CODE)
                                   1107 ;------------------------------------------------------------
                                   1108 ;Allocation info for local variables in function 'putchar'
                                   1109 ;------------------------------------------------------------
                                   1110 ;c                         Allocated to registers r6 r7 
                                   1111 ;------------------------------------------------------------
                                   1112 ;	src/main.c:145: int putchar (int c) 
                                   1113 ;	-----------------------------------------
                                   1114 ;	 function putchar
                                   1115 ;	-----------------------------------------
      000000                       1116 _putchar:
                           000007  1117 	ar7 = 0x07
                           000006  1118 	ar6 = 0x06
                           000005  1119 	ar5 = 0x05
                           000004  1120 	ar4 = 0x04
                           000003  1121 	ar3 = 0x03
                           000002  1122 	ar2 = 0x02
                           000001  1123 	ar1 = 0x01
                           000000  1124 	ar0 = 0x00
      000000 AE 82            [24] 1125 	mov	r6,dpl
                                   1126 ;	src/main.c:147: if (gu8UART == 0)  {
      000002 E5*00            [12] 1127 	mov	a,_gu8UART
      000004 70 09            [24] 1128 	jnz	00108$
                                   1129 ;	src/main.c:148: TI = 0;
                                   1130 ;	assignBit
      000006 C2 99            [12] 1131 	clr	_TI
                                   1132 ;	src/main.c:149: SBUF = c;
      000008 8E 99            [24] 1133 	mov	_SBUF,r6
                                   1134 ;	src/main.c:150: while(TI==0);
      00000A                       1135 00101$:
      00000A 20 99 09         [24] 1136 	jb	_TI,00109$
      00000D 80 FB            [24] 1137 	sjmp	00101$
      00000F                       1138 00108$:
                                   1139 ;	src/main.c:153: TI_1 = 0;
                                   1140 ;	assignBit
      00000F C2 F9            [12] 1141 	clr	_TI_1
                                   1142 ;	src/main.c:154: SBUF_1 = c;
      000011 8E 9A            [24] 1143 	mov	_SBUF_1,r6
                                   1144 ;	src/main.c:155: while(TI_1==0);
      000013                       1145 00104$:
      000013 30 F9 FD         [24] 1146 	jnb	_TI_1,00104$
      000016                       1147 00109$:
                                   1148 ;	src/main.c:157: return 0;
      000016 90 00 00         [24] 1149 	mov	dptr,#0x0000
                                   1150 ;	src/main.c:158: }
      000019 22               [24] 1151 	ret
                                   1152 ;------------------------------------------------------------
                                   1153 ;Allocation info for local variables in function 'print_esc'
                                   1154 ;------------------------------------------------------------
                                   1155 ;au8State                  Allocated to registers r7 
                                   1156 ;------------------------------------------------------------
                                   1157 ;	src/main.c:175: void print_esc(UINT8 au8State)
                                   1158 ;	-----------------------------------------
                                   1159 ;	 function print_esc
                                   1160 ;	-----------------------------------------
      00001A                       1161 _print_esc:
      00001A AF 82            [24] 1162 	mov	r7,dpl
                                   1163 ;	src/main.c:177: printf_fast_f("\n\r");
      00001C C0 07            [24] 1164 	push	ar7
      00001E 74r00            [12] 1165 	mov	a,#___str_0
      000020 C0 E0            [24] 1166 	push	acc
      000022 74s00            [12] 1167 	mov	a,#(___str_0 >> 8)
      000024 C0 E0            [24] 1168 	push	acc
      000026 12r00r00         [24] 1169 	lcall	_printf_fast_f
      000029 15 81            [12] 1170 	dec	sp
      00002B 15 81            [12] 1171 	dec	sp
      00002D D0 07            [24] 1172 	pop	ar7
                                   1173 ;	src/main.c:178: switch(au8State) {
      00002F BF 00 02         [24] 1174 	cjne	r7,#0x00,00119$
      000032 80 0A            [24] 1175 	sjmp	00101$
      000034                       1176 00119$:
      000034 BF 01 02         [24] 1177 	cjne	r7,#0x01,00120$
      000037 80 16            [24] 1178 	sjmp	00102$
      000039                       1179 00120$:
                                   1180 ;	src/main.c:179: case STATE_SELF :
      000039 BF 02 33         [24] 1181 	cjne	r7,#0x02,00104$
      00003C 80 22            [24] 1182 	sjmp	00103$
      00003E                       1183 00101$:
                                   1184 ;	src/main.c:180: printf_fast_f("self ");
      00003E 74r03            [12] 1185 	mov	a,#___str_1
      000040 C0 E0            [24] 1186 	push	acc
      000042 74s00            [12] 1187 	mov	a,#(___str_1 >> 8)
      000044 C0 E0            [24] 1188 	push	acc
      000046 12r00r00         [24] 1189 	lcall	_printf_fast_f
      000049 15 81            [12] 1190 	dec	sp
      00004B 15 81            [12] 1191 	dec	sp
                                   1192 ;	src/main.c:181: break;
                                   1193 ;	src/main.c:182: case STATE_CROSS :
      00004D 80 20            [24] 1194 	sjmp	00104$
      00004F                       1195 00102$:
                                   1196 ;	src/main.c:183: printf_fast_f("cross");
      00004F 74r09            [12] 1197 	mov	a,#___str_2
      000051 C0 E0            [24] 1198 	push	acc
      000053 74s00            [12] 1199 	mov	a,#(___str_2 >> 8)
      000055 C0 E0            [24] 1200 	push	acc
      000057 12r00r00         [24] 1201 	lcall	_printf_fast_f
      00005A 15 81            [12] 1202 	dec	sp
      00005C 15 81            [12] 1203 	dec	sp
                                   1204 ;	src/main.c:184: break;
                                   1205 ;	src/main.c:185: case STATE_BOTH :
      00005E 80 0F            [24] 1206 	sjmp	00104$
      000060                       1207 00103$:
                                   1208 ;	src/main.c:186: printf_fast_f("both ");
      000060 74r0F            [12] 1209 	mov	a,#___str_3
      000062 C0 E0            [24] 1210 	push	acc
      000064 74s00            [12] 1211 	mov	a,#(___str_3 >> 8)
      000066 C0 E0            [24] 1212 	push	acc
      000068 12r00r00         [24] 1213 	lcall	_printf_fast_f
      00006B 15 81            [12] 1214 	dec	sp
      00006D 15 81            [12] 1215 	dec	sp
                                   1216 ;	src/main.c:188: }
      00006F                       1217 00104$:
                                   1218 ;	src/main.c:189: printf_fast_f(" output:This is UART%d\n\r", gu8UART);
      00006F AE*00            [24] 1219 	mov	r6,_gu8UART
      000071 7F 00            [12] 1220 	mov	r7,#0x00
      000073 C0 06            [24] 1221 	push	ar6
      000075 C0 07            [24] 1222 	push	ar7
      000077 74r15            [12] 1223 	mov	a,#___str_4
      000079 C0 E0            [24] 1224 	push	acc
      00007B 74s00            [12] 1225 	mov	a,#(___str_4 >> 8)
      00007D C0 E0            [24] 1226 	push	acc
      00007F 12r00r00         [24] 1227 	lcall	_printf_fast_f
      000082 E5 81            [12] 1228 	mov	a,sp
      000084 24 FC            [12] 1229 	add	a,#0xfc
      000086 F5 81            [12] 1230 	mov	sp,a
                                   1231 ;	src/main.c:190: }
      000088 22               [24] 1232 	ret
                                   1233 ;------------------------------------------------------------
                                   1234 ;Allocation info for local variables in function 'print_char'
                                   1235 ;------------------------------------------------------------
                                   1236 ;au8Data                   Allocated to registers r7 
                                   1237 ;------------------------------------------------------------
                                   1238 ;	src/main.c:192: void print_char(char au8Data)
                                   1239 ;	-----------------------------------------
                                   1240 ;	 function print_char
                                   1241 ;	-----------------------------------------
      000089                       1242 _print_char:
      000089 AF 82            [24] 1243 	mov	r7,dpl
                                   1244 ;	src/main.c:194: switch(au8Data) {
      00008B BF 0D 02         [24] 1245 	cjne	r7,#0x0d,00115$
      00008E 80 04            [24] 1246 	sjmp	00102$
      000090                       1247 00115$:
      000090 BF 1B 11         [24] 1248 	cjne	r7,#0x1b,00103$
                                   1249 ;	src/main.c:196: break;
                                   1250 ;	src/main.c:197: case '\r' :
      000093 22               [24] 1251 	ret
      000094                       1252 00102$:
                                   1253 ;	src/main.c:198: printf_fast_f("\r\n");
      000094 74r2E            [12] 1254 	mov	a,#___str_5
      000096 C0 E0            [24] 1255 	push	acc
      000098 74s00            [12] 1256 	mov	a,#(___str_5 >> 8)
      00009A C0 E0            [24] 1257 	push	acc
      00009C 12r00r00         [24] 1258 	lcall	_printf_fast_f
      00009F 15 81            [12] 1259 	dec	sp
      0000A1 15 81            [12] 1260 	dec	sp
                                   1261 ;	src/main.c:199: break;
                                   1262 ;	src/main.c:200: default :
      0000A3 22               [24] 1263 	ret
      0000A4                       1264 00103$:
                                   1265 ;	src/main.c:201: printf_fast_f("%c",au8Data);
      0000A4 7E 00            [12] 1266 	mov	r6,#0x00
      0000A6 C0 07            [24] 1267 	push	ar7
      0000A8 C0 06            [24] 1268 	push	ar6
      0000AA 74r31            [12] 1269 	mov	a,#___str_6
      0000AC C0 E0            [24] 1270 	push	acc
      0000AE 74s00            [12] 1271 	mov	a,#(___str_6 >> 8)
      0000B0 C0 E0            [24] 1272 	push	acc
      0000B2 12r00r00         [24] 1273 	lcall	_printf_fast_f
      0000B5 E5 81            [12] 1274 	mov	a,sp
      0000B7 24 FC            [12] 1275 	add	a,#0xfc
      0000B9 F5 81            [12] 1276 	mov	sp,a
                                   1277 ;	src/main.c:202: }
                                   1278 ;	src/main.c:203: }
      0000BB 22               [24] 1279 	ret
                                   1280 ;------------------------------------------------------------
                                   1281 ;Allocation info for local variables in function 'state_machine'
                                   1282 ;------------------------------------------------------------
                                   1283 ;au8RxUART                 Allocated with name '_state_machine_PARM_2'
                                   1284 ;au8SelfID                 Allocated with name '_state_machine_PARM_3'
                                   1285 ;au8OtherID                Allocated with name '_state_machine_PARM_4'
                                   1286 ;au8State                  Allocated to registers r7 
                                   1287 ;------------------------------------------------------------
                                   1288 ;	src/main.c:205: UINT8 state_machine(UINT8 au8State, UINT8 au8RxUART, UINT8 au8SelfID, UINT8 au8OtherID)
                                   1289 ;	-----------------------------------------
                                   1290 ;	 function state_machine
                                   1291 ;	-----------------------------------------
      0000BC                       1292 _state_machine:
      0000BC AF 82            [24] 1293 	mov	r7,dpl
                                   1294 ;	src/main.c:207: if(au8RxUART == KEY_ESC) {
      0000BE 74 1B            [12] 1295 	mov	a,#0x1b
      0000C0 B5*01 02         [24] 1296 	cjne	a,_state_machine_PARM_2,00142$
      0000C3 80 02            [24] 1297 	sjmp	00143$
      0000C5                       1298 00142$:
      0000C5 80 79            [24] 1299 	sjmp	00110$
      0000C7                       1300 00143$:
                                   1301 ;	src/main.c:208: gu8UART = au8SelfID;
      0000C7 AE*02            [24] 1302 	mov	r6,_state_machine_PARM_3
      0000C9 8E*00            [24] 1303 	mov	_gu8UART,r6
                                   1304 ;	src/main.c:209: printf_fast_f("\r\ninput:This is UART%d", gu8UART);
      0000CB AC*00            [24] 1305 	mov	r4,_gu8UART
      0000CD 7D 00            [12] 1306 	mov	r5,#0x00
      0000CF C0 07            [24] 1307 	push	ar7
      0000D1 C0 06            [24] 1308 	push	ar6
      0000D3 C0 04            [24] 1309 	push	ar4
      0000D5 C0 05            [24] 1310 	push	ar5
      0000D7 74r34            [12] 1311 	mov	a,#___str_7
      0000D9 C0 E0            [24] 1312 	push	acc
      0000DB 74s00            [12] 1313 	mov	a,#(___str_7 >> 8)
      0000DD C0 E0            [24] 1314 	push	acc
      0000DF 12r00r00         [24] 1315 	lcall	_printf_fast_f
      0000E2 E5 81            [12] 1316 	mov	a,sp
      0000E4 24 FC            [12] 1317 	add	a,#0xfc
      0000E6 F5 81            [12] 1318 	mov	sp,a
      0000E8 D0 06            [24] 1319 	pop	ar6
      0000EA D0 07            [24] 1320 	pop	ar7
                                   1321 ;	src/main.c:210: switch(au8State) {
      0000EC BF 00 02         [24] 1322 	cjne	r7,#0x00,00144$
      0000EF 80 0D            [24] 1323 	sjmp	00101$
      0000F1                       1324 00144$:
      0000F1 BF 01 02         [24] 1325 	cjne	r7,#0x01,00145$
      0000F4 80 21            [24] 1326 	sjmp	00102$
      0000F6                       1327 00145$:
      0000F6 BF 02 02         [24] 1328 	cjne	r7,#0x02,00146$
      0000F9 80 35            [24] 1329 	sjmp	00103$
      0000FB                       1330 00146$:
      0000FB 02r01r83         [24] 1331 	ljmp	00111$
                                   1332 ;	src/main.c:211: case STATE_SELF :
      0000FE                       1333 00101$:
                                   1334 ;	src/main.c:212: au8State = STATE_CROSS;
      0000FE 7F 01            [12] 1335 	mov	r7,#0x01
                                   1336 ;	src/main.c:213: gu8UART = au8SelfID;
      000100 8E*00            [24] 1337 	mov	_gu8UART,r6
                                   1338 ;	src/main.c:214: print_esc(au8State);
      000102 75 82 01         [24] 1339 	mov	dpl,#0x01
      000105 C0 07            [24] 1340 	push	ar7
      000107 12r00r1A         [24] 1341 	lcall	_print_esc
                                   1342 ;	src/main.c:215: gu8UART = au8OtherID;
      00010A 85*03*00         [24] 1343 	mov	_gu8UART,_state_machine_PARM_4
                                   1344 ;	src/main.c:216: print_esc(au8State);
      00010D 75 82 01         [24] 1345 	mov	dpl,#0x01
      000110 12r00r1A         [24] 1346 	lcall	_print_esc
      000113 D0 07            [24] 1347 	pop	ar7
                                   1348 ;	src/main.c:217: break;
                                   1349 ;	src/main.c:218: case STATE_CROSS :
      000115 80 6C            [24] 1350 	sjmp	00111$
      000117                       1351 00102$:
                                   1352 ;	src/main.c:219: au8State = STATE_BOTH;
      000117 7F 02            [12] 1353 	mov	r7,#0x02
                                   1354 ;	src/main.c:220: gu8UART = au8SelfID;
      000119 8E*00            [24] 1355 	mov	_gu8UART,r6
                                   1356 ;	src/main.c:221: print_esc(au8State);
      00011B 75 82 02         [24] 1357 	mov	dpl,#0x02
      00011E C0 07            [24] 1358 	push	ar7
      000120 12r00r1A         [24] 1359 	lcall	_print_esc
                                   1360 ;	src/main.c:222: gu8UART = au8OtherID;
      000123 85*03*00         [24] 1361 	mov	_gu8UART,_state_machine_PARM_4
                                   1362 ;	src/main.c:223: print_esc(au8State);
      000126 75 82 02         [24] 1363 	mov	dpl,#0x02
      000129 12r00r1A         [24] 1364 	lcall	_print_esc
      00012C D0 07            [24] 1365 	pop	ar7
                                   1366 ;	src/main.c:224: break;
                                   1367 ;	src/main.c:225: case STATE_BOTH :
      00012E 80 53            [24] 1368 	sjmp	00111$
      000130                       1369 00103$:
                                   1370 ;	src/main.c:226: au8State = STATE_SELF;
      000130 7F 00            [12] 1371 	mov	r7,#0x00
                                   1372 ;	src/main.c:227: gu8UART = au8SelfID;
      000132 8E*00            [24] 1373 	mov	_gu8UART,r6
                                   1374 ;	src/main.c:228: print_esc(au8State);
      000134 75 82 00         [24] 1375 	mov	dpl,#0x00
      000137 C0 07            [24] 1376 	push	ar7
      000139 12r00r1A         [24] 1377 	lcall	_print_esc
      00013C D0 07            [24] 1378 	pop	ar7
                                   1379 ;	src/main.c:230: }
      00013E 80 43            [24] 1380 	sjmp	00111$
      000140                       1381 00110$:
                                   1382 ;	src/main.c:233: switch(au8State) {
      000140 BF 00 02         [24] 1383 	cjne	r7,#0x00,00147$
      000143 80 0A            [24] 1384 	sjmp	00105$
      000145                       1385 00147$:
      000145 BF 01 02         [24] 1386 	cjne	r7,#0x01,00148$
      000148 80 14            [24] 1387 	sjmp	00106$
      00014A                       1388 00148$:
                                   1389 ;	src/main.c:234: case STATE_SELF :
      00014A BF 02 36         [24] 1390 	cjne	r7,#0x02,00111$
      00014D 80 1E            [24] 1391 	sjmp	00107$
      00014F                       1392 00105$:
                                   1393 ;	src/main.c:235: gu8UART = au8SelfID;
      00014F 85*02*00         [24] 1394 	mov	_gu8UART,_state_machine_PARM_3
                                   1395 ;	src/main.c:236: print_char(au8RxUART);
      000152 85*01 82         [24] 1396 	mov	dpl,_state_machine_PARM_2
      000155 C0 07            [24] 1397 	push	ar7
      000157 12r00r89         [24] 1398 	lcall	_print_char
      00015A D0 07            [24] 1399 	pop	ar7
                                   1400 ;	src/main.c:237: break;
                                   1401 ;	src/main.c:238: case STATE_CROSS :
      00015C 80 25            [24] 1402 	sjmp	00111$
      00015E                       1403 00106$:
                                   1404 ;	src/main.c:239: gu8UART = au8OtherID;
      00015E 85*03*00         [24] 1405 	mov	_gu8UART,_state_machine_PARM_4
                                   1406 ;	src/main.c:240: print_char(au8RxUART);
      000161 85*01 82         [24] 1407 	mov	dpl,_state_machine_PARM_2
      000164 C0 07            [24] 1408 	push	ar7
      000166 12r00r89         [24] 1409 	lcall	_print_char
      000169 D0 07            [24] 1410 	pop	ar7
                                   1411 ;	src/main.c:241: break;
                                   1412 ;	src/main.c:242: case STATE_BOTH :
      00016B 80 16            [24] 1413 	sjmp	00111$
      00016D                       1414 00107$:
                                   1415 ;	src/main.c:243: gu8UART = au8SelfID;
      00016D 85*02*00         [24] 1416 	mov	_gu8UART,_state_machine_PARM_3
                                   1417 ;	src/main.c:244: print_char(au8RxUART);
      000170 85*01 82         [24] 1418 	mov	dpl,_state_machine_PARM_2
      000173 C0 07            [24] 1419 	push	ar7
      000175 12r00r89         [24] 1420 	lcall	_print_char
                                   1421 ;	src/main.c:245: gu8UART = au8OtherID;
      000178 85*03*00         [24] 1422 	mov	_gu8UART,_state_machine_PARM_4
                                   1423 ;	src/main.c:246: print_char(au8RxUART);
      00017B 85*01 82         [24] 1424 	mov	dpl,_state_machine_PARM_2
      00017E 12r00r89         [24] 1425 	lcall	_print_char
      000181 D0 07            [24] 1426 	pop	ar7
                                   1427 ;	src/main.c:248: }
      000183                       1428 00111$:
                                   1429 ;	src/main.c:250: return au8State;
      000183 8F 82            [24] 1430 	mov	dpl,r7
                                   1431 ;	src/main.c:251: }
      000185 22               [24] 1432 	ret
                                   1433 ;------------------------------------------------------------
                                   1434 ;Allocation info for local variables in function 'Timer0_ISR'
                                   1435 ;------------------------------------------------------------
                                   1436 ;	src/main.c:253: void Timer0_ISR (void) interrupt(1)  //interrupt address is 0x000B
                                   1437 ;	-----------------------------------------
                                   1438 ;	 function Timer0_ISR
                                   1439 ;	-----------------------------------------
      000186                       1440 _Timer0_ISR:
                           00000F  1441 	ar7 = 0x0f
                           00000E  1442 	ar6 = 0x0e
                           00000D  1443 	ar5 = 0x0d
                           00000C  1444 	ar4 = 0x0c
                           00000B  1445 	ar3 = 0x0b
                           00000A  1446 	ar2 = 0x0a
                           000009  1447 	ar1 = 0x09
                           000008  1448 	ar0 = 0x08
      000186 C0 E0            [24] 1449 	push	acc
      000188 C0 82            [24] 1450 	push	dpl
      00018A C0 83            [24] 1451 	push	dph
      00018C C0 D0            [24] 1452 	push	psw
                                   1453 ;	src/main.c:255: TH0 = TH0_INIT;
      00018E 75 8C D4         [24] 1454 	mov	_TH0,#0xd4
                                   1455 ;	src/main.c:256: TL0 = TL0_INIT;
      000191 75 8A 13         [24] 1456 	mov	_TL0,#0x13
                                   1457 ;	src/main.c:257: gu16TimeCnt++;
      000194 90r00r71         [24] 1458 	mov	dptr,#_gu16TimeCnt
      000197 E0               [24] 1459 	movx	a,@dptr
      000198 24 01            [12] 1460 	add	a,#0x01
      00019A F0               [24] 1461 	movx	@dptr,a
      00019B A3               [24] 1462 	inc	dptr
      00019C E0               [24] 1463 	movx	a,@dptr
      00019D 34 00            [12] 1464 	addc	a,#0x00
      00019F F0               [24] 1465 	movx	@dptr,a
                                   1466 ;	src/main.c:258: gu16TimeCntMilliSec++; // For periodic function
      0001A0 90r00r73         [24] 1467 	mov	dptr,#_gu16TimeCntMilliSec
      0001A3 E0               [24] 1468 	movx	a,@dptr
      0001A4 24 01            [12] 1469 	add	a,#0x01
      0001A6 F0               [24] 1470 	movx	@dptr,a
      0001A7 A3               [24] 1471 	inc	dptr
      0001A8 E0               [24] 1472 	movx	a,@dptr
      0001A9 34 00            [12] 1473 	addc	a,#0x00
      0001AB F0               [24] 1474 	movx	@dptr,a
                                   1475 ;	src/main.c:267: } //void Timer0_ISR (void) __interrupt 1  //interrupt address is 0x000B
      0001AC D0 D0            [24] 1476 	pop	psw
      0001AE D0 83            [24] 1477 	pop	dph
      0001B0 D0 82            [24] 1478 	pop	dpl
      0001B2 D0 E0            [24] 1479 	pop	acc
      0001B4 32               [24] 1480 	reti
                                   1481 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                   1482 ;	eliminated unneeded push/pop b
                                   1483 ;------------------------------------------------------------
                                   1484 ;Allocation info for local variables in function 'pin_interrupt_isr'
                                   1485 ;------------------------------------------------------------
                                   1486 ;	src/main.c:269: void pin_interrupt_isr(void) interrupt(7)
                                   1487 ;	-----------------------------------------
                                   1488 ;	 function pin_interrupt_isr
                                   1489 ;	-----------------------------------------
      0001B5                       1490 _pin_interrupt_isr:
      0001B5 C0 E0            [24] 1491 	push	acc
                                   1492 ;	src/main.c:271: if (PIF == 0x10) {
      0001B7 E5 EC            [12] 1493 	mov	a,_PIF
                                   1494 ;	src/main.c:273: PIF = 0;
      0001B9 75 EC 00         [24] 1495 	mov	_PIF,#0x00
                                   1496 ;	src/main.c:274: }// void pin_interrupt_isr (void) interrupt(7)
      0001BC D0 E0            [24] 1497 	pop	acc
      0001BE 32               [24] 1498 	reti
                                   1499 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                   1500 ;	eliminated unneeded push/pop psw
                                   1501 ;	eliminated unneeded push/pop dpl
                                   1502 ;	eliminated unneeded push/pop dph
                                   1503 ;	eliminated unneeded push/pop b
                                   1504 ;------------------------------------------------------------
                                   1505 ;Allocation info for local variables in function 'chk_manchester'
                                   1506 ;------------------------------------------------------------
                                   1507 ;c                         Allocated to registers r7 
                                   1508 ;i                         Allocated to registers r6 
                                   1509 ;------------------------------------------------------------
                                   1510 ;	src/main.c:276: UINT8 chk_manchester(UINT8 c)
                                   1511 ;	-----------------------------------------
                                   1512 ;	 function chk_manchester
                                   1513 ;	-----------------------------------------
      0001BF                       1514 _chk_manchester:
                           000007  1515 	ar7 = 0x07
                           000006  1516 	ar6 = 0x06
                           000005  1517 	ar5 = 0x05
                           000004  1518 	ar4 = 0x04
                           000003  1519 	ar3 = 0x03
                           000002  1520 	ar2 = 0x02
                           000001  1521 	ar1 = 0x01
                           000000  1522 	ar0 = 0x00
      0001BF AF 82            [24] 1523 	mov	r7,dpl
                                   1524 ;	src/main.c:279: for (i=0;i<4;i++) {
      0001C1 7E 00            [12] 1525 	mov	r6,#0x00
      0001C3                       1526 00104$:
                                   1527 ;	src/main.c:280: if (((c>>(2*i)) & 1) == ((c>>((2*i+1)))&1)) {
      0001C3 EE               [12] 1528 	mov	a,r6
      0001C4 2E               [12] 1529 	add	a,r6
      0001C5 FD               [12] 1530 	mov	r5,a
      0001C6 8D F0            [24] 1531 	mov	b,r5
      0001C8 05 F0            [12] 1532 	inc	b
      0001CA EF               [12] 1533 	mov	a,r7
      0001CB 80 02            [24] 1534 	sjmp	00121$
      0001CD                       1535 00120$:
      0001CD C3               [12] 1536 	clr	c
      0001CE 13               [12] 1537 	rrc	a
      0001CF                       1538 00121$:
      0001CF D5 F0 FB         [24] 1539 	djnz	b,00120$
      0001D2 FC               [12] 1540 	mov	r4,a
      0001D3 53 04 01         [24] 1541 	anl	ar4,#0x01
      0001D6 7B 00            [12] 1542 	mov	r3,#0x00
      0001D8 ED               [12] 1543 	mov	a,r5
      0001D9 04               [12] 1544 	inc	a
      0001DA F5 F0            [12] 1545 	mov	b,a
      0001DC 05 F0            [12] 1546 	inc	b
      0001DE EF               [12] 1547 	mov	a,r7
      0001DF 80 02            [24] 1548 	sjmp	00123$
      0001E1                       1549 00122$:
      0001E1 C3               [12] 1550 	clr	c
      0001E2 13               [12] 1551 	rrc	a
      0001E3                       1552 00123$:
      0001E3 D5 F0 FB         [24] 1553 	djnz	b,00122$
      0001E6 FD               [12] 1554 	mov	r5,a
      0001E7 53 05 01         [24] 1555 	anl	ar5,#0x01
      0001EA 7A 00            [12] 1556 	mov	r2,#0x00
      0001EC EC               [12] 1557 	mov	a,r4
      0001ED B5 05 08         [24] 1558 	cjne	a,ar5,00105$
      0001F0 EB               [12] 1559 	mov	a,r3
      0001F1 B5 02 04         [24] 1560 	cjne	a,ar2,00105$
                                   1561 ;	src/main.c:282: return 0;
      0001F4 75 82 00         [24] 1562 	mov	dpl,#0x00
      0001F7 22               [24] 1563 	ret
      0001F8                       1564 00105$:
                                   1565 ;	src/main.c:279: for (i=0;i<4;i++) {
      0001F8 0E               [12] 1566 	inc	r6
      0001F9 BE 04 00         [24] 1567 	cjne	r6,#0x04,00126$
      0001FC                       1568 00126$:
      0001FC 40 C5            [24] 1569 	jc	00104$
                                   1570 ;	src/main.c:285: return 1;
      0001FE 75 82 01         [24] 1571 	mov	dpl,#0x01
                                   1572 ;	src/main.c:286: }
      000201 22               [24] 1573 	ret
                                   1574 ;------------------------------------------------------------
                                   1575 ;Allocation info for local variables in function 'conv_manchester2nibble'
                                   1576 ;------------------------------------------------------------
                                   1577 ;c                         Allocated to registers r7 
                                   1578 ;i                         Allocated to registers r5 
                                   1579 ;u8Nibble                  Allocated to registers r6 
                                   1580 ;------------------------------------------------------------
                                   1581 ;	src/main.c:288: UINT8 conv_manchester2nibble(UINT8 c)
                                   1582 ;	-----------------------------------------
                                   1583 ;	 function conv_manchester2nibble
                                   1584 ;	-----------------------------------------
      000202                       1585 _conv_manchester2nibble:
      000202 AF 82            [24] 1586 	mov	r7,dpl
                                   1587 ;	src/main.c:291: UINT8 u8Nibble = 0;
      000204 7E 00            [12] 1588 	mov	r6,#0x00
                                   1589 ;	src/main.c:292: for (i=0;i<4;i++) {
      000206 7D 04            [12] 1590 	mov	r5,#0x04
      000208                       1591 00106$:
                                   1592 ;	src/main.c:293: if (c & 1) {
      000208 EF               [12] 1593 	mov	a,r7
      000209 30 E0 03         [24] 1594 	jnb	acc.0,00102$
                                   1595 ;	src/main.c:294: u8Nibble |= 0x80;
      00020C 43 06 80         [24] 1596 	orl	ar6,#0x80
      00020F                       1597 00102$:
                                   1598 ;	src/main.c:296: c >>= 2;
      00020F EF               [12] 1599 	mov	a,r7
      000210 03               [12] 1600 	rr	a
      000211 03               [12] 1601 	rr	a
      000212 54 3F            [12] 1602 	anl	a,#0x3f
      000214 FF               [12] 1603 	mov	r7,a
                                   1604 ;	src/main.c:297: u8Nibble >>= 1;
      000215 EE               [12] 1605 	mov	a,r6
      000216 C3               [12] 1606 	clr	c
      000217 13               [12] 1607 	rrc	a
      000218 FE               [12] 1608 	mov	r6,a
      000219 ED               [12] 1609 	mov	a,r5
      00021A 14               [12] 1610 	dec	a
                                   1611 ;	src/main.c:292: for (i=0;i<4;i++) {
      00021B FD               [12] 1612 	mov	r5,a
      00021C 70 EA            [24] 1613 	jnz	00106$
                                   1614 ;	src/main.c:299: return u8Nibble;
      00021E 8E 82            [24] 1615 	mov	dpl,r6
                                   1616 ;	src/main.c:300: }
      000220 22               [24] 1617 	ret
                                   1618 ;------------------------------------------------------------
                                   1619 ;Allocation info for local variables in function 'conv_manchester2highnibble'
                                   1620 ;------------------------------------------------------------
                                   1621 ;c                         Allocated to registers r7 
                                   1622 ;i                         Allocated to registers r5 
                                   1623 ;u8Nibble                  Allocated to registers r6 
                                   1624 ;------------------------------------------------------------
                                   1625 ;	src/main.c:302: UINT8 conv_manchester2highnibble(UINT8 c)
                                   1626 ;	-----------------------------------------
                                   1627 ;	 function conv_manchester2highnibble
                                   1628 ;	-----------------------------------------
      000221                       1629 _conv_manchester2highnibble:
      000221 AF 82            [24] 1630 	mov	r7,dpl
                                   1631 ;	src/main.c:305: UINT8 u8Nibble = 0;
      000223 7E 00            [12] 1632 	mov	r6,#0x00
                                   1633 ;	src/main.c:306: for (i=0;i<4;i++) {
      000225 7D 04            [12] 1634 	mov	r5,#0x04
      000227                       1635 00106$:
                                   1636 ;	src/main.c:307: u8Nibble >>= 1;
      000227 EE               [12] 1637 	mov	a,r6
      000228 C3               [12] 1638 	clr	c
      000229 13               [12] 1639 	rrc	a
      00022A FE               [12] 1640 	mov	r6,a
                                   1641 ;	src/main.c:308: if (c & 1) {
      00022B EF               [12] 1642 	mov	a,r7
      00022C 30 E0 03         [24] 1643 	jnb	acc.0,00102$
                                   1644 ;	src/main.c:309: u8Nibble |= 0x80;
      00022F 43 06 80         [24] 1645 	orl	ar6,#0x80
      000232                       1646 00102$:
                                   1647 ;	src/main.c:311: c >>= 2;
      000232 EF               [12] 1648 	mov	a,r7
      000233 03               [12] 1649 	rr	a
      000234 03               [12] 1650 	rr	a
      000235 54 3F            [12] 1651 	anl	a,#0x3f
      000237 FF               [12] 1652 	mov	r7,a
      000238 ED               [12] 1653 	mov	a,r5
      000239 14               [12] 1654 	dec	a
                                   1655 ;	src/main.c:306: for (i=0;i<4;i++) {
      00023A FD               [12] 1656 	mov	r5,a
      00023B 70 EA            [24] 1657 	jnz	00106$
                                   1658 ;	src/main.c:313: return u8Nibble;
      00023D 8E 82            [24] 1659 	mov	dpl,r6
                                   1660 ;	src/main.c:314: }
      00023F 22               [24] 1661 	ret
                                   1662 ;------------------------------------------------------------
                                   1663 ;Allocation info for local variables in function 'MODIFY_HIRC_166'
                                   1664 ;------------------------------------------------------------
                                   1665 ;hircmap0                  Allocated to registers r7 
                                   1666 ;hircmap1                  Allocated to registers r6 
                                   1667 ;trimvalue16bit            Allocated to registers r7 r5 
                                   1668 ;------------------------------------------------------------
                                   1669 ;	src/main.c:316: void MODIFY_HIRC_166(void)
                                   1670 ;	-----------------------------------------
                                   1671 ;	 function MODIFY_HIRC_166
                                   1672 ;	-----------------------------------------
      000240                       1673 _MODIFY_HIRC_166:
                                   1674 ;	src/main.c:321: if ((PCON&SET_BIT4)==SET_BIT4) {
      000240 AE 87            [24] 1675 	mov	r6,_PCON
      000242 53 06 10         [24] 1676 	anl	ar6,#0x10
      000245 7F 00            [12] 1677 	mov	r7,#0x00
      000247 BE 10 41         [24] 1678 	cjne	r6,#0x10,00103$
      00024A BF 00 3E         [24] 1679 	cjne	r7,#0x00,00103$
                                   1680 ;	src/main.c:322: hircmap0 = RCTRIM0;
      00024D AF 84            [24] 1681 	mov	r7,_RCTRIM0
                                   1682 ;	src/main.c:323: hircmap1 = RCTRIM1;
      00024F AE 85            [24] 1683 	mov	r6,_RCTRIM1
                                   1684 ;	src/main.c:324: trimvalue16bit = ((hircmap0<<1)+(hircmap1&0x01));
      000251 7D 00            [12] 1685 	mov	r5,#0x00
      000253 EF               [12] 1686 	mov	a,r7
      000254 2F               [12] 1687 	add	a,r7
      000255 FF               [12] 1688 	mov	r7,a
      000256 ED               [12] 1689 	mov	a,r5
      000257 33               [12] 1690 	rlc	a
      000258 FD               [12] 1691 	mov	r5,a
      000259 53 06 01         [24] 1692 	anl	ar6,#0x01
      00025C 7C 00            [12] 1693 	mov	r4,#0x00
      00025E EE               [12] 1694 	mov	a,r6
      00025F 2F               [12] 1695 	add	a,r7
      000260 FF               [12] 1696 	mov	r7,a
      000261 EC               [12] 1697 	mov	a,r4
      000262 3D               [12] 1698 	addc	a,r5
      000263 FD               [12] 1699 	mov	r5,a
                                   1700 ;	src/main.c:325: trimvalue16bit = trimvalue16bit - 15;
      000264 EF               [12] 1701 	mov	a,r7
      000265 24 F1            [12] 1702 	add	a,#0xf1
      000267 FF               [12] 1703 	mov	r7,a
      000268 ED               [12] 1704 	mov	a,r5
      000269 34 FF            [12] 1705 	addc	a,#0xff
      00026B FD               [12] 1706 	mov	r5,a
                                   1707 ;	src/main.c:326: hircmap1 = trimvalue16bit&0x01;
      00026C 8F 06            [24] 1708 	mov	ar6,r7
      00026E 53 06 01         [24] 1709 	anl	ar6,#0x01
                                   1710 ;	src/main.c:327: hircmap0 = trimvalue16bit>>1;
      000271 ED               [12] 1711 	mov	a,r5
      000272 C3               [12] 1712 	clr	c
      000273 13               [12] 1713 	rrc	a
      000274 CF               [12] 1714 	xch	a,r7
      000275 13               [12] 1715 	rrc	a
      000276 CF               [12] 1716 	xch	a,r7
      000277 FD               [12] 1717 	mov	r5,a
                                   1718 ;	src/main.c:328: TA=0XAA;
      000278 75 C7 AA         [24] 1719 	mov	_TA,#0xaa
                                   1720 ;	src/main.c:329: TA=0X55;
      00027B 75 C7 55         [24] 1721 	mov	_TA,#0x55
                                   1722 ;	src/main.c:330: RCTRIM0 = hircmap0;
      00027E 8F 84            [24] 1723 	mov	_RCTRIM0,r7
                                   1724 ;	src/main.c:331: TA=0XAA;
      000280 75 C7 AA         [24] 1725 	mov	_TA,#0xaa
                                   1726 ;	src/main.c:332: TA=0X55;
      000283 75 C7 55         [24] 1727 	mov	_TA,#0x55
                                   1728 ;	src/main.c:333: RCTRIM1 = hircmap1;
      000286 8E 85            [24] 1729 	mov	_RCTRIM1,r6
                                   1730 ;	src/main.c:335: PCON &= CLR_BIT4;
      000288 53 87 EF         [24] 1731 	anl	_PCON,#0xef
      00028B                       1732 00103$:
                                   1733 ;	src/main.c:337: }
      00028B 22               [24] 1734 	ret
                                   1735 ;------------------------------------------------------------
                                   1736 ;Allocation info for local variables in function 'disp_help'
                                   1737 ;------------------------------------------------------------
                                   1738 ;au8Code                   Allocated to registers r7 
                                   1739 ;------------------------------------------------------------
                                   1740 ;	src/main.c:338: void disp_help(UINT8 au8Code)
                                   1741 ;	-----------------------------------------
                                   1742 ;	 function disp_help
                                   1743 ;	-----------------------------------------
      00028C                       1744 _disp_help:
      00028C AF 82            [24] 1745 	mov	r7,dpl
                                   1746 ;	src/main.c:340: gu8UART = 1;
      00028E 75*00 01         [24] 1747 	mov	_gu8UART,#0x01
                                   1748 ;	src/main.c:341: switch(au8Code) {
      000291 BF 31 01         [24] 1749 	cjne	r7,#0x31,00165$
      000294 22               [24] 1750 	ret
      000295                       1751 00165$:
      000295 BF 32 01         [24] 1752 	cjne	r7,#0x32,00166$
      000298 22               [24] 1753 	ret
      000299                       1754 00166$:
      000299 BF 33 02         [24] 1755 	cjne	r7,#0x33,00167$
      00029C 80 32            [24] 1756 	sjmp	00103$
      00029E                       1757 00167$:
      00029E BF 34 01         [24] 1758 	cjne	r7,#0x34,00168$
      0002A1 22               [24] 1759 	ret
      0002A2                       1760 00168$:
      0002A2 BF 50 02         [24] 1761 	cjne	r7,#0x50,00169$
      0002A5 80 49            [24] 1762 	sjmp	00106$
      0002A7                       1763 00169$:
      0002A7 BF 53 03         [24] 1764 	cjne	r7,#0x53,00170$
      0002AA 02r03r30         [24] 1765 	ljmp	00110$
      0002AD                       1766 00170$:
      0002AD BF 54 02         [24] 1767 	cjne	r7,#0x54,00171$
      0002B0 80 5E            [24] 1768 	sjmp	00108$
      0002B2                       1769 00171$:
      0002B2 BF 56 03         [24] 1770 	cjne	r7,#0x56,00172$
      0002B5 02r03r40         [24] 1771 	ljmp	00112$
      0002B8                       1772 00172$:
      0002B8 BF 70 02         [24] 1773 	cjne	r7,#0x70,00173$
      0002BB 80 23            [24] 1774 	sjmp	00105$
      0002BD                       1775 00173$:
      0002BD BF 73 02         [24] 1776 	cjne	r7,#0x73,00174$
      0002C0 80 5E            [24] 1777 	sjmp	00109$
      0002C2                       1778 00174$:
      0002C2 BF 74 02         [24] 1779 	cjne	r7,#0x74,00175$
      0002C5 80 39            [24] 1780 	sjmp	00107$
      0002C7                       1781 00175$:
      0002C7 BF 76 03         [24] 1782 	cjne	r7,#0x76,00176$
      0002CA 02r03r40         [24] 1783 	ljmp	00112$
      0002CD                       1784 00176$:
      0002CD 02r03r50         [24] 1785 	ljmp	00113$
                                   1786 ;	src/main.c:346: case '3' :
      0002D0                       1787 00103$:
                                   1788 ;	src/main.c:347: printf_fast_f("Idle preamble on/off\r\n");
      0002D0 74r4B            [12] 1789 	mov	a,#___str_8
      0002D2 C0 E0            [24] 1790 	push	acc
      0002D4 74s00            [12] 1791 	mov	a,#(___str_8 >> 8)
      0002D6 C0 E0            [24] 1792 	push	acc
      0002D8 12r00r00         [24] 1793 	lcall	_printf_fast_f
      0002DB 15 81            [12] 1794 	dec	sp
      0002DD 15 81            [12] 1795 	dec	sp
                                   1796 ;	src/main.c:348: break;
      0002DF 22               [24] 1797 	ret
                                   1798 ;	src/main.c:351: case 'p' :
      0002E0                       1799 00105$:
                                   1800 ;	src/main.c:352: printf_fast_f("LineFi Power Off\r\n");
      0002E0 74r62            [12] 1801 	mov	a,#___str_9
      0002E2 C0 E0            [24] 1802 	push	acc
      0002E4 74s00            [12] 1803 	mov	a,#(___str_9 >> 8)
      0002E6 C0 E0            [24] 1804 	push	acc
      0002E8 12r00r00         [24] 1805 	lcall	_printf_fast_f
      0002EB 15 81            [12] 1806 	dec	sp
      0002ED 15 81            [12] 1807 	dec	sp
                                   1808 ;	src/main.c:353: break;
      0002EF 22               [24] 1809 	ret
                                   1810 ;	src/main.c:354: case 'P' :
      0002F0                       1811 00106$:
                                   1812 ;	src/main.c:355: printf_fast_f("LineFi Power On\r\n");
      0002F0 74r75            [12] 1813 	mov	a,#___str_10
      0002F2 C0 E0            [24] 1814 	push	acc
      0002F4 74s00            [12] 1815 	mov	a,#(___str_10 >> 8)
      0002F6 C0 E0            [24] 1816 	push	acc
      0002F8 12r00r00         [24] 1817 	lcall	_printf_fast_f
      0002FB 15 81            [12] 1818 	dec	sp
      0002FD 15 81            [12] 1819 	dec	sp
                                   1820 ;	src/main.c:356: break;
      0002FF 22               [24] 1821 	ret
                                   1822 ;	src/main.c:357: case 't' :
      000300                       1823 00107$:
                                   1824 ;	src/main.c:358: printf_fast_f("LineFi Uart Tx Low\r\n");
      000300 74r87            [12] 1825 	mov	a,#___str_11
      000302 C0 E0            [24] 1826 	push	acc
      000304 74s00            [12] 1827 	mov	a,#(___str_11 >> 8)
      000306 C0 E0            [24] 1828 	push	acc
      000308 12r00r00         [24] 1829 	lcall	_printf_fast_f
      00030B 15 81            [12] 1830 	dec	sp
      00030D 15 81            [12] 1831 	dec	sp
                                   1832 ;	src/main.c:359: break;
      00030F 22               [24] 1833 	ret
                                   1834 ;	src/main.c:360: case 'T' :
      000310                       1835 00108$:
                                   1836 ;	src/main.c:361: printf_fast_f("LineFi Uart Tx High\r\n");
      000310 74r9C            [12] 1837 	mov	a,#___str_12
      000312 C0 E0            [24] 1838 	push	acc
      000314 74s00            [12] 1839 	mov	a,#(___str_12 >> 8)
      000316 C0 E0            [24] 1840 	push	acc
      000318 12r00r00         [24] 1841 	lcall	_printf_fast_f
      00031B 15 81            [12] 1842 	dec	sp
      00031D 15 81            [12] 1843 	dec	sp
                                   1844 ;	src/main.c:362: break;
      00031F 22               [24] 1845 	ret
                                   1846 ;	src/main.c:363: case 's' :
      000320                       1847 00109$:
                                   1848 ;	src/main.c:364: printf_fast_f("LineFi CSC rx FSM Off\r\n");
      000320 74rB2            [12] 1849 	mov	a,#___str_13
      000322 C0 E0            [24] 1850 	push	acc
      000324 74s00            [12] 1851 	mov	a,#(___str_13 >> 8)
      000326 C0 E0            [24] 1852 	push	acc
      000328 12r00r00         [24] 1853 	lcall	_printf_fast_f
      00032B 15 81            [12] 1854 	dec	sp
      00032D 15 81            [12] 1855 	dec	sp
                                   1856 ;	src/main.c:365: break;
      00032F 22               [24] 1857 	ret
                                   1858 ;	src/main.c:366: case 'S' :
      000330                       1859 00110$:
                                   1860 ;	src/main.c:367: printf_fast_f("LineFi CSC rx FSM ON\r\n");
      000330 74rCA            [12] 1861 	mov	a,#___str_14
      000332 C0 E0            [24] 1862 	push	acc
      000334 74s00            [12] 1863 	mov	a,#(___str_14 >> 8)
      000336 C0 E0            [24] 1864 	push	acc
      000338 12r00r00         [24] 1865 	lcall	_printf_fast_f
      00033B 15 81            [12] 1866 	dec	sp
      00033D 15 81            [12] 1867 	dec	sp
                                   1868 ;	src/main.c:368: break;
                                   1869 ;	src/main.c:369: case 'v' : case 'V' :
      00033F 22               [24] 1870 	ret
      000340                       1871 00112$:
                                   1872 ;	src/main.c:370: printf_fast_f(__VERSION__);
      000340 74rE1            [12] 1873 	mov	a,#___str_15
      000342 C0 E0            [24] 1874 	push	acc
      000344 74s00            [12] 1875 	mov	a,#(___str_15 >> 8)
      000346 C0 E0            [24] 1876 	push	acc
      000348 12r00r00         [24] 1877 	lcall	_printf_fast_f
      00034B 15 81            [12] 1878 	dec	sp
      00034D 15 81            [12] 1879 	dec	sp
                                   1880 ;	src/main.c:371: break;
                                   1881 ;	src/main.c:372: default :
      00034F 22               [24] 1882 	ret
      000350                       1883 00113$:
                                   1884 ;	src/main.c:373: printf_fast_f("1: downlink packet 1\r\n");
      000350 74rFB            [12] 1885 	mov	a,#___str_16
      000352 C0 E0            [24] 1886 	push	acc
      000354 74s00            [12] 1887 	mov	a,#(___str_16 >> 8)
      000356 C0 E0            [24] 1888 	push	acc
      000358 12r00r00         [24] 1889 	lcall	_printf_fast_f
      00035B 15 81            [12] 1890 	dec	sp
      00035D 15 81            [12] 1891 	dec	sp
                                   1892 ;	src/main.c:374: printf_fast_f("2: downlink packet 2\r\n");
      00035F 74r12            [12] 1893 	mov	a,#___str_17
      000361 C0 E0            [24] 1894 	push	acc
      000363 74s01            [12] 1895 	mov	a,#(___str_17 >> 8)
      000365 C0 E0            [24] 1896 	push	acc
      000367 12r00r00         [24] 1897 	lcall	_printf_fast_f
      00036A 15 81            [12] 1898 	dec	sp
      00036C 15 81            [12] 1899 	dec	sp
                                   1900 ;	src/main.c:375: printf_fast_f("3: uplink idle preamble on/off\r\n");
      00036E 74r29            [12] 1901 	mov	a,#___str_18
      000370 C0 E0            [24] 1902 	push	acc
      000372 74s01            [12] 1903 	mov	a,#(___str_18 >> 8)
      000374 C0 E0            [24] 1904 	push	acc
      000376 12r00r00         [24] 1905 	lcall	_printf_fast_f
      000379 15 81            [12] 1906 	dec	sp
      00037B 15 81            [12] 1907 	dec	sp
                                   1908 ;	src/main.c:376: printf_fast_f("p/P: LineFi Power off/on\r\n");
      00037D 74r4A            [12] 1909 	mov	a,#___str_19
      00037F C0 E0            [24] 1910 	push	acc
      000381 74s01            [12] 1911 	mov	a,#(___str_19 >> 8)
      000383 C0 E0            [24] 1912 	push	acc
      000385 12r00r00         [24] 1913 	lcall	_printf_fast_f
      000388 15 81            [12] 1914 	dec	sp
      00038A 15 81            [12] 1915 	dec	sp
                                   1916 ;	src/main.c:377: printf_fast_f("t/T: LineFi Uart Tx Low/High\r\n");
      00038C 74r65            [12] 1917 	mov	a,#___str_20
      00038E C0 E0            [24] 1918 	push	acc
      000390 74s01            [12] 1919 	mov	a,#(___str_20 >> 8)
      000392 C0 E0            [24] 1920 	push	acc
      000394 12r00r00         [24] 1921 	lcall	_printf_fast_f
      000397 15 81            [12] 1922 	dec	sp
      000399 15 81            [12] 1923 	dec	sp
                                   1924 ;	src/main.c:378: printf_fast_f("s/S: LineFie CSC Rx FSM off/on\r\n");
      00039B 74r84            [12] 1925 	mov	a,#___str_21
      00039D C0 E0            [24] 1926 	push	acc
      00039F 74s01            [12] 1927 	mov	a,#(___str_21 >> 8)
      0003A1 C0 E0            [24] 1928 	push	acc
      0003A3 12r00r00         [24] 1929 	lcall	_printf_fast_f
      0003A6 15 81            [12] 1930 	dec	sp
      0003A8 15 81            [12] 1931 	dec	sp
                                   1932 ;	src/main.c:379: printf_fast_f("test procedure: p -> P -> T -> S -> 1 or 2\r\n");
      0003AA 74rA5            [12] 1933 	mov	a,#___str_22
      0003AC C0 E0            [24] 1934 	push	acc
      0003AE 74s01            [12] 1935 	mov	a,#(___str_22 >> 8)
      0003B0 C0 E0            [24] 1936 	push	acc
      0003B2 12r00r00         [24] 1937 	lcall	_printf_fast_f
      0003B5 15 81            [12] 1938 	dec	sp
      0003B7 15 81            [12] 1939 	dec	sp
                                   1940 ;	src/main.c:381: }
                                   1941 ;	src/main.c:382: }
      0003B9 22               [24] 1942 	ret
                                   1943 ;------------------------------------------------------------
                                   1944 ;Allocation info for local variables in function 'gpio_setup'
                                   1945 ;------------------------------------------------------------
                                   1946 ;	src/main.c:384: void gpio_setup()
                                   1947 ;	-----------------------------------------
                                   1948 ;	 function gpio_setup
                                   1949 ;	-----------------------------------------
      0003BA                       1950 _gpio_setup:
                                   1951 ;	src/main.c:412: Set_All_GPIO_Quasi_Mode;
      0003BA 75 B1 00         [24] 1952 	mov	_P0M1,#0x00
      0003BD 75 B2 00         [24] 1953 	mov	_P0M2,#0x00
      0003C0 75 B3 00         [24] 1954 	mov	_P1M1,#0x00
      0003C3 75 B4 00         [24] 1955 	mov	_P1M2,#0x00
      0003C6 75 AC 00         [24] 1956 	mov	_P3M1,#0x00
      0003C9 75 AD 00         [24] 1957 	mov	_P3M2,#0x00
                                   1958 ;	src/main.c:414: P13_Input_Mode;
      0003CC 43 B3 08         [24] 1959 	orl	_P1M1,#0x08
      0003CF 53 B4 F7         [24] 1960 	anl	_P1M2,#0xf7
                                   1961 ;	src/main.c:415: P30_Input_Mode;
      0003D2 43 AC 01         [24] 1962 	orl	_P3M1,#0x01
      0003D5 53 AD FE         [24] 1963 	anl	_P3M2,#0xfe
                                   1964 ;	src/main.c:416: P17_Input_Mode;
      0003D8 43 B3 80         [24] 1965 	orl	_P1M1,#0x80
      0003DB 53 B4 7F         [24] 1966 	anl	_P1M2,#0x7f
                                   1967 ;	src/main.c:417: P00_Input_Mode;
      0003DE 43 B1 01         [24] 1968 	orl	_P0M1,#0x01
      0003E1 53 B2 FE         [24] 1969 	anl	_P0M2,#0xfe
                                   1970 ;	src/main.c:418: P15_Input_Mode;
      0003E4 43 B3 20         [24] 1971 	orl	_P1M1,#0x20
      0003E7 53 B4 DF         [24] 1972 	anl	_P1M2,#0xdf
                                   1973 ;	src/main.c:420: P05_Input_Mode; // rx_level1
      0003EA 43 B1 20         [24] 1974 	orl	_P0M1,#0x20
      0003ED 53 B2 DF         [24] 1975 	anl	_P0M2,#0xdf
                                   1976 ;	src/main.c:421: P04_Input_Mode; // rx_level2
      0003F0 43 B1 10         [24] 1977 	orl	_P0M1,#0x10
      0003F3 53 B2 EF         [24] 1978 	anl	_P0M2,#0xef
                                   1979 ;	src/main.c:423: P10_PushPull_Mode; // line fi enable
      0003F6 53 B3 FE         [24] 1980 	anl	_P1M1,#0xfe
      0003F9 43 B4 01         [24] 1981 	orl	_P1M2,#0x01
                                   1982 ;	src/main.c:424: P11_PushPull_Mode; // line fi enable1
      0003FC 53 B3 FD         [24] 1983 	anl	_P1M1,#0xfd
      0003FF 43 B4 02         [24] 1984 	orl	_P1M2,#0x02
                                   1985 ;	src/main.c:425: P12_PushPull_Mode; // line fi enable2
      000402 53 B3 FB         [24] 1986 	anl	_P1M1,#0xfb
      000405 43 B4 04         [24] 1987 	orl	_P1M2,#0x04
                                   1988 ;	src/main.c:426: LINEFI_EN0 = 0;
                                   1989 ;	assignBit
      000408 C2 90            [12] 1990 	clr	_P10
                                   1991 ;	src/main.c:427: LINEFI_EN1 = 0;
                                   1992 ;	assignBit
      00040A C2 91            [12] 1993 	clr	_P11
                                   1994 ;	src/main.c:428: LINEFI_EN2 = 0;
                                   1995 ;	assignBit
      00040C C2 92            [12] 1996 	clr	_P12
                                   1997 ;	src/main.c:429: }
      00040E 22               [24] 1998 	ret
                                   1999 ;------------------------------------------------------------
                                   2000 ;Allocation info for local variables in function 'state_switches'
                                   2001 ;------------------------------------------------------------
                                   2002 ;su8PrevSW                 Allocated with name '_state_switches_su8PrevSW_65536_83'
                                   2003 ;apu8SwNum                 Allocated with name '_state_switches_PARM_2'
                                   2004 ;au8SW                     Allocated to registers r7 
                                   2005 ;i                         Allocated to registers r2 
                                   2006 ;u8Result                  Allocated to registers r6 
                                   2007 ;------------------------------------------------------------
                                   2008 ;	src/main.c:447: UINT8 state_switches(UINT8 au8SW, UINT8 *apu8SwNum)
                                   2009 ;	-----------------------------------------
                                   2010 ;	 function state_switches
                                   2011 ;	-----------------------------------------
      00040F                       2012 _state_switches:
      00040F AF 82            [24] 2013 	mov	r7,dpl
                                   2014 ;	src/main.c:452: UINT8 u8Result = SW_NONE;
      000411 7E 04            [12] 2015 	mov	r6,#0x04
                                   2016 ;	src/main.c:453: if (su8PrevSW == au8SW) {
      000413 EF               [12] 2017 	mov	a,r7
      000414 B5*04 14         [24] 2018 	cjne	a,_state_switches_su8PrevSW_65536_83,00102$
                                   2019 ;	src/main.c:454: *apu8SwNum = 0;
      000417 AB*00            [24] 2020 	mov	r3,_state_switches_PARM_2
      000419 AC*01            [24] 2021 	mov	r4,(_state_switches_PARM_2 + 1)
      00041B AD*02            [24] 2022 	mov	r5,(_state_switches_PARM_2 + 2)
      00041D 8B 82            [24] 2023 	mov	dpl,r3
      00041F 8C 83            [24] 2024 	mov	dph,r4
      000421 8D F0            [24] 2025 	mov	b,r5
      000423 E4               [12] 2026 	clr	a
      000424 12r00r00         [24] 2027 	lcall	__gptrput
                                   2028 ;	src/main.c:455: return SW_NONE;
      000427 75 82 04         [24] 2029 	mov	dpl,#0x04
      00042A 22               [24] 2030 	ret
      00042B                       2031 00102$:
                                   2032 ;	src/main.c:463: *apu8SwNum = 0;
      00042B AB*00            [24] 2033 	mov	r3,_state_switches_PARM_2
      00042D AC*01            [24] 2034 	mov	r4,(_state_switches_PARM_2 + 1)
      00042F AD*02            [24] 2035 	mov	r5,(_state_switches_PARM_2 + 2)
      000431 8B 82            [24] 2036 	mov	dpl,r3
      000433 8C 83            [24] 2037 	mov	dph,r4
      000435 8D F0            [24] 2038 	mov	b,r5
      000437 E4               [12] 2039 	clr	a
      000438 12r00r00         [24] 2040 	lcall	__gptrput
                                   2041 ;	src/main.c:465: for (i=0;i<5;i++) {
      00043B 7A 00            [12] 2042 	mov	r2,#0x00
      00043D                       2043 00113$:
                                   2044 ;	src/main.c:466: switch((su8PrevSW>>i)&1) {
      00043D 8A F0            [24] 2045 	mov	b,r2
      00043F 05 F0            [12] 2046 	inc	b
      000441 E5*04            [12] 2047 	mov	a,_state_switches_su8PrevSW_65536_83
      000443 80 02            [24] 2048 	sjmp	00153$
      000445                       2049 00152$:
      000445 C3               [12] 2050 	clr	c
      000446 13               [12] 2051 	rrc	a
      000447                       2052 00153$:
      000447 D5 F0 FB         [24] 2053 	djnz	b,00152$
      00044A F8               [12] 2054 	mov	r0,a
      00044B 53 00 01         [24] 2055 	anl	ar0,#0x01
      00044E 79 00            [12] 2056 	mov	r1,#0x00
      000450 B8 00 05         [24] 2057 	cjne	r0,#0x00,00154$
      000453 B9 00 02         [24] 2058 	cjne	r1,#0x00,00154$
      000456 80 55            [24] 2059 	sjmp	00107$
      000458                       2060 00154$:
      000458 B8 01 05         [24] 2061 	cjne	r0,#0x01,00155$
      00045B B9 00 02         [24] 2062 	cjne	r1,#0x00,00155$
      00045E 80 03            [24] 2063 	sjmp	00156$
      000460                       2064 00155$:
      000460 02r04rF8         [24] 2065 	ljmp	00114$
      000463                       2066 00156$:
                                   2067 ;	src/main.c:468: switch((au8SW>>i)&1) {
      000463 8A F0            [24] 2068 	mov	b,r2
      000465 05 F0            [12] 2069 	inc	b
      000467 EF               [12] 2070 	mov	a,r7
      000468 80 02            [24] 2071 	sjmp	00158$
      00046A                       2072 00157$:
      00046A C3               [12] 2073 	clr	c
      00046B 13               [12] 2074 	rrc	a
      00046C                       2075 00158$:
      00046C D5 F0 FB         [24] 2076 	djnz	b,00157$
      00046F F8               [12] 2077 	mov	r0,a
      000470 53 00 01         [24] 2078 	anl	ar0,#0x01
      000473 79 00            [12] 2079 	mov	r1,#0x00
      000475 B8 00 05         [24] 2080 	cjne	r0,#0x00,00159$
      000478 B9 00 02         [24] 2081 	cjne	r1,#0x00,00159$
      00047B 80 03            [24] 2082 	sjmp	00160$
      00047D                       2083 00159$:
      00047D 02r04rF8         [24] 2084 	ljmp	00114$
      000480                       2085 00160$:
                                   2086 ;	src/main.c:472: su8PrevSW = au8SW;
      000480 8F*04            [24] 2087 	mov	_state_switches_su8PrevSW_65536_83,r7
                                   2088 ;	src/main.c:473: *apu8SwNum |= 1<<i;
      000482 8B 82            [24] 2089 	mov	dpl,r3
      000484 8C 83            [24] 2090 	mov	dph,r4
      000486 8D F0            [24] 2091 	mov	b,r5
      000488 12r00r00         [24] 2092 	lcall	__gptrget
      00048B F9               [12] 2093 	mov	r1,a
      00048C 8A 00            [24] 2094 	mov	ar0,r2
      00048E 88 F0            [24] 2095 	mov	b,r0
      000490 05 F0            [12] 2096 	inc	b
      000492 74 01            [12] 2097 	mov	a,#0x01
      000494 80 02            [24] 2098 	sjmp	00163$
      000496                       2099 00161$:
      000496 25 E0            [12] 2100 	add	a,acc
      000498                       2101 00163$:
      000498 D5 F0 FB         [24] 2102 	djnz	b,00161$
      00049B F8               [12] 2103 	mov	r0,a
      00049C E9               [12] 2104 	mov	a,r1
      00049D 42 00            [12] 2105 	orl	ar0,a
      00049F 8B 82            [24] 2106 	mov	dpl,r3
      0004A1 8C 83            [24] 2107 	mov	dph,r4
      0004A3 8D F0            [24] 2108 	mov	b,r5
      0004A5 E8               [12] 2109 	mov	a,r0
      0004A6 12r00r00         [24] 2110 	lcall	__gptrput
                                   2111 ;	src/main.c:474: u8Result = SW_OFF;
      0004A9 7E 00            [12] 2112 	mov	r6,#0x00
                                   2113 ;	src/main.c:478: break;
                                   2114 ;	src/main.c:479: case SW_OFF :
      0004AB 80 4B            [24] 2115 	sjmp	00114$
      0004AD                       2116 00107$:
                                   2117 ;	src/main.c:480: switch((au8SW>>i)&1) {
      0004AD 8A F0            [24] 2118 	mov	b,r2
      0004AF 05 F0            [12] 2119 	inc	b
      0004B1 EF               [12] 2120 	mov	a,r7
      0004B2 80 02            [24] 2121 	sjmp	00165$
      0004B4                       2122 00164$:
      0004B4 C3               [12] 2123 	clr	c
      0004B5 13               [12] 2124 	rrc	a
      0004B6                       2125 00165$:
      0004B6 D5 F0 FB         [24] 2126 	djnz	b,00164$
      0004B9 F8               [12] 2127 	mov	r0,a
      0004BA 53 00 01         [24] 2128 	anl	ar0,#0x01
      0004BD 79 00            [12] 2129 	mov	r1,#0x00
      0004BF B8 00 05         [24] 2130 	cjne	r0,#0x00,00166$
      0004C2 B9 00 02         [24] 2131 	cjne	r1,#0x00,00166$
      0004C5 80 31            [24] 2132 	sjmp	00114$
      0004C7                       2133 00166$:
      0004C7 B8 01 2E         [24] 2134 	cjne	r0,#0x01,00114$
      0004CA B9 00 2B         [24] 2135 	cjne	r1,#0x00,00114$
                                   2136 ;	src/main.c:482: su8PrevSW = au8SW;
      0004CD 8F*04            [24] 2137 	mov	_state_switches_su8PrevSW_65536_83,r7
                                   2138 ;	src/main.c:483: *apu8SwNum |= 1<<i;
      0004CF 8B 82            [24] 2139 	mov	dpl,r3
      0004D1 8C 83            [24] 2140 	mov	dph,r4
      0004D3 8D F0            [24] 2141 	mov	b,r5
      0004D5 12r00r00         [24] 2142 	lcall	__gptrget
      0004D8 F9               [12] 2143 	mov	r1,a
      0004D9 8A 00            [24] 2144 	mov	ar0,r2
      0004DB 88 F0            [24] 2145 	mov	b,r0
      0004DD 05 F0            [12] 2146 	inc	b
      0004DF 74 01            [12] 2147 	mov	a,#0x01
      0004E1 80 02            [24] 2148 	sjmp	00171$
      0004E3                       2149 00169$:
      0004E3 25 E0            [12] 2150 	add	a,acc
      0004E5                       2151 00171$:
      0004E5 D5 F0 FB         [24] 2152 	djnz	b,00169$
      0004E8 F8               [12] 2153 	mov	r0,a
      0004E9 E9               [12] 2154 	mov	a,r1
      0004EA 42 00            [12] 2155 	orl	ar0,a
      0004EC 8B 82            [24] 2156 	mov	dpl,r3
      0004EE 8C 83            [24] 2157 	mov	dph,r4
      0004F0 8D F0            [24] 2158 	mov	b,r5
      0004F2 E8               [12] 2159 	mov	a,r0
      0004F3 12r00r00         [24] 2160 	lcall	__gptrput
                                   2161 ;	src/main.c:484: u8Result = SW_ON;
      0004F6 7E 01            [12] 2162 	mov	r6,#0x01
                                   2163 ;	src/main.c:492: }
      0004F8                       2164 00114$:
                                   2165 ;	src/main.c:465: for (i=0;i<5;i++) {
      0004F8 0A               [12] 2166 	inc	r2
      0004F9 BA 05 00         [24] 2167 	cjne	r2,#0x05,00172$
      0004FC                       2168 00172$:
      0004FC 50 03            [24] 2169 	jnc	00173$
      0004FE 02r04r3D         [24] 2170 	ljmp	00113$
      000501                       2171 00173$:
                                   2172 ;	src/main.c:496: return u8Result;
      000501 8E 82            [24] 2173 	mov	dpl,r6
                                   2174 ;	src/main.c:584: }
      000503 22               [24] 2175 	ret
                                   2176 ;------------------------------------------------------------
                                   2177 ;Allocation info for local variables in function 'printoutbuf'
                                   2178 ;------------------------------------------------------------
                                   2179 ;apcBuf                    Allocated with name '_printoutbuf_PARM_2'
                                   2180 ;aucBufIdx                 Allocated to registers r7 
                                   2181 ;i                         Allocated with name '_printoutbuf_i_65536_91'
                                   2182 ;------------------------------------------------------------
                                   2183 ;	src/main.c:588: void printoutbuf(uint8 aucBufIdx, char * apcBuf)
                                   2184 ;	-----------------------------------------
                                   2185 ;	 function printoutbuf
                                   2186 ;	-----------------------------------------
      000504                       2187 _printoutbuf:
      000504 AF 82            [24] 2188 	mov	r7,dpl
                                   2189 ;	src/main.c:591: for (i=0;i<aucBufIdx;i++) {
      000506 AC*05            [24] 2190 	mov	r4,_printoutbuf_PARM_2
      000508 AD*06            [24] 2191 	mov	r5,(_printoutbuf_PARM_2 + 1)
      00050A AE*07            [24] 2192 	mov	r6,(_printoutbuf_PARM_2 + 2)
      00050C 7B 00            [12] 2193 	mov	r3,#0x00
      00050E                       2194 00103$:
      00050E C3               [12] 2195 	clr	c
      00050F EB               [12] 2196 	mov	a,r3
      000510 9F               [12] 2197 	subb	a,r7
      000511 50 3F            [24] 2198 	jnc	00101$
                                   2199 ;	src/main.c:592: printf_fast_f("%c", *apcBuf++);
      000513 8C 82            [24] 2200 	mov	dpl,r4
      000515 8D 83            [24] 2201 	mov	dph,r5
      000517 8E F0            [24] 2202 	mov	b,r6
      000519 12r00r00         [24] 2203 	lcall	__gptrget
      00051C FA               [12] 2204 	mov	r2,a
      00051D A3               [24] 2205 	inc	dptr
      00051E AC 82            [24] 2206 	mov	r4,dpl
      000520 AD 83            [24] 2207 	mov	r5,dph
      000522 8A 01            [24] 2208 	mov	ar1,r2
      000524 7A 00            [12] 2209 	mov	r2,#0x00
      000526 C0 07            [24] 2210 	push	ar7
      000528 C0 06            [24] 2211 	push	ar6
      00052A C0 05            [24] 2212 	push	ar5
      00052C C0 04            [24] 2213 	push	ar4
      00052E C0 03            [24] 2214 	push	ar3
      000530 C0 01            [24] 2215 	push	ar1
      000532 C0 02            [24] 2216 	push	ar2
      000534 74r31            [12] 2217 	mov	a,#___str_6
      000536 C0 E0            [24] 2218 	push	acc
      000538 74s00            [12] 2219 	mov	a,#(___str_6 >> 8)
      00053A C0 E0            [24] 2220 	push	acc
      00053C 12r00r00         [24] 2221 	lcall	_printf_fast_f
      00053F E5 81            [12] 2222 	mov	a,sp
      000541 24 FC            [12] 2223 	add	a,#0xfc
      000543 F5 81            [12] 2224 	mov	sp,a
      000545 D0 03            [24] 2225 	pop	ar3
      000547 D0 04            [24] 2226 	pop	ar4
      000549 D0 05            [24] 2227 	pop	ar5
      00054B D0 06            [24] 2228 	pop	ar6
      00054D D0 07            [24] 2229 	pop	ar7
                                   2230 ;	src/main.c:591: for (i=0;i<aucBufIdx;i++) {
      00054F 0B               [12] 2231 	inc	r3
      000550 80 BC            [24] 2232 	sjmp	00103$
      000552                       2233 00101$:
                                   2234 ;	src/main.c:594: printf_fast_f("\r\n");
      000552 74r2E            [12] 2235 	mov	a,#___str_5
      000554 C0 E0            [24] 2236 	push	acc
      000556 74s00            [12] 2237 	mov	a,#(___str_5 >> 8)
      000558 C0 E0            [24] 2238 	push	acc
      00055A 12r00r00         [24] 2239 	lcall	_printf_fast_f
      00055D 15 81            [12] 2240 	dec	sp
      00055F 15 81            [12] 2241 	dec	sp
                                   2242 ;	src/main.c:595: }
      000561 22               [24] 2243 	ret
                                   2244 ;------------------------------------------------------------
                                   2245 ;Allocation info for local variables in function 'print_help'
                                   2246 ;------------------------------------------------------------
                                   2247 ;	src/main.c:598: void print_help()
                                   2248 ;	-----------------------------------------
                                   2249 ;	 function print_help
                                   2250 ;	-----------------------------------------
      000562                       2251 _print_help:
                                   2252 ;	src/main.c:600: printf_fast_f("t: timer\r\n");
      000562 74rD2            [12] 2253 	mov	a,#___str_23
      000564 C0 E0            [24] 2254 	push	acc
      000566 74s01            [12] 2255 	mov	a,#(___str_23 >> 8)
      000568 C0 E0            [24] 2256 	push	acc
      00056A 12r00r00         [24] 2257 	lcall	_printf_fast_f
      00056D 15 81            [12] 2258 	dec	sp
      00056F 15 81            [12] 2259 	dec	sp
                                   2260 ;	src/main.c:601: printf_fast_f("0: LineFi EN0,1,2 off\r\n");
      000571 74rDD            [12] 2261 	mov	a,#___str_24
      000573 C0 E0            [24] 2262 	push	acc
      000575 74s01            [12] 2263 	mov	a,#(___str_24 >> 8)
      000577 C0 E0            [24] 2264 	push	acc
      000579 12r00r00         [24] 2265 	lcall	_printf_fast_f
      00057C 15 81            [12] 2266 	dec	sp
      00057E 15 81            [12] 2267 	dec	sp
                                   2268 ;	src/main.c:602: printf_fast_f("1: LineFi EN0 = 1\r\n");
      000580 74rF5            [12] 2269 	mov	a,#___str_25
      000582 C0 E0            [24] 2270 	push	acc
      000584 74s01            [12] 2271 	mov	a,#(___str_25 >> 8)
      000586 C0 E0            [24] 2272 	push	acc
      000588 12r00r00         [24] 2273 	lcall	_printf_fast_f
      00058B 15 81            [12] 2274 	dec	sp
      00058D 15 81            [12] 2275 	dec	sp
                                   2276 ;	src/main.c:603: printf_fast_f("2:\r\n");
      00058F 74r09            [12] 2277 	mov	a,#___str_26
      000591 C0 E0            [24] 2278 	push	acc
      000593 74s02            [12] 2279 	mov	a,#(___str_26 >> 8)
      000595 C0 E0            [24] 2280 	push	acc
      000597 12r00r00         [24] 2281 	lcall	_printf_fast_f
      00059A 15 81            [12] 2282 	dec	sp
      00059C 15 81            [12] 2283 	dec	sp
                                   2284 ;	src/main.c:604: printf_fast_f("3:\r\n");
      00059E 74r0E            [12] 2285 	mov	a,#___str_27
      0005A0 C0 E0            [24] 2286 	push	acc
      0005A2 74s02            [12] 2287 	mov	a,#(___str_27 >> 8)
      0005A4 C0 E0            [24] 2288 	push	acc
      0005A6 12r00r00         [24] 2289 	lcall	_printf_fast_f
      0005A9 15 81            [12] 2290 	dec	sp
      0005AB 15 81            [12] 2291 	dec	sp
                                   2292 ;	src/main.c:605: printf_fast_f("4:\r\n");
      0005AD 74r13            [12] 2293 	mov	a,#___str_28
      0005AF C0 E0            [24] 2294 	push	acc
      0005B1 74s02            [12] 2295 	mov	a,#(___str_28 >> 8)
      0005B3 C0 E0            [24] 2296 	push	acc
      0005B5 12r00r00         [24] 2297 	lcall	_printf_fast_f
      0005B8 15 81            [12] 2298 	dec	sp
      0005BA 15 81            [12] 2299 	dec	sp
                                   2300 ;	src/main.c:606: printf_fast_f("5:\r\n");
      0005BC 74r18            [12] 2301 	mov	a,#___str_29
      0005BE C0 E0            [24] 2302 	push	acc
      0005C0 74s02            [12] 2303 	mov	a,#(___str_29 >> 8)
      0005C2 C0 E0            [24] 2304 	push	acc
      0005C4 12r00r00         [24] 2305 	lcall	_printf_fast_f
      0005C7 15 81            [12] 2306 	dec	sp
      0005C9 15 81            [12] 2307 	dec	sp
                                   2308 ;	src/main.c:607: printf_fast_f("6:\r\n");
      0005CB 74r1D            [12] 2309 	mov	a,#___str_30
      0005CD C0 E0            [24] 2310 	push	acc
      0005CF 74s02            [12] 2311 	mov	a,#(___str_30 >> 8)
      0005D1 C0 E0            [24] 2312 	push	acc
      0005D3 12r00r00         [24] 2313 	lcall	_printf_fast_f
      0005D6 15 81            [12] 2314 	dec	sp
      0005D8 15 81            [12] 2315 	dec	sp
                                   2316 ;	src/main.c:608: printf_fast_f("7:\r\n");
      0005DA 74r22            [12] 2317 	mov	a,#___str_31
      0005DC C0 E0            [24] 2318 	push	acc
      0005DE 74s02            [12] 2319 	mov	a,#(___str_31 >> 8)
      0005E0 C0 E0            [24] 2320 	push	acc
      0005E2 12r00r00         [24] 2321 	lcall	_printf_fast_f
      0005E5 15 81            [12] 2322 	dec	sp
      0005E7 15 81            [12] 2323 	dec	sp
                                   2324 ;	src/main.c:609: printf_fast_f("h: Addr--\r\n");
      0005E9 74r27            [12] 2325 	mov	a,#___str_32
      0005EB C0 E0            [24] 2326 	push	acc
      0005ED 74s02            [12] 2327 	mov	a,#(___str_32 >> 8)
      0005EF C0 E0            [24] 2328 	push	acc
      0005F1 12r00r00         [24] 2329 	lcall	_printf_fast_f
      0005F4 15 81            [12] 2330 	dec	sp
      0005F6 15 81            [12] 2331 	dec	sp
                                   2332 ;	src/main.c:610: printf_fast_f("j: Cmd--\r\n");
      0005F8 74r33            [12] 2333 	mov	a,#___str_33
      0005FA C0 E0            [24] 2334 	push	acc
      0005FC 74s02            [12] 2335 	mov	a,#(___str_33 >> 8)
      0005FE C0 E0            [24] 2336 	push	acc
      000600 12r00r00         [24] 2337 	lcall	_printf_fast_f
      000603 15 81            [12] 2338 	dec	sp
      000605 15 81            [12] 2339 	dec	sp
                                   2340 ;	src/main.c:611: printf_fast_f("k: Cmd++\r\n");
      000607 74r3E            [12] 2341 	mov	a,#___str_34
      000609 C0 E0            [24] 2342 	push	acc
      00060B 74s02            [12] 2343 	mov	a,#(___str_34 >> 8)
      00060D C0 E0            [24] 2344 	push	acc
      00060F 12r00r00         [24] 2345 	lcall	_printf_fast_f
      000612 15 81            [12] 2346 	dec	sp
      000614 15 81            [12] 2347 	dec	sp
                                   2348 ;	src/main.c:612: printf_fast_f("l: Addr++\r\n");
      000616 74r49            [12] 2349 	mov	a,#___str_35
      000618 C0 E0            [24] 2350 	push	acc
      00061A 74s02            [12] 2351 	mov	a,#(___str_35 >> 8)
      00061C C0 E0            [24] 2352 	push	acc
      00061E 12r00r00         [24] 2353 	lcall	_printf_fast_f
      000621 15 81            [12] 2354 	dec	sp
      000623 15 81            [12] 2355 	dec	sp
                                   2356 ;	src/main.c:613: printf_fast_f("s: sending\r\n");
      000625 74r55            [12] 2357 	mov	a,#___str_36
      000627 C0 E0            [24] 2358 	push	acc
      000629 74s02            [12] 2359 	mov	a,#(___str_36 >> 8)
      00062B C0 E0            [24] 2360 	push	acc
      00062D 12r00r00         [24] 2361 	lcall	_printf_fast_f
      000630 15 81            [12] 2362 	dec	sp
      000632 15 81            [12] 2363 	dec	sp
                                   2364 ;	src/main.c:614: }
      000634 22               [24] 2365 	ret
                                   2366 ;------------------------------------------------------------
                                   2367 ;Allocation info for local variables in function 'act_by_one_key'
                                   2368 ;------------------------------------------------------------
                                   2369 ;apu8LineFiCmd             Allocated with name '_act_by_one_key_PARM_2'
                                   2370 ;apu8LineFiAddr            Allocated with name '_act_by_one_key_PARM_3'
                                   2371 ;au8RxUART                 Allocated to registers r7 
                                   2372 ;sloc0                     Allocated with name '_act_by_one_key_sloc0_1_0'
                                   2373 ;u8Data                    Allocated with name '_act_by_one_key_u8Data_65536_96'
                                   2374 ;------------------------------------------------------------
                                   2375 ;	src/main.c:616: void act_by_one_key(uint8 au8RxUART, uint8 * apu8LineFiCmd, uint8 * apu8LineFiAddr)
                                   2376 ;	-----------------------------------------
                                   2377 ;	 function act_by_one_key
                                   2378 ;	-----------------------------------------
      000635                       2379 _act_by_one_key:
      000635 AF 82            [24] 2380 	mov	r7,dpl
                                   2381 ;	src/main.c:619: switch(au8RxUART) {
      000637 BF 2B 03         [24] 2382 	cjne	r7,#0x2b,00246$
      00063A 02r0Cr1E         [24] 2383 	ljmp	00129$
      00063D                       2384 00246$:
      00063D BF 2D 03         [24] 2385 	cjne	r7,#0x2d,00247$
      000640 02r0Cr43         [24] 2386 	ljmp	00130$
      000643                       2387 00247$:
      000643 BF 30 03         [24] 2388 	cjne	r7,#0x30,00248$
      000646 02r06rDE         [24] 2389 	ljmp	00102$
      000649                       2390 00248$:
      000649 BF 31 03         [24] 2391 	cjne	r7,#0x31,00249$
      00064C 02r06rF7         [24] 2392 	ljmp	00103$
      00064F                       2393 00249$:
      00064F BF 32 03         [24] 2394 	cjne	r7,#0x32,00250$
      000652 02r07r0C         [24] 2395 	ljmp	00104$
      000655                       2396 00250$:
      000655 BF 33 03         [24] 2397 	cjne	r7,#0x33,00251$
      000658 02r07r21         [24] 2398 	ljmp	00105$
      00065B                       2399 00251$:
      00065B BF 34 03         [24] 2400 	cjne	r7,#0x34,00252$
      00065E 02r07r36         [24] 2401 	ljmp	00106$
      000661                       2402 00252$:
      000661 BF 35 03         [24] 2403 	cjne	r7,#0x35,00253$
      000664 02r07r58         [24] 2404 	ljmp	00107$
      000667                       2405 00253$:
      000667 BF 36 03         [24] 2406 	cjne	r7,#0x36,00254$
      00066A 02r07r8E         [24] 2407 	ljmp	00110$
      00066D                       2408 00254$:
      00066D BF 37 03         [24] 2409 	cjne	r7,#0x37,00255$
      000670 02r07rBC         [24] 2410 	ljmp	00111$
      000673                       2411 00255$:
      000673 BF 48 03         [24] 2412 	cjne	r7,#0x48,00256$
      000676 02r05r62         [24] 2413 	ljmp	_print_help
      000679                       2414 00256$:
      000679 BF 53 03         [24] 2415 	cjne	r7,#0x53,00257$
      00067C 02r0BrF4         [24] 2416 	ljmp	00128$
      00067F                       2417 00257$:
      00067F BF 61 03         [24] 2418 	cjne	r7,#0x61,00258$
      000682 02r0Cr67         [24] 2419 	ljmp	00131$
      000685                       2420 00258$:
      000685 BF 62 03         [24] 2421 	cjne	r7,#0x62,00259$
      000688 02r0Cr6D         [24] 2422 	ljmp	00132$
      00068B                       2423 00259$:
      00068B BF 63 03         [24] 2424 	cjne	r7,#0x63,00260$
      00068E 02r0Cr73         [24] 2425 	ljmp	00133$
      000691                       2426 00260$:
      000691 BF 68 03         [24] 2427 	cjne	r7,#0x68,00261$
      000694 02r07rEA         [24] 2428 	ljmp	00112$
      000697                       2429 00261$:
      000697 BF 6A 03         [24] 2430 	cjne	r7,#0x6a,00262$
      00069A 02r08r76         [24] 2431 	ljmp	00116$
      00069D                       2432 00262$:
      00069D BF 6B 03         [24] 2433 	cjne	r7,#0x6b,00263$
      0006A0 02r08rA9         [24] 2434 	ljmp	00117$
      0006A3                       2435 00263$:
      0006A3 BF 6C 03         [24] 2436 	cjne	r7,#0x6c,00264$
      0006A6 02r08rDC         [24] 2437 	ljmp	00118$
      0006A9                       2438 00264$:
      0006A9 BF 73 03         [24] 2439 	cjne	r7,#0x73,00265$
      0006AC 02r09r68         [24] 2440 	ljmp	00122$
      0006AF                       2441 00265$:
      0006AF BF 74 02         [24] 2442 	cjne	r7,#0x74,00266$
      0006B2 80 07            [24] 2443 	sjmp	00101$
      0006B4                       2444 00266$:
      0006B4 BF 75 03         [24] 2445 	cjne	r7,#0x75,00267$
      0006B7 02r0Br35         [24] 2446 	ljmp	00127$
      0006BA                       2447 00267$:
      0006BA 22               [24] 2448 	ret
                                   2449 ;	src/main.c:620: case 't' : // 1msec 카운터 확인, 5초에 40,000
      0006BB                       2450 00101$:
                                   2451 ;	src/main.c:621: printf_fast_f("%u\n\r", gu16TimeCnt);
      0006BB 90r00r71         [24] 2452 	mov	dptr,#_gu16TimeCnt
      0006BE E0               [24] 2453 	movx	a,@dptr
      0006BF C0 E0            [24] 2454 	push	acc
      0006C1 A3               [24] 2455 	inc	dptr
      0006C2 E0               [24] 2456 	movx	a,@dptr
      0006C3 C0 E0            [24] 2457 	push	acc
      0006C5 74r62            [12] 2458 	mov	a,#___str_37
      0006C7 C0 E0            [24] 2459 	push	acc
      0006C9 74s02            [12] 2460 	mov	a,#(___str_37 >> 8)
      0006CB C0 E0            [24] 2461 	push	acc
      0006CD 12r00r00         [24] 2462 	lcall	_printf_fast_f
      0006D0 E5 81            [12] 2463 	mov	a,sp
      0006D2 24 FC            [12] 2464 	add	a,#0xfc
      0006D4 F5 81            [12] 2465 	mov	sp,a
                                   2466 ;	src/main.c:622: gu16TimeCnt = 0;
      0006D6 90r00r71         [24] 2467 	mov	dptr,#_gu16TimeCnt
      0006D9 E4               [12] 2468 	clr	a
      0006DA F0               [24] 2469 	movx	@dptr,a
      0006DB A3               [24] 2470 	inc	dptr
      0006DC F0               [24] 2471 	movx	@dptr,a
                                   2472 ;	src/main.c:623: break;
      0006DD 22               [24] 2473 	ret
                                   2474 ;	src/main.c:624: case '0' :
      0006DE                       2475 00102$:
                                   2476 ;	src/main.c:625: gu8UART = 0;
      0006DE 75*00 00         [24] 2477 	mov	_gu8UART,#0x00
                                   2478 ;	src/main.c:626: LINEFI_EN0 = 0;
                                   2479 ;	assignBit
      0006E1 C2 90            [12] 2480 	clr	_P10
                                   2481 ;	src/main.c:627: LINEFI_EN1 = 0;
                                   2482 ;	assignBit
      0006E3 C2 91            [12] 2483 	clr	_P11
                                   2484 ;	src/main.c:628: LINEFI_EN2 = 0;
                                   2485 ;	assignBit
      0006E5 C2 92            [12] 2486 	clr	_P12
                                   2487 ;	src/main.c:629: printf_fast_f("LINEFI_EN0=0\n\r");
      0006E7 74r67            [12] 2488 	mov	a,#___str_38
      0006E9 C0 E0            [24] 2489 	push	acc
      0006EB 74s02            [12] 2490 	mov	a,#(___str_38 >> 8)
      0006ED C0 E0            [24] 2491 	push	acc
      0006EF 12r00r00         [24] 2492 	lcall	_printf_fast_f
      0006F2 15 81            [12] 2493 	dec	sp
      0006F4 15 81            [12] 2494 	dec	sp
                                   2495 ;	src/main.c:630: break;
      0006F6 22               [24] 2496 	ret
                                   2497 ;	src/main.c:631: case '1' :
      0006F7                       2498 00103$:
                                   2499 ;	src/main.c:632: gu8UART = 0;
      0006F7 75*00 00         [24] 2500 	mov	_gu8UART,#0x00
                                   2501 ;	src/main.c:633: LINEFI_EN0 = 1;
                                   2502 ;	assignBit
      0006FA D2 90            [12] 2503 	setb	_P10
                                   2504 ;	src/main.c:634: printf_fast_f("LINEFI_EN0=1\n\r");
      0006FC 74r76            [12] 2505 	mov	a,#___str_39
      0006FE C0 E0            [24] 2506 	push	acc
      000700 74s02            [12] 2507 	mov	a,#(___str_39 >> 8)
      000702 C0 E0            [24] 2508 	push	acc
      000704 12r00r00         [24] 2509 	lcall	_printf_fast_f
      000707 15 81            [12] 2510 	dec	sp
      000709 15 81            [12] 2511 	dec	sp
                                   2512 ;	src/main.c:635: break;
      00070B 22               [24] 2513 	ret
                                   2514 ;	src/main.c:636: case '2' :
      00070C                       2515 00104$:
                                   2516 ;	src/main.c:637: gu8UART = 0;
      00070C 75*00 00         [24] 2517 	mov	_gu8UART,#0x00
                                   2518 ;	src/main.c:638: LINEFI_TX = 0;
                                   2519 ;	assignBit
      00070F C2 96            [12] 2520 	clr	_P16
                                   2521 ;	src/main.c:639: printf_fast_f("LINEFI_TX=0\n\r");
      000711 74r85            [12] 2522 	mov	a,#___str_40
      000713 C0 E0            [24] 2523 	push	acc
      000715 74s02            [12] 2524 	mov	a,#(___str_40 >> 8)
      000717 C0 E0            [24] 2525 	push	acc
      000719 12r00r00         [24] 2526 	lcall	_printf_fast_f
      00071C 15 81            [12] 2527 	dec	sp
      00071E 15 81            [12] 2528 	dec	sp
                                   2529 ;	src/main.c:640: break;
      000720 22               [24] 2530 	ret
                                   2531 ;	src/main.c:641: case '3' :
      000721                       2532 00105$:
                                   2533 ;	src/main.c:642: gu8UART = 0;
      000721 75*00 00         [24] 2534 	mov	_gu8UART,#0x00
                                   2535 ;	src/main.c:643: LINEFI_TX = 1;
                                   2536 ;	assignBit
      000724 D2 96            [12] 2537 	setb	_P16
                                   2538 ;	src/main.c:644: printf_fast_f("LINEFI_TX=1\n\r");
      000726 74r93            [12] 2539 	mov	a,#___str_41
      000728 C0 E0            [24] 2540 	push	acc
      00072A 74s02            [12] 2541 	mov	a,#(___str_41 >> 8)
      00072C C0 E0            [24] 2542 	push	acc
      00072E 12r00r00         [24] 2543 	lcall	_printf_fast_f
      000731 15 81            [12] 2544 	dec	sp
      000733 15 81            [12] 2545 	dec	sp
                                   2546 ;	src/main.c:645: break;
      000735 22               [24] 2547 	ret
                                   2548 ;	src/main.c:646: case '4' :
      000736                       2549 00106$:
                                   2550 ;	src/main.c:647: gu8UART = 0;
      000736 75*00 00         [24] 2551 	mov	_gu8UART,#0x00
                                   2552 ;	src/main.c:648: TOGGLE(LINEFI_TX);
      000739 B2 96            [12] 2553 	cpl	_P16
                                   2554 ;	src/main.c:649: printf_fast_f("LINEFI_TX=%d\n\r", LINEFI_TX);
      00073B A2 96            [12] 2555 	mov	c,_P16
      00073D E4               [12] 2556 	clr	a
      00073E 33               [12] 2557 	rlc	a
      00073F FE               [12] 2558 	mov	r6,a
      000740 7F 00            [12] 2559 	mov	r7,#0x00
      000742 C0 06            [24] 2560 	push	ar6
      000744 C0 07            [24] 2561 	push	ar7
      000746 74rA1            [12] 2562 	mov	a,#___str_42
      000748 C0 E0            [24] 2563 	push	acc
      00074A 74s02            [12] 2564 	mov	a,#(___str_42 >> 8)
      00074C C0 E0            [24] 2565 	push	acc
      00074E 12r00r00         [24] 2566 	lcall	_printf_fast_f
      000751 E5 81            [12] 2567 	mov	a,sp
      000753 24 FC            [12] 2568 	add	a,#0xfc
      000755 F5 81            [12] 2569 	mov	sp,a
                                   2570 ;	src/main.c:650: break;
      000757 22               [24] 2571 	ret
                                   2572 ;	src/main.c:651: case '5' :
      000758                       2573 00107$:
                                   2574 ;	src/main.c:652: gu8UART = 0;
      000758 75*00 00         [24] 2575 	mov	_gu8UART,#0x00
                                   2576 ;	src/main.c:653: if (LINEFI_EN0 == 0) {
      00075B 20 90 02         [24] 2577 	jb	_P10,00109$
                                   2578 ;	src/main.c:654: LINEFI_TX = 1;
                                   2579 ;	assignBit
      00075E D2 96            [12] 2580 	setb	_P16
      000760                       2581 00109$:
                                   2582 ;	src/main.c:656: TOGGLE(LINEFI_EN0);
      000760 B2 90            [12] 2583 	cpl	_P10
                                   2584 ;	src/main.c:657: printf_fast_f("LINEFI_EN0=");
      000762 74rB0            [12] 2585 	mov	a,#___str_43
      000764 C0 E0            [24] 2586 	push	acc
      000766 74s02            [12] 2587 	mov	a,#(___str_43 >> 8)
      000768 C0 E0            [24] 2588 	push	acc
      00076A 12r00r00         [24] 2589 	lcall	_printf_fast_f
      00076D 15 81            [12] 2590 	dec	sp
      00076F 15 81            [12] 2591 	dec	sp
                                   2592 ;	src/main.c:658: printf_fast_f("%d\n\r", LINEFI_EN0);
      000771 A2 90            [12] 2593 	mov	c,_P10
      000773 E4               [12] 2594 	clr	a
      000774 33               [12] 2595 	rlc	a
      000775 FE               [12] 2596 	mov	r6,a
      000776 7F 00            [12] 2597 	mov	r7,#0x00
      000778 C0 06            [24] 2598 	push	ar6
      00077A C0 07            [24] 2599 	push	ar7
      00077C 74rBC            [12] 2600 	mov	a,#___str_44
      00077E C0 E0            [24] 2601 	push	acc
      000780 74s02            [12] 2602 	mov	a,#(___str_44 >> 8)
      000782 C0 E0            [24] 2603 	push	acc
      000784 12r00r00         [24] 2604 	lcall	_printf_fast_f
      000787 E5 81            [12] 2605 	mov	a,sp
      000789 24 FC            [12] 2606 	add	a,#0xfc
      00078B F5 81            [12] 2607 	mov	sp,a
                                   2608 ;	src/main.c:659: break;
      00078D 22               [24] 2609 	ret
                                   2610 ;	src/main.c:660: case '6' :
      00078E                       2611 00110$:
                                   2612 ;	src/main.c:661: TOGGLE(LINEFI_EN1);
      00078E B2 91            [12] 2613 	cpl	_P11
                                   2614 ;	src/main.c:662: printf_fast_f("LINEFI_EN1=");
      000790 74rC1            [12] 2615 	mov	a,#___str_45
      000792 C0 E0            [24] 2616 	push	acc
      000794 74s02            [12] 2617 	mov	a,#(___str_45 >> 8)
      000796 C0 E0            [24] 2618 	push	acc
      000798 12r00r00         [24] 2619 	lcall	_printf_fast_f
      00079B 15 81            [12] 2620 	dec	sp
      00079D 15 81            [12] 2621 	dec	sp
                                   2622 ;	src/main.c:663: printf_fast_f("%d\n\r", LINEFI_EN1);
      00079F A2 91            [12] 2623 	mov	c,_P11
      0007A1 E4               [12] 2624 	clr	a
      0007A2 33               [12] 2625 	rlc	a
      0007A3 FE               [12] 2626 	mov	r6,a
      0007A4 7F 00            [12] 2627 	mov	r7,#0x00
      0007A6 C0 06            [24] 2628 	push	ar6
      0007A8 C0 07            [24] 2629 	push	ar7
      0007AA 74rBC            [12] 2630 	mov	a,#___str_44
      0007AC C0 E0            [24] 2631 	push	acc
      0007AE 74s02            [12] 2632 	mov	a,#(___str_44 >> 8)
      0007B0 C0 E0            [24] 2633 	push	acc
      0007B2 12r00r00         [24] 2634 	lcall	_printf_fast_f
      0007B5 E5 81            [12] 2635 	mov	a,sp
      0007B7 24 FC            [12] 2636 	add	a,#0xfc
      0007B9 F5 81            [12] 2637 	mov	sp,a
                                   2638 ;	src/main.c:664: break;
      0007BB 22               [24] 2639 	ret
                                   2640 ;	src/main.c:665: case '7' :
      0007BC                       2641 00111$:
                                   2642 ;	src/main.c:666: TOGGLE(LINEFI_EN2);
      0007BC B2 92            [12] 2643 	cpl	_P12
                                   2644 ;	src/main.c:667: printf_fast_f("LINEFI_EN2=");
      0007BE 74rCD            [12] 2645 	mov	a,#___str_46
      0007C0 C0 E0            [24] 2646 	push	acc
      0007C2 74s02            [12] 2647 	mov	a,#(___str_46 >> 8)
      0007C4 C0 E0            [24] 2648 	push	acc
      0007C6 12r00r00         [24] 2649 	lcall	_printf_fast_f
      0007C9 15 81            [12] 2650 	dec	sp
      0007CB 15 81            [12] 2651 	dec	sp
                                   2652 ;	src/main.c:668: printf_fast_f("%d\n\r", LINEFI_EN2);
      0007CD A2 92            [12] 2653 	mov	c,_P12
      0007CF E4               [12] 2654 	clr	a
      0007D0 33               [12] 2655 	rlc	a
      0007D1 FE               [12] 2656 	mov	r6,a
      0007D2 7F 00            [12] 2657 	mov	r7,#0x00
      0007D4 C0 06            [24] 2658 	push	ar6
      0007D6 C0 07            [24] 2659 	push	ar7
      0007D8 74rBC            [12] 2660 	mov	a,#___str_44
      0007DA C0 E0            [24] 2661 	push	acc
      0007DC 74s02            [12] 2662 	mov	a,#(___str_44 >> 8)
      0007DE C0 E0            [24] 2663 	push	acc
      0007E0 12r00r00         [24] 2664 	lcall	_printf_fast_f
      0007E3 E5 81            [12] 2665 	mov	a,sp
      0007E5 24 FC            [12] 2666 	add	a,#0xfc
      0007E7 F5 81            [12] 2667 	mov	sp,a
                                   2668 ;	src/main.c:669: break;
      0007E9 22               [24] 2669 	ret
                                   2670 ;	src/main.c:673: case 'h' : // <<
      0007EA                       2671 00112$:
                                   2672 ;	src/main.c:674: (*apu8LineFiAddr)--;
      0007EA AD*0B            [24] 2673 	mov	r5,_act_by_one_key_PARM_3
      0007EC AE*0C            [24] 2674 	mov	r6,(_act_by_one_key_PARM_3 + 1)
      0007EE AF*0D            [24] 2675 	mov	r7,(_act_by_one_key_PARM_3 + 2)
      0007F0 8D 82            [24] 2676 	mov	dpl,r5
      0007F2 8E 83            [24] 2677 	mov	dph,r6
      0007F4 8F F0            [24] 2678 	mov	b,r7
      0007F6 12r00r00         [24] 2679 	lcall	__gptrget
      0007F9 FC               [12] 2680 	mov	r4,a
      0007FA 1C               [12] 2681 	dec	r4
      0007FB 8D 82            [24] 2682 	mov	dpl,r5
      0007FD 8E 83            [24] 2683 	mov	dph,r6
      0007FF 8F F0            [24] 2684 	mov	b,r7
      000801 EC               [12] 2685 	mov	a,r4
      000802 12r00r00         [24] 2686 	lcall	__gptrput
                                   2687 ;	src/main.c:675: if (*apu8LineFiCmd == 1) {
      000805 AA*08            [24] 2688 	mov	r2,_act_by_one_key_PARM_2
      000807 AB*09            [24] 2689 	mov	r3,(_act_by_one_key_PARM_2 + 1)
      000809 AC*0A            [24] 2690 	mov	r4,(_act_by_one_key_PARM_2 + 2)
      00080B 8A 82            [24] 2691 	mov	dpl,r2
      00080D 8B 83            [24] 2692 	mov	dph,r3
      00080F 8C F0            [24] 2693 	mov	b,r4
      000811 12r00r00         [24] 2694 	lcall	__gptrget
      000814 FA               [12] 2695 	mov	r2,a
      000815 BA 01 3C         [24] 2696 	cjne	r2,#0x01,00114$
                                   2697 ;	src/main.c:676: printf_fast_f("uart speed: %lu:\n\r", gpu32UartSpeed[*apu8LineFiAddr]);
      000818 8D 82            [24] 2698 	mov	dpl,r5
      00081A 8E 83            [24] 2699 	mov	dph,r6
      00081C 8F F0            [24] 2700 	mov	b,r7
      00081E 12r00r00         [24] 2701 	lcall	__gptrget
      000821 75 F0 04         [24] 2702 	mov	b,#0x04
      000824 A4               [48] 2703 	mul	ab
      000825 24r75            [12] 2704 	add	a,#_gpu32UartSpeed
      000827 F5 82            [12] 2705 	mov	dpl,a
      000829 74s00            [12] 2706 	mov	a,#(_gpu32UartSpeed >> 8)
      00082B 35 F0            [12] 2707 	addc	a,b
      00082D F5 83            [12] 2708 	mov	dph,a
      00082F E0               [24] 2709 	movx	a,@dptr
      000830 F9               [12] 2710 	mov	r1,a
      000831 A3               [24] 2711 	inc	dptr
      000832 E0               [24] 2712 	movx	a,@dptr
      000833 FA               [12] 2713 	mov	r2,a
      000834 A3               [24] 2714 	inc	dptr
      000835 E0               [24] 2715 	movx	a,@dptr
      000836 FB               [12] 2716 	mov	r3,a
      000837 A3               [24] 2717 	inc	dptr
      000838 E0               [24] 2718 	movx	a,@dptr
      000839 FC               [12] 2719 	mov	r4,a
      00083A C0 01            [24] 2720 	push	ar1
      00083C C0 02            [24] 2721 	push	ar2
      00083E C0 03            [24] 2722 	push	ar3
      000840 C0 04            [24] 2723 	push	ar4
      000842 74rD9            [12] 2724 	mov	a,#___str_47
      000844 C0 E0            [24] 2725 	push	acc
      000846 74s02            [12] 2726 	mov	a,#(___str_47 >> 8)
      000848 C0 E0            [24] 2727 	push	acc
      00084A 12r00r00         [24] 2728 	lcall	_printf_fast_f
      00084D E5 81            [12] 2729 	mov	a,sp
      00084F 24 FA            [12] 2730 	add	a,#0xfa
      000851 F5 81            [12] 2731 	mov	sp,a
      000853 22               [24] 2732 	ret
      000854                       2733 00114$:
                                   2734 ;	src/main.c:679: printf_fast_f("address: %d\n\r", *apu8LineFiAddr);
      000854 8D 82            [24] 2735 	mov	dpl,r5
      000856 8E 83            [24] 2736 	mov	dph,r6
      000858 8F F0            [24] 2737 	mov	b,r7
      00085A 12r00r00         [24] 2738 	lcall	__gptrget
      00085D FD               [12] 2739 	mov	r5,a
      00085E 7F 00            [12] 2740 	mov	r7,#0x00
      000860 C0 05            [24] 2741 	push	ar5
      000862 C0 07            [24] 2742 	push	ar7
      000864 74rEC            [12] 2743 	mov	a,#___str_48
      000866 C0 E0            [24] 2744 	push	acc
      000868 74s02            [12] 2745 	mov	a,#(___str_48 >> 8)
      00086A C0 E0            [24] 2746 	push	acc
      00086C 12r00r00         [24] 2747 	lcall	_printf_fast_f
      00086F E5 81            [12] 2748 	mov	a,sp
      000871 24 FC            [12] 2749 	add	a,#0xfc
      000873 F5 81            [12] 2750 	mov	sp,a
                                   2751 ;	src/main.c:681: break;
      000875 22               [24] 2752 	ret
                                   2753 ;	src/main.c:682: case 'j' : //  down
      000876                       2754 00116$:
                                   2755 ;	src/main.c:683: (*apu8LineFiCmd)--;
      000876 AD*08            [24] 2756 	mov	r5,_act_by_one_key_PARM_2
      000878 AE*09            [24] 2757 	mov	r6,(_act_by_one_key_PARM_2 + 1)
      00087A AF*0A            [24] 2758 	mov	r7,(_act_by_one_key_PARM_2 + 2)
      00087C 8D 82            [24] 2759 	mov	dpl,r5
      00087E 8E 83            [24] 2760 	mov	dph,r6
      000880 8F F0            [24] 2761 	mov	b,r7
      000882 12r00r00         [24] 2762 	lcall	__gptrget
      000885 FC               [12] 2763 	mov	r4,a
      000886 1C               [12] 2764 	dec	r4
      000887 8D 82            [24] 2765 	mov	dpl,r5
      000889 8E 83            [24] 2766 	mov	dph,r6
      00088B 8F F0            [24] 2767 	mov	b,r7
      00088D EC               [12] 2768 	mov	a,r4
      00088E 12r00r00         [24] 2769 	lcall	__gptrput
                                   2770 ;	src/main.c:684: printf_fast_f("command: %d\n\r", *apu8LineFiCmd);
      000891 7F 00            [12] 2771 	mov	r7,#0x00
      000893 C0 04            [24] 2772 	push	ar4
      000895 C0 07            [24] 2773 	push	ar7
      000897 74rFA            [12] 2774 	mov	a,#___str_49
      000899 C0 E0            [24] 2775 	push	acc
      00089B 74s02            [12] 2776 	mov	a,#(___str_49 >> 8)
      00089D C0 E0            [24] 2777 	push	acc
      00089F 12r00r00         [24] 2778 	lcall	_printf_fast_f
      0008A2 E5 81            [12] 2779 	mov	a,sp
      0008A4 24 FC            [12] 2780 	add	a,#0xfc
      0008A6 F5 81            [12] 2781 	mov	sp,a
                                   2782 ;	src/main.c:685: break;
      0008A8 22               [24] 2783 	ret
                                   2784 ;	src/main.c:686: case 'k' : // up
      0008A9                       2785 00117$:
                                   2786 ;	src/main.c:687: (*apu8LineFiCmd)++;
      0008A9 AD*08            [24] 2787 	mov	r5,_act_by_one_key_PARM_2
      0008AB AE*09            [24] 2788 	mov	r6,(_act_by_one_key_PARM_2 + 1)
      0008AD AF*0A            [24] 2789 	mov	r7,(_act_by_one_key_PARM_2 + 2)
      0008AF 8D 82            [24] 2790 	mov	dpl,r5
      0008B1 8E 83            [24] 2791 	mov	dph,r6
      0008B3 8F F0            [24] 2792 	mov	b,r7
      0008B5 12r00r00         [24] 2793 	lcall	__gptrget
      0008B8 FC               [12] 2794 	mov	r4,a
      0008B9 0C               [12] 2795 	inc	r4
      0008BA 8D 82            [24] 2796 	mov	dpl,r5
      0008BC 8E 83            [24] 2797 	mov	dph,r6
      0008BE 8F F0            [24] 2798 	mov	b,r7
      0008C0 EC               [12] 2799 	mov	a,r4
      0008C1 12r00r00         [24] 2800 	lcall	__gptrput
                                   2801 ;	src/main.c:688: printf_fast_f("command: %d\n\r", *apu8LineFiCmd);
      0008C4 7F 00            [12] 2802 	mov	r7,#0x00
      0008C6 C0 04            [24] 2803 	push	ar4
      0008C8 C0 07            [24] 2804 	push	ar7
      0008CA 74rFA            [12] 2805 	mov	a,#___str_49
      0008CC C0 E0            [24] 2806 	push	acc
      0008CE 74s02            [12] 2807 	mov	a,#(___str_49 >> 8)
      0008D0 C0 E0            [24] 2808 	push	acc
      0008D2 12r00r00         [24] 2809 	lcall	_printf_fast_f
      0008D5 E5 81            [12] 2810 	mov	a,sp
      0008D7 24 FC            [12] 2811 	add	a,#0xfc
      0008D9 F5 81            [12] 2812 	mov	sp,a
                                   2813 ;	src/main.c:689: break;
      0008DB 22               [24] 2814 	ret
                                   2815 ;	src/main.c:690: case 'l' : // >>
      0008DC                       2816 00118$:
                                   2817 ;	src/main.c:691: (*apu8LineFiAddr)++;
      0008DC AD*0B            [24] 2818 	mov	r5,_act_by_one_key_PARM_3
      0008DE AE*0C            [24] 2819 	mov	r6,(_act_by_one_key_PARM_3 + 1)
      0008E0 AF*0D            [24] 2820 	mov	r7,(_act_by_one_key_PARM_3 + 2)
      0008E2 8D 82            [24] 2821 	mov	dpl,r5
      0008E4 8E 83            [24] 2822 	mov	dph,r6
      0008E6 8F F0            [24] 2823 	mov	b,r7
      0008E8 12r00r00         [24] 2824 	lcall	__gptrget
      0008EB FC               [12] 2825 	mov	r4,a
      0008EC 0C               [12] 2826 	inc	r4
      0008ED 8D 82            [24] 2827 	mov	dpl,r5
      0008EF 8E 83            [24] 2828 	mov	dph,r6
      0008F1 8F F0            [24] 2829 	mov	b,r7
      0008F3 EC               [12] 2830 	mov	a,r4
      0008F4 12r00r00         [24] 2831 	lcall	__gptrput
                                   2832 ;	src/main.c:692: if (*apu8LineFiCmd == 1) {
      0008F7 AA*08            [24] 2833 	mov	r2,_act_by_one_key_PARM_2
      0008F9 AB*09            [24] 2834 	mov	r3,(_act_by_one_key_PARM_2 + 1)
      0008FB AC*0A            [24] 2835 	mov	r4,(_act_by_one_key_PARM_2 + 2)
      0008FD 8A 82            [24] 2836 	mov	dpl,r2
      0008FF 8B 83            [24] 2837 	mov	dph,r3
      000901 8C F0            [24] 2838 	mov	b,r4
      000903 12r00r00         [24] 2839 	lcall	__gptrget
      000906 FA               [12] 2840 	mov	r2,a
      000907 BA 01 3C         [24] 2841 	cjne	r2,#0x01,00120$
                                   2842 ;	src/main.c:693: printf_fast_f("uart speed: %lu:\n\r", gpu32UartSpeed[*apu8LineFiAddr]);
      00090A 8D 82            [24] 2843 	mov	dpl,r5
      00090C 8E 83            [24] 2844 	mov	dph,r6
      00090E 8F F0            [24] 2845 	mov	b,r7
      000910 12r00r00         [24] 2846 	lcall	__gptrget
      000913 75 F0 04         [24] 2847 	mov	b,#0x04
      000916 A4               [48] 2848 	mul	ab
      000917 24r75            [12] 2849 	add	a,#_gpu32UartSpeed
      000919 F5 82            [12] 2850 	mov	dpl,a
      00091B 74s00            [12] 2851 	mov	a,#(_gpu32UartSpeed >> 8)
      00091D 35 F0            [12] 2852 	addc	a,b
      00091F F5 83            [12] 2853 	mov	dph,a
      000921 E0               [24] 2854 	movx	a,@dptr
      000922 F9               [12] 2855 	mov	r1,a
      000923 A3               [24] 2856 	inc	dptr
      000924 E0               [24] 2857 	movx	a,@dptr
      000925 FA               [12] 2858 	mov	r2,a
      000926 A3               [24] 2859 	inc	dptr
      000927 E0               [24] 2860 	movx	a,@dptr
      000928 FB               [12] 2861 	mov	r3,a
      000929 A3               [24] 2862 	inc	dptr
      00092A E0               [24] 2863 	movx	a,@dptr
      00092B FC               [12] 2864 	mov	r4,a
      00092C C0 01            [24] 2865 	push	ar1
      00092E C0 02            [24] 2866 	push	ar2
      000930 C0 03            [24] 2867 	push	ar3
      000932 C0 04            [24] 2868 	push	ar4
      000934 74rD9            [12] 2869 	mov	a,#___str_47
      000936 C0 E0            [24] 2870 	push	acc
      000938 74s02            [12] 2871 	mov	a,#(___str_47 >> 8)
      00093A C0 E0            [24] 2872 	push	acc
      00093C 12r00r00         [24] 2873 	lcall	_printf_fast_f
      00093F E5 81            [12] 2874 	mov	a,sp
      000941 24 FA            [12] 2875 	add	a,#0xfa
      000943 F5 81            [12] 2876 	mov	sp,a
      000945 22               [24] 2877 	ret
      000946                       2878 00120$:
                                   2879 ;	src/main.c:696: printf_fast_f("address: %d\n\r", *apu8LineFiAddr);
      000946 8D 82            [24] 2880 	mov	dpl,r5
      000948 8E 83            [24] 2881 	mov	dph,r6
      00094A 8F F0            [24] 2882 	mov	b,r7
      00094C 12r00r00         [24] 2883 	lcall	__gptrget
      00094F FD               [12] 2884 	mov	r5,a
      000950 7F 00            [12] 2885 	mov	r7,#0x00
      000952 C0 05            [24] 2886 	push	ar5
      000954 C0 07            [24] 2887 	push	ar7
      000956 74rEC            [12] 2888 	mov	a,#___str_48
      000958 C0 E0            [24] 2889 	push	acc
      00095A 74s02            [12] 2890 	mov	a,#(___str_48 >> 8)
      00095C C0 E0            [24] 2891 	push	acc
      00095E 12r00r00         [24] 2892 	lcall	_printf_fast_f
      000961 E5 81            [12] 2893 	mov	a,sp
      000963 24 FC            [12] 2894 	add	a,#0xfc
      000965 F5 81            [12] 2895 	mov	sp,a
                                   2896 ;	src/main.c:698: break;
      000967 22               [24] 2897 	ret
                                   2898 ;	src/main.c:699: case 's' :
      000968                       2899 00122$:
                                   2900 ;	src/main.c:700: switch (*apu8LineFiCmd) {
      000968 AD*08            [24] 2901 	mov	r5,_act_by_one_key_PARM_2
      00096A AE*09            [24] 2902 	mov	r6,(_act_by_one_key_PARM_2 + 1)
      00096C AF*0A            [24] 2903 	mov	r7,(_act_by_one_key_PARM_2 + 2)
      00096E 8D 82            [24] 2904 	mov	dpl,r5
      000970 8E 83            [24] 2905 	mov	dph,r6
      000972 8F F0            [24] 2906 	mov	b,r7
      000974 12r00r00         [24] 2907 	lcall	__gptrget
      000977 FC               [12] 2908 	mov	r4,a
      000978 60 09            [24] 2909 	jz	00123$
      00097A BC 01 03         [24] 2910 	cjne	r4,#0x01,00274$
      00097D 02r0Ar16         [24] 2911 	ljmp	00124$
      000980                       2912 00274$:
      000980 02r0ArC3         [24] 2913 	ljmp	00125$
                                   2914 ;	src/main.c:701: case 0 : // address setting
      000983                       2915 00123$:
                                   2916 ;	src/main.c:702: send_octet_to_linefi((((*apu8LineFiAddr)<<4)&0xF0) | (*apu8LineFiCmd)&0x0F);
      000983 85*0B*0E         [24] 2917 	mov	_act_by_one_key_sloc0_1_0,_act_by_one_key_PARM_3
      000986 85*0C*0F         [24] 2918 	mov	(_act_by_one_key_sloc0_1_0 + 1),(_act_by_one_key_PARM_3 + 1)
      000989 85*0D*10         [24] 2919 	mov	(_act_by_one_key_sloc0_1_0 + 2),(_act_by_one_key_PARM_3 + 2)
      00098C 85*0E 82         [24] 2920 	mov	dpl,_act_by_one_key_sloc0_1_0
      00098F 85*0F 83         [24] 2921 	mov	dph,(_act_by_one_key_sloc0_1_0 + 1)
      000992 85*10 F0         [24] 2922 	mov	b,(_act_by_one_key_sloc0_1_0 + 2)
      000995 12r00r00         [24] 2923 	lcall	__gptrget
      000998 C4               [12] 2924 	swap	a
      000999 54 F0            [12] 2925 	anl	a,#0xf0
      00099B F8               [12] 2926 	mov	r0,a
      00099C 53 00 F0         [24] 2927 	anl	ar0,#0xf0
      00099F 74 0F            [12] 2928 	mov	a,#0x0f
      0009A1 5C               [12] 2929 	anl	a,r4
      0009A2 48               [12] 2930 	orl	a,r0
      0009A3 F5 82            [12] 2931 	mov	dpl,a
      0009A5 C0 07            [24] 2932 	push	ar7
      0009A7 C0 06            [24] 2933 	push	ar6
      0009A9 C0 05            [24] 2934 	push	ar5
      0009AB 12r00r00         [24] 2935 	lcall	_send_octet_to_linefi
      0009AE D0 05            [24] 2936 	pop	ar5
      0009B0 D0 06            [24] 2937 	pop	ar6
      0009B2 D0 07            [24] 2938 	pop	ar7
                                   2939 ;	src/main.c:703: printf_fast_f("LineFi Sending: 0x%x:\n\r", ((*apu8LineFiAddr)<<4) | *apu8LineFiCmd);
      0009B4 85*0E 82         [24] 2940 	mov	dpl,_act_by_one_key_sloc0_1_0
      0009B7 85*0F 83         [24] 2941 	mov	dph,(_act_by_one_key_sloc0_1_0 + 1)
      0009BA 85*10 F0         [24] 2942 	mov	b,(_act_by_one_key_sloc0_1_0 + 2)
      0009BD 12r00r00         [24] 2943 	lcall	__gptrget
      0009C0 F8               [12] 2944 	mov	r0,a
      0009C1 E4               [12] 2945 	clr	a
      0009C2 C8               [12] 2946 	xch	a,r0
      0009C3 C4               [12] 2947 	swap	a
      0009C4 C8               [12] 2948 	xch	a,r0
      0009C5 68               [12] 2949 	xrl	a,r0
      0009C6 C8               [12] 2950 	xch	a,r0
      0009C7 54 F0            [12] 2951 	anl	a,#0xf0
      0009C9 C8               [12] 2952 	xch	a,r0
      0009CA 68               [12] 2953 	xrl	a,r0
      0009CB FB               [12] 2954 	mov	r3,a
      0009CC 8D 82            [24] 2955 	mov	dpl,r5
      0009CE 8E 83            [24] 2956 	mov	dph,r6
      0009D0 8F F0            [24] 2957 	mov	b,r7
      0009D2 12r00r00         [24] 2958 	lcall	__gptrget
      0009D5 7A 00            [12] 2959 	mov	r2,#0x00
      0009D7 42 00            [12] 2960 	orl	ar0,a
      0009D9 EA               [12] 2961 	mov	a,r2
      0009DA 42 03            [12] 2962 	orl	ar3,a
      0009DC C0 00            [24] 2963 	push	ar0
      0009DE C0 03            [24] 2964 	push	ar3
      0009E0 74r08            [12] 2965 	mov	a,#___str_50
      0009E2 C0 E0            [24] 2966 	push	acc
      0009E4 74s03            [12] 2967 	mov	a,#(___str_50 >> 8)
      0009E6 C0 E0            [24] 2968 	push	acc
      0009E8 12r00r00         [24] 2969 	lcall	_printf_fast_f
      0009EB E5 81            [12] 2970 	mov	a,sp
      0009ED 24 FC            [12] 2971 	add	a,#0xfc
      0009EF F5 81            [12] 2972 	mov	sp,a
                                   2973 ;	src/main.c:704: printf_fast_f("address: 0x%d:\n\r", *apu8LineFiAddr);
      0009F1 85*0E 82         [24] 2974 	mov	dpl,_act_by_one_key_sloc0_1_0
      0009F4 85*0F 83         [24] 2975 	mov	dph,(_act_by_one_key_sloc0_1_0 + 1)
      0009F7 85*10 F0         [24] 2976 	mov	b,(_act_by_one_key_sloc0_1_0 + 2)
      0009FA 12r00r00         [24] 2977 	lcall	__gptrget
      0009FD FB               [12] 2978 	mov	r3,a
      0009FE 7A 00            [12] 2979 	mov	r2,#0x00
      000A00 C0 03            [24] 2980 	push	ar3
      000A02 C0 02            [24] 2981 	push	ar2
      000A04 74r20            [12] 2982 	mov	a,#___str_51
      000A06 C0 E0            [24] 2983 	push	acc
      000A08 74s03            [12] 2984 	mov	a,#(___str_51 >> 8)
      000A0A C0 E0            [24] 2985 	push	acc
      000A0C 12r00r00         [24] 2986 	lcall	_printf_fast_f
      000A0F E5 81            [12] 2987 	mov	a,sp
      000A11 24 FC            [12] 2988 	add	a,#0xfc
      000A13 F5 81            [12] 2989 	mov	sp,a
                                   2990 ;	src/main.c:705: break;
      000A15 22               [24] 2991 	ret
                                   2992 ;	src/main.c:706: case 1 : // uart speed setting
      000A16                       2993 00124$:
                                   2994 ;	src/main.c:707: send_octet_to_linefi((((*apu8LineFiAddr)<<4)&0xF0) | (*apu8LineFiCmd)&0x0F);
      000A16 85*0B*0E         [24] 2995 	mov	_act_by_one_key_sloc0_1_0,_act_by_one_key_PARM_3
      000A19 85*0C*0F         [24] 2996 	mov	(_act_by_one_key_sloc0_1_0 + 1),(_act_by_one_key_PARM_3 + 1)
      000A1C 85*0D*10         [24] 2997 	mov	(_act_by_one_key_sloc0_1_0 + 2),(_act_by_one_key_PARM_3 + 2)
      000A1F 85*0E 82         [24] 2998 	mov	dpl,_act_by_one_key_sloc0_1_0
      000A22 85*0F 83         [24] 2999 	mov	dph,(_act_by_one_key_sloc0_1_0 + 1)
      000A25 85*10 F0         [24] 3000 	mov	b,(_act_by_one_key_sloc0_1_0 + 2)
      000A28 12r00r00         [24] 3001 	lcall	__gptrget
      000A2B C4               [12] 3002 	swap	a
      000A2C 54 F0            [12] 3003 	anl	a,#0xf0
      000A2E F8               [12] 3004 	mov	r0,a
      000A2F 53 00 F0         [24] 3005 	anl	ar0,#0xf0
      000A32 74 0F            [12] 3006 	mov	a,#0x0f
      000A34 5C               [12] 3007 	anl	a,r4
      000A35 48               [12] 3008 	orl	a,r0
      000A36 F5 82            [12] 3009 	mov	dpl,a
      000A38 C0 07            [24] 3010 	push	ar7
      000A3A C0 06            [24] 3011 	push	ar6
      000A3C C0 05            [24] 3012 	push	ar5
      000A3E 12r00r00         [24] 3013 	lcall	_send_octet_to_linefi
      000A41 D0 05            [24] 3014 	pop	ar5
      000A43 D0 06            [24] 3015 	pop	ar6
      000A45 D0 07            [24] 3016 	pop	ar7
                                   3017 ;	src/main.c:708: printf_fast_f("LineFi Sending: 0x%x:\n\r", ((*apu8LineFiAddr)<<4) | *apu8LineFiCmd);
      000A47 85*0E 82         [24] 3018 	mov	dpl,_act_by_one_key_sloc0_1_0
      000A4A 85*0F 83         [24] 3019 	mov	dph,(_act_by_one_key_sloc0_1_0 + 1)
      000A4D 85*10 F0         [24] 3020 	mov	b,(_act_by_one_key_sloc0_1_0 + 2)
      000A50 12r00r00         [24] 3021 	lcall	__gptrget
      000A53 F8               [12] 3022 	mov	r0,a
      000A54 E4               [12] 3023 	clr	a
      000A55 C8               [12] 3024 	xch	a,r0
      000A56 C4               [12] 3025 	swap	a
      000A57 C8               [12] 3026 	xch	a,r0
      000A58 68               [12] 3027 	xrl	a,r0
      000A59 C8               [12] 3028 	xch	a,r0
      000A5A 54 F0            [12] 3029 	anl	a,#0xf0
      000A5C C8               [12] 3030 	xch	a,r0
      000A5D 68               [12] 3031 	xrl	a,r0
      000A5E FB               [12] 3032 	mov	r3,a
      000A5F 8D 82            [24] 3033 	mov	dpl,r5
      000A61 8E 83            [24] 3034 	mov	dph,r6
      000A63 8F F0            [24] 3035 	mov	b,r7
      000A65 12r00r00         [24] 3036 	lcall	__gptrget
      000A68 7A 00            [12] 3037 	mov	r2,#0x00
      000A6A 42 00            [12] 3038 	orl	ar0,a
      000A6C EA               [12] 3039 	mov	a,r2
      000A6D 42 03            [12] 3040 	orl	ar3,a
      000A6F C0 00            [24] 3041 	push	ar0
      000A71 C0 03            [24] 3042 	push	ar3
      000A73 74r08            [12] 3043 	mov	a,#___str_50
      000A75 C0 E0            [24] 3044 	push	acc
      000A77 74s03            [12] 3045 	mov	a,#(___str_50 >> 8)
      000A79 C0 E0            [24] 3046 	push	acc
      000A7B 12r00r00         [24] 3047 	lcall	_printf_fast_f
      000A7E E5 81            [12] 3048 	mov	a,sp
      000A80 24 FC            [12] 3049 	add	a,#0xfc
      000A82 F5 81            [12] 3050 	mov	sp,a
                                   3051 ;	src/main.c:709: printf_fast_f("uart speed: %lu:\n\r", gpu32UartSpeed[*apu8LineFiAddr]);
      000A84 85*0E 82         [24] 3052 	mov	dpl,_act_by_one_key_sloc0_1_0
      000A87 85*0F 83         [24] 3053 	mov	dph,(_act_by_one_key_sloc0_1_0 + 1)
      000A8A 85*10 F0         [24] 3054 	mov	b,(_act_by_one_key_sloc0_1_0 + 2)
      000A8D 12r00r00         [24] 3055 	lcall	__gptrget
      000A90 75 F0 04         [24] 3056 	mov	b,#0x04
      000A93 A4               [48] 3057 	mul	ab
      000A94 24r75            [12] 3058 	add	a,#_gpu32UartSpeed
      000A96 F5 82            [12] 3059 	mov	dpl,a
      000A98 74s00            [12] 3060 	mov	a,#(_gpu32UartSpeed >> 8)
      000A9A 35 F0            [12] 3061 	addc	a,b
      000A9C F5 83            [12] 3062 	mov	dph,a
      000A9E E0               [24] 3063 	movx	a,@dptr
      000A9F F8               [12] 3064 	mov	r0,a
      000AA0 A3               [24] 3065 	inc	dptr
      000AA1 E0               [24] 3066 	movx	a,@dptr
      000AA2 F9               [12] 3067 	mov	r1,a
      000AA3 A3               [24] 3068 	inc	dptr
      000AA4 E0               [24] 3069 	movx	a,@dptr
      000AA5 FA               [12] 3070 	mov	r2,a
      000AA6 A3               [24] 3071 	inc	dptr
      000AA7 E0               [24] 3072 	movx	a,@dptr
      000AA8 FB               [12] 3073 	mov	r3,a
      000AA9 C0 00            [24] 3074 	push	ar0
      000AAB C0 01            [24] 3075 	push	ar1
      000AAD C0 02            [24] 3076 	push	ar2
      000AAF C0 03            [24] 3077 	push	ar3
      000AB1 74rD9            [12] 3078 	mov	a,#___str_47
      000AB3 C0 E0            [24] 3079 	push	acc
      000AB5 74s02            [12] 3080 	mov	a,#(___str_47 >> 8)
      000AB7 C0 E0            [24] 3081 	push	acc
      000AB9 12r00r00         [24] 3082 	lcall	_printf_fast_f
      000ABC E5 81            [12] 3083 	mov	a,sp
      000ABE 24 FA            [12] 3084 	add	a,#0xfa
      000AC0 F5 81            [12] 3085 	mov	sp,a
                                   3086 ;	src/main.c:710: break;
      000AC2 22               [24] 3087 	ret
                                   3088 ;	src/main.c:711: default :
      000AC3                       3089 00125$:
                                   3090 ;	src/main.c:712: send_octet_to_linefi((((*apu8LineFiAddr)<<4)&0xF0) | (*apu8LineFiCmd)&0x0F);
      000AC3 A9*0B            [24] 3091 	mov	r1,_act_by_one_key_PARM_3
      000AC5 AA*0C            [24] 3092 	mov	r2,(_act_by_one_key_PARM_3 + 1)
      000AC7 AB*0D            [24] 3093 	mov	r3,(_act_by_one_key_PARM_3 + 2)
      000AC9 89 82            [24] 3094 	mov	dpl,r1
      000ACB 8A 83            [24] 3095 	mov	dph,r2
      000ACD 8B F0            [24] 3096 	mov	b,r3
      000ACF 12r00r00         [24] 3097 	lcall	__gptrget
      000AD2 C4               [12] 3098 	swap	a
      000AD3 54 F0            [12] 3099 	anl	a,#0xf0
      000AD5 F8               [12] 3100 	mov	r0,a
      000AD6 53 00 F0         [24] 3101 	anl	ar0,#0xf0
      000AD9 74 0F            [12] 3102 	mov	a,#0x0f
      000ADB 5C               [12] 3103 	anl	a,r4
      000ADC 48               [12] 3104 	orl	a,r0
      000ADD F5 82            [12] 3105 	mov	dpl,a
      000ADF C0 07            [24] 3106 	push	ar7
      000AE1 C0 06            [24] 3107 	push	ar6
      000AE3 C0 05            [24] 3108 	push	ar5
      000AE5 C0 03            [24] 3109 	push	ar3
      000AE7 C0 02            [24] 3110 	push	ar2
      000AE9 C0 01            [24] 3111 	push	ar1
      000AEB 12r00r00         [24] 3112 	lcall	_send_octet_to_linefi
      000AEE D0 01            [24] 3113 	pop	ar1
      000AF0 D0 02            [24] 3114 	pop	ar2
      000AF2 D0 03            [24] 3115 	pop	ar3
      000AF4 D0 05            [24] 3116 	pop	ar5
      000AF6 D0 06            [24] 3117 	pop	ar6
      000AF8 D0 07            [24] 3118 	pop	ar7
                                   3119 ;	src/main.c:713: printf_fast_f("LineFi Sending: 0x%x:\n\r", ((*apu8LineFiAddr)<<4) | *apu8LineFiCmd);
      000AFA 89 82            [24] 3120 	mov	dpl,r1
      000AFC 8A 83            [24] 3121 	mov	dph,r2
      000AFE 8B F0            [24] 3122 	mov	b,r3
      000B00 12r00r00         [24] 3123 	lcall	__gptrget
      000B03 F9               [12] 3124 	mov	r1,a
      000B04 E4               [12] 3125 	clr	a
      000B05 C9               [12] 3126 	xch	a,r1
      000B06 C4               [12] 3127 	swap	a
      000B07 C9               [12] 3128 	xch	a,r1
      000B08 69               [12] 3129 	xrl	a,r1
      000B09 C9               [12] 3130 	xch	a,r1
      000B0A 54 F0            [12] 3131 	anl	a,#0xf0
      000B0C C9               [12] 3132 	xch	a,r1
      000B0D 69               [12] 3133 	xrl	a,r1
      000B0E FC               [12] 3134 	mov	r4,a
      000B0F 8D 82            [24] 3135 	mov	dpl,r5
      000B11 8E 83            [24] 3136 	mov	dph,r6
      000B13 8F F0            [24] 3137 	mov	b,r7
      000B15 12r00r00         [24] 3138 	lcall	__gptrget
      000B18 7F 00            [12] 3139 	mov	r7,#0x00
      000B1A 42 01            [12] 3140 	orl	ar1,a
      000B1C EF               [12] 3141 	mov	a,r7
      000B1D 42 04            [12] 3142 	orl	ar4,a
      000B1F C0 01            [24] 3143 	push	ar1
      000B21 C0 04            [24] 3144 	push	ar4
      000B23 74r08            [12] 3145 	mov	a,#___str_50
      000B25 C0 E0            [24] 3146 	push	acc
      000B27 74s03            [12] 3147 	mov	a,#(___str_50 >> 8)
      000B29 C0 E0            [24] 3148 	push	acc
      000B2B 12r00r00         [24] 3149 	lcall	_printf_fast_f
      000B2E E5 81            [12] 3150 	mov	a,sp
      000B30 24 FC            [12] 3151 	add	a,#0xfc
      000B32 F5 81            [12] 3152 	mov	sp,a
                                   3153 ;	src/main.c:716: break;
      000B34 22               [24] 3154 	ret
                                   3155 ;	src/main.c:717: case 'u' :
      000B35                       3156 00127$:
                                   3157 ;	src/main.c:718: printf_fast_f("uart speed: %lu:\n\r", gpu32UartSpeed[*apu8LineFiAddr]);
      000B35 AD*0B            [24] 3158 	mov	r5,_act_by_one_key_PARM_3
      000B37 AE*0C            [24] 3159 	mov	r6,(_act_by_one_key_PARM_3 + 1)
      000B39 AF*0D            [24] 3160 	mov	r7,(_act_by_one_key_PARM_3 + 2)
      000B3B 8D 82            [24] 3161 	mov	dpl,r5
      000B3D 8E 83            [24] 3162 	mov	dph,r6
      000B3F 8F F0            [24] 3163 	mov	b,r7
      000B41 12r00r00         [24] 3164 	lcall	__gptrget
      000B44 75 F0 04         [24] 3165 	mov	b,#0x04
      000B47 A4               [48] 3166 	mul	ab
      000B48 24r75            [12] 3167 	add	a,#_gpu32UartSpeed
      000B4A F5 82            [12] 3168 	mov	dpl,a
      000B4C 74s00            [12] 3169 	mov	a,#(_gpu32UartSpeed >> 8)
      000B4E 35 F0            [12] 3170 	addc	a,b
      000B50 F5 83            [12] 3171 	mov	dph,a
      000B52 E0               [24] 3172 	movx	a,@dptr
      000B53 F9               [12] 3173 	mov	r1,a
      000B54 A3               [24] 3174 	inc	dptr
      000B55 E0               [24] 3175 	movx	a,@dptr
      000B56 FA               [12] 3176 	mov	r2,a
      000B57 A3               [24] 3177 	inc	dptr
      000B58 E0               [24] 3178 	movx	a,@dptr
      000B59 FB               [12] 3179 	mov	r3,a
      000B5A A3               [24] 3180 	inc	dptr
      000B5B E0               [24] 3181 	movx	a,@dptr
      000B5C FC               [12] 3182 	mov	r4,a
      000B5D C0 07            [24] 3183 	push	ar7
      000B5F C0 06            [24] 3184 	push	ar6
      000B61 C0 05            [24] 3185 	push	ar5
      000B63 C0 01            [24] 3186 	push	ar1
      000B65 C0 02            [24] 3187 	push	ar2
      000B67 C0 03            [24] 3188 	push	ar3
      000B69 C0 04            [24] 3189 	push	ar4
      000B6B 74rD9            [12] 3190 	mov	a,#___str_47
      000B6D C0 E0            [24] 3191 	push	acc
      000B6F 74s02            [12] 3192 	mov	a,#(___str_47 >> 8)
      000B71 C0 E0            [24] 3193 	push	acc
      000B73 12r00r00         [24] 3194 	lcall	_printf_fast_f
      000B76 E5 81            [12] 3195 	mov	a,sp
      000B78 24 FA            [12] 3196 	add	a,#0xfa
      000B7A F5 81            [12] 3197 	mov	sp,a
      000B7C D0 05            [24] 3198 	pop	ar5
      000B7E D0 06            [24] 3199 	pop	ar6
      000B80 D0 07            [24] 3200 	pop	ar7
                                   3201 ;	src/main.c:719: InitialUART1_Timer3(gpu32UartSpeed[*apu8LineFiAddr]);
      000B82 8D 82            [24] 3202 	mov	dpl,r5
      000B84 8E 83            [24] 3203 	mov	dph,r6
      000B86 8F F0            [24] 3204 	mov	b,r7
      000B88 12r00r00         [24] 3205 	lcall	__gptrget
      000B8B 75 F0 04         [24] 3206 	mov	b,#0x04
      000B8E A4               [48] 3207 	mul	ab
      000B8F 24r75            [12] 3208 	add	a,#_gpu32UartSpeed
      000B91 F5 82            [12] 3209 	mov	dpl,a
      000B93 74s00            [12] 3210 	mov	a,#(_gpu32UartSpeed >> 8)
      000B95 35 F0            [12] 3211 	addc	a,b
      000B97 F5 83            [12] 3212 	mov	dph,a
      000B99 E0               [24] 3213 	movx	a,@dptr
      000B9A F9               [12] 3214 	mov	r1,a
      000B9B A3               [24] 3215 	inc	dptr
      000B9C E0               [24] 3216 	movx	a,@dptr
      000B9D FA               [12] 3217 	mov	r2,a
      000B9E A3               [24] 3218 	inc	dptr
      000B9F E0               [24] 3219 	movx	a,@dptr
      000BA0 FB               [12] 3220 	mov	r3,a
      000BA1 A3               [24] 3221 	inc	dptr
      000BA2 E0               [24] 3222 	movx	a,@dptr
      000BA3 89 82            [24] 3223 	mov	dpl,r1
      000BA5 8A 83            [24] 3224 	mov	dph,r2
      000BA7 8B F0            [24] 3225 	mov	b,r3
      000BA9 C0 07            [24] 3226 	push	ar7
      000BAB C0 06            [24] 3227 	push	ar6
      000BAD C0 05            [24] 3228 	push	ar5
      000BAF 12r00r00         [24] 3229 	lcall	_InitialUART1_Timer3
      000BB2 D0 05            [24] 3230 	pop	ar5
      000BB4 D0 06            [24] 3231 	pop	ar6
      000BB6 D0 07            [24] 3232 	pop	ar7
                                   3233 ;	src/main.c:720: printf_fast_f("Setting uart speed as: %lu:\n\r", gpu32UartSpeed[*apu8LineFiAddr]);
      000BB8 8D 82            [24] 3234 	mov	dpl,r5
      000BBA 8E 83            [24] 3235 	mov	dph,r6
      000BBC 8F F0            [24] 3236 	mov	b,r7
      000BBE 12r00r00         [24] 3237 	lcall	__gptrget
      000BC1 75 F0 04         [24] 3238 	mov	b,#0x04
      000BC4 A4               [48] 3239 	mul	ab
      000BC5 24r75            [12] 3240 	add	a,#_gpu32UartSpeed
      000BC7 F5 82            [12] 3241 	mov	dpl,a
      000BC9 74s00            [12] 3242 	mov	a,#(_gpu32UartSpeed >> 8)
      000BCB 35 F0            [12] 3243 	addc	a,b
      000BCD F5 83            [12] 3244 	mov	dph,a
      000BCF E0               [24] 3245 	movx	a,@dptr
      000BD0 FC               [12] 3246 	mov	r4,a
      000BD1 A3               [24] 3247 	inc	dptr
      000BD2 E0               [24] 3248 	movx	a,@dptr
      000BD3 FD               [12] 3249 	mov	r5,a
      000BD4 A3               [24] 3250 	inc	dptr
      000BD5 E0               [24] 3251 	movx	a,@dptr
      000BD6 FE               [12] 3252 	mov	r6,a
      000BD7 A3               [24] 3253 	inc	dptr
      000BD8 E0               [24] 3254 	movx	a,@dptr
      000BD9 FF               [12] 3255 	mov	r7,a
      000BDA C0 04            [24] 3256 	push	ar4
      000BDC C0 05            [24] 3257 	push	ar5
      000BDE C0 06            [24] 3258 	push	ar6
      000BE0 C0 07            [24] 3259 	push	ar7
      000BE2 74r31            [12] 3260 	mov	a,#___str_52
      000BE4 C0 E0            [24] 3261 	push	acc
      000BE6 74s03            [12] 3262 	mov	a,#(___str_52 >> 8)
      000BE8 C0 E0            [24] 3263 	push	acc
      000BEA 12r00r00         [24] 3264 	lcall	_printf_fast_f
      000BED E5 81            [12] 3265 	mov	a,sp
      000BEF 24 FA            [12] 3266 	add	a,#0xfa
      000BF1 F5 81            [12] 3267 	mov	sp,a
                                   3268 ;	src/main.c:721: break;
      000BF3 22               [24] 3269 	ret
                                   3270 ;	src/main.c:723: case 'S' :
      000BF4                       3271 00128$:
                                   3272 ;	src/main.c:724: send_octet_to_linefi(u8Data);
      000BF4 90r00rAD         [24] 3273 	mov	dptr,#_act_by_one_key_u8Data_65536_96
      000BF7 E0               [24] 3274 	movx	a,@dptr
      000BF8 F5 82            [12] 3275 	mov	dpl,a
      000BFA 12r00r00         [24] 3276 	lcall	_send_octet_to_linefi
                                   3277 ;	src/main.c:725: printf_fast_f("LineFi Sending: %d(0x%x)\n\r", u8Data, u8Data);
      000BFD 90r00rAD         [24] 3278 	mov	dptr,#_act_by_one_key_u8Data_65536_96
      000C00 E0               [24] 3279 	movx	a,@dptr
      000C01 FF               [12] 3280 	mov	r7,a
      000C02 7E 00            [12] 3281 	mov	r6,#0x00
      000C04 C0 07            [24] 3282 	push	ar7
      000C06 C0 06            [24] 3283 	push	ar6
      000C08 C0 07            [24] 3284 	push	ar7
      000C0A C0 06            [24] 3285 	push	ar6
      000C0C 74r4F            [12] 3286 	mov	a,#___str_53
      000C0E C0 E0            [24] 3287 	push	acc
      000C10 74s03            [12] 3288 	mov	a,#(___str_53 >> 8)
      000C12 C0 E0            [24] 3289 	push	acc
      000C14 12r00r00         [24] 3290 	lcall	_printf_fast_f
      000C17 E5 81            [12] 3291 	mov	a,sp
      000C19 24 FA            [12] 3292 	add	a,#0xfa
      000C1B F5 81            [12] 3293 	mov	sp,a
                                   3294 ;	src/main.c:726: break;
                                   3295 ;	src/main.c:727: case '+' :
      000C1D 22               [24] 3296 	ret
      000C1E                       3297 00129$:
                                   3298 ;	src/main.c:728: u8Data++;
      000C1E 90r00rAD         [24] 3299 	mov	dptr,#_act_by_one_key_u8Data_65536_96
      000C21 E0               [24] 3300 	movx	a,@dptr
      000C22 24 01            [12] 3301 	add	a,#0x01
      000C24 F0               [24] 3302 	movx	@dptr,a
                                   3303 ;	src/main.c:729: printf_fast_f("send data %d(0x%x)\n\r", u8Data, u8Data);
      000C25 E0               [24] 3304 	movx	a,@dptr
      000C26 FF               [12] 3305 	mov	r7,a
      000C27 7E 00            [12] 3306 	mov	r6,#0x00
      000C29 C0 07            [24] 3307 	push	ar7
      000C2B C0 06            [24] 3308 	push	ar6
      000C2D C0 07            [24] 3309 	push	ar7
      000C2F C0 06            [24] 3310 	push	ar6
      000C31 74r6A            [12] 3311 	mov	a,#___str_54
      000C33 C0 E0            [24] 3312 	push	acc
      000C35 74s03            [12] 3313 	mov	a,#(___str_54 >> 8)
      000C37 C0 E0            [24] 3314 	push	acc
      000C39 12r00r00         [24] 3315 	lcall	_printf_fast_f
      000C3C E5 81            [12] 3316 	mov	a,sp
      000C3E 24 FA            [12] 3317 	add	a,#0xfa
      000C40 F5 81            [12] 3318 	mov	sp,a
                                   3319 ;	src/main.c:730: break;
                                   3320 ;	src/main.c:731: case '-' :
      000C42 22               [24] 3321 	ret
      000C43                       3322 00130$:
                                   3323 ;	src/main.c:732: u8Data--;
      000C43 90r00rAD         [24] 3324 	mov	dptr,#_act_by_one_key_u8Data_65536_96
      000C46 E0               [24] 3325 	movx	a,@dptr
      000C47 14               [12] 3326 	dec	a
      000C48 F0               [24] 3327 	movx	@dptr,a
                                   3328 ;	src/main.c:733: printf_fast_f("send data %d(0x%x)\n\r", u8Data, u8Data);
      000C49 E0               [24] 3329 	movx	a,@dptr
      000C4A FF               [12] 3330 	mov	r7,a
      000C4B 7E 00            [12] 3331 	mov	r6,#0x00
      000C4D C0 07            [24] 3332 	push	ar7
      000C4F C0 06            [24] 3333 	push	ar6
      000C51 C0 07            [24] 3334 	push	ar7
      000C53 C0 06            [24] 3335 	push	ar6
      000C55 74r6A            [12] 3336 	mov	a,#___str_54
      000C57 C0 E0            [24] 3337 	push	acc
      000C59 74s03            [12] 3338 	mov	a,#(___str_54 >> 8)
      000C5B C0 E0            [24] 3339 	push	acc
      000C5D 12r00r00         [24] 3340 	lcall	_printf_fast_f
      000C60 E5 81            [12] 3341 	mov	a,sp
      000C62 24 FA            [12] 3342 	add	a,#0xfa
      000C64 F5 81            [12] 3343 	mov	sp,a
                                   3344 ;	src/main.c:734: break;
                                   3345 ;	src/main.c:736: case 'a' :
      000C66 22               [24] 3346 	ret
      000C67                       3347 00131$:
                                   3348 ;	src/main.c:737: send_octet_to_linefi(0x11);
      000C67 75 82 11         [24] 3349 	mov	dpl,#0x11
                                   3350 ;	src/main.c:738: break;
                                   3351 ;	src/main.c:739: case 'b' :
      000C6A 02r00r00         [24] 3352 	ljmp	_send_octet_to_linefi
      000C6D                       3353 00132$:
                                   3354 ;	src/main.c:740: send_octet_to_linefi(0x12);
      000C6D 75 82 12         [24] 3355 	mov	dpl,#0x12
                                   3356 ;	src/main.c:741: break;
                                   3357 ;	src/main.c:742: case 'c' :
      000C70 02r00r00         [24] 3358 	ljmp	_send_octet_to_linefi
      000C73                       3359 00133$:
                                   3360 ;	src/main.c:743: send_octet_to_linefi(0x13);
      000C73 75 82 13         [24] 3361 	mov	dpl,#0x13
                                   3362 ;	src/main.c:744: break;
                                   3363 ;	src/main.c:745: case 'H' :
                                   3364 ;	src/main.c:746: print_help();
                                   3365 ;	src/main.c:748: } //switch(au8RxUART)
                                   3366 ;	src/main.c:749: }
      000C76 02r00r00         [24] 3367 	ljmp	_send_octet_to_linefi
                                   3368 ;------------------------------------------------------------
                                   3369 ;Allocation info for local variables in function 'struct_to_uint8'
                                   3370 ;------------------------------------------------------------
                                   3371 ;apcPkt                    Allocated with name '_struct_to_uint8_apcPkt_65536_104'
                                   3372 ;cntIdx                    Allocated with name '_struct_to_uint8_cntIdx_65536_105'
                                   3373 ;i                         Allocated with name '_struct_to_uint8_i_65537_106'
                                   3374 ;------------------------------------------------------------
                                   3375 ;	src/main.c:761: void struct_to_uint8(linefi_packet_t * apcPkt)
                                   3376 ;	-----------------------------------------
                                   3377 ;	 function struct_to_uint8
                                   3378 ;	-----------------------------------------
      000C79                       3379 _struct_to_uint8:
                                   3380 ;	src/main.c:764: pu8buff[cntIdx++] = apcPkt->u8Ver;
      000C79 85 82*00         [24] 3381 	mov	_struct_to_uint8_apcPkt_65536_104,dpl
      000C7C 85 83*01         [24] 3382 	mov	(_struct_to_uint8_apcPkt_65536_104 + 1),dph
      000C7F 85 F0*02         [24] 3383 	mov	(_struct_to_uint8_apcPkt_65536_104 + 2),b
      000C82 12r00r00         [24] 3384 	lcall	__gptrget
      000C85 90r00r00         [24] 3385 	mov	dptr,#_pu8buff
      000C88 F0               [24] 3386 	movx	@dptr,a
                                   3387 ;	src/main.c:765: pu8buff[cntIdx++] = apcPkt->u8Type;
      000C89 74 01            [12] 3388 	mov	a,#0x01
      000C8B 25*00            [12] 3389 	add	a,_struct_to_uint8_apcPkt_65536_104
      000C8D FA               [12] 3390 	mov	r2,a
      000C8E E4               [12] 3391 	clr	a
      000C8F 35*01            [12] 3392 	addc	a,(_struct_to_uint8_apcPkt_65536_104 + 1)
      000C91 FB               [12] 3393 	mov	r3,a
      000C92 AC*02            [24] 3394 	mov	r4,(_struct_to_uint8_apcPkt_65536_104 + 2)
      000C94 8A 82            [24] 3395 	mov	dpl,r2
      000C96 8B 83            [24] 3396 	mov	dph,r3
      000C98 8C F0            [24] 3397 	mov	b,r4
      000C9A 12r00r00         [24] 3398 	lcall	__gptrget
      000C9D 90r00r01         [24] 3399 	mov	dptr,#(_pu8buff + 0x0001)
      000CA0 F0               [24] 3400 	movx	@dptr,a
                                   3401 ;	src/main.c:766: pu8buff[cntIdx++] = apcPkt->u8Addr;
      000CA1 74 02            [12] 3402 	mov	a,#0x02
      000CA3 25*00            [12] 3403 	add	a,_struct_to_uint8_apcPkt_65536_104
      000CA5 FA               [12] 3404 	mov	r2,a
      000CA6 E4               [12] 3405 	clr	a
      000CA7 35*01            [12] 3406 	addc	a,(_struct_to_uint8_apcPkt_65536_104 + 1)
      000CA9 FB               [12] 3407 	mov	r3,a
      000CAA AC*02            [24] 3408 	mov	r4,(_struct_to_uint8_apcPkt_65536_104 + 2)
      000CAC 8A 82            [24] 3409 	mov	dpl,r2
      000CAE 8B 83            [24] 3410 	mov	dph,r3
      000CB0 8C F0            [24] 3411 	mov	b,r4
      000CB2 12r00r00         [24] 3412 	lcall	__gptrget
      000CB5 90r00r02         [24] 3413 	mov	dptr,#(_pu8buff + 0x0002)
      000CB8 F0               [24] 3414 	movx	@dptr,a
                                   3415 ;	src/main.c:767: pu8buff[cntIdx++] = apcPkt->u8Size;
      000CB9 74 03            [12] 3416 	mov	a,#0x03
      000CBB 25*00            [12] 3417 	add	a,_struct_to_uint8_apcPkt_65536_104
      000CBD FA               [12] 3418 	mov	r2,a
      000CBE E4               [12] 3419 	clr	a
      000CBF 35*01            [12] 3420 	addc	a,(_struct_to_uint8_apcPkt_65536_104 + 1)
      000CC1 FB               [12] 3421 	mov	r3,a
      000CC2 AC*02            [24] 3422 	mov	r4,(_struct_to_uint8_apcPkt_65536_104 + 2)
      000CC4 8A 82            [24] 3423 	mov	dpl,r2
      000CC6 8B 83            [24] 3424 	mov	dph,r3
      000CC8 8C F0            [24] 3425 	mov	b,r4
      000CCA 12r00r00         [24] 3426 	lcall	__gptrget
      000CCD 90r00r03         [24] 3427 	mov	dptr,#(_pu8buff + 0x0003)
      000CD0 F0               [24] 3428 	movx	@dptr,a
                                   3429 ;	src/main.c:768: pu8buff[cntIdx++] = apcPkt->u8CRC;
      000CD1 74 04            [12] 3430 	mov	a,#0x04
      000CD3 25*00            [12] 3431 	add	a,_struct_to_uint8_apcPkt_65536_104
      000CD5 F8               [12] 3432 	mov	r0,a
      000CD6 E4               [12] 3433 	clr	a
      000CD7 35*01            [12] 3434 	addc	a,(_struct_to_uint8_apcPkt_65536_104 + 1)
      000CD9 F9               [12] 3435 	mov	r1,a
      000CDA AF*02            [24] 3436 	mov	r7,(_struct_to_uint8_apcPkt_65536_104 + 2)
      000CDC 88 82            [24] 3437 	mov	dpl,r0
      000CDE 89 83            [24] 3438 	mov	dph,r1
      000CE0 8F F0            [24] 3439 	mov	b,r7
      000CE2 12r00r00         [24] 3440 	lcall	__gptrget
      000CE5 F8               [12] 3441 	mov	r0,a
      000CE6 90r00r04         [24] 3442 	mov	dptr,#(_pu8buff + 0x0004)
      000CE9 F0               [24] 3443 	movx	@dptr,a
                                   3444 ;	src/main.c:770: for (i=0; i<apcPkt->u8Size; i++) {
      000CEA 74 05            [12] 3445 	mov	a,#0x05
      000CEC 25*00            [12] 3446 	add	a,_struct_to_uint8_apcPkt_65536_104
      000CEE FD               [12] 3447 	mov	r5,a
      000CEF E4               [12] 3448 	clr	a
      000CF0 35*01            [12] 3449 	addc	a,(_struct_to_uint8_apcPkt_65536_104 + 1)
      000CF2 FE               [12] 3450 	mov	r6,a
      000CF3 AF*02            [24] 3451 	mov	r7,(_struct_to_uint8_apcPkt_65536_104 + 2)
      000CF5 75*03 05         [24] 3452 	mov	_struct_to_uint8_cntIdx_65536_105,#0x05
      000CF8 75*04 00         [24] 3453 	mov	_struct_to_uint8_i_65537_106,#0x00
      000CFB                       3454 00103$:
      000CFB 8A 82            [24] 3455 	mov	dpl,r2
      000CFD 8B 83            [24] 3456 	mov	dph,r3
      000CFF 8C F0            [24] 3457 	mov	b,r4
      000D01 12r00r00         [24] 3458 	lcall	__gptrget
      000D04 F9               [12] 3459 	mov	r1,a
      000D05 C3               [12] 3460 	clr	c
      000D06 E5*04            [12] 3461 	mov	a,_struct_to_uint8_i_65537_106
      000D08 99               [12] 3462 	subb	a,r1
      000D09 50 44            [24] 3463 	jnc	00105$
                                   3464 ;	src/main.c:771: pu8buff[cntIdx++] = apcPkt->pu8Data[i];
      000D0B C0 02            [24] 3465 	push	ar2
      000D0D C0 03            [24] 3466 	push	ar3
      000D0F C0 04            [24] 3467 	push	ar4
      000D11 E5*03            [12] 3468 	mov	a,_struct_to_uint8_cntIdx_65536_105
      000D13 24r00            [12] 3469 	add	a,#_pu8buff
      000D15 F8               [12] 3470 	mov	r0,a
      000D16 E4               [12] 3471 	clr	a
      000D17 34s00            [12] 3472 	addc	a,#(_pu8buff >> 8)
      000D19 F9               [12] 3473 	mov	r1,a
      000D1A 05*03            [12] 3474 	inc	_struct_to_uint8_cntIdx_65536_105
      000D1C 8D 82            [24] 3475 	mov	dpl,r5
      000D1E 8E 83            [24] 3476 	mov	dph,r6
      000D20 8F F0            [24] 3477 	mov	b,r7
      000D22 12r00r00         [24] 3478 	lcall	__gptrget
      000D25 FA               [12] 3479 	mov	r2,a
      000D26 A3               [24] 3480 	inc	dptr
      000D27 12r00r00         [24] 3481 	lcall	__gptrget
      000D2A FB               [12] 3482 	mov	r3,a
      000D2B A3               [24] 3483 	inc	dptr
      000D2C 12r00r00         [24] 3484 	lcall	__gptrget
      000D2F FC               [12] 3485 	mov	r4,a
      000D30 E5*04            [12] 3486 	mov	a,_struct_to_uint8_i_65537_106
      000D32 2A               [12] 3487 	add	a,r2
      000D33 FA               [12] 3488 	mov	r2,a
      000D34 E4               [12] 3489 	clr	a
      000D35 3B               [12] 3490 	addc	a,r3
      000D36 FB               [12] 3491 	mov	r3,a
      000D37 8A 82            [24] 3492 	mov	dpl,r2
      000D39 8B 83            [24] 3493 	mov	dph,r3
      000D3B 8C F0            [24] 3494 	mov	b,r4
      000D3D 12r00r00         [24] 3495 	lcall	__gptrget
      000D40 88 82            [24] 3496 	mov	dpl,r0
      000D42 89 83            [24] 3497 	mov	dph,r1
      000D44 F0               [24] 3498 	movx	@dptr,a
                                   3499 ;	src/main.c:770: for (i=0; i<apcPkt->u8Size; i++) {
      000D45 05*04            [12] 3500 	inc	_struct_to_uint8_i_65537_106
      000D47 D0 04            [24] 3501 	pop	ar4
      000D49 D0 03            [24] 3502 	pop	ar3
      000D4B D0 02            [24] 3503 	pop	ar2
      000D4D 80 AC            [24] 3504 	sjmp	00103$
      000D4F                       3505 00105$:
                                   3506 ;	src/main.c:774: }
      000D4F 22               [24] 3507 	ret
                                   3508 ;------------------------------------------------------------
                                   3509 ;Allocation info for local variables in function 'periodic_func'
                                   3510 ;------------------------------------------------------------
                                   3511 ;su8Cnt                    Allocated with name '_periodic_func_su8Cnt_65536_110'
                                   3512 ;apcStr                    Allocated to registers r5 r6 r7 
                                   3513 ;total_size                Allocated to registers r4 
                                   3514 ;------------------------------------------------------------
                                   3515 ;	src/main.c:781: void periodic_func(linefi_packet_t * apcStr)
                                   3516 ;	-----------------------------------------
                                   3517 ;	 function periodic_func
                                   3518 ;	-----------------------------------------
      000D50                       3519 _periodic_func:
                                   3520 ;	src/main.c:784: uint8 total_size = size_linefi_packet(apcStr);
      000D50 AD 82            [24] 3521 	mov	r5,dpl
      000D52 AE 83            [24] 3522 	mov	r6,dph
      000D54 AF F0            [24] 3523 	mov	r7,b
      000D56 C0 07            [24] 3524 	push	ar7
      000D58 C0 06            [24] 3525 	push	ar6
      000D5A C0 05            [24] 3526 	push	ar5
      000D5C 12r00r00         [24] 3527 	lcall	_size_linefi_packet
      000D5F AC 82            [24] 3528 	mov	r4,dpl
      000D61 D0 05            [24] 3529 	pop	ar5
      000D63 D0 06            [24] 3530 	pop	ar6
      000D65 D0 07            [24] 3531 	pop	ar7
                                   3532 ;	src/main.c:787: apcStr->u8Ver = su8Cnt++; // For index increment
      000D67 AB*11            [24] 3533 	mov	r3,_periodic_func_su8Cnt_65536_110
      000D69 05*11            [12] 3534 	inc	_periodic_func_su8Cnt_65536_110
      000D6B 8D 82            [24] 3535 	mov	dpl,r5
      000D6D 8E 83            [24] 3536 	mov	dph,r6
      000D6F 8F F0            [24] 3537 	mov	b,r7
      000D71 EB               [12] 3538 	mov	a,r3
      000D72 12r00r00         [24] 3539 	lcall	__gptrput
                                   3540 ;	src/main.c:789: send_linefi_packet(apcStr);
      000D75 8D 82            [24] 3541 	mov	dpl,r5
      000D77 8E 83            [24] 3542 	mov	dph,r6
      000D79 8F F0            [24] 3543 	mov	b,r7
      000D7B C0 07            [24] 3544 	push	ar7
      000D7D C0 06            [24] 3545 	push	ar6
      000D7F C0 05            [24] 3546 	push	ar5
      000D81 C0 04            [24] 3547 	push	ar4
      000D83 12r00r00         [24] 3548 	lcall	_send_linefi_packet
      000D86 D0 04            [24] 3549 	pop	ar4
      000D88 D0 05            [24] 3550 	pop	ar5
      000D8A D0 06            [24] 3551 	pop	ar6
      000D8C D0 07            [24] 3552 	pop	ar7
                                   3553 ;	src/main.c:791: struct_to_uint8(apcStr); // packet struct to array type
      000D8E 8D 82            [24] 3554 	mov	dpl,r5
      000D90 8E 83            [24] 3555 	mov	dph,r6
      000D92 8F F0            [24] 3556 	mov	b,r7
      000D94 C0 04            [24] 3557 	push	ar4
      000D96 12r0Cr79         [24] 3558 	lcall	_struct_to_uint8
      000D99 D0 04            [24] 3559 	pop	ar4
                                   3560 ;	src/main.c:792: print_raw_packet(total_size, pu8buff); 
      000D9B 75*00r00         [24] 3561 	mov	_print_raw_packet_PARM_2,#_pu8buff
      000D9E 75*01s00         [24] 3562 	mov	(_print_raw_packet_PARM_2 + 1),#(_pu8buff >> 8)
      000DA1 75*02 00         [24] 3563 	mov	(_print_raw_packet_PARM_2 + 2),#0x00
      000DA4 8C 82            [24] 3564 	mov	dpl,r4
                                   3565 ;	src/main.c:796: }
      000DA6 02r00r00         [24] 3566 	ljmp	_print_raw_packet
                                   3567 ;------------------------------------------------------------
                                   3568 ;Allocation info for local variables in function 'main'
                                   3569 ;------------------------------------------------------------
                                   3570 ;su8SW                     Allocated to registers 
                                   3571 ;u8EnCnt                   Allocated to registers 
                                   3572 ;u8RxUART                  Allocated with name '_main_u8RxUART_65536_112'
                                   3573 ;u16Cnt                    Allocated to registers r2 r3 
                                   3574 ;u8OutputState             Allocated to registers 
                                   3575 ;u8StateRxCSC              Allocated to registers 
                                   3576 ;u8LineFiAddr              Allocated with name '_main_u8LineFiAddr_65536_112'
                                   3577 ;u8LineFiSpeed             Allocated to registers 
                                   3578 ;u8LineFiCmd               Allocated with name '_main_u8LineFiCmd_65536_112'
                                   3579 ;u8PwrOnFirstFlag          Allocated to registers r7 
                                   3580 ;u8SwNum                   Allocated with name '_main_u8SwNum_65536_112'
                                   3581 ;u8StatePeriodicSend       Allocated with name '_main_u8StatePeriodicSend_65536_112'
                                   3582 ;u8PSCmd                   Allocated with name '_main_u8PSCmd_65536_112'
                                   3583 ;u8StateUart0InputMode     Allocated to registers r4 
                                   3584 ;stLineFiPkt               Allocated with name '_main_stLineFiPkt_65536_112'
                                   3585 ;u8RxBufIdx                Allocated to registers 
                                   3586 ;u8Count2                  Allocated to registers 
                                   3587 ;u8RxPktCnt                Allocated to registers 
                                   3588 ;u8PreambleCnt             Allocated to registers 
                                   3589 ;i                         Allocated to registers r6 
                                   3590 ;pcBuf                     Allocated with name '_main_pcBuf_65536_112'
                                   3591 ;pu8Data                   Allocated with name '_main_pu8Data_65536_112'
                                   3592 ;u8DataIdx                 Allocated with name '_main_u8DataIdx_65536_112'
                                   3593 ;ucBufIdx                  Allocated with name '_main_ucBufIdx_65536_112'
                                   3594 ;pstLineFiPkt              Allocated with name '_main_pstLineFiPkt_65536_112'
                                   3595 ;stLineFiPkt_test          Allocated with name '_main_stLineFiPkt_test_65536_112'
                                   3596 ;------------------------------------------------------------
                                   3597 ;	src/main.c:804: void main (void)
                                   3598 ;	-----------------------------------------
                                   3599 ;	 function main
                                   3600 ;	-----------------------------------------
      000DA9                       3601 _main:
                                   3602 ;	src/main.c:812: UINT8 u8LineFiAddr = 1;
      000DA9 75*13 01         [24] 3603 	mov	_main_u8LineFiAddr_65536_112,#0x01
                                   3604 ;	src/main.c:814: UINT8 u8LineFiCmd = 1;
      000DAC 75*14 01         [24] 3605 	mov	_main_u8LineFiCmd_65536_112,#0x01
                                   3606 ;	src/main.c:815: UINT8 u8PwrOnFirstFlag = 1;
      000DAF 7F 01            [12] 3607 	mov	r7,#0x01
                                   3608 ;	src/main.c:818: UINT8 u8StatePeriodicSend = STATE_PS_INIT;
      000DB1 75*16 00         [24] 3609 	mov	_main_u8StatePeriodicSend_65536_112,#0x00
                                   3610 ;	src/main.c:819: UINT8 u8PSCmd = STATE_PS_INIT;
      000DB4 75*17 00         [24] 3611 	mov	_main_u8PSCmd_65536_112,#0x00
                                   3612 ;	src/main.c:821: uint8 u8StateUart0InputMode = UART0_INPUT_MODE0;
      000DB7 7C 00            [12] 3613 	mov	r4,#0x00
                                   3614 ;	src/main.c:825: unsigned char __xdata pu8Data[MAX_DATA] = {0,0,0,0,0,0,0,0,0,0};
      000DB9 90r01r12         [24] 3615 	mov	dptr,#_main_pu8Data_65536_112
      000DBC E4               [12] 3616 	clr	a
      000DBD F0               [24] 3617 	movx	@dptr,a
      000DBE 90r01r13         [24] 3618 	mov	dptr,#(_main_pu8Data_65536_112 + 0x0001)
      000DC1 F0               [24] 3619 	movx	@dptr,a
      000DC2 90r01r14         [24] 3620 	mov	dptr,#(_main_pu8Data_65536_112 + 0x0002)
      000DC5 F0               [24] 3621 	movx	@dptr,a
      000DC6 90r01r15         [24] 3622 	mov	dptr,#(_main_pu8Data_65536_112 + 0x0003)
      000DC9 F0               [24] 3623 	movx	@dptr,a
      000DCA 90r01r16         [24] 3624 	mov	dptr,#(_main_pu8Data_65536_112 + 0x0004)
      000DCD F0               [24] 3625 	movx	@dptr,a
      000DCE 90r01r17         [24] 3626 	mov	dptr,#(_main_pu8Data_65536_112 + 0x0005)
      000DD1 F0               [24] 3627 	movx	@dptr,a
      000DD2 90r01r18         [24] 3628 	mov	dptr,#(_main_pu8Data_65536_112 + 0x0006)
      000DD5 F0               [24] 3629 	movx	@dptr,a
      000DD6 90r01r19         [24] 3630 	mov	dptr,#(_main_pu8Data_65536_112 + 0x0007)
      000DD9 F0               [24] 3631 	movx	@dptr,a
      000DDA 90r01r1A         [24] 3632 	mov	dptr,#(_main_pu8Data_65536_112 + 0x0008)
      000DDD F0               [24] 3633 	movx	@dptr,a
      000DDE 90r01r1B         [24] 3634 	mov	dptr,#(_main_pu8Data_65536_112 + 0x0009)
      000DE1 F0               [24] 3635 	movx	@dptr,a
                                   3636 ;	src/main.c:826: unsigned char __xdata u8DataIdx = 0;
      000DE2 90r01r1C         [24] 3637 	mov	dptr,#_main_u8DataIdx_65536_112
      000DE5 F0               [24] 3638 	movx	@dptr,a
                                   3639 ;	src/main.c:827: uint8  __xdata ucBufIdx = 0;
      000DE6 90r01r1D         [24] 3640 	mov	dptr,#_main_ucBufIdx_65536_112
      000DE9 F0               [24] 3641 	movx	@dptr,a
                                   3642 ;	src/main.c:829: linefi_packet_t __xdata pstLineFiPkt[] = {
      000DEA 90r01r1E         [24] 3643 	mov	dptr,#_main_pstLineFiPkt_65536_112
      000DED 04               [12] 3644 	inc	a
      000DEE F0               [24] 3645 	movx	@dptr,a
      000DEF 90r01r1F         [24] 3646 	mov	dptr,#(_main_pstLineFiPkt_65536_112 + 0x0001)
      000DF2 04               [12] 3647 	inc	a
      000DF3 F0               [24] 3648 	movx	@dptr,a
      000DF4 90r01r20         [24] 3649 	mov	dptr,#(_main_pstLineFiPkt_65536_112 + 0x0002)
      000DF7 14               [12] 3650 	dec	a
      000DF8 F0               [24] 3651 	movx	@dptr,a
      000DF9 90r01r21         [24] 3652 	mov	dptr,#(_main_pstLineFiPkt_65536_112 + 0x0003)
      000DFC 74 0A            [12] 3653 	mov	a,#0x0a
      000DFE F0               [24] 3654 	movx	@dptr,a
      000DFF 90r01r22         [24] 3655 	mov	dptr,#(_main_pstLineFiPkt_65536_112 + 0x0004)
      000E02 03               [12] 3656 	rr	a
      000E03 F0               [24] 3657 	movx	@dptr,a
      000E04 90r01r23         [24] 3658 	mov	dptr,#(_main_pstLineFiPkt_65536_112 + 0x0005)
      000E07 74r2D            [12] 3659 	mov	a,#_gpu8Data
      000E09 F0               [24] 3660 	movx	@dptr,a
      000E0A 74s00            [12] 3661 	mov	a,#(_gpu8Data >> 8)
      000E0C A3               [24] 3662 	inc	dptr
      000E0D F0               [24] 3663 	movx	@dptr,a
      000E0E E4               [12] 3664 	clr	a
      000E0F A3               [24] 3665 	inc	dptr
      000E10 F0               [24] 3666 	movx	@dptr,a
      000E11 90r01r26         [24] 3667 	mov	dptr,#(_main_pstLineFiPkt_65536_112 + 0x0008)
      000E14 04               [12] 3668 	inc	a
      000E15 F0               [24] 3669 	movx	@dptr,a
      000E16 90r01r27         [24] 3670 	mov	dptr,#(_main_pstLineFiPkt_65536_112 + 0x0009)
      000E19 04               [12] 3671 	inc	a
      000E1A F0               [24] 3672 	movx	@dptr,a
      000E1B 90r01r28         [24] 3673 	mov	dptr,#(_main_pstLineFiPkt_65536_112 + 0x000a)
      000E1E F0               [24] 3674 	movx	@dptr,a
      000E1F 90r01r29         [24] 3675 	mov	dptr,#(_main_pstLineFiPkt_65536_112 + 0x000b)
      000E22 74 0A            [12] 3676 	mov	a,#0x0a
      000E24 F0               [24] 3677 	movx	@dptr,a
      000E25 90r01r2A         [24] 3678 	mov	dptr,#(_main_pstLineFiPkt_65536_112 + 0x000c)
      000E28 03               [12] 3679 	rr	a
      000E29 F0               [24] 3680 	movx	@dptr,a
      000E2A 90r01r2B         [24] 3681 	mov	dptr,#(_main_pstLineFiPkt_65536_112 + 0x000d)
      000E2D 74r2D            [12] 3682 	mov	a,#_gpu8Data
      000E2F F0               [24] 3683 	movx	@dptr,a
      000E30 74s00            [12] 3684 	mov	a,#(_gpu8Data >> 8)
      000E32 A3               [24] 3685 	inc	dptr
      000E33 F0               [24] 3686 	movx	@dptr,a
      000E34 E4               [12] 3687 	clr	a
      000E35 A3               [24] 3688 	inc	dptr
      000E36 F0               [24] 3689 	movx	@dptr,a
      000E37 90r01r2E         [24] 3690 	mov	dptr,#(_main_pstLineFiPkt_65536_112 + 0x0010)
      000E3A 04               [12] 3691 	inc	a
      000E3B F0               [24] 3692 	movx	@dptr,a
      000E3C 90r01r2F         [24] 3693 	mov	dptr,#(_main_pstLineFiPkt_65536_112 + 0x0011)
      000E3F 04               [12] 3694 	inc	a
      000E40 F0               [24] 3695 	movx	@dptr,a
      000E41 90r01r30         [24] 3696 	mov	dptr,#(_main_pstLineFiPkt_65536_112 + 0x0012)
      000E44 04               [12] 3697 	inc	a
      000E45 F0               [24] 3698 	movx	@dptr,a
      000E46 90r01r31         [24] 3699 	mov	dptr,#(_main_pstLineFiPkt_65536_112 + 0x0013)
      000E49 74 0A            [12] 3700 	mov	a,#0x0a
      000E4B F0               [24] 3701 	movx	@dptr,a
      000E4C 90r01r32         [24] 3702 	mov	dptr,#(_main_pstLineFiPkt_65536_112 + 0x0014)
      000E4F 03               [12] 3703 	rr	a
      000E50 F0               [24] 3704 	movx	@dptr,a
      000E51 90r01r33         [24] 3705 	mov	dptr,#(_main_pstLineFiPkt_65536_112 + 0x0015)
      000E54 74r2D            [12] 3706 	mov	a,#_gpu8Data
      000E56 F0               [24] 3707 	movx	@dptr,a
      000E57 74s00            [12] 3708 	mov	a,#(_gpu8Data >> 8)
      000E59 A3               [24] 3709 	inc	dptr
      000E5A F0               [24] 3710 	movx	@dptr,a
      000E5B E4               [12] 3711 	clr	a
      000E5C A3               [24] 3712 	inc	dptr
      000E5D F0               [24] 3713 	movx	@dptr,a
      000E5E 90r01r36         [24] 3714 	mov	dptr,#(_main_pstLineFiPkt_65536_112 + 0x0018)
      000E61 04               [12] 3715 	inc	a
      000E62 F0               [24] 3716 	movx	@dptr,a
      000E63 90r01r37         [24] 3717 	mov	dptr,#(_main_pstLineFiPkt_65536_112 + 0x0019)
      000E66 04               [12] 3718 	inc	a
      000E67 F0               [24] 3719 	movx	@dptr,a
      000E68 90r01r38         [24] 3720 	mov	dptr,#(_main_pstLineFiPkt_65536_112 + 0x001a)
      000E6B 23               [12] 3721 	rl	a
      000E6C F0               [24] 3722 	movx	@dptr,a
      000E6D 90r01r39         [24] 3723 	mov	dptr,#(_main_pstLineFiPkt_65536_112 + 0x001b)
      000E70 74 0A            [12] 3724 	mov	a,#0x0a
      000E72 F0               [24] 3725 	movx	@dptr,a
      000E73 90r01r3A         [24] 3726 	mov	dptr,#(_main_pstLineFiPkt_65536_112 + 0x001c)
      000E76 03               [12] 3727 	rr	a
      000E77 F0               [24] 3728 	movx	@dptr,a
      000E78 90r01r3B         [24] 3729 	mov	dptr,#(_main_pstLineFiPkt_65536_112 + 0x001d)
      000E7B 74r2D            [12] 3730 	mov	a,#_gpu8Data
      000E7D F0               [24] 3731 	movx	@dptr,a
      000E7E 74s00            [12] 3732 	mov	a,#(_gpu8Data >> 8)
      000E80 A3               [24] 3733 	inc	dptr
      000E81 F0               [24] 3734 	movx	@dptr,a
      000E82 E4               [12] 3735 	clr	a
      000E83 A3               [24] 3736 	inc	dptr
      000E84 F0               [24] 3737 	movx	@dptr,a
      000E85 90r01r3E         [24] 3738 	mov	dptr,#(_main_pstLineFiPkt_65536_112 + 0x0020)
      000E88 04               [12] 3739 	inc	a
      000E89 F0               [24] 3740 	movx	@dptr,a
      000E8A 90r01r3F         [24] 3741 	mov	dptr,#(_main_pstLineFiPkt_65536_112 + 0x0021)
      000E8D 04               [12] 3742 	inc	a
      000E8E F0               [24] 3743 	movx	@dptr,a
      000E8F 90r01r40         [24] 3744 	mov	dptr,#(_main_pstLineFiPkt_65536_112 + 0x0022)
      000E92 74 05            [12] 3745 	mov	a,#0x05
      000E94 F0               [24] 3746 	movx	@dptr,a
      000E95 90r01r41         [24] 3747 	mov	dptr,#(_main_pstLineFiPkt_65536_112 + 0x0023)
      000E98 23               [12] 3748 	rl	a
      000E99 F0               [24] 3749 	movx	@dptr,a
      000E9A 90r01r42         [24] 3750 	mov	dptr,#(_main_pstLineFiPkt_65536_112 + 0x0024)
      000E9D 03               [12] 3751 	rr	a
      000E9E F0               [24] 3752 	movx	@dptr,a
      000E9F 90r01r43         [24] 3753 	mov	dptr,#(_main_pstLineFiPkt_65536_112 + 0x0025)
      000EA2 74r2D            [12] 3754 	mov	a,#_gpu8Data
      000EA4 F0               [24] 3755 	movx	@dptr,a
      000EA5 74s00            [12] 3756 	mov	a,#(_gpu8Data >> 8)
      000EA7 A3               [24] 3757 	inc	dptr
      000EA8 F0               [24] 3758 	movx	@dptr,a
      000EA9 E4               [12] 3759 	clr	a
      000EAA A3               [24] 3760 	inc	dptr
      000EAB F0               [24] 3761 	movx	@dptr,a
                                   3762 ;	src/main.c:837: linefi_packet_t stLineFiPkt = {
                                   3763 ;	1-genFromRTrack replaced	mov	_main_stLineFiPkt_65536_112,#0x01
      000EAC 8F*18            [24] 3764 	mov	_main_stLineFiPkt_65536_112,r7
      000EAE 75*19 02         [24] 3765 	mov	(_main_stLineFiPkt_65536_112 + 0x0001),#0x02
      000EB1 75*1A 03         [24] 3766 	mov	(_main_stLineFiPkt_65536_112 + 0x0002),#0x03
      000EB4 75*1B 0A         [24] 3767 	mov	(_main_stLineFiPkt_65536_112 + 0x0003),#0x0a
      000EB7 75*1C 05         [24] 3768 	mov	(_main_stLineFiPkt_65536_112 + 0x0004),#0x05
      000EBA 75*1Dr2D         [24] 3769 	mov	((_main_stLineFiPkt_65536_112 + 0x0005) + 0),#_gpu8Data
      000EBD 75*1Es00         [24] 3770 	mov	((_main_stLineFiPkt_65536_112 + 0x0005) + 1),#(_gpu8Data >> 8)
                                   3771 ;	1-genFromRTrack replaced	mov	((_main_stLineFiPkt_65536_112 + 0x0005) + 2),#0x00
      000EC0 F5*1F            [12] 3772 	mov	((_main_stLineFiPkt_65536_112 + 0x0005) + 2),a
                                   3773 ;	src/main.c:846: linefi_packet_t __xdata stLineFiPkt_test = { // For sending periodic packet
      000EC2 90r01r46         [24] 3774 	mov	dptr,#_main_stLineFiPkt_test_65536_112
      000EC5 04               [12] 3775 	inc	a
      000EC6 F0               [24] 3776 	movx	@dptr,a
      000EC7 90r01r47         [24] 3777 	mov	dptr,#(_main_stLineFiPkt_test_65536_112 + 0x0001)
      000ECA 04               [12] 3778 	inc	a
      000ECB F0               [24] 3779 	movx	@dptr,a
      000ECC 90r01r48         [24] 3780 	mov	dptr,#(_main_stLineFiPkt_test_65536_112 + 0x0002)
      000ECF 14               [12] 3781 	dec	a
      000ED0 F0               [24] 3782 	movx	@dptr,a
      000ED1 90r01r49         [24] 3783 	mov	dptr,#(_main_stLineFiPkt_test_65536_112 + 0x0003)
      000ED4 74 14            [12] 3784 	mov	a,#0x14
      000ED6 F0               [24] 3785 	movx	@dptr,a
      000ED7 90r01r4A         [24] 3786 	mov	dptr,#(_main_stLineFiPkt_test_65536_112 + 0x0004)
      000EDA 74 05            [12] 3787 	mov	a,#0x05
      000EDC F0               [24] 3788 	movx	@dptr,a
      000EDD 90r01r4B         [24] 3789 	mov	dptr,#(_main_stLineFiPkt_test_65536_112 + 0x0005)
      000EE0 74r55            [12] 3790 	mov	a,#_gpu8Data3
      000EE2 F0               [24] 3791 	movx	@dptr,a
      000EE3 74s00            [12] 3792 	mov	a,#(_gpu8Data3 >> 8)
      000EE5 A3               [24] 3793 	inc	dptr
      000EE6 F0               [24] 3794 	movx	@dptr,a
      000EE7 E4               [12] 3795 	clr	a
      000EE8 A3               [24] 3796 	inc	dptr
      000EE9 F0               [24] 3797 	movx	@dptr,a
                                   3798 ;	src/main.c:855: gpio_setup();
      000EEA C0 07            [24] 3799 	push	ar7
      000EEC C0 04            [24] 3800 	push	ar4
      000EEE 12r03rBA         [24] 3801 	lcall	_gpio_setup
                                   3802 ;	src/main.c:856: uart_setup();
      000EF1 12r00r00         [24] 3803 	lcall	_uart_setup
                                   3804 ;	src/main.c:858: MODIFY_HIRC_166();
      000EF4 12r02r40         [24] 3805 	lcall	_MODIFY_HIRC_166
                                   3806 ;	src/main.c:860: clr_T0M;// 16/12 MHz
      000EF7 53 8E F7         [24] 3807 	anl	_CKCON,#0xf7
                                   3808 ;	src/main.c:863: set_ET0;                                    //enable Timer0 interrupt
                                   3809 ;	assignBit
      000EFA D2 A9            [12] 3810 	setb	_ET0
                                   3811 ;	src/main.c:864: set_TR0;                                    //Timer0 run
                                   3812 ;	assignBit
      000EFC D2 8C            [12] 3813 	setb	_TR0
                                   3814 ;	src/main.c:866: gu8UART = 0;
      000EFE 75*00 00         [24] 3815 	mov	_gu8UART,#0x00
                                   3816 ;	src/main.c:867: printf_fast_f("This is UART0\n\r");
      000F01 74r7F            [12] 3817 	mov	a,#___str_55
      000F03 C0 E0            [24] 3818 	push	acc
      000F05 74s03            [12] 3819 	mov	a,#(___str_55 >> 8)
      000F07 C0 E0            [24] 3820 	push	acc
      000F09 12r00r00         [24] 3821 	lcall	_printf_fast_f
      000F0C 15 81            [12] 3822 	dec	sp
      000F0E 15 81            [12] 3823 	dec	sp
                                   3824 ;	src/main.c:868: printf_fast_f("LineFi Master\n\r");
      000F10 74r8F            [12] 3825 	mov	a,#___str_56
      000F12 C0 E0            [24] 3826 	push	acc
      000F14 74s03            [12] 3827 	mov	a,#(___str_56 >> 8)
      000F16 C0 E0            [24] 3828 	push	acc
      000F18 12r00r00         [24] 3829 	lcall	_printf_fast_f
      000F1B 15 81            [12] 3830 	dec	sp
      000F1D 15 81            [12] 3831 	dec	sp
                                   3832 ;	src/main.c:869: gu8UART = 1;
      000F1F 75*00 01         [24] 3833 	mov	_gu8UART,#0x01
                                   3834 ;	src/main.c:870: printf_fast_f("This is UART1\n\r");
      000F22 74r9F            [12] 3835 	mov	a,#___str_57
      000F24 C0 E0            [24] 3836 	push	acc
      000F26 74s03            [12] 3837 	mov	a,#(___str_57 >> 8)
      000F28 C0 E0            [24] 3838 	push	acc
      000F2A 12r00r00         [24] 3839 	lcall	_printf_fast_f
      000F2D 15 81            [12] 3840 	dec	sp
      000F2F 15 81            [12] 3841 	dec	sp
      000F31 D0 04            [24] 3842 	pop	ar4
      000F33 D0 07            [24] 3843 	pop	ar7
                                   3844 ;	src/main.c:877: for (u16Cnt = 0 ; u16Cnt < 30000; u16Cnt++) {
      000F35 7A 30            [12] 3845 	mov	r2,#0x30
      000F37 7B 75            [12] 3846 	mov	r3,#0x75
      000F39                       3847 00209$:
                                   3848 ;	src/main.c:878: nop; nop; nop; nop; nop;
      000F39 00               [12] 3849 	NOP
      000F3A 00               [12] 3850 	NOP
      000F3B 00               [12] 3851 	NOP
      000F3C 00               [12] 3852 	NOP
      000F3D 00               [12] 3853 	NOP
      000F3E 1A               [12] 3854 	dec	r2
      000F3F BA FF 01         [24] 3855 	cjne	r2,#0xff,00461$
      000F42 1B               [12] 3856 	dec	r3
      000F43                       3857 00461$:
                                   3858 ;	src/main.c:877: for (u16Cnt = 0 ; u16Cnt < 30000; u16Cnt++) {
      000F43 EA               [12] 3859 	mov	a,r2
      000F44 4B               [12] 3860 	orl	a,r3
      000F45 70 F2            [24] 3861 	jnz	00209$
                                   3862 ;	src/main.c:880: LINEFI_TX = 1;
                                   3863 ;	assignBit
      000F47 D2 96            [12] 3864 	setb	_P16
                                   3865 ;	src/main.c:881: LINEFI_EN0 = 0;
                                   3866 ;	assignBit
      000F49 C2 90            [12] 3867 	clr	_P10
                                   3868 ;	src/main.c:882: gu8UART = 0;
      000F4B 75*00 00         [24] 3869 	mov	_gu8UART,#0x00
                                   3870 ;	src/main.c:886: InitialUART1_Timer3(gpu32UartSpeed[0]);
      000F4E 90r00r75         [24] 3871 	mov	dptr,#_gpu32UartSpeed
      000F51 E0               [24] 3872 	movx	a,@dptr
      000F52 FA               [12] 3873 	mov	r2,a
      000F53 A3               [24] 3874 	inc	dptr
      000F54 E0               [24] 3875 	movx	a,@dptr
      000F55 FB               [12] 3876 	mov	r3,a
      000F56 A3               [24] 3877 	inc	dptr
      000F57 E0               [24] 3878 	movx	a,@dptr
      000F58 FD               [12] 3879 	mov	r5,a
      000F59 A3               [24] 3880 	inc	dptr
      000F5A E0               [24] 3881 	movx	a,@dptr
      000F5B 8A 82            [24] 3882 	mov	dpl,r2
      000F5D 8B 83            [24] 3883 	mov	dph,r3
      000F5F 8D F0            [24] 3884 	mov	b,r5
      000F61 C0 07            [24] 3885 	push	ar7
      000F63 C0 04            [24] 3886 	push	ar4
      000F65 12r00r00         [24] 3887 	lcall	_InitialUART1_Timer3
                                   3888 ;	src/main.c:887: send_octet_to_linefi(((LINEFI_DEFAULT_RATE<<4)&0xF0) | (1)&0x0F);
      000F68 75 82 41         [24] 3889 	mov	dpl,#0x41
      000F6B 12r00r00         [24] 3890 	lcall	_send_octet_to_linefi
      000F6E D0 04            [24] 3891 	pop	ar4
      000F70 D0 07            [24] 3892 	pop	ar7
                                   3893 ;	src/main.c:889: for (u16Cnt = 0 ; u16Cnt < 30000; u16Cnt++) {
      000F72 7D 30            [12] 3894 	mov	r5,#0x30
      000F74 7E 75            [12] 3895 	mov	r6,#0x75
      000F76                       3896 00212$:
                                   3897 ;	src/main.c:890: nop; nop; nop; nop; nop;
      000F76 00               [12] 3898 	NOP
      000F77 00               [12] 3899 	NOP
      000F78 00               [12] 3900 	NOP
      000F79 00               [12] 3901 	NOP
      000F7A 00               [12] 3902 	NOP
      000F7B 1D               [12] 3903 	dec	r5
      000F7C BD FF 01         [24] 3904 	cjne	r5,#0xff,00463$
      000F7F 1E               [12] 3905 	dec	r6
      000F80                       3906 00463$:
                                   3907 ;	src/main.c:889: for (u16Cnt = 0 ; u16Cnt < 30000; u16Cnt++) {
      000F80 ED               [12] 3908 	mov	a,r5
      000F81 4E               [12] 3909 	orl	a,r6
      000F82 70 F2            [24] 3910 	jnz	00212$
                                   3911 ;	src/main.c:893: InitialUART1_Timer3(gpu32UartSpeed[LINEFI_DEFAULT_RATE]);
      000F84 90r00r85         [24] 3912 	mov	dptr,#(_gpu32UartSpeed + 0x0010)
      000F87 E0               [24] 3913 	movx	a,@dptr
      000F88 FA               [12] 3914 	mov	r2,a
      000F89 A3               [24] 3915 	inc	dptr
      000F8A E0               [24] 3916 	movx	a,@dptr
      000F8B FB               [12] 3917 	mov	r3,a
      000F8C A3               [24] 3918 	inc	dptr
      000F8D E0               [24] 3919 	movx	a,@dptr
      000F8E FD               [12] 3920 	mov	r5,a
      000F8F A3               [24] 3921 	inc	dptr
      000F90 E0               [24] 3922 	movx	a,@dptr
      000F91 8A 82            [24] 3923 	mov	dpl,r2
      000F93 8B 83            [24] 3924 	mov	dph,r3
      000F95 8D F0            [24] 3925 	mov	b,r5
      000F97 C0 07            [24] 3926 	push	ar7
      000F99 C0 04            [24] 3927 	push	ar4
      000F9B 12r00r00         [24] 3928 	lcall	_InitialUART1_Timer3
      000F9E D0 04            [24] 3929 	pop	ar4
      000FA0 D0 07            [24] 3930 	pop	ar7
                                   3931 ;	src/main.c:895: for (u16Cnt = 0 ; u16Cnt < 30000; u16Cnt++) {
      000FA2 7D 30            [12] 3932 	mov	r5,#0x30
      000FA4 7E 75            [12] 3933 	mov	r6,#0x75
      000FA6                       3934 00215$:
                                   3935 ;	src/main.c:896: nop; nop; nop; nop; nop;
      000FA6 00               [12] 3936 	NOP
      000FA7 00               [12] 3937 	NOP
      000FA8 00               [12] 3938 	NOP
      000FA9 00               [12] 3939 	NOP
      000FAA 00               [12] 3940 	NOP
      000FAB 1D               [12] 3941 	dec	r5
      000FAC BD FF 01         [24] 3942 	cjne	r5,#0xff,00465$
      000FAF 1E               [12] 3943 	dec	r6
      000FB0                       3944 00465$:
                                   3945 ;	src/main.c:895: for (u16Cnt = 0 ; u16Cnt < 30000; u16Cnt++) {
      000FB0 ED               [12] 3946 	mov	a,r5
      000FB1 4E               [12] 3947 	orl	a,r6
      000FB2 70 F2            [24] 3948 	jnz	00215$
                                   3949 ;	src/main.c:898: LINEFI_TX = 1;
                                   3950 ;	assignBit
      000FB4 D2 96            [12] 3951 	setb	_P16
                                   3952 ;	src/main.c:900: LINEFI_EN0 = 0;
                                   3953 ;	assignBit
      000FB6 C2 90            [12] 3954 	clr	_P10
                                   3955 ;	src/main.c:901: LINEFI_EN1 = 1;
                                   3956 ;	assignBit
      000FB8 D2 91            [12] 3957 	setb	_P11
                                   3958 ;	src/main.c:902: LINEFI_EN2 = 0;
                                   3959 ;	assignBit
      000FBA C2 92            [12] 3960 	clr	_P12
                                   3961 ;	src/main.c:903: printf("%s\r\n", gcUartInputMode[u8StateUart0InputMode]);
      000FBC 90r00r1E         [24] 3962 	mov	dptr,#_gcUartInputMode
      000FBF E0               [24] 3963 	movx	a,@dptr
      000FC0 FB               [12] 3964 	mov	r3,a
      000FC1 A3               [24] 3965 	inc	dptr
      000FC2 E0               [24] 3966 	movx	a,@dptr
      000FC3 FD               [12] 3967 	mov	r5,a
      000FC4 A3               [24] 3968 	inc	dptr
      000FC5 E0               [24] 3969 	movx	a,@dptr
      000FC6 FE               [12] 3970 	mov	r6,a
      000FC7 C0 07            [24] 3971 	push	ar7
      000FC9 C0 04            [24] 3972 	push	ar4
      000FCB C0 03            [24] 3973 	push	ar3
      000FCD C0 05            [24] 3974 	push	ar5
      000FCF C0 06            [24] 3975 	push	ar6
      000FD1 74rAF            [12] 3976 	mov	a,#___str_58
      000FD3 C0 E0            [24] 3977 	push	acc
      000FD5 74s03            [12] 3978 	mov	a,#(___str_58 >> 8)
      000FD7 C0 E0            [24] 3979 	push	acc
      000FD9 74 80            [12] 3980 	mov	a,#0x80
      000FDB C0 E0            [24] 3981 	push	acc
      000FDD 12r00r00         [24] 3982 	lcall	_printf
      000FE0 E5 81            [12] 3983 	mov	a,sp
      000FE2 24 FA            [12] 3984 	add	a,#0xfa
      000FE4 F5 81            [12] 3985 	mov	sp,a
      000FE6 D0 04            [24] 3986 	pop	ar4
      000FE8 D0 07            [24] 3987 	pop	ar7
                                   3988 ;	src/main.c:905: while(1) {
      000FEA                       3989 00205$:
                                   3990 ;	src/main.c:908: if (Receive_Data_From_UART0_nb(&u8RxUART)) { // 유아트 입력이 있을 때
      000FEA 90r00r12         [24] 3991 	mov	dptr,#_main_u8RxUART_65536_112
      000FED 75 F0 40         [24] 3992 	mov	b,#0x40
      000FF0 C0 07            [24] 3993 	push	ar7
      000FF2 C0 04            [24] 3994 	push	ar4
      000FF4 12r00r00         [24] 3995 	lcall	_Receive_Data_From_UART0_nb
      000FF7 E5 82            [12] 3996 	mov	a,dpl
      000FF9 D0 04            [24] 3997 	pop	ar4
      000FFB D0 07            [24] 3998 	pop	ar7
      000FFD 70 03            [24] 3999 	jnz	00467$
      000FFF 02r12rE9         [24] 4000 	ljmp	00163$
      001002                       4001 00467$:
                                   4002 ;	src/main.c:909: switch(u8RxUART) {
      001002 74 1B            [12] 4003 	mov	a,#0x1b
      001004 B5*12 43         [24] 4004 	cjne	a,_main_u8RxUART_65536_112,00107$
                                   4005 ;	src/main.c:911: u8StateUart0InputMode++;
      001007 0C               [12] 4006 	inc	r4
                                   4007 ;	src/main.c:912: if (u8StateUart0InputMode == MAX_STATE_UART0_INPUT) {
      001008 BC 05 02         [24] 4008 	cjne	r4,#0x05,00106$
                                   4009 ;	src/main.c:913: u8StateUart0InputMode = 0;
      00100B 7C 00            [12] 4010 	mov	r4,#0x00
      00100D                       4011 00106$:
                                   4012 ;	src/main.c:915: printf("%s\r\n", gcUartInputMode[u8StateUart0InputMode]);
      00100D EC               [12] 4013 	mov	a,r4
      00100E 75 F0 03         [24] 4014 	mov	b,#0x03
      001011 A4               [48] 4015 	mul	ab
      001012 24r1E            [12] 4016 	add	a,#_gcUartInputMode
      001014 F5 82            [12] 4017 	mov	dpl,a
      001016 74s00            [12] 4018 	mov	a,#(_gcUartInputMode >> 8)
      001018 35 F0            [12] 4019 	addc	a,b
      00101A F5 83            [12] 4020 	mov	dph,a
      00101C E0               [24] 4021 	movx	a,@dptr
      00101D FB               [12] 4022 	mov	r3,a
      00101E A3               [24] 4023 	inc	dptr
      00101F E0               [24] 4024 	movx	a,@dptr
      001020 FD               [12] 4025 	mov	r5,a
      001021 A3               [24] 4026 	inc	dptr
      001022 E0               [24] 4027 	movx	a,@dptr
      001023 FE               [12] 4028 	mov	r6,a
      001024 C0 07            [24] 4029 	push	ar7
      001026 C0 04            [24] 4030 	push	ar4
      001028 C0 03            [24] 4031 	push	ar3
      00102A C0 05            [24] 4032 	push	ar5
      00102C C0 06            [24] 4033 	push	ar6
      00102E 74rAF            [12] 4034 	mov	a,#___str_58
      001030 C0 E0            [24] 4035 	push	acc
      001032 74s03            [12] 4036 	mov	a,#(___str_58 >> 8)
      001034 C0 E0            [24] 4037 	push	acc
      001036 74 80            [12] 4038 	mov	a,#0x80
      001038 C0 E0            [24] 4039 	push	acc
      00103A 12r00r00         [24] 4040 	lcall	_printf
      00103D E5 81            [12] 4041 	mov	a,sp
      00103F 24 FA            [12] 4042 	add	a,#0xfa
      001041 F5 81            [12] 4043 	mov	sp,a
      001043 D0 04            [24] 4044 	pop	ar4
      001045 D0 07            [24] 4045 	pop	ar7
                                   4046 ;	src/main.c:916: break;
      001047 02r13r31         [24] 4047 	ljmp	00164$
                                   4048 ;	src/main.c:917: default :
      00104A                       4049 00107$:
                                   4050 ;	src/main.c:918: switch(u8StateUart0InputMode) {
      00104A EC               [12] 4051 	mov	a,r4
      00104B 24 FB            [12] 4052 	add	a,#0xff - 0x04
      00104D 50 03            [24] 4053 	jnc	00472$
      00104F 02r13r31         [24] 4054 	ljmp	00164$
      001052                       4055 00472$:
      001052 EC               [12] 4056 	mov	a,r4
      001053 2C               [12] 4057 	add	a,r4
      001054 2C               [12] 4058 	add	a,r4
      001055 90r10r59         [24] 4059 	mov	dptr,#00473$
      001058 73               [24] 4060 	jmp	@a+dptr
      001059                       4061 00473$:
      001059 02r10r68         [24] 4062 	ljmp	00108$
      00105C 02r10r8B         [24] 4063 	ljmp	00109$
      00105F 02r10rA9         [24] 4064 	ljmp	00110$
      001062 02r11r9A         [24] 4065 	ljmp	00131$
      001065 02r12rA0         [24] 4066 	ljmp	00147$
                                   4067 ;	src/main.c:919: case UART0_INPUT_MODE0 :
      001068                       4068 00108$:
                                   4069 ;	src/main.c:920: act_by_one_key(u8RxUART, &u8LineFiCmd, &u8LineFiAddr);
      001068 75*08r14         [24] 4070 	mov	_act_by_one_key_PARM_2,#_main_u8LineFiCmd_65536_112
      00106B 75*09 00         [24] 4071 	mov	(_act_by_one_key_PARM_2 + 1),#0x00
      00106E 75*0A 40         [24] 4072 	mov	(_act_by_one_key_PARM_2 + 2),#0x40
      001071 75*0Br13         [24] 4073 	mov	_act_by_one_key_PARM_3,#_main_u8LineFiAddr_65536_112
      001074 75*0C 00         [24] 4074 	mov	(_act_by_one_key_PARM_3 + 1),#0x00
      001077 75*0D 40         [24] 4075 	mov	(_act_by_one_key_PARM_3 + 2),#0x40
      00107A 85*12 82         [24] 4076 	mov	dpl,_main_u8RxUART_65536_112
      00107D C0 07            [24] 4077 	push	ar7
      00107F C0 04            [24] 4078 	push	ar4
      001081 12r06r35         [24] 4079 	lcall	_act_by_one_key
      001084 D0 04            [24] 4080 	pop	ar4
      001086 D0 07            [24] 4081 	pop	ar7
                                   4082 ;	src/main.c:921: break;
      001088 02r13r31         [24] 4083 	ljmp	00164$
                                   4084 ;	src/main.c:922: case UART0_INPUT_MODE1 :
      00108B                       4085 00109$:
                                   4086 ;	src/main.c:923: gu16TimeCnt = 0;
      00108B 90r00r71         [24] 4087 	mov	dptr,#_gu16TimeCnt
      00108E E4               [12] 4088 	clr	a
      00108F F0               [24] 4089 	movx	@dptr,a
      001090 A3               [24] 4090 	inc	dptr
      001091 F0               [24] 4091 	movx	@dptr,a
                                   4092 ;	src/main.c:924: pcBuf[ucBufIdx++] = u8RxUART;
      001092 90r01r1D         [24] 4093 	mov	dptr,#_main_ucBufIdx_65536_112
      001095 E0               [24] 4094 	movx	a,@dptr
      001096 FE               [12] 4095 	mov	r6,a
      001097 04               [12] 4096 	inc	a
      001098 F0               [24] 4097 	movx	@dptr,a
      001099 EE               [12] 4098 	mov	a,r6
      00109A 24rAE            [12] 4099 	add	a,#_main_pcBuf_65536_112
      00109C F5 82            [12] 4100 	mov	dpl,a
      00109E E4               [12] 4101 	clr	a
      00109F 34s00            [12] 4102 	addc	a,#(_main_pcBuf_65536_112 >> 8)
      0010A1 F5 83            [12] 4103 	mov	dph,a
      0010A3 E5*12            [12] 4104 	mov	a,_main_u8RxUART_65536_112
      0010A5 F0               [24] 4105 	movx	@dptr,a
                                   4106 ;	src/main.c:926: break;
      0010A6 02r13r31         [24] 4107 	ljmp	00164$
                                   4108 ;	src/main.c:927: case UART0_INPUT_MODE2 : // mimic 5keys on board
      0010A9                       4109 00110$:
                                   4110 ;	src/main.c:928: switch(u8RxUART) {
      0010A9 74 66            [12] 4111 	mov	a,#0x66
      0010AB B5*12 02         [24] 4112 	cjne	a,_main_u8RxUART_65536_112,00474$
      0010AE 80 1F            [24] 4113 	sjmp	00111$
      0010B0                       4114 00474$:
      0010B0 74 67            [12] 4115 	mov	a,#0x67
      0010B2 B5*12 02         [24] 4116 	cjne	a,_main_u8RxUART_65536_112,00475$
      0010B5 80 26            [24] 4117 	sjmp	00114$
      0010B7                       4118 00475$:
      0010B7 74 68            [12] 4119 	mov	a,#0x68
      0010B9 B5*12 02         [24] 4120 	cjne	a,_main_u8RxUART_65536_112,00476$
      0010BC 80 27            [24] 4121 	sjmp	00117$
      0010BE                       4122 00476$:
      0010BE 74 6A            [12] 4123 	mov	a,#0x6a
      0010C0 B5*12 02         [24] 4124 	cjne	a,_main_u8RxUART_65536_112,00477$
      0010C3 80 3C            [24] 4125 	sjmp	00118$
      0010C5                       4126 00477$:
      0010C5 74 6B            [12] 4127 	mov	a,#0x6b
      0010C7 B5*12 02         [24] 4128 	cjne	a,_main_u8RxUART_65536_112,00478$
      0010CA 80 62            [24] 4129 	sjmp	00121$
      0010CC                       4130 00478$:
      0010CC 02r11r59         [24] 4131 	ljmp	00124$
                                   4132 ;	src/main.c:929: case 'f' : // down SW1
      0010CF                       4133 00111$:
                                   4134 ;	src/main.c:930: u8LineFiAddr--;
      0010CF 15*13            [12] 4135 	dec	_main_u8LineFiAddr_65536_112
                                   4136 ;	src/main.c:931: if (u8LineFiAddr == 0) {
      0010D1 E5*13            [12] 4137 	mov	a,_main_u8LineFiAddr_65536_112
      0010D3 60 03            [24] 4138 	jz	00479$
      0010D5 02r11r59         [24] 4139 	ljmp	00124$
      0010D8                       4140 00479$:
                                   4141 ;	src/main.c:932: u8LineFiAddr = 1;
      0010D8 75*13 01         [24] 4142 	mov	_main_u8LineFiAddr_65536_112,#0x01
                                   4143 ;	src/main.c:934: break;
                                   4144 ;	src/main.c:935: case 'g' : // right SW2
      0010DB 80 7C            [24] 4145 	sjmp	00124$
      0010DD                       4146 00114$:
                                   4147 ;	src/main.c:936: u8LineFiCmd--;
                                   4148 ;	src/main.c:937: if (u8LineFiCmd == 0) {
      0010DD D5*14 79         [24] 4149 	djnz	_main_u8LineFiCmd_65536_112,00124$
                                   4150 ;	src/main.c:938: u8LineFiCmd = 1;
      0010E0 75*14 01         [24] 4151 	mov	_main_u8LineFiCmd_65536_112,#0x01
                                   4152 ;	src/main.c:940: break;
                                   4153 ;	src/main.c:941: case 'h' : // center SW3
      0010E3 80 74            [24] 4154 	sjmp	00124$
      0010E5                       4155 00117$:
                                   4156 ;	src/main.c:942: stLineFiPkt.pu8Data = pu8Data;
      0010E5 75*1Dr12         [24] 4157 	mov	((_main_stLineFiPkt_65536_112 + 0x0005) + 0),#_main_pu8Data_65536_112
      0010E8 75*1Es01         [24] 4158 	mov	((_main_stLineFiPkt_65536_112 + 0x0005) + 1),#(_main_pu8Data_65536_112 >> 8)
      0010EB 75*1F 00         [24] 4159 	mov	((_main_stLineFiPkt_65536_112 + 0x0005) + 2),#0x00
                                   4160 ;	src/main.c:943: send_linefi_packet(&stLineFiPkt);
      0010EE 90r00r18         [24] 4161 	mov	dptr,#_main_stLineFiPkt_65536_112
      0010F1 75 F0 40         [24] 4162 	mov	b,#0x40
      0010F4 C0 07            [24] 4163 	push	ar7
      0010F6 C0 04            [24] 4164 	push	ar4
      0010F8 12r00r00         [24] 4165 	lcall	_send_linefi_packet
      0010FB D0 04            [24] 4166 	pop	ar4
      0010FD D0 07            [24] 4167 	pop	ar7
                                   4168 ;	src/main.c:944: break;
                                   4169 ;	src/main.c:946: case 'j' : //  left SW4
      0010FF 80 58            [24] 4170 	sjmp	00124$
      001101                       4171 00118$:
                                   4172 ;	src/main.c:947: u8LineFiCmd++;
      001101 05*14            [12] 4173 	inc	_main_u8LineFiCmd_65536_112
                                   4174 ;	src/main.c:948: if (u8LineFiCmd == 101) {
      001103 74 65            [12] 4175 	mov	a,#0x65
      001105 B5*14 03         [24] 4176 	cjne	a,_main_u8LineFiCmd_65536_112,00120$
                                   4177 ;	src/main.c:949: u8LineFiCmd = 100;
      001108 75*14 64         [24] 4178 	mov	_main_u8LineFiCmd_65536_112,#0x64
      00110B                       4179 00120$:
                                   4180 ;	src/main.c:951: printf_fast_f("command: %d\n\r", u8LineFiCmd);
      00110B AD*14            [24] 4181 	mov	r5,_main_u8LineFiCmd_65536_112
      00110D 7E 00            [12] 4182 	mov	r6,#0x00
      00110F C0 07            [24] 4183 	push	ar7
      001111 C0 04            [24] 4184 	push	ar4
      001113 C0 05            [24] 4185 	push	ar5
      001115 C0 06            [24] 4186 	push	ar6
      001117 74rFA            [12] 4187 	mov	a,#___str_49
      001119 C0 E0            [24] 4188 	push	acc
      00111B 74s02            [12] 4189 	mov	a,#(___str_49 >> 8)
      00111D C0 E0            [24] 4190 	push	acc
      00111F 12r00r00         [24] 4191 	lcall	_printf_fast_f
      001122 E5 81            [12] 4192 	mov	a,sp
      001124 24 FC            [12] 4193 	add	a,#0xfc
      001126 F5 81            [12] 4194 	mov	sp,a
      001128 D0 04            [24] 4195 	pop	ar4
      00112A D0 07            [24] 4196 	pop	ar7
                                   4197 ;	src/main.c:952: break;
                                   4198 ;	src/main.c:953: case 'k' : // up SW5
      00112C 80 2B            [24] 4199 	sjmp	00124$
      00112E                       4200 00121$:
                                   4201 ;	src/main.c:954: u8LineFiAddr++;
      00112E 05*13            [12] 4202 	inc	_main_u8LineFiAddr_65536_112
                                   4203 ;	src/main.c:955: if (u8LineFiAddr == 16) {
      001130 74 10            [12] 4204 	mov	a,#0x10
      001132 B5*13 03         [24] 4205 	cjne	a,_main_u8LineFiAddr_65536_112,00123$
                                   4206 ;	src/main.c:956: u8LineFiAddr = 15;
      001135 75*13 0F         [24] 4207 	mov	_main_u8LineFiAddr_65536_112,#0x0f
      001138                       4208 00123$:
                                   4209 ;	src/main.c:958: printf_fast_f("address: %d\n\r", u8LineFiAddr);
      001138 AD*13            [24] 4210 	mov	r5,_main_u8LineFiAddr_65536_112
      00113A 7E 00            [12] 4211 	mov	r6,#0x00
      00113C C0 07            [24] 4212 	push	ar7
      00113E C0 04            [24] 4213 	push	ar4
      001140 C0 05            [24] 4214 	push	ar5
      001142 C0 06            [24] 4215 	push	ar6
      001144 74rEC            [12] 4216 	mov	a,#___str_48
      001146 C0 E0            [24] 4217 	push	acc
      001148 74s02            [12] 4218 	mov	a,#(___str_48 >> 8)
      00114A C0 E0            [24] 4219 	push	acc
      00114C 12r00r00         [24] 4220 	lcall	_printf_fast_f
      00114F E5 81            [12] 4221 	mov	a,sp
      001151 24 FC            [12] 4222 	add	a,#0xfc
      001153 F5 81            [12] 4223 	mov	sp,a
      001155 D0 04            [24] 4224 	pop	ar4
      001157 D0 07            [24] 4225 	pop	ar7
                                   4226 ;	src/main.c:960: }
      001159                       4227 00124$:
                                   4228 ;	src/main.c:962: switch(u8RxUART) {
      001159 74 66            [12] 4229 	mov	a,#0x66
      00115B B5*12 02         [24] 4230 	cjne	a,_main_u8RxUART_65536_112,00485$
      00115E 80 20            [24] 4231 	sjmp	00128$
      001160                       4232 00485$:
      001160 74 67            [12] 4233 	mov	a,#0x67
      001162 B5*12 02         [24] 4234 	cjne	a,_main_u8RxUART_65536_112,00486$
      001165 80 19            [24] 4235 	sjmp	00128$
      001167                       4236 00486$:
      001167 74 68            [12] 4237 	mov	a,#0x68
      001169 B5*12 03         [24] 4238 	cjne	a,_main_u8RxUART_65536_112,00487$
      00116C 02r13r31         [24] 4239 	ljmp	00164$
      00116F                       4240 00487$:
      00116F 74 6A            [12] 4241 	mov	a,#0x6a
      001171 B5*12 02         [24] 4242 	cjne	a,_main_u8RxUART_65536_112,00488$
      001174 80 0A            [24] 4243 	sjmp	00128$
      001176                       4244 00488$:
      001176 74 6B            [12] 4245 	mov	a,#0x6b
      001178 B5*12 02         [24] 4246 	cjne	a,_main_u8RxUART_65536_112,00489$
      00117B 80 03            [24] 4247 	sjmp	00490$
      00117D                       4248 00489$:
      00117D 02r13r31         [24] 4249 	ljmp	00164$
      001180                       4250 00490$:
                                   4251 ;	src/main.c:966: case 'k' : // up SW5
      001180                       4252 00128$:
                                   4253 ;	src/main.c:967: stLineFiPkt.u8Addr = u8LineFiAddr;
      001180 85*13*1A         [24] 4254 	mov	(_main_stLineFiPkt_65536_112 + 0x0002),_main_u8LineFiAddr_65536_112
                                   4255 ;	src/main.c:968: stLineFiPkt.u8Type = u8LineFiCmd;
      001183 85*14*19         [24] 4256 	mov	(_main_stLineFiPkt_65536_112 + 0x0001),_main_u8LineFiCmd_65536_112
                                   4257 ;	src/main.c:969: print_linefipacket(&stLineFiPkt);
      001186 90r00r18         [24] 4258 	mov	dptr,#_main_stLineFiPkt_65536_112
      001189 75 F0 40         [24] 4259 	mov	b,#0x40
      00118C C0 07            [24] 4260 	push	ar7
      00118E C0 04            [24] 4261 	push	ar4
      001190 12r00r00         [24] 4262 	lcall	_print_linefipacket
      001193 D0 04            [24] 4263 	pop	ar4
      001195 D0 07            [24] 4264 	pop	ar7
                                   4265 ;	src/main.c:970: break;
      001197 02r13r31         [24] 4266 	ljmp	00164$
                                   4267 ;	src/main.c:977: case UART0_INPUT_MODE3 : // slave gpio pin setting
      00119A                       4268 00131$:
                                   4269 ;	src/main.c:978: switch(u8RxUART) {
      00119A 74 68            [12] 4270 	mov	a,#0x68
      00119C B5*12 02         [24] 4271 	cjne	a,_main_u8RxUART_65536_112,00491$
      00119F 80 15            [24] 4272 	sjmp	00132$
      0011A1                       4273 00491$:
      0011A1 74 6A            [12] 4274 	mov	a,#0x6a
      0011A3 B5*12 02         [24] 4275 	cjne	a,_main_u8RxUART_65536_112,00492$
      0011A6 80 20            [24] 4276 	sjmp	00135$
      0011A8                       4277 00492$:
      0011A8 74 6B            [12] 4278 	mov	a,#0x6b
      0011AA B5*12 02         [24] 4279 	cjne	a,_main_u8RxUART_65536_112,00493$
      0011AD 80 33            [24] 4280 	sjmp	00136$
      0011AF                       4281 00493$:
      0011AF 74 6C            [12] 4282 	mov	a,#0x6c
                                   4283 ;	src/main.c:979: case 'h' : // left
      0011B1 B5*12 5A         [24] 4284 	cjne	a,_main_u8RxUART_65536_112,00140$
      0011B4 80 46            [24] 4285 	sjmp	00137$
      0011B6                       4286 00132$:
                                   4287 ;	src/main.c:980: u8DataIdx--;
      0011B6 90r01r1C         [24] 4288 	mov	dptr,#_main_u8DataIdx_65536_112
      0011B9 E0               [24] 4289 	movx	a,@dptr
      0011BA 14               [12] 4290 	dec	a
      0011BB F0               [24] 4291 	movx	@dptr,a
                                   4292 ;	src/main.c:981: if (u8DataIdx == 255) {
      0011BC E0               [24] 4293 	movx	a,@dptr
      0011BD FE               [12] 4294 	mov	r6,a
      0011BE BE FF 4D         [24] 4295 	cjne	r6,#0xff,00140$
                                   4296 ;	src/main.c:982: u8DataIdx = 0;
      0011C1 90r01r1C         [24] 4297 	mov	dptr,#_main_u8DataIdx_65536_112
      0011C4 E4               [12] 4298 	clr	a
      0011C5 F0               [24] 4299 	movx	@dptr,a
                                   4300 ;	src/main.c:984: break;
                                   4301 ;	src/main.c:985: case 'j' : // down 
      0011C6 80 46            [24] 4302 	sjmp	00140$
      0011C8                       4303 00135$:
                                   4304 ;	src/main.c:986: pu8Data[u8DataIdx]--;
      0011C8 90r01r1C         [24] 4305 	mov	dptr,#_main_u8DataIdx_65536_112
      0011CB E0               [24] 4306 	movx	a,@dptr
      0011CC 24r12            [12] 4307 	add	a,#_main_pu8Data_65536_112
      0011CE FE               [12] 4308 	mov	r6,a
      0011CF E4               [12] 4309 	clr	a
      0011D0 34s01            [12] 4310 	addc	a,#(_main_pu8Data_65536_112 >> 8)
      0011D2 FD               [12] 4311 	mov	r5,a
      0011D3 8E 82            [24] 4312 	mov	dpl,r6
      0011D5 8D 83            [24] 4313 	mov	dph,r5
      0011D7 E0               [24] 4314 	movx	a,@dptr
      0011D8 FB               [12] 4315 	mov	r3,a
      0011D9 1B               [12] 4316 	dec	r3
      0011DA 8E 82            [24] 4317 	mov	dpl,r6
      0011DC 8D 83            [24] 4318 	mov	dph,r5
      0011DE EB               [12] 4319 	mov	a,r3
      0011DF F0               [24] 4320 	movx	@dptr,a
                                   4321 ;	src/main.c:987: break;
                                   4322 ;	src/main.c:988: case 'k' : // up 
      0011E0 80 2C            [24] 4323 	sjmp	00140$
      0011E2                       4324 00136$:
                                   4325 ;	src/main.c:989: pu8Data[u8DataIdx]++;
      0011E2 90r01r1C         [24] 4326 	mov	dptr,#_main_u8DataIdx_65536_112
      0011E5 E0               [24] 4327 	movx	a,@dptr
      0011E6 24r12            [12] 4328 	add	a,#_main_pu8Data_65536_112
      0011E8 FE               [12] 4329 	mov	r6,a
      0011E9 E4               [12] 4330 	clr	a
      0011EA 34s01            [12] 4331 	addc	a,#(_main_pu8Data_65536_112 >> 8)
      0011EC FD               [12] 4332 	mov	r5,a
      0011ED 8E 82            [24] 4333 	mov	dpl,r6
      0011EF 8D 83            [24] 4334 	mov	dph,r5
      0011F1 E0               [24] 4335 	movx	a,@dptr
      0011F2 FB               [12] 4336 	mov	r3,a
      0011F3 0B               [12] 4337 	inc	r3
      0011F4 8E 82            [24] 4338 	mov	dpl,r6
      0011F6 8D 83            [24] 4339 	mov	dph,r5
      0011F8 EB               [12] 4340 	mov	a,r3
      0011F9 F0               [24] 4341 	movx	@dptr,a
                                   4342 ;	src/main.c:990: break;
                                   4343 ;	src/main.c:991: case 'l' : // right 
      0011FA 80 12            [24] 4344 	sjmp	00140$
      0011FC                       4345 00137$:
                                   4346 ;	src/main.c:992: u8DataIdx++;
      0011FC 90r01r1C         [24] 4347 	mov	dptr,#_main_u8DataIdx_65536_112
      0011FF E0               [24] 4348 	movx	a,@dptr
      001200 24 01            [12] 4349 	add	a,#0x01
      001202 F0               [24] 4350 	movx	@dptr,a
                                   4351 ;	src/main.c:993: if (u8DataIdx == MAX_DATA) {
      001203 E0               [24] 4352 	movx	a,@dptr
      001204 FE               [12] 4353 	mov	r6,a
      001205 BE 0A 06         [24] 4354 	cjne	r6,#0x0a,00140$
                                   4355 ;	src/main.c:994: u8DataIdx--;;
      001208 EE               [12] 4356 	mov	a,r6
      001209 14               [12] 4357 	dec	a
      00120A 90r01r1C         [24] 4358 	mov	dptr,#_main_u8DataIdx_65536_112
      00120D F0               [24] 4359 	movx	@dptr,a
                                   4360 ;	src/main.c:997: }
      00120E                       4361 00140$:
                                   4362 ;	src/main.c:998: switch(u8RxUART) {
      00120E 74 68            [12] 4363 	mov	a,#0x68
      001210 B5*12 02         [24] 4364 	cjne	a,_main_u8RxUART_65536_112,00499$
      001213 80 13            [24] 4365 	sjmp	00142$
      001215                       4366 00499$:
      001215 74 6A            [12] 4367 	mov	a,#0x6a
      001217 B5*12 02         [24] 4368 	cjne	a,_main_u8RxUART_65536_112,00500$
      00121A 80 32            [24] 4369 	sjmp	00252$
      00121C                       4370 00500$:
      00121C 74 6B            [12] 4371 	mov	a,#0x6b
      00121E B5*12 02         [24] 4372 	cjne	a,_main_u8RxUART_65536_112,00501$
      001221 80 2B            [24] 4373 	sjmp	00252$
      001223                       4374 00501$:
      001223 74 6C            [12] 4375 	mov	a,#0x6c
      001225 B5*12 78         [24] 4376 	cjne	a,_main_u8RxUART_65536_112,00147$
                                   4377 ;	src/main.c:1000: case 'l' : // right
      001228                       4378 00142$:
                                   4379 ;	src/main.c:1001: printf_fast_f("DataIdx:%d\r\n", u8DataIdx);
      001228 90r01r1C         [24] 4380 	mov	dptr,#_main_u8DataIdx_65536_112
      00122B E0               [24] 4381 	movx	a,@dptr
      00122C FE               [12] 4382 	mov	r6,a
      00122D 7D 00            [12] 4383 	mov	r5,#0x00
      00122F C0 07            [24] 4384 	push	ar7
      001231 C0 04            [24] 4385 	push	ar4
      001233 C0 06            [24] 4386 	push	ar6
      001235 C0 05            [24] 4387 	push	ar5
      001237 74rB4            [12] 4388 	mov	a,#___str_59
      001239 C0 E0            [24] 4389 	push	acc
      00123B 74s03            [12] 4390 	mov	a,#(___str_59 >> 8)
      00123D C0 E0            [24] 4391 	push	acc
      00123F 12r00r00         [24] 4392 	lcall	_printf_fast_f
      001242 E5 81            [12] 4393 	mov	a,sp
      001244 24 FC            [12] 4394 	add	a,#0xfc
      001246 F5 81            [12] 4395 	mov	sp,a
      001248 D0 04            [24] 4396 	pop	ar4
      00124A D0 07            [24] 4397 	pop	ar7
                                   4398 ;	src/main.c:1002: break;
                                   4399 ;	src/main.c:1007: for (i=0;i<MAX_DATA;i++) {
      00124C 80 52            [24] 4400 	sjmp	00147$
      00124E                       4401 00252$:
      00124E 7E 00            [12] 4402 	mov	r6,#0x00
      001250                       4403 00216$:
                                   4404 ;	src/main.c:1008: printf("0x%x ", pu8Data[i]);
      001250 EE               [12] 4405 	mov	a,r6
      001251 24r12            [12] 4406 	add	a,#_main_pu8Data_65536_112
      001253 F5 82            [12] 4407 	mov	dpl,a
      001255 E4               [12] 4408 	clr	a
      001256 34s01            [12] 4409 	addc	a,#(_main_pu8Data_65536_112 >> 8)
      001258 F5 83            [12] 4410 	mov	dph,a
      00125A E0               [24] 4411 	movx	a,@dptr
      00125B FD               [12] 4412 	mov	r5,a
      00125C 7B 00            [12] 4413 	mov	r3,#0x00
      00125E C0 07            [24] 4414 	push	ar7
      001260 C0 06            [24] 4415 	push	ar6
      001262 C0 04            [24] 4416 	push	ar4
      001264 C0 05            [24] 4417 	push	ar5
      001266 C0 03            [24] 4418 	push	ar3
      001268 74rC1            [12] 4419 	mov	a,#___str_60
      00126A C0 E0            [24] 4420 	push	acc
      00126C 74s03            [12] 4421 	mov	a,#(___str_60 >> 8)
      00126E C0 E0            [24] 4422 	push	acc
      001270 74 80            [12] 4423 	mov	a,#0x80
      001272 C0 E0            [24] 4424 	push	acc
      001274 12r00r00         [24] 4425 	lcall	_printf
      001277 E5 81            [12] 4426 	mov	a,sp
      001279 24 FB            [12] 4427 	add	a,#0xfb
      00127B F5 81            [12] 4428 	mov	sp,a
      00127D D0 04            [24] 4429 	pop	ar4
      00127F D0 06            [24] 4430 	pop	ar6
      001281 D0 07            [24] 4431 	pop	ar7
                                   4432 ;	src/main.c:1007: for (i=0;i<MAX_DATA;i++) {
      001283 0E               [12] 4433 	inc	r6
      001284 BE 0A 00         [24] 4434 	cjne	r6,#0x0a,00504$
      001287                       4435 00504$:
      001287 40 C7            [24] 4436 	jc	00216$
                                   4437 ;	src/main.c:1010: printf_fast_f("\r\n");
      001289 C0 07            [24] 4438 	push	ar7
      00128B C0 04            [24] 4439 	push	ar4
      00128D 74r2E            [12] 4440 	mov	a,#___str_5
      00128F C0 E0            [24] 4441 	push	acc
      001291 74s00            [12] 4442 	mov	a,#(___str_5 >> 8)
      001293 C0 E0            [24] 4443 	push	acc
      001295 12r00r00         [24] 4444 	lcall	_printf_fast_f
      001298 15 81            [12] 4445 	dec	sp
      00129A 15 81            [12] 4446 	dec	sp
      00129C D0 04            [24] 4447 	pop	ar4
      00129E D0 07            [24] 4448 	pop	ar7
                                   4449 ;	src/main.c:1014: case UART0_INPUT_MODE4 : // 주기적으로 하향 패킷 생성 스테이트머신 제어용 CLI
      0012A0                       4450 00147$:
                                   4451 ;	src/main.c:1015: switch(u8RxUART) {
      0012A0 74 65            [12] 4452 	mov	a,#0x65
      0012A2 B5*12 02         [24] 4453 	cjne	a,_main_u8RxUART_65536_112,00506$
      0012A5 80 26            [24] 4454 	sjmp	00149$
      0012A7                       4455 00506$:
      0012A7 74 73            [12] 4456 	mov	a,#0x73
      0012A9 B5*12 02         [24] 4457 	cjne	a,_main_u8RxUART_65536_112,00507$
      0012AC 80 03            [24] 4458 	sjmp	00508$
      0012AE                       4459 00507$:
      0012AE 02r13r31         [24] 4460 	ljmp	00164$
      0012B1                       4461 00508$:
                                   4462 ;	src/main.c:1017: printf_fast_f("START periodic packet generating..\r\n");
      0012B1 C0 07            [24] 4463 	push	ar7
      0012B3 C0 04            [24] 4464 	push	ar4
      0012B5 74rC7            [12] 4465 	mov	a,#___str_61
      0012B7 C0 E0            [24] 4466 	push	acc
      0012B9 74s03            [12] 4467 	mov	a,#(___str_61 >> 8)
      0012BB C0 E0            [24] 4468 	push	acc
      0012BD 12r00r00         [24] 4469 	lcall	_printf_fast_f
      0012C0 15 81            [12] 4470 	dec	sp
      0012C2 15 81            [12] 4471 	dec	sp
      0012C4 D0 04            [24] 4472 	pop	ar4
      0012C6 D0 07            [24] 4473 	pop	ar7
                                   4474 ;	src/main.c:1018: u8PSCmd = CMD_PS_START;
      0012C8 75*17 03         [24] 4475 	mov	_main_u8PSCmd_65536_112,#0x03
                                   4476 ;	src/main.c:1019: break;
                                   4477 ;	src/main.c:1020: case 'e' : // 종료
      0012CB 80 64            [24] 4478 	sjmp	00164$
      0012CD                       4479 00149$:
                                   4480 ;	src/main.c:1021: printf_fast_f("STOP  periodic packet generating..\r\n");
      0012CD C0 07            [24] 4481 	push	ar7
      0012CF C0 04            [24] 4482 	push	ar4
      0012D1 74rEC            [12] 4483 	mov	a,#___str_62
      0012D3 C0 E0            [24] 4484 	push	acc
      0012D5 74s03            [12] 4485 	mov	a,#(___str_62 >> 8)
      0012D7 C0 E0            [24] 4486 	push	acc
      0012D9 12r00r00         [24] 4487 	lcall	_printf_fast_f
      0012DC 15 81            [12] 4488 	dec	sp
      0012DE 15 81            [12] 4489 	dec	sp
      0012E0 D0 04            [24] 4490 	pop	ar4
      0012E2 D0 07            [24] 4491 	pop	ar7
                                   4492 ;	src/main.c:1022: u8PSCmd = CMD_PS_END;
      0012E4 75*17 04         [24] 4493 	mov	_main_u8PSCmd_65536_112,#0x04
                                   4494 ;	src/main.c:1031: } //switch(u8RxUART)
      0012E7 80 48            [24] 4495 	sjmp	00164$
      0012E9                       4496 00163$:
                                   4497 ;	src/main.c:1034: switch(u8StateUart0InputMode) {
      0012E9 EC               [12] 4498 	mov	a,r4
      0012EA 24 FB            [12] 4499 	add	a,#0xff - 0x04
      0012EC 40 43            [24] 4500 	jc	00164$
      0012EE EC               [12] 4501 	mov	a,r4
      0012EF 2C               [12] 4502 	add	a,r4
                                   4503 ;	src/main.c:1037: case UART0_INPUT_MODE1 :
      0012F0 90r12rF4         [24] 4504 	mov	dptr,#00510$
      0012F3 73               [24] 4505 	jmp	@a+dptr
      0012F4                       4506 00510$:
      0012F4 80 3B            [24] 4507 	sjmp	00164$
      0012F6 80 06            [24] 4508 	sjmp	00154$
      0012F8 80 37            [24] 4509 	sjmp	00164$
      0012FA 80 35            [24] 4510 	sjmp	00164$
      0012FC 80 33            [24] 4511 	sjmp	00164$
      0012FE                       4512 00154$:
                                   4513 ;	src/main.c:1038: if (gu16TimeCnt > 10 && ucBufIdx != 0) {
      0012FE 90r00r71         [24] 4514 	mov	dptr,#_gu16TimeCnt
      001301 E0               [24] 4515 	movx	a,@dptr
      001302 FD               [12] 4516 	mov	r5,a
      001303 A3               [24] 4517 	inc	dptr
      001304 E0               [24] 4518 	movx	a,@dptr
      001305 FE               [12] 4519 	mov	r6,a
      001306 C3               [12] 4520 	clr	c
      001307 74 0A            [12] 4521 	mov	a,#0x0a
      001309 9D               [12] 4522 	subb	a,r5
      00130A E4               [12] 4523 	clr	a
      00130B 9E               [12] 4524 	subb	a,r6
      00130C 50 23            [24] 4525 	jnc	00164$
      00130E 90r01r1D         [24] 4526 	mov	dptr,#_main_ucBufIdx_65536_112
      001311 E0               [24] 4527 	movx	a,@dptr
      001312 FE               [12] 4528 	mov	r6,a
      001313 E0               [24] 4529 	movx	a,@dptr
      001314 60 1B            [24] 4530 	jz	00164$
                                   4531 ;	src/main.c:1039: printoutbuf(ucBufIdx, pcBuf);
      001316 75*05rAE         [24] 4532 	mov	_printoutbuf_PARM_2,#_main_pcBuf_65536_112
      001319 75*06s00         [24] 4533 	mov	(_printoutbuf_PARM_2 + 1),#(_main_pcBuf_65536_112 >> 8)
      00131C 75*07 00         [24] 4534 	mov	(_printoutbuf_PARM_2 + 2),#0x00
      00131F 8E 82            [24] 4535 	mov	dpl,r6
      001321 C0 07            [24] 4536 	push	ar7
      001323 C0 04            [24] 4537 	push	ar4
      001325 12r05r04         [24] 4538 	lcall	_printoutbuf
      001328 D0 04            [24] 4539 	pop	ar4
      00132A D0 07            [24] 4540 	pop	ar7
                                   4541 ;	src/main.c:1040: ucBufIdx = 0;
      00132C 90r01r1D         [24] 4542 	mov	dptr,#_main_ucBufIdx_65536_112
      00132F E4               [12] 4543 	clr	a
      001330 F0               [24] 4544 	movx	@dptr,a
                                   4545 ;	src/main.c:1049: } //switch(u8StateUart0InputMode)
      001331                       4546 00164$:
                                   4547 ;	src/main.c:1057: if (u8PwrOnFirstFlag) { // 전원 켜진 후, 한 번만 동작
      001331 EF               [12] 4548 	mov	a,r7
      001332 70 03            [24] 4549 	jnz	00513$
      001334 02r14r1D         [24] 4550 	ljmp	00193$
      001337                       4551 00513$:
                                   4552 ;	src/main.c:1058: switch (state_switches((SW_U<<0)| (SW_R<<1)| (SW_L<<2)| (SW_D<<3) | (SW_C<<4), &u8SwNum)) {
      001337 A2 95            [12] 4553 	mov	c,_P15
      001339 E4               [12] 4554 	clr	a
      00133A 33               [12] 4555 	rlc	a
      00133B FE               [12] 4556 	mov	r6,a
      00133C A2 B0            [12] 4557 	mov	c,_P30
      00133E E4               [12] 4558 	clr	a
      00133F 33               [12] 4559 	rlc	a
      001340 25 E0            [12] 4560 	add	a,acc
      001342 42 06            [12] 4561 	orl	ar6,a
      001344 A2 80            [12] 4562 	mov	c,_P00
      001346 E4               [12] 4563 	clr	a
      001347 33               [12] 4564 	rlc	a
      001348 25 E0            [12] 4565 	add	a,acc
      00134A 25 E0            [12] 4566 	add	a,acc
      00134C 42 06            [12] 4567 	orl	ar6,a
      00134E A2 93            [12] 4568 	mov	c,_P13
      001350 E4               [12] 4569 	clr	a
      001351 33               [12] 4570 	rlc	a
      001352 C4               [12] 4571 	swap	a
      001353 03               [12] 4572 	rr	a
      001354 54 F8            [12] 4573 	anl	a,#0xf8
      001356 42 06            [12] 4574 	orl	ar6,a
      001358 A2 97            [12] 4575 	mov	c,_P17
      00135A E4               [12] 4576 	clr	a
      00135B 33               [12] 4577 	rlc	a
      00135C C4               [12] 4578 	swap	a
      00135D 54 F0            [12] 4579 	anl	a,#0xf0
      00135F 4E               [12] 4580 	orl	a,r6
      001360 F5 82            [12] 4581 	mov	dpl,a
      001362 75*00r15         [24] 4582 	mov	_state_switches_PARM_2,#_main_u8SwNum_65536_112
      001365 75*01 00         [24] 4583 	mov	(_state_switches_PARM_2 + 1),#0x00
      001368 75*02 40         [24] 4584 	mov	(_state_switches_PARM_2 + 2),#0x40
      00136B C0 07            [24] 4585 	push	ar7
      00136D C0 04            [24] 4586 	push	ar4
      00136F 12r04r0F         [24] 4587 	lcall	_state_switches
      001372 AE 82            [24] 4588 	mov	r6,dpl
      001374 D0 04            [24] 4589 	pop	ar4
      001376 D0 07            [24] 4590 	pop	ar7
      001378 BE 01 02         [24] 4591 	cjne	r6,#0x01,00514$
      00137B 80 03            [24] 4592 	sjmp	00515$
      00137D                       4593 00514$:
      00137D 02r15r6C         [24] 4594 	ljmp	00194$
      001380                       4595 00515$:
                                   4596 ;	src/main.c:1060: switch(u8PwrOnFirstFlag) {
      001380 EF               [12] 4597 	mov	a,r7
      001381 24 FA            [12] 4598 	add	a,#0xff - 0x05
      001383 50 03            [24] 4599 	jnc	00516$
      001385 02r15r6C         [24] 4600 	ljmp	00194$
      001388                       4601 00516$:
      001388 EF               [12] 4602 	mov	a,r7
      001389 2F               [12] 4603 	add	a,r7
      00138A 2F               [12] 4604 	add	a,r7
      00138B 90r13r8F         [24] 4605 	mov	dptr,#00517$
      00138E 73               [24] 4606 	jmp	@a+dptr
      00138F                       4607 00517$:
      00138F 02r15r6C         [24] 4608 	ljmp	00194$
      001392 02r13rA1         [24] 4609 	ljmp	00166$
      001395 02r13rA9         [24] 4610 	ljmp	00167$
      001398 02r14r11         [24] 4611 	ljmp	00168$
      00139B 02r14r15         [24] 4612 	ljmp	00169$
      00139E 02r14r19         [24] 4613 	ljmp	00170$
                                   4614 ;	src/main.c:1061: case 1 :
      0013A1                       4615 00166$:
                                   4616 ;	src/main.c:1062: LINEFI_TX = 1;
                                   4617 ;	assignBit
      0013A1 D2 96            [12] 4618 	setb	_P16
                                   4619 ;	src/main.c:1063: LINEFI_EN0 = 1;
                                   4620 ;	assignBit
      0013A3 D2 90            [12] 4621 	setb	_P10
                                   4622 ;	src/main.c:1064: u8PwrOnFirstFlag++;
      0013A5 0F               [12] 4623 	inc	r7
                                   4624 ;	src/main.c:1065: break;
      0013A6 02r15r6C         [24] 4625 	ljmp	00194$
                                   4626 ;	src/main.c:1066: case 2 :
      0013A9                       4627 00167$:
                                   4628 ;	src/main.c:1067: InitialUART1_Timer3(gpu32UartSpeed[0]);
      0013A9 90r00r75         [24] 4629 	mov	dptr,#_gpu32UartSpeed
      0013AC E0               [24] 4630 	movx	a,@dptr
      0013AD FA               [12] 4631 	mov	r2,a
      0013AE A3               [24] 4632 	inc	dptr
      0013AF E0               [24] 4633 	movx	a,@dptr
      0013B0 FB               [12] 4634 	mov	r3,a
      0013B1 A3               [24] 4635 	inc	dptr
      0013B2 E0               [24] 4636 	movx	a,@dptr
      0013B3 FD               [12] 4637 	mov	r5,a
      0013B4 A3               [24] 4638 	inc	dptr
      0013B5 E0               [24] 4639 	movx	a,@dptr
      0013B6 8A 82            [24] 4640 	mov	dpl,r2
      0013B8 8B 83            [24] 4641 	mov	dph,r3
      0013BA 8D F0            [24] 4642 	mov	b,r5
      0013BC C0 04            [24] 4643 	push	ar4
      0013BE 12r00r00         [24] 4644 	lcall	_InitialUART1_Timer3
                                   4645 ;	src/main.c:1068: send_octet_to_linefi(((LINEFI_DEFAULT_RATE<<4)&0xF0) | (1)&0x0F);
      0013C1 75 82 41         [24] 4646 	mov	dpl,#0x41
      0013C4 12r00r00         [24] 4647 	lcall	_send_octet_to_linefi
                                   4648 ;	src/main.c:1069: printf_fast_f("uart speed: %lu:\n\r", gpu32UartSpeed[LINEFI_DEFAULT_RATE]);
      0013C7 90r00r85         [24] 4649 	mov	dptr,#(_gpu32UartSpeed + 0x0010)
      0013CA E0               [24] 4650 	movx	a,@dptr
      0013CB FA               [12] 4651 	mov	r2,a
      0013CC A3               [24] 4652 	inc	dptr
      0013CD E0               [24] 4653 	movx	a,@dptr
      0013CE FB               [12] 4654 	mov	r3,a
      0013CF A3               [24] 4655 	inc	dptr
      0013D0 E0               [24] 4656 	movx	a,@dptr
      0013D1 FD               [12] 4657 	mov	r5,a
      0013D2 A3               [24] 4658 	inc	dptr
      0013D3 E0               [24] 4659 	movx	a,@dptr
      0013D4 FE               [12] 4660 	mov	r6,a
      0013D5 C0 02            [24] 4661 	push	ar2
      0013D7 C0 03            [24] 4662 	push	ar3
      0013D9 C0 05            [24] 4663 	push	ar5
      0013DB C0 06            [24] 4664 	push	ar6
      0013DD 74rD9            [12] 4665 	mov	a,#___str_47
      0013DF C0 E0            [24] 4666 	push	acc
      0013E1 74s02            [12] 4667 	mov	a,#(___str_47 >> 8)
      0013E3 C0 E0            [24] 4668 	push	acc
      0013E5 12r00r00         [24] 4669 	lcall	_printf_fast_f
      0013E8 E5 81            [12] 4670 	mov	a,sp
      0013EA 24 FA            [12] 4671 	add	a,#0xfa
      0013EC F5 81            [12] 4672 	mov	sp,a
                                   4673 ;	src/main.c:1070: InitialUART1_Timer3(gpu32UartSpeed[LINEFI_DEFAULT_RATE]);
      0013EE 90r00r85         [24] 4674 	mov	dptr,#(_gpu32UartSpeed + 0x0010)
      0013F1 E0               [24] 4675 	movx	a,@dptr
      0013F2 FA               [12] 4676 	mov	r2,a
      0013F3 A3               [24] 4677 	inc	dptr
      0013F4 E0               [24] 4678 	movx	a,@dptr
      0013F5 FB               [12] 4679 	mov	r3,a
      0013F6 A3               [24] 4680 	inc	dptr
      0013F7 E0               [24] 4681 	movx	a,@dptr
      0013F8 FD               [12] 4682 	mov	r5,a
      0013F9 A3               [24] 4683 	inc	dptr
      0013FA E0               [24] 4684 	movx	a,@dptr
      0013FB 8A 82            [24] 4685 	mov	dpl,r2
      0013FD 8B 83            [24] 4686 	mov	dph,r3
      0013FF 8D F0            [24] 4687 	mov	b,r5
      001401 12r00r00         [24] 4688 	lcall	_InitialUART1_Timer3
      001404 D0 04            [24] 4689 	pop	ar4
                                   4690 ;	src/main.c:1072: u8LineFiCmd = 2;
      001406 75*14 02         [24] 4691 	mov	_main_u8LineFiCmd_65536_112,#0x02
                                   4692 ;	src/main.c:1073: u8LineFiAddr = 1;
      001409 75*13 01         [24] 4693 	mov	_main_u8LineFiAddr_65536_112,#0x01
                                   4694 ;	src/main.c:1074: u8PwrOnFirstFlag = 0;
      00140C 7F 00            [12] 4695 	mov	r7,#0x00
                                   4696 ;	src/main.c:1075: break;
      00140E 02r15r6C         [24] 4697 	ljmp	00194$
                                   4698 ;	src/main.c:1076: case 3 :
      001411                       4699 00168$:
                                   4700 ;	src/main.c:1077: u8PwrOnFirstFlag++;
      001411 0F               [12] 4701 	inc	r7
                                   4702 ;	src/main.c:1078: break;
      001412 02r15r6C         [24] 4703 	ljmp	00194$
                                   4704 ;	src/main.c:1079: case 4 :
      001415                       4705 00169$:
                                   4706 ;	src/main.c:1080: u8PwrOnFirstFlag++;
      001415 0F               [12] 4707 	inc	r7
                                   4708 ;	src/main.c:1081: break;
      001416 02r15r6C         [24] 4709 	ljmp	00194$
                                   4710 ;	src/main.c:1082: case 5 :
      001419                       4711 00170$:
                                   4712 ;	src/main.c:1083: u8PwrOnFirstFlag++;
      001419 0F               [12] 4713 	inc	r7
                                   4714 ;	src/main.c:1115: } //switch (state_switches((SW1<<0)| (SW2<<1)| (SW3<<2)| (SW4<<3) | (SW5<<4), &u8SwNum))
      00141A 02r15r6C         [24] 4715 	ljmp	00194$
      00141D                       4716 00193$:
                                   4717 ;	src/main.c:1118: switch (state_switches((SW_U<<0)| (SW_R<<1)| (SW_L<<2)| (SW_D<<3) | (SW_C<<4), &u8SwNum)) {
      00141D A2 95            [12] 4718 	mov	c,_P15
      00141F E4               [12] 4719 	clr	a
      001420 33               [12] 4720 	rlc	a
      001421 FE               [12] 4721 	mov	r6,a
      001422 A2 B0            [12] 4722 	mov	c,_P30
      001424 E4               [12] 4723 	clr	a
      001425 33               [12] 4724 	rlc	a
      001426 25 E0            [12] 4725 	add	a,acc
      001428 42 06            [12] 4726 	orl	ar6,a
      00142A A2 80            [12] 4727 	mov	c,_P00
      00142C E4               [12] 4728 	clr	a
      00142D 33               [12] 4729 	rlc	a
      00142E 25 E0            [12] 4730 	add	a,acc
      001430 25 E0            [12] 4731 	add	a,acc
      001432 42 06            [12] 4732 	orl	ar6,a
      001434 A2 93            [12] 4733 	mov	c,_P13
      001436 E4               [12] 4734 	clr	a
      001437 33               [12] 4735 	rlc	a
      001438 C4               [12] 4736 	swap	a
      001439 03               [12] 4737 	rr	a
      00143A 54 F8            [12] 4738 	anl	a,#0xf8
      00143C 42 06            [12] 4739 	orl	ar6,a
      00143E A2 97            [12] 4740 	mov	c,_P17
      001440 E4               [12] 4741 	clr	a
      001441 33               [12] 4742 	rlc	a
      001442 C4               [12] 4743 	swap	a
      001443 54 F0            [12] 4744 	anl	a,#0xf0
      001445 4E               [12] 4745 	orl	a,r6
      001446 F5 82            [12] 4746 	mov	dpl,a
      001448 75*00r15         [24] 4747 	mov	_state_switches_PARM_2,#_main_u8SwNum_65536_112
      00144B 75*01 00         [24] 4748 	mov	(_state_switches_PARM_2 + 1),#0x00
      00144E 75*02 40         [24] 4749 	mov	(_state_switches_PARM_2 + 2),#0x40
      001451 C0 07            [24] 4750 	push	ar7
      001453 C0 04            [24] 4751 	push	ar4
      001455 12r04r0F         [24] 4752 	lcall	_state_switches
      001458 AE 82            [24] 4753 	mov	r6,dpl
      00145A D0 04            [24] 4754 	pop	ar4
      00145C D0 07            [24] 4755 	pop	ar7
      00145E BE 01 02         [24] 4756 	cjne	r6,#0x01,00518$
      001461 80 03            [24] 4757 	sjmp	00519$
      001463                       4758 00518$:
      001463 02r15r6C         [24] 4759 	ljmp	00194$
      001466                       4760 00519$:
                                   4761 ;	src/main.c:1201: switch(u8SwNum) {
      001466 AE*15            [24] 4762 	mov	r6,_main_u8SwNum_65536_112
      001468 BE 01 03         [24] 4763 	cjne	r6,#0x01,00520$
      00146B 02r15r41         [24] 4764 	ljmp	00187$
      00146E                       4765 00520$:
      00146E 74 02            [12] 4766 	mov	a,#0x02
      001470 B5*15 02         [24] 4767 	cjne	a,_main_u8SwNum_65536_112,00521$
      001473 80 43            [24] 4768 	sjmp	00177$
      001475                       4769 00521$:
      001475 74 04            [12] 4770 	mov	a,#0x04
      001477 B5*15 03         [24] 4771 	cjne	a,_main_u8SwNum_65536_112,00522$
      00147A 02r15r14         [24] 4772 	ljmp	00184$
      00147D                       4773 00522$:
      00147D 74 08            [12] 4774 	mov	a,#0x08
      00147F B5*15 02         [24] 4775 	cjne	a,_main_u8SwNum_65536_112,00523$
      001482 80 0A            [24] 4776 	sjmp	00174$
      001484                       4777 00523$:
      001484 74 10            [12] 4778 	mov	a,#0x10
      001486 B5*15 02         [24] 4779 	cjne	a,_main_u8SwNum_65536_112,00524$
      001489 80 57            [24] 4780 	sjmp	00180$
      00148B                       4781 00524$:
      00148B 02r15r6C         [24] 4782 	ljmp	00194$
                                   4783 ;	src/main.c:1202: case (1<<3) : // down SW1
      00148E                       4784 00174$:
                                   4785 ;	src/main.c:1203: u8LineFiAddr--;
                                   4786 ;	src/main.c:1204: if (u8LineFiAddr == 0) {
      00148E D5*13 03         [24] 4787 	djnz	_main_u8LineFiAddr_65536_112,00176$
                                   4788 ;	src/main.c:1205: u8LineFiAddr = 1;
      001491 75*13 01         [24] 4789 	mov	_main_u8LineFiAddr_65536_112,#0x01
      001494                       4790 00176$:
                                   4791 ;	src/main.c:1208: printf_fast_f("address: %d\n\r", u8LineFiAddr);
      001494 AD*13            [24] 4792 	mov	r5,_main_u8LineFiAddr_65536_112
      001496 7E 00            [12] 4793 	mov	r6,#0x00
      001498 C0 07            [24] 4794 	push	ar7
      00149A C0 04            [24] 4795 	push	ar4
      00149C C0 05            [24] 4796 	push	ar5
      00149E C0 06            [24] 4797 	push	ar6
      0014A0 74rEC            [12] 4798 	mov	a,#___str_48
      0014A2 C0 E0            [24] 4799 	push	acc
      0014A4 74s02            [12] 4800 	mov	a,#(___str_48 >> 8)
      0014A6 C0 E0            [24] 4801 	push	acc
      0014A8 12r00r00         [24] 4802 	lcall	_printf_fast_f
      0014AB E5 81            [12] 4803 	mov	a,sp
      0014AD 24 FC            [12] 4804 	add	a,#0xfc
      0014AF F5 81            [12] 4805 	mov	sp,a
      0014B1 D0 04            [24] 4806 	pop	ar4
      0014B3 D0 07            [24] 4807 	pop	ar7
                                   4808 ;	src/main.c:1209: break;
      0014B5 02r15r6C         [24] 4809 	ljmp	00194$
                                   4810 ;	src/main.c:1210: case (1<<1) : // right SW2
      0014B8                       4811 00177$:
                                   4812 ;	src/main.c:1211: u8LineFiCmd--;
                                   4813 ;	src/main.c:1212: if (u8LineFiCmd == 0) {
      0014B8 D5*14 03         [24] 4814 	djnz	_main_u8LineFiCmd_65536_112,00179$
                                   4815 ;	src/main.c:1213: u8LineFiCmd = 1;
      0014BB 75*14 01         [24] 4816 	mov	_main_u8LineFiCmd_65536_112,#0x01
      0014BE                       4817 00179$:
                                   4818 ;	src/main.c:1217: printf_fast_f("command: %d\n\r", u8LineFiCmd);
      0014BE AD*14            [24] 4819 	mov	r5,_main_u8LineFiCmd_65536_112
      0014C0 7E 00            [12] 4820 	mov	r6,#0x00
      0014C2 C0 07            [24] 4821 	push	ar7
      0014C4 C0 04            [24] 4822 	push	ar4
      0014C6 C0 05            [24] 4823 	push	ar5
      0014C8 C0 06            [24] 4824 	push	ar6
      0014CA 74rFA            [12] 4825 	mov	a,#___str_49
      0014CC C0 E0            [24] 4826 	push	acc
      0014CE 74s02            [12] 4827 	mov	a,#(___str_49 >> 8)
      0014D0 C0 E0            [24] 4828 	push	acc
      0014D2 12r00r00         [24] 4829 	lcall	_printf_fast_f
      0014D5 E5 81            [12] 4830 	mov	a,sp
      0014D7 24 FC            [12] 4831 	add	a,#0xfc
      0014D9 F5 81            [12] 4832 	mov	sp,a
      0014DB D0 04            [24] 4833 	pop	ar4
      0014DD D0 07            [24] 4834 	pop	ar7
                                   4835 ;	src/main.c:1218: break;
      0014DF 02r15r6C         [24] 4836 	ljmp	00194$
                                   4837 ;	src/main.c:1220: case (1<<4) : // center SW3
      0014E2                       4838 00180$:
                                   4839 ;	src/main.c:1221: stLineFiPkt.u8Addr = u8LineFiAddr;
      0014E2 85*13*1A         [24] 4840 	mov	(_main_stLineFiPkt_65536_112 + 0x0002),_main_u8LineFiAddr_65536_112
                                   4841 ;	src/main.c:1222: stLineFiPkt.u8Type = u8LineFiCmd;
      0014E5 85*14*19         [24] 4842 	mov	(_main_stLineFiPkt_65536_112 + 0x0001),_main_u8LineFiCmd_65536_112
                                   4843 ;	src/main.c:1223: if (u8LineFiAddr&1) {
      0014E8 E5*13            [12] 4844 	mov	a,_main_u8LineFiAddr_65536_112
      0014EA 30 E0 0B         [24] 4845 	jnb	acc.0,00182$
                                   4846 ;	src/main.c:1224: stLineFiPkt.pu8Data = gpu8Data;
      0014ED 75*1Dr2D         [24] 4847 	mov	((_main_stLineFiPkt_65536_112 + 0x0005) + 0),#_gpu8Data
      0014F0 75*1Es00         [24] 4848 	mov	((_main_stLineFiPkt_65536_112 + 0x0005) + 1),#(_gpu8Data >> 8)
      0014F3 75*1F 00         [24] 4849 	mov	((_main_stLineFiPkt_65536_112 + 0x0005) + 2),#0x00
      0014F6 80 09            [24] 4850 	sjmp	00183$
      0014F8                       4851 00182$:
                                   4852 ;	src/main.c:1227: stLineFiPkt.pu8Data = gpu8Data2;
      0014F8 75*1Dr41         [24] 4853 	mov	((_main_stLineFiPkt_65536_112 + 0x0005) + 0),#_gpu8Data2
      0014FB 75*1Es00         [24] 4854 	mov	((_main_stLineFiPkt_65536_112 + 0x0005) + 1),#(_gpu8Data2 >> 8)
      0014FE 75*1F 00         [24] 4855 	mov	((_main_stLineFiPkt_65536_112 + 0x0005) + 2),#0x00
      001501                       4856 00183$:
                                   4857 ;	src/main.c:1229: send_linefi_packet(&stLineFiPkt);
      001501 90r00r18         [24] 4858 	mov	dptr,#_main_stLineFiPkt_65536_112
      001504 75 F0 40         [24] 4859 	mov	b,#0x40
      001507 C0 07            [24] 4860 	push	ar7
      001509 C0 04            [24] 4861 	push	ar4
      00150B 12r00r00         [24] 4862 	lcall	_send_linefi_packet
      00150E D0 04            [24] 4863 	pop	ar4
      001510 D0 07            [24] 4864 	pop	ar7
                                   4865 ;	src/main.c:1230: break;
                                   4866 ;	src/main.c:1232: case (1<<2) : //  left SW4
      001512 80 58            [24] 4867 	sjmp	00194$
      001514                       4868 00184$:
                                   4869 ;	src/main.c:1233: u8LineFiCmd++;
      001514 05*14            [12] 4870 	inc	_main_u8LineFiCmd_65536_112
                                   4871 ;	src/main.c:1234: if (u8LineFiCmd == 101) {
      001516 74 65            [12] 4872 	mov	a,#0x65
      001518 B5*14 03         [24] 4873 	cjne	a,_main_u8LineFiCmd_65536_112,00186$
                                   4874 ;	src/main.c:1235: u8LineFiCmd = 100;
      00151B 75*14 64         [24] 4875 	mov	_main_u8LineFiCmd_65536_112,#0x64
      00151E                       4876 00186$:
                                   4877 ;	src/main.c:1237: printf_fast_f("command: %d\n\r", u8LineFiCmd);
      00151E AD*14            [24] 4878 	mov	r5,_main_u8LineFiCmd_65536_112
      001520 7E 00            [12] 4879 	mov	r6,#0x00
      001522 C0 07            [24] 4880 	push	ar7
      001524 C0 04            [24] 4881 	push	ar4
      001526 C0 05            [24] 4882 	push	ar5
      001528 C0 06            [24] 4883 	push	ar6
      00152A 74rFA            [12] 4884 	mov	a,#___str_49
      00152C C0 E0            [24] 4885 	push	acc
      00152E 74s02            [12] 4886 	mov	a,#(___str_49 >> 8)
      001530 C0 E0            [24] 4887 	push	acc
      001532 12r00r00         [24] 4888 	lcall	_printf_fast_f
      001535 E5 81            [12] 4889 	mov	a,sp
      001537 24 FC            [12] 4890 	add	a,#0xfc
      001539 F5 81            [12] 4891 	mov	sp,a
      00153B D0 04            [24] 4892 	pop	ar4
      00153D D0 07            [24] 4893 	pop	ar7
                                   4894 ;	src/main.c:1240: break;
                                   4895 ;	src/main.c:1241: case (1<<0) : // up SW5
      00153F 80 2B            [24] 4896 	sjmp	00194$
      001541                       4897 00187$:
                                   4898 ;	src/main.c:1242: u8LineFiAddr++;
      001541 05*13            [12] 4899 	inc	_main_u8LineFiAddr_65536_112
                                   4900 ;	src/main.c:1243: if (u8LineFiAddr == 16) {
      001543 74 10            [12] 4901 	mov	a,#0x10
      001545 B5*13 03         [24] 4902 	cjne	a,_main_u8LineFiAddr_65536_112,00189$
                                   4903 ;	src/main.c:1244: u8LineFiAddr = 15;
      001548 75*13 0F         [24] 4904 	mov	_main_u8LineFiAddr_65536_112,#0x0f
      00154B                       4905 00189$:
                                   4906 ;	src/main.c:1246: printf_fast_f("address: %d\n\r", u8LineFiAddr);
      00154B AD*13            [24] 4907 	mov	r5,_main_u8LineFiAddr_65536_112
      00154D 7E 00            [12] 4908 	mov	r6,#0x00
      00154F C0 07            [24] 4909 	push	ar7
      001551 C0 04            [24] 4910 	push	ar4
      001553 C0 05            [24] 4911 	push	ar5
      001555 C0 06            [24] 4912 	push	ar6
      001557 74rEC            [12] 4913 	mov	a,#___str_48
      001559 C0 E0            [24] 4914 	push	acc
      00155B 74s02            [12] 4915 	mov	a,#(___str_48 >> 8)
      00155D C0 E0            [24] 4916 	push	acc
      00155F 12r00r00         [24] 4917 	lcall	_printf_fast_f
      001562 E5 81            [12] 4918 	mov	a,sp
      001564 24 FC            [12] 4919 	add	a,#0xfc
      001566 F5 81            [12] 4920 	mov	sp,a
      001568 D0 04            [24] 4921 	pop	ar4
      00156A D0 07            [24] 4922 	pop	ar7
                                   4923 ;	src/main.c:1250: } //switch (state_switches((SW_U<<0)| (SW_R<<1)| (SW_L<<2)| (SW_D<<3) | (SW_C<<4), &u8SwNum))
      00156C                       4924 00194$:
                                   4925 ;	src/main.c:1275: switch(u8StatePeriodicSend) {
      00156C E4               [12] 4926 	clr	a
      00156D B5*16 02         [24] 4927 	cjne	a,_main_u8StatePeriodicSend_65536_112,00532$
      001570 80 0A            [24] 4928 	sjmp	00195$
      001572                       4929 00532$:
      001572 74 01            [12] 4930 	mov	a,#0x01
      001574 B5*16 02         [24] 4931 	cjne	a,_main_u8StatePeriodicSend_65536_112,00533$
      001577 80 31            [24] 4932 	sjmp	00198$
      001579                       4933 00533$:
      001579 02r0FrEA         [24] 4934 	ljmp	00205$
                                   4935 ;	src/main.c:1276: case STATE_PS_INIT :
      00157C                       4936 00195$:
                                   4937 ;	src/main.c:1277: if (u8PSCmd == CMD_PS_START) {
      00157C 74 03            [12] 4938 	mov	a,#0x03
      00157E B5*17 02         [24] 4939 	cjne	a,_main_u8PSCmd_65536_112,00534$
      001581 80 03            [24] 4940 	sjmp	00535$
      001583                       4941 00534$:
      001583 02r0FrEA         [24] 4942 	ljmp	00205$
      001586                       4943 00535$:
                                   4944 ;	src/main.c:1278: u8StatePeriodicSend = STATE_PS_SENDING;
      001586 75*16 01         [24] 4945 	mov	_main_u8StatePeriodicSend_65536_112,#0x01
                                   4946 ;	src/main.c:1279: gu16TimeCntMilliSec = 0;
      001589 90r00r73         [24] 4947 	mov	dptr,#_gu16TimeCntMilliSec
      00158C E4               [12] 4948 	clr	a
      00158D F0               [24] 4949 	movx	@dptr,a
      00158E A3               [24] 4950 	inc	dptr
      00158F F0               [24] 4951 	movx	@dptr,a
                                   4952 ;	src/main.c:1280: printf_fast_f("starting...\r\n");
      001590 C0 07            [24] 4953 	push	ar7
      001592 C0 04            [24] 4954 	push	ar4
      001594 74r11            [12] 4955 	mov	a,#___str_63
      001596 C0 E0            [24] 4956 	push	acc
      001598 74s04            [12] 4957 	mov	a,#(___str_63 >> 8)
      00159A C0 E0            [24] 4958 	push	acc
      00159C 12r00r00         [24] 4959 	lcall	_printf_fast_f
      00159F 15 81            [12] 4960 	dec	sp
      0015A1 15 81            [12] 4961 	dec	sp
      0015A3 D0 04            [24] 4962 	pop	ar4
      0015A5 D0 07            [24] 4963 	pop	ar7
                                   4964 ;	src/main.c:1282: break;
      0015A7 02r0FrEA         [24] 4965 	ljmp	00205$
                                   4966 ;	src/main.c:1283: case STATE_PS_SENDING :
      0015AA                       4967 00198$:
                                   4968 ;	src/main.c:1284: if (gu16TimeCntMilliSec > 100) { // 1sec 넘으면
      0015AA 90r00r73         [24] 4969 	mov	dptr,#_gu16TimeCntMilliSec
      0015AD E0               [24] 4970 	movx	a,@dptr
      0015AE FD               [12] 4971 	mov	r5,a
      0015AF A3               [24] 4972 	inc	dptr
      0015B0 E0               [24] 4973 	movx	a,@dptr
      0015B1 FE               [12] 4974 	mov	r6,a
      0015B2 C3               [12] 4975 	clr	c
      0015B3 74 64            [12] 4976 	mov	a,#0x64
      0015B5 9D               [12] 4977 	subb	a,r5
      0015B6 E4               [12] 4978 	clr	a
      0015B7 9E               [12] 4979 	subb	a,r6
      0015B8 50 18            [24] 4980 	jnc	00200$
                                   4981 ;	src/main.c:1285: gu16TimeCntMilliSec = 0;
      0015BA 90r00r73         [24] 4982 	mov	dptr,#_gu16TimeCntMilliSec
      0015BD E4               [12] 4983 	clr	a
      0015BE F0               [24] 4984 	movx	@dptr,a
      0015BF A3               [24] 4985 	inc	dptr
      0015C0 F0               [24] 4986 	movx	@dptr,a
                                   4987 ;	src/main.c:1286: periodic_func(&stLineFiPkt_test);
      0015C1 90r01r46         [24] 4988 	mov	dptr,#_main_stLineFiPkt_test_65536_112
      0015C4 75 F0 00         [24] 4989 	mov	b,#0x00
      0015C7 C0 07            [24] 4990 	push	ar7
      0015C9 C0 04            [24] 4991 	push	ar4
      0015CB 12r0Dr50         [24] 4992 	lcall	_periodic_func
      0015CE D0 04            [24] 4993 	pop	ar4
      0015D0 D0 07            [24] 4994 	pop	ar7
      0015D2                       4995 00200$:
                                   4996 ;	src/main.c:1303: if (u8PSCmd == CMD_PS_END) {
      0015D2 74 04            [12] 4997 	mov	a,#0x04
      0015D4 B5*17 02         [24] 4998 	cjne	a,_main_u8PSCmd_65536_112,00537$
      0015D7 80 03            [24] 4999 	sjmp	00538$
      0015D9                       5000 00537$:
      0015D9 02r0FrEA         [24] 5001 	ljmp	00205$
      0015DC                       5002 00538$:
                                   5003 ;	src/main.c:1304: u8StatePeriodicSend = STATE_PS_INIT;
      0015DC 75*16 00         [24] 5004 	mov	_main_u8StatePeriodicSend_65536_112,#0x00
                                   5005 ;	src/main.c:1305: printf_fast_f("stopping...");
      0015DF C0 07            [24] 5006 	push	ar7
      0015E1 C0 04            [24] 5007 	push	ar4
      0015E3 74r1F            [12] 5008 	mov	a,#___str_64
      0015E5 C0 E0            [24] 5009 	push	acc
      0015E7 74s04            [12] 5010 	mov	a,#(___str_64 >> 8)
      0015E9 C0 E0            [24] 5011 	push	acc
      0015EB 12r00r00         [24] 5012 	lcall	_printf_fast_f
      0015EE 15 81            [12] 5013 	dec	sp
      0015F0 15 81            [12] 5014 	dec	sp
      0015F2 D0 04            [24] 5015 	pop	ar4
      0015F4 D0 07            [24] 5016 	pop	ar7
                                   5017 ;	src/main.c:1308: }
                                   5018 ;	src/main.c:1313: }
      0015F6 02r0FrEA         [24] 5019 	ljmp	00205$
                                   5020 	.area CSEG    (CODE)
                                   5021 	.area CONST   (CODE)
                                   5022 	.area CONST   (CODE)
      000000                       5023 ___str_0:
      000000 0A                    5024 	.db 0x0a
      000001 0D                    5025 	.db 0x0d
      000002 00                    5026 	.db 0x00
                                   5027 	.area CSEG    (CODE)
                                   5028 	.area CONST   (CODE)
      000003                       5029 ___str_1:
      000003 73 65 6C 66 20        5030 	.ascii "self "
      000008 00                    5031 	.db 0x00
                                   5032 	.area CSEG    (CODE)
                                   5033 	.area CONST   (CODE)
      000009                       5034 ___str_2:
      000009 63 72 6F 73 73        5035 	.ascii "cross"
      00000E 00                    5036 	.db 0x00
                                   5037 	.area CSEG    (CODE)
                                   5038 	.area CONST   (CODE)
      00000F                       5039 ___str_3:
      00000F 62 6F 74 68 20        5040 	.ascii "both "
      000014 00                    5041 	.db 0x00
                                   5042 	.area CSEG    (CODE)
                                   5043 	.area CONST   (CODE)
      000015                       5044 ___str_4:
      000015 20 6F 75 74 70 75 74  5045 	.ascii " output:This is UART%d"
             3A 54 68 69 73 20 69
             73 20 55 41 52 54 25
             64
      00002B 0A                    5046 	.db 0x0a
      00002C 0D                    5047 	.db 0x0d
      00002D 00                    5048 	.db 0x00
                                   5049 	.area CSEG    (CODE)
                                   5050 	.area CONST   (CODE)
      00002E                       5051 ___str_5:
      00002E 0D                    5052 	.db 0x0d
      00002F 0A                    5053 	.db 0x0a
      000030 00                    5054 	.db 0x00
                                   5055 	.area CSEG    (CODE)
                                   5056 	.area CONST   (CODE)
      000031                       5057 ___str_6:
      000031 25 63                 5058 	.ascii "%c"
      000033 00                    5059 	.db 0x00
                                   5060 	.area CSEG    (CODE)
                                   5061 	.area CONST   (CODE)
      000034                       5062 ___str_7:
      000034 0D                    5063 	.db 0x0d
      000035 0A                    5064 	.db 0x0a
      000036 69 6E 70 75 74 3A 54  5065 	.ascii "input:This is UART%d"
             68 69 73 20 69 73 20
             55 41 52 54 25 64
      00004A 00                    5066 	.db 0x00
                                   5067 	.area CSEG    (CODE)
                                   5068 	.area CONST   (CODE)
      00004B                       5069 ___str_8:
      00004B 49 64 6C 65 20 70 72  5070 	.ascii "Idle preamble on/off"
             65 61 6D 62 6C 65 20
             6F 6E 2F 6F 66 66
      00005F 0D                    5071 	.db 0x0d
      000060 0A                    5072 	.db 0x0a
      000061 00                    5073 	.db 0x00
                                   5074 	.area CSEG    (CODE)
                                   5075 	.area CONST   (CODE)
      000062                       5076 ___str_9:
      000062 4C 69 6E 65 46 69 20  5077 	.ascii "LineFi Power Off"
             50 6F 77 65 72 20 4F
             66 66
      000072 0D                    5078 	.db 0x0d
      000073 0A                    5079 	.db 0x0a
      000074 00                    5080 	.db 0x00
                                   5081 	.area CSEG    (CODE)
                                   5082 	.area CONST   (CODE)
      000075                       5083 ___str_10:
      000075 4C 69 6E 65 46 69 20  5084 	.ascii "LineFi Power On"
             50 6F 77 65 72 20 4F
             6E
      000084 0D                    5085 	.db 0x0d
      000085 0A                    5086 	.db 0x0a
      000086 00                    5087 	.db 0x00
                                   5088 	.area CSEG    (CODE)
                                   5089 	.area CONST   (CODE)
      000087                       5090 ___str_11:
      000087 4C 69 6E 65 46 69 20  5091 	.ascii "LineFi Uart Tx Low"
             55 61 72 74 20 54 78
             20 4C 6F 77
      000099 0D                    5092 	.db 0x0d
      00009A 0A                    5093 	.db 0x0a
      00009B 00                    5094 	.db 0x00
                                   5095 	.area CSEG    (CODE)
                                   5096 	.area CONST   (CODE)
      00009C                       5097 ___str_12:
      00009C 4C 69 6E 65 46 69 20  5098 	.ascii "LineFi Uart Tx High"
             55 61 72 74 20 54 78
             20 48 69 67 68
      0000AF 0D                    5099 	.db 0x0d
      0000B0 0A                    5100 	.db 0x0a
      0000B1 00                    5101 	.db 0x00
                                   5102 	.area CSEG    (CODE)
                                   5103 	.area CONST   (CODE)
      0000B2                       5104 ___str_13:
      0000B2 4C 69 6E 65 46 69 20  5105 	.ascii "LineFi CSC rx FSM Off"
             43 53 43 20 72 78 20
             46 53 4D 20 4F 66 66
      0000C7 0D                    5106 	.db 0x0d
      0000C8 0A                    5107 	.db 0x0a
      0000C9 00                    5108 	.db 0x00
                                   5109 	.area CSEG    (CODE)
                                   5110 	.area CONST   (CODE)
      0000CA                       5111 ___str_14:
      0000CA 4C 69 6E 65 46 69 20  5112 	.ascii "LineFi CSC rx FSM ON"
             43 53 43 20 72 78 20
             46 53 4D 20 4F 4E
      0000DE 0D                    5113 	.db 0x0d
      0000DF 0A                    5114 	.db 0x0a
      0000E0 00                    5115 	.db 0x00
                                   5116 	.area CSEG    (CODE)
                                   5117 	.area CONST   (CODE)
      0000E1                       5118 ___str_15:
      0000E1 56 65 72 73 69 6F 6E  5119 	.ascii "Version 1.4 on 20231026"
             20 31 2E 34 20 6F 6E
             20 32 30 32 33 31 30
             32 36
      0000F8 0D                    5120 	.db 0x0d
      0000F9 0A                    5121 	.db 0x0a
      0000FA 00                    5122 	.db 0x00
                                   5123 	.area CSEG    (CODE)
                                   5124 	.area CONST   (CODE)
      0000FB                       5125 ___str_16:
      0000FB 31 3A 20 64 6F 77 6E  5126 	.ascii "1: downlink packet 1"
             6C 69 6E 6B 20 70 61
             63 6B 65 74 20 31
      00010F 0D                    5127 	.db 0x0d
      000110 0A                    5128 	.db 0x0a
      000111 00                    5129 	.db 0x00
                                   5130 	.area CSEG    (CODE)
                                   5131 	.area CONST   (CODE)
      000112                       5132 ___str_17:
      000112 32 3A 20 64 6F 77 6E  5133 	.ascii "2: downlink packet 2"
             6C 69 6E 6B 20 70 61
             63 6B 65 74 20 32
      000126 0D                    5134 	.db 0x0d
      000127 0A                    5135 	.db 0x0a
      000128 00                    5136 	.db 0x00
                                   5137 	.area CSEG    (CODE)
                                   5138 	.area CONST   (CODE)
      000129                       5139 ___str_18:
      000129 33 3A 20 75 70 6C 69  5140 	.ascii "3: uplink idle preamble on/off"
             6E 6B 20 69 64 6C 65
             20 70 72 65 61 6D 62
             6C 65 20 6F 6E 2F 6F
             66 66
      000147 0D                    5141 	.db 0x0d
      000148 0A                    5142 	.db 0x0a
      000149 00                    5143 	.db 0x00
                                   5144 	.area CSEG    (CODE)
                                   5145 	.area CONST   (CODE)
      00014A                       5146 ___str_19:
      00014A 70 2F 50 3A 20 4C 69  5147 	.ascii "p/P: LineFi Power off/on"
             6E 65 46 69 20 50 6F
             77 65 72 20 6F 66 66
             2F 6F 6E
      000162 0D                    5148 	.db 0x0d
      000163 0A                    5149 	.db 0x0a
      000164 00                    5150 	.db 0x00
                                   5151 	.area CSEG    (CODE)
                                   5152 	.area CONST   (CODE)
      000165                       5153 ___str_20:
      000165 74 2F 54 3A 20 4C 69  5154 	.ascii "t/T: LineFi Uart Tx Low/High"
             6E 65 46 69 20 55 61
             72 74 20 54 78 20 4C
             6F 77 2F 48 69 67 68
      000181 0D                    5155 	.db 0x0d
      000182 0A                    5156 	.db 0x0a
      000183 00                    5157 	.db 0x00
                                   5158 	.area CSEG    (CODE)
                                   5159 	.area CONST   (CODE)
      000184                       5160 ___str_21:
      000184 73 2F 53 3A 20 4C 69  5161 	.ascii "s/S: LineFie CSC Rx FSM off/on"
             6E 65 46 69 65 20 43
             53 43 20 52 78 20 46
             53 4D 20 6F 66 66 2F
             6F 6E
      0001A2 0D                    5162 	.db 0x0d
      0001A3 0A                    5163 	.db 0x0a
      0001A4 00                    5164 	.db 0x00
                                   5165 	.area CSEG    (CODE)
                                   5166 	.area CONST   (CODE)
      0001A5                       5167 ___str_22:
      0001A5 74 65 73 74 20 70 72  5168 	.ascii "test procedure: p -> P -> T -> S -> 1 or 2"
             6F 63 65 64 75 72 65
             3A 20 70 20 2D 3E 20
             50 20 2D 3E 20 54 20
             2D 3E 20 53 20 2D 3E
             20 31 20 6F 72 20 32
      0001CF 0D                    5169 	.db 0x0d
      0001D0 0A                    5170 	.db 0x0a
      0001D1 00                    5171 	.db 0x00
                                   5172 	.area CSEG    (CODE)
                                   5173 	.area CONST   (CODE)
      0001D2                       5174 ___str_23:
      0001D2 74 3A 20 74 69 6D 65  5175 	.ascii "t: timer"
             72
      0001DA 0D                    5176 	.db 0x0d
      0001DB 0A                    5177 	.db 0x0a
      0001DC 00                    5178 	.db 0x00
                                   5179 	.area CSEG    (CODE)
                                   5180 	.area CONST   (CODE)
      0001DD                       5181 ___str_24:
      0001DD 30 3A 20 4C 69 6E 65  5182 	.ascii "0: LineFi EN0,1,2 off"
             46 69 20 45 4E 30 2C
             31 2C 32 20 6F 66 66
      0001F2 0D                    5183 	.db 0x0d
      0001F3 0A                    5184 	.db 0x0a
      0001F4 00                    5185 	.db 0x00
                                   5186 	.area CSEG    (CODE)
                                   5187 	.area CONST   (CODE)
      0001F5                       5188 ___str_25:
      0001F5 31 3A 20 4C 69 6E 65  5189 	.ascii "1: LineFi EN0 = 1"
             46 69 20 45 4E 30 20
             3D 20 31
      000206 0D                    5190 	.db 0x0d
      000207 0A                    5191 	.db 0x0a
      000208 00                    5192 	.db 0x00
                                   5193 	.area CSEG    (CODE)
                                   5194 	.area CONST   (CODE)
      000209                       5195 ___str_26:
      000209 32 3A                 5196 	.ascii "2:"
      00020B 0D                    5197 	.db 0x0d
      00020C 0A                    5198 	.db 0x0a
      00020D 00                    5199 	.db 0x00
                                   5200 	.area CSEG    (CODE)
                                   5201 	.area CONST   (CODE)
      00020E                       5202 ___str_27:
      00020E 33 3A                 5203 	.ascii "3:"
      000210 0D                    5204 	.db 0x0d
      000211 0A                    5205 	.db 0x0a
      000212 00                    5206 	.db 0x00
                                   5207 	.area CSEG    (CODE)
                                   5208 	.area CONST   (CODE)
      000213                       5209 ___str_28:
      000213 34 3A                 5210 	.ascii "4:"
      000215 0D                    5211 	.db 0x0d
      000216 0A                    5212 	.db 0x0a
      000217 00                    5213 	.db 0x00
                                   5214 	.area CSEG    (CODE)
                                   5215 	.area CONST   (CODE)
      000218                       5216 ___str_29:
      000218 35 3A                 5217 	.ascii "5:"
      00021A 0D                    5218 	.db 0x0d
      00021B 0A                    5219 	.db 0x0a
      00021C 00                    5220 	.db 0x00
                                   5221 	.area CSEG    (CODE)
                                   5222 	.area CONST   (CODE)
      00021D                       5223 ___str_30:
      00021D 36 3A                 5224 	.ascii "6:"
      00021F 0D                    5225 	.db 0x0d
      000220 0A                    5226 	.db 0x0a
      000221 00                    5227 	.db 0x00
                                   5228 	.area CSEG    (CODE)
                                   5229 	.area CONST   (CODE)
      000222                       5230 ___str_31:
      000222 37 3A                 5231 	.ascii "7:"
      000224 0D                    5232 	.db 0x0d
      000225 0A                    5233 	.db 0x0a
      000226 00                    5234 	.db 0x00
                                   5235 	.area CSEG    (CODE)
                                   5236 	.area CONST   (CODE)
      000227                       5237 ___str_32:
      000227 68 3A 20 41 64 64 72  5238 	.ascii "h: Addr--"
             2D 2D
      000230 0D                    5239 	.db 0x0d
      000231 0A                    5240 	.db 0x0a
      000232 00                    5241 	.db 0x00
                                   5242 	.area CSEG    (CODE)
                                   5243 	.area CONST   (CODE)
      000233                       5244 ___str_33:
      000233 6A 3A 20 43 6D 64 2D  5245 	.ascii "j: Cmd--"
             2D
      00023B 0D                    5246 	.db 0x0d
      00023C 0A                    5247 	.db 0x0a
      00023D 00                    5248 	.db 0x00
                                   5249 	.area CSEG    (CODE)
                                   5250 	.area CONST   (CODE)
      00023E                       5251 ___str_34:
      00023E 6B 3A 20 43 6D 64 2B  5252 	.ascii "k: Cmd++"
             2B
      000246 0D                    5253 	.db 0x0d
      000247 0A                    5254 	.db 0x0a
      000248 00                    5255 	.db 0x00
                                   5256 	.area CSEG    (CODE)
                                   5257 	.area CONST   (CODE)
      000249                       5258 ___str_35:
      000249 6C 3A 20 41 64 64 72  5259 	.ascii "l: Addr++"
             2B 2B
      000252 0D                    5260 	.db 0x0d
      000253 0A                    5261 	.db 0x0a
      000254 00                    5262 	.db 0x00
                                   5263 	.area CSEG    (CODE)
                                   5264 	.area CONST   (CODE)
      000255                       5265 ___str_36:
      000255 73 3A 20 73 65 6E 64  5266 	.ascii "s: sending"
             69 6E 67
      00025F 0D                    5267 	.db 0x0d
      000260 0A                    5268 	.db 0x0a
      000261 00                    5269 	.db 0x00
                                   5270 	.area CSEG    (CODE)
                                   5271 	.area CONST   (CODE)
      000262                       5272 ___str_37:
      000262 25 75                 5273 	.ascii "%u"
      000264 0A                    5274 	.db 0x0a
      000265 0D                    5275 	.db 0x0d
      000266 00                    5276 	.db 0x00
                                   5277 	.area CSEG    (CODE)
                                   5278 	.area CONST   (CODE)
      000267                       5279 ___str_38:
      000267 4C 49 4E 45 46 49 5F  5280 	.ascii "LINEFI_EN0=0"
             45 4E 30 3D 30
      000273 0A                    5281 	.db 0x0a
      000274 0D                    5282 	.db 0x0d
      000275 00                    5283 	.db 0x00
                                   5284 	.area CSEG    (CODE)
                                   5285 	.area CONST   (CODE)
      000276                       5286 ___str_39:
      000276 4C 49 4E 45 46 49 5F  5287 	.ascii "LINEFI_EN0=1"
             45 4E 30 3D 31
      000282 0A                    5288 	.db 0x0a
      000283 0D                    5289 	.db 0x0d
      000284 00                    5290 	.db 0x00
                                   5291 	.area CSEG    (CODE)
                                   5292 	.area CONST   (CODE)
      000285                       5293 ___str_40:
      000285 4C 49 4E 45 46 49 5F  5294 	.ascii "LINEFI_TX=0"
             54 58 3D 30
      000290 0A                    5295 	.db 0x0a
      000291 0D                    5296 	.db 0x0d
      000292 00                    5297 	.db 0x00
                                   5298 	.area CSEG    (CODE)
                                   5299 	.area CONST   (CODE)
      000293                       5300 ___str_41:
      000293 4C 49 4E 45 46 49 5F  5301 	.ascii "LINEFI_TX=1"
             54 58 3D 31
      00029E 0A                    5302 	.db 0x0a
      00029F 0D                    5303 	.db 0x0d
      0002A0 00                    5304 	.db 0x00
                                   5305 	.area CSEG    (CODE)
                                   5306 	.area CONST   (CODE)
      0002A1                       5307 ___str_42:
      0002A1 4C 49 4E 45 46 49 5F  5308 	.ascii "LINEFI_TX=%d"
             54 58 3D 25 64
      0002AD 0A                    5309 	.db 0x0a
      0002AE 0D                    5310 	.db 0x0d
      0002AF 00                    5311 	.db 0x00
                                   5312 	.area CSEG    (CODE)
                                   5313 	.area CONST   (CODE)
      0002B0                       5314 ___str_43:
      0002B0 4C 49 4E 45 46 49 5F  5315 	.ascii "LINEFI_EN0="
             45 4E 30 3D
      0002BB 00                    5316 	.db 0x00
                                   5317 	.area CSEG    (CODE)
                                   5318 	.area CONST   (CODE)
      0002BC                       5319 ___str_44:
      0002BC 25 64                 5320 	.ascii "%d"
      0002BE 0A                    5321 	.db 0x0a
      0002BF 0D                    5322 	.db 0x0d
      0002C0 00                    5323 	.db 0x00
                                   5324 	.area CSEG    (CODE)
                                   5325 	.area CONST   (CODE)
      0002C1                       5326 ___str_45:
      0002C1 4C 49 4E 45 46 49 5F  5327 	.ascii "LINEFI_EN1="
             45 4E 31 3D
      0002CC 00                    5328 	.db 0x00
                                   5329 	.area CSEG    (CODE)
                                   5330 	.area CONST   (CODE)
      0002CD                       5331 ___str_46:
      0002CD 4C 49 4E 45 46 49 5F  5332 	.ascii "LINEFI_EN2="
             45 4E 32 3D
      0002D8 00                    5333 	.db 0x00
                                   5334 	.area CSEG    (CODE)
                                   5335 	.area CONST   (CODE)
      0002D9                       5336 ___str_47:
      0002D9 75 61 72 74 20 73 70  5337 	.ascii "uart speed: %lu:"
             65 65 64 3A 20 25 6C
             75 3A
      0002E9 0A                    5338 	.db 0x0a
      0002EA 0D                    5339 	.db 0x0d
      0002EB 00                    5340 	.db 0x00
                                   5341 	.area CSEG    (CODE)
                                   5342 	.area CONST   (CODE)
      0002EC                       5343 ___str_48:
      0002EC 61 64 64 72 65 73 73  5344 	.ascii "address: %d"
             3A 20 25 64
      0002F7 0A                    5345 	.db 0x0a
      0002F8 0D                    5346 	.db 0x0d
      0002F9 00                    5347 	.db 0x00
                                   5348 	.area CSEG    (CODE)
                                   5349 	.area CONST   (CODE)
      0002FA                       5350 ___str_49:
      0002FA 63 6F 6D 6D 61 6E 64  5351 	.ascii "command: %d"
             3A 20 25 64
      000305 0A                    5352 	.db 0x0a
      000306 0D                    5353 	.db 0x0d
      000307 00                    5354 	.db 0x00
                                   5355 	.area CSEG    (CODE)
                                   5356 	.area CONST   (CODE)
      000308                       5357 ___str_50:
      000308 4C 69 6E 65 46 69 20  5358 	.ascii "LineFi Sending: 0x%x:"
             53 65 6E 64 69 6E 67
             3A 20 30 78 25 78 3A
      00031D 0A                    5359 	.db 0x0a
      00031E 0D                    5360 	.db 0x0d
      00031F 00                    5361 	.db 0x00
                                   5362 	.area CSEG    (CODE)
                                   5363 	.area CONST   (CODE)
      000320                       5364 ___str_51:
      000320 61 64 64 72 65 73 73  5365 	.ascii "address: 0x%d:"
             3A 20 30 78 25 64 3A
      00032E 0A                    5366 	.db 0x0a
      00032F 0D                    5367 	.db 0x0d
      000330 00                    5368 	.db 0x00
                                   5369 	.area CSEG    (CODE)
                                   5370 	.area CONST   (CODE)
      000331                       5371 ___str_52:
      000331 53 65 74 74 69 6E 67  5372 	.ascii "Setting uart speed as: %lu:"
             20 75 61 72 74 20 73
             70 65 65 64 20 61 73
             3A 20 25 6C 75 3A
      00034C 0A                    5373 	.db 0x0a
      00034D 0D                    5374 	.db 0x0d
      00034E 00                    5375 	.db 0x00
                                   5376 	.area CSEG    (CODE)
                                   5377 	.area CONST   (CODE)
      00034F                       5378 ___str_53:
      00034F 4C 69 6E 65 46 69 20  5379 	.ascii "LineFi Sending: %d(0x%x)"
             53 65 6E 64 69 6E 67
             3A 20 25 64 28 30 78
             25 78 29
      000367 0A                    5380 	.db 0x0a
      000368 0D                    5381 	.db 0x0d
      000369 00                    5382 	.db 0x00
                                   5383 	.area CSEG    (CODE)
                                   5384 	.area CONST   (CODE)
      00036A                       5385 ___str_54:
      00036A 73 65 6E 64 20 64 61  5386 	.ascii "send data %d(0x%x)"
             74 61 20 25 64 28 30
             78 25 78 29
      00037C 0A                    5387 	.db 0x0a
      00037D 0D                    5388 	.db 0x0d
      00037E 00                    5389 	.db 0x00
                                   5390 	.area CSEG    (CODE)
                                   5391 	.area CONST   (CODE)
      00037F                       5392 ___str_55:
      00037F 54 68 69 73 20 69 73  5393 	.ascii "This is UART0"
             20 55 41 52 54 30
      00038C 0A                    5394 	.db 0x0a
      00038D 0D                    5395 	.db 0x0d
      00038E 00                    5396 	.db 0x00
                                   5397 	.area CSEG    (CODE)
                                   5398 	.area CONST   (CODE)
      00038F                       5399 ___str_56:
      00038F 4C 69 6E 65 46 69 20  5400 	.ascii "LineFi Master"
             4D 61 73 74 65 72
      00039C 0A                    5401 	.db 0x0a
      00039D 0D                    5402 	.db 0x0d
      00039E 00                    5403 	.db 0x00
                                   5404 	.area CSEG    (CODE)
                                   5405 	.area CONST   (CODE)
      00039F                       5406 ___str_57:
      00039F 54 68 69 73 20 69 73  5407 	.ascii "This is UART1"
             20 55 41 52 54 31
      0003AC 0A                    5408 	.db 0x0a
      0003AD 0D                    5409 	.db 0x0d
      0003AE 00                    5410 	.db 0x00
                                   5411 	.area CSEG    (CODE)
                                   5412 	.area CONST   (CODE)
      0003AF                       5413 ___str_58:
      0003AF 25 73                 5414 	.ascii "%s"
      0003B1 0D                    5415 	.db 0x0d
      0003B2 0A                    5416 	.db 0x0a
      0003B3 00                    5417 	.db 0x00
                                   5418 	.area CSEG    (CODE)
                                   5419 	.area CONST   (CODE)
      0003B4                       5420 ___str_59:
      0003B4 44 61 74 61 49 64 78  5421 	.ascii "DataIdx:%d"
             3A 25 64
      0003BE 0D                    5422 	.db 0x0d
      0003BF 0A                    5423 	.db 0x0a
      0003C0 00                    5424 	.db 0x00
                                   5425 	.area CSEG    (CODE)
                                   5426 	.area CONST   (CODE)
      0003C1                       5427 ___str_60:
      0003C1 30 78 25 78 20        5428 	.ascii "0x%x "
      0003C6 00                    5429 	.db 0x00
                                   5430 	.area CSEG    (CODE)
                                   5431 	.area CONST   (CODE)
      0003C7                       5432 ___str_61:
      0003C7 53 54 41 52 54 20 70  5433 	.ascii "START periodic packet generating.."
             65 72 69 6F 64 69 63
             20 70 61 63 6B 65 74
             20 67 65 6E 65 72 61
             74 69 6E 67 2E 2E
      0003E9 0D                    5434 	.db 0x0d
      0003EA 0A                    5435 	.db 0x0a
      0003EB 00                    5436 	.db 0x00
                                   5437 	.area CSEG    (CODE)
                                   5438 	.area CONST   (CODE)
      0003EC                       5439 ___str_62:
      0003EC 53 54 4F 50 20 20 70  5440 	.ascii "STOP  periodic packet generating.."
             65 72 69 6F 64 69 63
             20 70 61 63 6B 65 74
             20 67 65 6E 65 72 61
             74 69 6E 67 2E 2E
      00040E 0D                    5441 	.db 0x0d
      00040F 0A                    5442 	.db 0x0a
      000410 00                    5443 	.db 0x00
                                   5444 	.area CSEG    (CODE)
                                   5445 	.area CONST   (CODE)
      000411                       5446 ___str_63:
      000411 73 74 61 72 74 69 6E  5447 	.ascii "starting..."
             67 2E 2E 2E
      00041C 0D                    5448 	.db 0x0d
      00041D 0A                    5449 	.db 0x0a
      00041E 00                    5450 	.db 0x00
                                   5451 	.area CSEG    (CODE)
                                   5452 	.area CONST   (CODE)
      00041F                       5453 ___str_64:
      00041F 73 74 6F 70 70 69 6E  5454 	.ascii "stopping..."
             67 2E 2E 2E
      00042A 00                    5455 	.db 0x00
                                   5456 	.area CSEG    (CODE)
                                   5457 	.area CONST   (CODE)
      00042B                       5458 ___str_65:
      00042B 55 41 52 54 30 5F 49  5459 	.ascii "UART0_INPUT_MODE0:one key control"
             4E 50 55 54 5F 4D 4F
             44 45 30 3A 6F 6E 65
             20 6B 65 79 20 63 6F
             6E 74 72 6F 6C
      00044C 00                    5460 	.db 0x00
                                   5461 	.area CSEG    (CODE)
                                   5462 	.area CONST   (CODE)
      00044D                       5463 ___str_66:
      00044D 55 41 52 54 30 5F 49  5464 	.ascii "UART0_INPUT_MODE1:string input"
             4E 50 55 54 5F 4D 4F
             44 45 31 3A 73 74 72
             69 6E 67 20 69 6E 70
             75 74
      00046B 00                    5465 	.db 0x00
                                   5466 	.area CSEG    (CODE)
                                   5467 	.area CONST   (CODE)
      00046C                       5468 ___str_67:
      00046C 55 41 52 54 30 5F 49  5469 	.ascii "UART0_INPUT_MODE2:mimic 5keys on board"
             4E 50 55 54 5F 4D 4F
             44 45 32 3A 6D 69 6D
             69 63 20 35 6B 65 79
             73 20 6F 6E 20 62 6F
             61 72 64
      000492 00                    5470 	.db 0x00
                                   5471 	.area CSEG    (CODE)
                                   5472 	.area CONST   (CODE)
      000493                       5473 ___str_68:
      000493 55 41 52 54 30 5F 49  5474 	.ascii "UART0_INPUT_MODE3:data setting"
             4E 50 55 54 5F 4D 4F
             44 45 33 3A 64 61 74
             61 20 73 65 74 74 69
             6E 67
      0004B1 00                    5475 	.db 0x00
                                   5476 	.area CSEG    (CODE)
                                   5477 	.area CONST   (CODE)
      0004B2                       5478 ___str_69:
      0004B2 55 41 52 54 30 5F 49  5479 	.ascii "UART0_INPUT_MODE4:periodic function"
             4E 50 55 54 5F 4D 4F
             44 45 34 3A 70 65 72
             69 6F 64 69 63 20 66
             75 6E 63 74 69 6F 6E
      0004D5 00                    5480 	.db 0x00
                                   5481 	.area CSEG    (CODE)
                                   5482 	.area CABS    (ABS,CODE)
