                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _chk_my_addr_PARM_2
                                     12 	.globl _state_switches_PARM_2
                                     13 	.globl _gpcEEPROM
                                     14 	.globl _main
                                     15 	.globl _print_one_octet_linefi
                                     16 	.globl _process_all_packet
                                     17 	.globl _process_my_packet
                                     18 	.globl _chk_my_addr
                                     19 	.globl _ctrl_rgbled_motor
                                     20 	.globl _state_switches
                                     21 	.globl _gpio_setup
                                     22 	.globl _disp_help
                                     23 	.globl _MODIFY_HIRC_166
                                     24 	.globl _conv_manchester2highnibble
                                     25 	.globl _conv_manchester2nibble
                                     26 	.globl _chk_manchester
                                     27 	.globl _pin_interrupt_isr
                                     28 	.globl _Timer0_ISR
                                     29 	.globl _state_machine
                                     30 	.globl _print_char
                                     31 	.globl _print_esc
                                     32 	.globl _preamble
                                     33 	.globl _putchar_manchester
                                     34 	.globl _conv_nibble2manchester
                                     35 	.globl _Write_APROM_BYTE
                                     36 	.globl _Erase_APROM_Page
                                     37 	.globl _cp_buf2linefipacket
                                     38 	.globl _get_octet_from_linefi
                                     39 	.globl _uart_setup
                                     40 	.globl _Receive_Data_From_UART0_nb
                                     41 	.globl _InitialUART1_Timer3
                                     42 	.globl _printf_fast_f
                                     43 	.globl _MOSI
                                     44 	.globl _P00
                                     45 	.globl _MISO
                                     46 	.globl _P01
                                     47 	.globl _RXD_1
                                     48 	.globl _P02
                                     49 	.globl _P03
                                     50 	.globl _STADC
                                     51 	.globl _P04
                                     52 	.globl _P05
                                     53 	.globl _TXD
                                     54 	.globl _P06
                                     55 	.globl _RXD
                                     56 	.globl _P07
                                     57 	.globl _IT0
                                     58 	.globl _IE0
                                     59 	.globl _IT1
                                     60 	.globl _IE1
                                     61 	.globl _TR0
                                     62 	.globl _TF0
                                     63 	.globl _TR1
                                     64 	.globl _TF1
                                     65 	.globl _P10
                                     66 	.globl _P11
                                     67 	.globl _P12
                                     68 	.globl _SCL
                                     69 	.globl _P13
                                     70 	.globl _SDA
                                     71 	.globl _P14
                                     72 	.globl _P15
                                     73 	.globl _TXD_1
                                     74 	.globl _P16
                                     75 	.globl _P17
                                     76 	.globl _RI
                                     77 	.globl _TI
                                     78 	.globl _RB8
                                     79 	.globl _TB8
                                     80 	.globl _REN
                                     81 	.globl _SM2
                                     82 	.globl _SM1
                                     83 	.globl _FE
                                     84 	.globl _SM0
                                     85 	.globl _P20
                                     86 	.globl _EX0
                                     87 	.globl _ET0
                                     88 	.globl _EX1
                                     89 	.globl _ET1
                                     90 	.globl _ES
                                     91 	.globl _EBOD
                                     92 	.globl _EADC
                                     93 	.globl _EA
                                     94 	.globl _P30
                                     95 	.globl _PX0
                                     96 	.globl _PT0
                                     97 	.globl _PX1
                                     98 	.globl _PT1
                                     99 	.globl _PS
                                    100 	.globl _PBOD
                                    101 	.globl _PADC
                                    102 	.globl _I2CPX
                                    103 	.globl _AA
                                    104 	.globl _SI
                                    105 	.globl _STO
                                    106 	.globl _STA
                                    107 	.globl _I2CEN
                                    108 	.globl _CM_RL2
                                    109 	.globl _TR2
                                    110 	.globl _TF2
                                    111 	.globl _P
                                    112 	.globl _OV
                                    113 	.globl _RS0
                                    114 	.globl _RS1
                                    115 	.globl _F0
                                    116 	.globl _AC
                                    117 	.globl _CY
                                    118 	.globl _CLRPWM
                                    119 	.globl _PWMF
                                    120 	.globl _LOAD
                                    121 	.globl _PWMRUN
                                    122 	.globl _ADCHS0
                                    123 	.globl _ADCHS1
                                    124 	.globl _ADCHS2
                                    125 	.globl _ADCHS3
                                    126 	.globl _ETGSEL0
                                    127 	.globl _ETGSEL1
                                    128 	.globl _ADCS
                                    129 	.globl _ADCF
                                    130 	.globl _RI_1
                                    131 	.globl _TI_1
                                    132 	.globl _RB8_1
                                    133 	.globl _TB8_1
                                    134 	.globl _REN_1
                                    135 	.globl _SM2_1
                                    136 	.globl _SM1_1
                                    137 	.globl _FE_1
                                    138 	.globl _SM0_1
                                    139 	.globl _EIPH1
                                    140 	.globl _EIP1
                                    141 	.globl _PMD
                                    142 	.globl _PMEN
                                    143 	.globl _PDTCNT
                                    144 	.globl _PDTEN
                                    145 	.globl _SCON_1
                                    146 	.globl _EIPH
                                    147 	.globl _AINDIDS
                                    148 	.globl _SPDR
                                    149 	.globl _SPSR
                                    150 	.globl _SPCR2
                                    151 	.globl _SPCR
                                    152 	.globl _CAPCON4
                                    153 	.globl _CAPCON3
                                    154 	.globl _B
                                    155 	.globl _EIP
                                    156 	.globl _C2H
                                    157 	.globl _C2L
                                    158 	.globl _PIF
                                    159 	.globl _PIPEN
                                    160 	.globl _PINEN
                                    161 	.globl _PICON
                                    162 	.globl _ADCCON0
                                    163 	.globl _C1H
                                    164 	.globl _C1L
                                    165 	.globl _C0H
                                    166 	.globl _C0L
                                    167 	.globl _ADCDLY
                                    168 	.globl _ADCCON2
                                    169 	.globl _ADCCON1
                                    170 	.globl _ACC
                                    171 	.globl _PWMCON1
                                    172 	.globl _PIOCON0
                                    173 	.globl _PWM3L
                                    174 	.globl _PWM2L
                                    175 	.globl _PWM1L
                                    176 	.globl _PWM0L
                                    177 	.globl _PWMPL
                                    178 	.globl _PWMCON0
                                    179 	.globl _FBD
                                    180 	.globl _PNP
                                    181 	.globl _PWM3H
                                    182 	.globl _PWM2H
                                    183 	.globl _PWM1H
                                    184 	.globl _PWM0H
                                    185 	.globl _PWMPH
                                    186 	.globl _PSW
                                    187 	.globl _ADCMPH
                                    188 	.globl _ADCMPL
                                    189 	.globl _PWM5L
                                    190 	.globl _TH2
                                    191 	.globl _PWM4L
                                    192 	.globl _TL2
                                    193 	.globl _RCMP2H
                                    194 	.globl _RCMP2L
                                    195 	.globl _T2MOD
                                    196 	.globl _T2CON
                                    197 	.globl _TA
                                    198 	.globl _PIOCON1
                                    199 	.globl _RH3
                                    200 	.globl _PWM5H
                                    201 	.globl _RL3
                                    202 	.globl _PWM4H
                                    203 	.globl _T3CON
                                    204 	.globl _ADCRH
                                    205 	.globl _ADCRL
                                    206 	.globl _I2ADDR
                                    207 	.globl _I2CON
                                    208 	.globl _I2TOC
                                    209 	.globl _I2CLK
                                    210 	.globl _I2STAT
                                    211 	.globl _I2DAT
                                    212 	.globl _SADDR_1
                                    213 	.globl _SADEN_1
                                    214 	.globl _SADEN
                                    215 	.globl _IP
                                    216 	.globl _PWMINTC
                                    217 	.globl _IPH
                                    218 	.globl _P2S
                                    219 	.globl _P1SR
                                    220 	.globl _P1M2
                                    221 	.globl _P1S
                                    222 	.globl _P1M1
                                    223 	.globl _P0SR
                                    224 	.globl _P0M2
                                    225 	.globl _P0S
                                    226 	.globl _P0M1
                                    227 	.globl _P3
                                    228 	.globl _IAPCN
                                    229 	.globl _IAPFD
                                    230 	.globl _P3SR
                                    231 	.globl _P3M2
                                    232 	.globl _P3S
                                    233 	.globl _P3M1
                                    234 	.globl _BODCON1
                                    235 	.globl _WDCON
                                    236 	.globl _SADDR
                                    237 	.globl _IE
                                    238 	.globl _IAPAH
                                    239 	.globl _IAPAL
                                    240 	.globl _IAPUEN
                                    241 	.globl _IAPTRG
                                    242 	.globl _BODCON0
                                    243 	.globl _AUXR1
                                    244 	.globl _P2
                                    245 	.globl _CHPCON
                                    246 	.globl _EIE1
                                    247 	.globl _EIE
                                    248 	.globl _SBUF_1
                                    249 	.globl _SBUF
                                    250 	.globl _SCON
                                    251 	.globl _CKEN
                                    252 	.globl _CKSWT
                                    253 	.globl _CKDIV
                                    254 	.globl _CAPCON2
                                    255 	.globl _CAPCON1
                                    256 	.globl _CAPCON0
                                    257 	.globl _SFRS
                                    258 	.globl _P1
                                    259 	.globl _WKCON
                                    260 	.globl _CKCON
                                    261 	.globl _TH1
                                    262 	.globl _TH0
                                    263 	.globl _TL1
                                    264 	.globl _TL0
                                    265 	.globl _TMOD
                                    266 	.globl _TCON
                                    267 	.globl _PCON
                                    268 	.globl _RWK
                                    269 	.globl _RCTRIM1
                                    270 	.globl _RCTRIM0
                                    271 	.globl _DPH
                                    272 	.globl _DPL
                                    273 	.globl _SP
                                    274 	.globl _P0
                                    275 	.globl _gpu32UartSpeed
                                    276 	.globl _gu8MotorState
                                    277 	.globl _gpu8Data
                                    278 	.globl _state_machine_PARM_4
                                    279 	.globl _state_machine_PARM_3
                                    280 	.globl _state_machine_PARM_2
                                    281 	.globl _gu16TimeCnt
                                    282 	.globl _gu8UART
                                    283 	.globl _gu8MyAddr
                                    284 	.globl _putchar
                                    285 ;--------------------------------------------------------
                                    286 ; special function registers
                                    287 ;--------------------------------------------------------
                                    288 	.area RSEG    (ABS,DATA)
      000000                        289 	.org 0x0000
                           000080   290 _P0	=	0x0080
                           000081   291 _SP	=	0x0081
                           000082   292 _DPL	=	0x0082
                           000083   293 _DPH	=	0x0083
                           000084   294 _RCTRIM0	=	0x0084
                           000085   295 _RCTRIM1	=	0x0085
                           000086   296 _RWK	=	0x0086
                           000087   297 _PCON	=	0x0087
                           000088   298 _TCON	=	0x0088
                           000089   299 _TMOD	=	0x0089
                           00008A   300 _TL0	=	0x008a
                           00008B   301 _TL1	=	0x008b
                           00008C   302 _TH0	=	0x008c
                           00008D   303 _TH1	=	0x008d
                           00008E   304 _CKCON	=	0x008e
                           00008F   305 _WKCON	=	0x008f
                           000090   306 _P1	=	0x0090
                           000091   307 _SFRS	=	0x0091
                           000092   308 _CAPCON0	=	0x0092
                           000093   309 _CAPCON1	=	0x0093
                           000094   310 _CAPCON2	=	0x0094
                           000095   311 _CKDIV	=	0x0095
                           000096   312 _CKSWT	=	0x0096
                           000097   313 _CKEN	=	0x0097
                           000098   314 _SCON	=	0x0098
                           000099   315 _SBUF	=	0x0099
                           00009A   316 _SBUF_1	=	0x009a
                           00009B   317 _EIE	=	0x009b
                           00009C   318 _EIE1	=	0x009c
                           00009F   319 _CHPCON	=	0x009f
                           0000A0   320 _P2	=	0x00a0
                           0000A2   321 _AUXR1	=	0x00a2
                           0000A3   322 _BODCON0	=	0x00a3
                           0000A4   323 _IAPTRG	=	0x00a4
                           0000A5   324 _IAPUEN	=	0x00a5
                           0000A6   325 _IAPAL	=	0x00a6
                           0000A7   326 _IAPAH	=	0x00a7
                           0000A8   327 _IE	=	0x00a8
                           0000A9   328 _SADDR	=	0x00a9
                           0000AA   329 _WDCON	=	0x00aa
                           0000AB   330 _BODCON1	=	0x00ab
                           0000AC   331 _P3M1	=	0x00ac
                           0000AC   332 _P3S	=	0x00ac
                           0000AD   333 _P3M2	=	0x00ad
                           0000AD   334 _P3SR	=	0x00ad
                           0000AE   335 _IAPFD	=	0x00ae
                           0000AF   336 _IAPCN	=	0x00af
                           0000B0   337 _P3	=	0x00b0
                           0000B1   338 _P0M1	=	0x00b1
                           0000B1   339 _P0S	=	0x00b1
                           0000B2   340 _P0M2	=	0x00b2
                           0000B2   341 _P0SR	=	0x00b2
                           0000B3   342 _P1M1	=	0x00b3
                           0000B3   343 _P1S	=	0x00b3
                           0000B4   344 _P1M2	=	0x00b4
                           0000B4   345 _P1SR	=	0x00b4
                           0000B5   346 _P2S	=	0x00b5
                           0000B7   347 _IPH	=	0x00b7
                           0000B7   348 _PWMINTC	=	0x00b7
                           0000B8   349 _IP	=	0x00b8
                           0000B9   350 _SADEN	=	0x00b9
                           0000BA   351 _SADEN_1	=	0x00ba
                           0000BB   352 _SADDR_1	=	0x00bb
                           0000BC   353 _I2DAT	=	0x00bc
                           0000BD   354 _I2STAT	=	0x00bd
                           0000BE   355 _I2CLK	=	0x00be
                           0000BF   356 _I2TOC	=	0x00bf
                           0000C0   357 _I2CON	=	0x00c0
                           0000C1   358 _I2ADDR	=	0x00c1
                           0000C2   359 _ADCRL	=	0x00c2
                           0000C3   360 _ADCRH	=	0x00c3
                           0000C4   361 _T3CON	=	0x00c4
                           0000C4   362 _PWM4H	=	0x00c4
                           0000C5   363 _RL3	=	0x00c5
                           0000C5   364 _PWM5H	=	0x00c5
                           0000C6   365 _RH3	=	0x00c6
                           0000C6   366 _PIOCON1	=	0x00c6
                           0000C7   367 _TA	=	0x00c7
                           0000C8   368 _T2CON	=	0x00c8
                           0000C9   369 _T2MOD	=	0x00c9
                           0000CA   370 _RCMP2L	=	0x00ca
                           0000CB   371 _RCMP2H	=	0x00cb
                           0000CC   372 _TL2	=	0x00cc
                           0000CC   373 _PWM4L	=	0x00cc
                           0000CD   374 _TH2	=	0x00cd
                           0000CD   375 _PWM5L	=	0x00cd
                           0000CE   376 _ADCMPL	=	0x00ce
                           0000CF   377 _ADCMPH	=	0x00cf
                           0000D0   378 _PSW	=	0x00d0
                           0000D1   379 _PWMPH	=	0x00d1
                           0000D2   380 _PWM0H	=	0x00d2
                           0000D3   381 _PWM1H	=	0x00d3
                           0000D4   382 _PWM2H	=	0x00d4
                           0000D5   383 _PWM3H	=	0x00d5
                           0000D6   384 _PNP	=	0x00d6
                           0000D7   385 _FBD	=	0x00d7
                           0000D8   386 _PWMCON0	=	0x00d8
                           0000D9   387 _PWMPL	=	0x00d9
                           0000DA   388 _PWM0L	=	0x00da
                           0000DB   389 _PWM1L	=	0x00db
                           0000DC   390 _PWM2L	=	0x00dc
                           0000DD   391 _PWM3L	=	0x00dd
                           0000DE   392 _PIOCON0	=	0x00de
                           0000DF   393 _PWMCON1	=	0x00df
                           0000E0   394 _ACC	=	0x00e0
                           0000E1   395 _ADCCON1	=	0x00e1
                           0000E2   396 _ADCCON2	=	0x00e2
                           0000E3   397 _ADCDLY	=	0x00e3
                           0000E4   398 _C0L	=	0x00e4
                           0000E5   399 _C0H	=	0x00e5
                           0000E6   400 _C1L	=	0x00e6
                           0000E7   401 _C1H	=	0x00e7
                           0000E8   402 _ADCCON0	=	0x00e8
                           0000E9   403 _PICON	=	0x00e9
                           0000EA   404 _PINEN	=	0x00ea
                           0000EB   405 _PIPEN	=	0x00eb
                           0000EC   406 _PIF	=	0x00ec
                           0000ED   407 _C2L	=	0x00ed
                           0000EE   408 _C2H	=	0x00ee
                           0000EF   409 _EIP	=	0x00ef
                           0000F0   410 _B	=	0x00f0
                           0000F1   411 _CAPCON3	=	0x00f1
                           0000F2   412 _CAPCON4	=	0x00f2
                           0000F3   413 _SPCR	=	0x00f3
                           0000F3   414 _SPCR2	=	0x00f3
                           0000F4   415 _SPSR	=	0x00f4
                           0000F5   416 _SPDR	=	0x00f5
                           0000F6   417 _AINDIDS	=	0x00f6
                           0000F7   418 _EIPH	=	0x00f7
                           0000F8   419 _SCON_1	=	0x00f8
                           0000F9   420 _PDTEN	=	0x00f9
                           0000FA   421 _PDTCNT	=	0x00fa
                           0000FB   422 _PMEN	=	0x00fb
                           0000FC   423 _PMD	=	0x00fc
                           0000FE   424 _EIP1	=	0x00fe
                           0000FF   425 _EIPH1	=	0x00ff
                                    426 ;--------------------------------------------------------
                                    427 ; special function bits
                                    428 ;--------------------------------------------------------
                                    429 	.area RSEG    (ABS,DATA)
      000000                        430 	.org 0x0000
                           0000FF   431 _SM0_1	=	0x00ff
                           0000FF   432 _FE_1	=	0x00ff
                           0000FE   433 _SM1_1	=	0x00fe
                           0000FD   434 _SM2_1	=	0x00fd
                           0000FC   435 _REN_1	=	0x00fc
                           0000FB   436 _TB8_1	=	0x00fb
                           0000FA   437 _RB8_1	=	0x00fa
                           0000F9   438 _TI_1	=	0x00f9
                           0000F8   439 _RI_1	=	0x00f8
                           0000EF   440 _ADCF	=	0x00ef
                           0000EE   441 _ADCS	=	0x00ee
                           0000ED   442 _ETGSEL1	=	0x00ed
                           0000EC   443 _ETGSEL0	=	0x00ec
                           0000EB   444 _ADCHS3	=	0x00eb
                           0000EA   445 _ADCHS2	=	0x00ea
                           0000E9   446 _ADCHS1	=	0x00e9
                           0000E8   447 _ADCHS0	=	0x00e8
                           0000DF   448 _PWMRUN	=	0x00df
                           0000DE   449 _LOAD	=	0x00de
                           0000DD   450 _PWMF	=	0x00dd
                           0000DC   451 _CLRPWM	=	0x00dc
                           0000D7   452 _CY	=	0x00d7
                           0000D6   453 _AC	=	0x00d6
                           0000D5   454 _F0	=	0x00d5
                           0000D4   455 _RS1	=	0x00d4
                           0000D3   456 _RS0	=	0x00d3
                           0000D2   457 _OV	=	0x00d2
                           0000D0   458 _P	=	0x00d0
                           0000CF   459 _TF2	=	0x00cf
                           0000CA   460 _TR2	=	0x00ca
                           0000C8   461 _CM_RL2	=	0x00c8
                           0000C6   462 _I2CEN	=	0x00c6
                           0000C5   463 _STA	=	0x00c5
                           0000C4   464 _STO	=	0x00c4
                           0000C3   465 _SI	=	0x00c3
                           0000C2   466 _AA	=	0x00c2
                           0000C0   467 _I2CPX	=	0x00c0
                           0000BE   468 _PADC	=	0x00be
                           0000BD   469 _PBOD	=	0x00bd
                           0000BC   470 _PS	=	0x00bc
                           0000BB   471 _PT1	=	0x00bb
                           0000BA   472 _PX1	=	0x00ba
                           0000B9   473 _PT0	=	0x00b9
                           0000B8   474 _PX0	=	0x00b8
                           0000B0   475 _P30	=	0x00b0
                           0000AF   476 _EA	=	0x00af
                           0000AE   477 _EADC	=	0x00ae
                           0000AD   478 _EBOD	=	0x00ad
                           0000AC   479 _ES	=	0x00ac
                           0000AB   480 _ET1	=	0x00ab
                           0000AA   481 _EX1	=	0x00aa
                           0000A9   482 _ET0	=	0x00a9
                           0000A8   483 _EX0	=	0x00a8
                           0000A0   484 _P20	=	0x00a0
                           00009F   485 _SM0	=	0x009f
                           00009F   486 _FE	=	0x009f
                           00009E   487 _SM1	=	0x009e
                           00009D   488 _SM2	=	0x009d
                           00009C   489 _REN	=	0x009c
                           00009B   490 _TB8	=	0x009b
                           00009A   491 _RB8	=	0x009a
                           000099   492 _TI	=	0x0099
                           000098   493 _RI	=	0x0098
                           000097   494 _P17	=	0x0097
                           000096   495 _P16	=	0x0096
                           000096   496 _TXD_1	=	0x0096
                           000095   497 _P15	=	0x0095
                           000094   498 _P14	=	0x0094
                           000094   499 _SDA	=	0x0094
                           000093   500 _P13	=	0x0093
                           000093   501 _SCL	=	0x0093
                           000092   502 _P12	=	0x0092
                           000091   503 _P11	=	0x0091
                           000090   504 _P10	=	0x0090
                           00008F   505 _TF1	=	0x008f
                           00008E   506 _TR1	=	0x008e
                           00008D   507 _TF0	=	0x008d
                           00008C   508 _TR0	=	0x008c
                           00008B   509 _IE1	=	0x008b
                           00008A   510 _IT1	=	0x008a
                           000089   511 _IE0	=	0x0089
                           000088   512 _IT0	=	0x0088
                           000087   513 _P07	=	0x0087
                           000087   514 _RXD	=	0x0087
                           000086   515 _P06	=	0x0086
                           000086   516 _TXD	=	0x0086
                           000085   517 _P05	=	0x0085
                           000084   518 _P04	=	0x0084
                           000084   519 _STADC	=	0x0084
                           000083   520 _P03	=	0x0083
                           000082   521 _P02	=	0x0082
                           000082   522 _RXD_1	=	0x0082
                           000081   523 _P01	=	0x0081
                           000081   524 _MISO	=	0x0081
                           000080   525 _P00	=	0x0080
                           000080   526 _MOSI	=	0x0080
                                    527 ;--------------------------------------------------------
                                    528 ; overlayable register banks
                                    529 ;--------------------------------------------------------
                                    530 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        531 	.ds 8
                                    532 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        533 	.ds 8
                                    534 ;--------------------------------------------------------
                                    535 ; internal ram data
                                    536 ;--------------------------------------------------------
                                    537 	.area DSEG    (DATA)
      000000                        538 _gu8MyAddr::
      000000                        539 	.ds 1
      000001                        540 _gu8UART::
      000001                        541 	.ds 1
      000002                        542 _gu16TimeCnt::
      000002                        543 	.ds 2
      000004                        544 _state_machine_PARM_2:
      000004                        545 	.ds 1
      000005                        546 _state_machine_PARM_3:
      000005                        547 	.ds 1
      000006                        548 _state_machine_PARM_4:
      000006                        549 	.ds 1
      000007                        550 _state_switches_su8PrevSW_65536_96:
      000007                        551 	.ds 1
      000008                        552 _process_my_packet_sloc0_1_0:
      000008                        553 	.ds 3
      00000B                        554 _main_su8Cnt_262145_138:
      00000B                        555 	.ds 1
      00000C                        556 _main_u8RxUART_65536_128:
      00000C                        557 	.ds 1
      00000D                        558 _main_u16Cnt_65536_128:
      00000D                        559 	.ds 2
      00000F                        560 _main_pu8RxUART_65536_128:
      00000F                        561 	.ds 30
      00002D                        562 _main_stLineFiPkt_65536_128:
      00002D                        563 	.ds 8
      000035                        564 _main_u8RxBufIdx_65536_128:
      000035                        565 	.ds 1
      000036                        566 _main_pu8LineFiRx_65536_128:
      000036                        567 	.ds 10
                                    568 ;--------------------------------------------------------
                                    569 ; overlayable items in internal ram 
                                    570 ;--------------------------------------------------------
                                    571 	.area	OSEG    (OVR,DATA)
                                    572 	.area	OSEG    (OVR,DATA)
                                    573 	.area	OSEG    (OVR,DATA)
                                    574 	.area	OSEG    (OVR,DATA)
                                    575 	.area	OSEG    (OVR,DATA)
                                    576 	.area	OSEG    (OVR,DATA)
                                    577 	.area	OSEG    (OVR,DATA)
      000000                        578 _state_switches_PARM_2:
      000000                        579 	.ds 3
                                    580 	.area	OSEG    (OVR,DATA)
                                    581 	.area	OSEG    (OVR,DATA)
      000000                        582 _chk_my_addr_PARM_2:
      000000                        583 	.ds 1
                                    584 ;--------------------------------------------------------
                                    585 ; Stack segment in internal ram 
                                    586 ;--------------------------------------------------------
                                    587 	.area	SSEG
      000000                        588 __start__stack:
      000000                        589 	.ds	1
                                    590 
                                    591 ;--------------------------------------------------------
                                    592 ; indirectly addressable internal ram data
                                    593 ;--------------------------------------------------------
                                    594 	.area ISEG    (DATA)
                                    595 ;--------------------------------------------------------
                                    596 ; absolute internal ram data
                                    597 ;--------------------------------------------------------
                                    598 	.area IABS    (ABS,DATA)
                                    599 	.area IABS    (ABS,DATA)
                                    600 ;--------------------------------------------------------
                                    601 ; bit data
                                    602 ;--------------------------------------------------------
                                    603 	.area BSEG    (BIT)
                                    604 ;--------------------------------------------------------
                                    605 ; paged external ram data
                                    606 ;--------------------------------------------------------
                                    607 	.area PSEG    (PAG,XDATA)
                                    608 ;--------------------------------------------------------
                                    609 ; external ram data
                                    610 ;--------------------------------------------------------
                                    611 	.area XSEG    (XDATA)
      000000                        612 _gpu8Data::
      000000                        613 	.ds 20
      000014                        614 _gu8MotorState::
      000014                        615 	.ds 1
      000015                        616 _gpu32UartSpeed::
      000015                        617 	.ds 56
                                    618 ;--------------------------------------------------------
                                    619 ; absolute external ram data
                                    620 ;--------------------------------------------------------
                                    621 	.area XABS    (ABS,XDATA)
                                    622 ;--------------------------------------------------------
                                    623 ; external initialized ram data
                                    624 ;--------------------------------------------------------
                                    625 	.area HOME    (CODE)
                                    626 	.area GSINIT0 (CODE)
                                    627 	.area GSINIT1 (CODE)
                                    628 	.area GSINIT2 (CODE)
                                    629 	.area GSINIT3 (CODE)
                                    630 	.area GSINIT4 (CODE)
                                    631 	.area GSINIT5 (CODE)
                                    632 	.area GSINIT  (CODE)
                                    633 	.area GSFINAL (CODE)
                                    634 	.area CSEG    (CODE)
                                    635 ;--------------------------------------------------------
                                    636 ; interrupt vector 
                                    637 ;--------------------------------------------------------
                                    638 	.area HOME    (CODE)
      000000                        639 __interrupt_vect:
      000000 02r00r00         [24]  640 	ljmp	__sdcc_gsinit_startup
      000003 32               [24]  641 	reti
      000004                        642 	.ds	7
      00000B 02r01rE8         [24]  643 	ljmp	_Timer0_ISR
      00000E                        644 	.ds	5
      000013 32               [24]  645 	reti
      000014                        646 	.ds	7
      00001B 32               [24]  647 	reti
      00001C                        648 	.ds	7
      000023 32               [24]  649 	reti
      000024                        650 	.ds	7
      00002B 32               [24]  651 	reti
      00002C                        652 	.ds	7
      000033 32               [24]  653 	reti
      000034                        654 	.ds	7
      00003B 02r01rFF         [24]  655 	ljmp	_pin_interrupt_isr
                                    656 ;--------------------------------------------------------
                                    657 ; global & static initialisations
                                    658 ;--------------------------------------------------------
                                    659 	.area HOME    (CODE)
                                    660 	.area GSINIT  (CODE)
                                    661 	.area GSFINAL (CODE)
                                    662 	.area GSINIT  (CODE)
                                    663 	.globl __sdcc_gsinit_startup
                                    664 	.globl __sdcc_program_startup
                                    665 	.globl __start__stack
                                    666 	.globl __mcs51_genRAMCLEAR
                                    667 ;------------------------------------------------------------
                                    668 ;Allocation info for local variables in function 'state_switches'
                                    669 ;------------------------------------------------------------
                                    670 ;su8PrevSW                 Allocated with name '_state_switches_su8PrevSW_65536_96'
                                    671 ;apu8SwNum                 Allocated with name '_state_switches_PARM_2'
                                    672 ;au8SW                     Allocated to registers r7 
                                    673 ;i                         Allocated to registers r2 
                                    674 ;u8Result                  Allocated to registers r6 
                                    675 ;------------------------------------------------------------
                                    676 ;	src/main.c:474: static UINT8 su8PrevSW = 0;
      000000 75*07 00         [24]  677 	mov	_state_switches_su8PrevSW_65536_96,#0x00
                                    678 ;------------------------------------------------------------
                                    679 ;Allocation info for local variables in function 'main'
                                    680 ;------------------------------------------------------------
                                    681 ;su8Cnt                    Allocated with name '_main_su8Cnt_262145_138'
                                    682 ;u8PrevSwitch              Allocated to registers r4 
                                    683 ;u8UartRx                  Allocated to registers 
                                    684 ;u8RotSense                Allocated to registers 
                                    685 ;u8RxUART                  Allocated with name '_main_u8RxUART_65536_128'
                                    686 ;u16Cnt                    Allocated with name '_main_u16Cnt_65536_128'
                                    687 ;u8OutputState             Allocated to registers 
                                    688 ;u8StateRxCSC              Allocated to registers 
                                    689 ;u8LineFiAddr              Allocated to registers 
                                    690 ;u8LineFiSpeed             Allocated to registers 
                                    691 ;u8Data                    Allocated to registers 
                                    692 ;u8LineFiCmd               Allocated to registers 
                                    693 ;u8PwrOnFirstFlag          Allocated to registers 
                                    694 ;u8StateRxPkt              Allocated to registers r7 
                                    695 ;pu8RxUART                 Allocated with name '_main_pu8RxUART_65536_128'
                                    696 ;stLineFiPkt               Allocated with name '_main_stLineFiPkt_65536_128'
                                    697 ;u8MotorState              Allocated to registers 
                                    698 ;u8RxBufIdx                Allocated with name '_main_u8RxBufIdx_65536_128'
                                    699 ;u8RxLineFiLen             Allocated to registers r5 
                                    700 ;pu8LineFiRx               Allocated with name '_main_pu8LineFiRx_65536_128'
                                    701 ;u8LineFiRxIdx             Allocated to registers 
                                    702 ;u8Count2                  Allocated to registers 
                                    703 ;u8RxPktCnt                Allocated to registers 
                                    704 ;u8PreambleCnt             Allocated to registers 
                                    705 ;i                         Allocated to registers r3 
                                    706 ;------------------------------------------------------------
                                    707 ;	src/main.c:877: static uint8 su8Cnt = 0;
      000003 75*0B 00         [24]  708 	mov	_main_su8Cnt_262145_138,#0x00
                                    709 ;	src/main.c:108: UINT8 gu8UART = 0;
      000006 75*01 00         [24]  710 	mov	_gu8UART,#0x00
                                    711 ;	src/main.c:109: UINT16 gu16TimeCnt = 0;
      000009 E4               [12]  712 	clr	a
      00000A F5*02            [12]  713 	mov	_gu16TimeCnt,a
      00000C F5*03            [12]  714 	mov	(_gu16TimeCnt + 1),a
                                    715 ;	src/main.c:89: UINT8 __xdata gu8MotorState = 0;
      00000E 90r00r14         [24]  716 	mov	dptr,#_gu8MotorState
      000011 F0               [24]  717 	movx	@dptr,a
                                    718 ;	src/main.c:91: UINT32 __xdata gpu32UartSpeed[] = {
      000012 90r00r15         [24]  719 	mov	dptr,#_gpu32UartSpeed
      000015 74 60            [12]  720 	mov	a,#0x60
      000017 F0               [24]  721 	movx	@dptr,a
      000018 74 09            [12]  722 	mov	a,#0x09
      00001A A3               [24]  723 	inc	dptr
      00001B F0               [24]  724 	movx	@dptr,a
      00001C E4               [12]  725 	clr	a
      00001D A3               [24]  726 	inc	dptr
      00001E F0               [24]  727 	movx	@dptr,a
      00001F A3               [24]  728 	inc	dptr
      000020 F0               [24]  729 	movx	@dptr,a
      000021 90r00r19         [24]  730 	mov	dptr,#(_gpu32UartSpeed + 0x0004)
      000024 74 80            [12]  731 	mov	a,#0x80
      000026 F0               [24]  732 	movx	@dptr,a
      000027 74 70            [12]  733 	mov	a,#0x70
      000029 A3               [24]  734 	inc	dptr
      00002A F0               [24]  735 	movx	@dptr,a
      00002B E4               [12]  736 	clr	a
      00002C A3               [24]  737 	inc	dptr
      00002D F0               [24]  738 	movx	@dptr,a
      00002E A3               [24]  739 	inc	dptr
      00002F F0               [24]  740 	movx	@dptr,a
      000030 90r00r1D         [24]  741 	mov	dptr,#(_gpu32UartSpeed + 0x0008)
      000033 F0               [24]  742 	movx	@dptr,a
      000034 74 96            [12]  743 	mov	a,#0x96
      000036 A3               [24]  744 	inc	dptr
      000037 F0               [24]  745 	movx	@dptr,a
      000038 E4               [12]  746 	clr	a
      000039 A3               [24]  747 	inc	dptr
      00003A F0               [24]  748 	movx	@dptr,a
      00003B A3               [24]  749 	inc	dptr
      00003C F0               [24]  750 	movx	@dptr,a
      00003D 90r00r21         [24]  751 	mov	dptr,#(_gpu32UartSpeed + 0x000c)
      000040 F0               [24]  752 	movx	@dptr,a
      000041 74 E1            [12]  753 	mov	a,#0xe1
      000043 A3               [24]  754 	inc	dptr
      000044 F0               [24]  755 	movx	@dptr,a
      000045 E4               [12]  756 	clr	a
      000046 A3               [24]  757 	inc	dptr
      000047 F0               [24]  758 	movx	@dptr,a
      000048 A3               [24]  759 	inc	dptr
      000049 F0               [24]  760 	movx	@dptr,a
      00004A 90r00r25         [24]  761 	mov	dptr,#(_gpu32UartSpeed + 0x0010)
      00004D F0               [24]  762 	movx	@dptr,a
      00004E 74 C2            [12]  763 	mov	a,#0xc2
      000050 A3               [24]  764 	inc	dptr
      000051 F0               [24]  765 	movx	@dptr,a
      000052 74 01            [12]  766 	mov	a,#0x01
      000054 A3               [24]  767 	inc	dptr
      000055 F0               [24]  768 	movx	@dptr,a
      000056 E4               [12]  769 	clr	a
      000057 A3               [24]  770 	inc	dptr
      000058 F0               [24]  771 	movx	@dptr,a
      000059 90r00r29         [24]  772 	mov	dptr,#(_gpu32UartSpeed + 0x0014)
      00005C F0               [24]  773 	movx	@dptr,a
      00005D 74 84            [12]  774 	mov	a,#0x84
      00005F A3               [24]  775 	inc	dptr
      000060 F0               [24]  776 	movx	@dptr,a
      000061 74 03            [12]  777 	mov	a,#0x03
      000063 A3               [24]  778 	inc	dptr
      000064 F0               [24]  779 	movx	@dptr,a
      000065 E4               [12]  780 	clr	a
      000066 A3               [24]  781 	inc	dptr
      000067 F0               [24]  782 	movx	@dptr,a
      000068 90r00r2D         [24]  783 	mov	dptr,#(_gpu32UartSpeed + 0x0018)
      00006B 74 E0            [12]  784 	mov	a,#0xe0
      00006D F0               [24]  785 	movx	@dptr,a
      00006E 74 93            [12]  786 	mov	a,#0x93
      000070 A3               [24]  787 	inc	dptr
      000071 F0               [24]  788 	movx	@dptr,a
      000072 74 04            [12]  789 	mov	a,#0x04
      000074 A3               [24]  790 	inc	dptr
      000075 F0               [24]  791 	movx	@dptr,a
      000076 E4               [12]  792 	clr	a
      000077 A3               [24]  793 	inc	dptr
      000078 F0               [24]  794 	movx	@dptr,a
      000079 90r00r31         [24]  795 	mov	dptr,#(_gpu32UartSpeed + 0x001c)
      00007C F0               [24]  796 	movx	@dptr,a
      00007D 74 08            [12]  797 	mov	a,#0x08
      00007F A3               [24]  798 	inc	dptr
      000080 F0               [24]  799 	movx	@dptr,a
      000081 14               [12]  800 	dec	a
      000082 A3               [24]  801 	inc	dptr
      000083 F0               [24]  802 	movx	@dptr,a
      000084 E4               [12]  803 	clr	a
      000085 A3               [24]  804 	inc	dptr
      000086 F0               [24]  805 	movx	@dptr,a
      000087 90r00r35         [24]  806 	mov	dptr,#(_gpu32UartSpeed + 0x0020)
      00008A 74 20            [12]  807 	mov	a,#0x20
      00008C F0               [24]  808 	movx	@dptr,a
      00008D 74 A1            [12]  809 	mov	a,#0xa1
      00008F A3               [24]  810 	inc	dptr
      000090 F0               [24]  811 	movx	@dptr,a
      000091 74 07            [12]  812 	mov	a,#0x07
      000093 A3               [24]  813 	inc	dptr
      000094 F0               [24]  814 	movx	@dptr,a
      000095 E4               [12]  815 	clr	a
      000096 A3               [24]  816 	inc	dptr
      000097 F0               [24]  817 	movx	@dptr,a
      000098 90r00r39         [24]  818 	mov	dptr,#(_gpu32UartSpeed + 0x0024)
      00009B 74 C0            [12]  819 	mov	a,#0xc0
      00009D F0               [24]  820 	movx	@dptr,a
      00009E 74 27            [12]  821 	mov	a,#0x27
      0000A0 A3               [24]  822 	inc	dptr
      0000A1 F0               [24]  823 	movx	@dptr,a
      0000A2 74 09            [12]  824 	mov	a,#0x09
      0000A4 A3               [24]  825 	inc	dptr
      0000A5 F0               [24]  826 	movx	@dptr,a
      0000A6 E4               [12]  827 	clr	a
      0000A7 A3               [24]  828 	inc	dptr
      0000A8 F0               [24]  829 	movx	@dptr,a
      0000A9 90r00r3D         [24]  830 	mov	dptr,#(_gpu32UartSpeed + 0x0028)
      0000AC 74 60            [12]  831 	mov	a,#0x60
      0000AE F0               [24]  832 	movx	@dptr,a
      0000AF 74 AE            [12]  833 	mov	a,#0xae
      0000B1 A3               [24]  834 	inc	dptr
      0000B2 F0               [24]  835 	movx	@dptr,a
      0000B3 74 0A            [12]  836 	mov	a,#0x0a
      0000B5 A3               [24]  837 	inc	dptr
      0000B6 F0               [24]  838 	movx	@dptr,a
      0000B7 E4               [12]  839 	clr	a
      0000B8 A3               [24]  840 	inc	dptr
      0000B9 F0               [24]  841 	movx	@dptr,a
      0000BA 90r00r41         [24]  842 	mov	dptr,#(_gpu32UartSpeed + 0x002c)
      0000BD F0               [24]  843 	movx	@dptr,a
      0000BE 74 35            [12]  844 	mov	a,#0x35
      0000C0 A3               [24]  845 	inc	dptr
      0000C1 F0               [24]  846 	movx	@dptr,a
      0000C2 74 0C            [12]  847 	mov	a,#0x0c
      0000C4 A3               [24]  848 	inc	dptr
      0000C5 F0               [24]  849 	movx	@dptr,a
      0000C6 E4               [12]  850 	clr	a
      0000C7 A3               [24]  851 	inc	dptr
      0000C8 F0               [24]  852 	movx	@dptr,a
      0000C9 90r00r45         [24]  853 	mov	dptr,#(_gpu32UartSpeed + 0x0030)
      0000CC 74 A0            [12]  854 	mov	a,#0xa0
      0000CE F0               [24]  855 	movx	@dptr,a
      0000CF 74 BB            [12]  856 	mov	a,#0xbb
      0000D1 A3               [24]  857 	inc	dptr
      0000D2 F0               [24]  858 	movx	@dptr,a
      0000D3 74 0D            [12]  859 	mov	a,#0x0d
      0000D5 A3               [24]  860 	inc	dptr
      0000D6 F0               [24]  861 	movx	@dptr,a
      0000D7 E4               [12]  862 	clr	a
      0000D8 A3               [24]  863 	inc	dptr
      0000D9 F0               [24]  864 	movx	@dptr,a
      0000DA 90r00r49         [24]  865 	mov	dptr,#(_gpu32UartSpeed + 0x0034)
      0000DD F0               [24]  866 	movx	@dptr,a
      0000DE 74 10            [12]  867 	mov	a,#0x10
      0000E0 A3               [24]  868 	inc	dptr
      0000E1 F0               [24]  869 	movx	@dptr,a
      0000E2 74 0E            [12]  870 	mov	a,#0x0e
      0000E4 A3               [24]  871 	inc	dptr
      0000E5 F0               [24]  872 	movx	@dptr,a
      0000E6 E4               [12]  873 	clr	a
      0000E7 A3               [24]  874 	inc	dptr
      0000E8 F0               [24]  875 	movx	@dptr,a
                                    876 	.area GSFINAL (CODE)
      000000 02r00r3E         [24]  877 	ljmp	__sdcc_program_startup
                                    878 ;--------------------------------------------------------
                                    879 ; Home
                                    880 ;--------------------------------------------------------
                                    881 	.area HOME    (CODE)
                                    882 	.area HOME    (CODE)
      00003E                        883 __sdcc_program_startup:
      00003E 02r08r40         [24]  884 	ljmp	_main
                                    885 ;	return from main will return to caller
                                    886 ;--------------------------------------------------------
                                    887 ; code
                                    888 ;--------------------------------------------------------
                                    889 	.area CSEG    (CODE)
                                    890 ;------------------------------------------------------------
                                    891 ;Allocation info for local variables in function 'putchar'
                                    892 ;------------------------------------------------------------
                                    893 ;c                         Allocated to registers r6 r7 
                                    894 ;------------------------------------------------------------
                                    895 ;	src/main.c:113: int putchar (int c) 
                                    896 ;	-----------------------------------------
                                    897 ;	 function putchar
                                    898 ;	-----------------------------------------
      000000                        899 _putchar:
                           000007   900 	ar7 = 0x07
                           000006   901 	ar6 = 0x06
                           000005   902 	ar5 = 0x05
                           000004   903 	ar4 = 0x04
                           000003   904 	ar3 = 0x03
                           000002   905 	ar2 = 0x02
                           000001   906 	ar1 = 0x01
                           000000   907 	ar0 = 0x00
      000000 AE 82            [24]  908 	mov	r6,dpl
                                    909 ;	src/main.c:115: if (gu8UART == 0)  {
      000002 E5*01            [12]  910 	mov	a,_gu8UART
      000004 70 09            [24]  911 	jnz	00108$
                                    912 ;	src/main.c:116: TI = 0;
                                    913 ;	assignBit
      000006 C2 99            [12]  914 	clr	_TI
                                    915 ;	src/main.c:117: SBUF = c;
      000008 8E 99            [24]  916 	mov	_SBUF,r6
                                    917 ;	src/main.c:118: while(TI==0);
      00000A                        918 00101$:
      00000A 20 99 09         [24]  919 	jb	_TI,00110$
      00000D 80 FB            [24]  920 	sjmp	00101$
      00000F                        921 00108$:
                                    922 ;	src/main.c:121: TI_1 = 0;
                                    923 ;	assignBit
      00000F C2 F9            [12]  924 	clr	_TI_1
                                    925 ;	src/main.c:122: SBUF_1 = c;
      000011 8E 9A            [24]  926 	mov	_SBUF_1,r6
                                    927 ;	src/main.c:123: while(TI_1==0);
      000013                        928 00104$:
      000013 30 F9 FD         [24]  929 	jnb	_TI_1,00104$
      000016                        930 00110$:
                                    931 ;	src/main.c:125: }
      000016 22               [24]  932 	ret
                                    933 ;------------------------------------------------------------
                                    934 ;Allocation info for local variables in function 'conv_nibble2manchester'
                                    935 ;------------------------------------------------------------
                                    936 ;c                         Allocated to registers r7 
                                    937 ;i                         Allocated to registers r5 
                                    938 ;u8Manch                   Allocated to registers r4 
                                    939 ;------------------------------------------------------------
                                    940 ;	src/main.c:127: UINT8 conv_nibble2manchester (UINT8 c)
                                    941 ;	-----------------------------------------
                                    942 ;	 function conv_nibble2manchester
                                    943 ;	-----------------------------------------
      000017                        944 _conv_nibble2manchester:
      000017 AF 82            [24]  945 	mov	r7,dpl
                                    946 ;	src/main.c:137: UINT8 u8Manch = 0;
      000019 7E 00            [12]  947 	mov	r6,#0x00
                                    948 ;	src/main.c:138: for (i=0;i<4;i++) {
      00001B 7D 00            [12]  949 	mov	r5,#0x00
      00001D                        950 00105$:
                                    951 ;	src/main.c:139: u8Manch >>=2;
      00001D EE               [12]  952 	mov	a,r6
      00001E 03               [12]  953 	rr	a
      00001F 03               [12]  954 	rr	a
      000020 54 3F            [12]  955 	anl	a,#0x3f
      000022 FC               [12]  956 	mov	r4,a
                                    957 ;	src/main.c:140: if (c&1) {
      000023 EF               [12]  958 	mov	a,r7
      000024 30 E0 06         [24]  959 	jnb	acc.0,00102$
                                    960 ;	src/main.c:141: u8Manch |= 0x40; // 1 -> 0
      000027 74 40            [12]  961 	mov	a,#0x40
      000029 4C               [12]  962 	orl	a,r4
      00002A FE               [12]  963 	mov	r6,a
      00002B 80 04            [24]  964 	sjmp	00103$
      00002D                        965 00102$:
                                    966 ;	src/main.c:144: u8Manch |= 0x80; // 0 -> 1
      00002D 74 80            [12]  967 	mov	a,#0x80
      00002F 4C               [12]  968 	orl	a,r4
      000030 FE               [12]  969 	mov	r6,a
      000031                        970 00103$:
                                    971 ;	src/main.c:146: c >>= 1;
      000031 EF               [12]  972 	mov	a,r7
      000032 C3               [12]  973 	clr	c
      000033 13               [12]  974 	rrc	a
      000034 FF               [12]  975 	mov	r7,a
                                    976 ;	src/main.c:138: for (i=0;i<4;i++) {
      000035 0D               [12]  977 	inc	r5
      000036 BD 04 00         [24]  978 	cjne	r5,#0x04,00126$
      000039                        979 00126$:
      000039 40 E2            [24]  980 	jc	00105$
                                    981 ;	src/main.c:148: return u8Manch;
      00003B 8E 82            [24]  982 	mov	dpl,r6
                                    983 ;	src/main.c:149: }
      00003D 22               [24]  984 	ret
                                    985 ;------------------------------------------------------------
                                    986 ;Allocation info for local variables in function 'putchar_manchester'
                                    987 ;------------------------------------------------------------
                                    988 ;c                         Allocated to registers r7 
                                    989 ;------------------------------------------------------------
                                    990 ;	src/main.c:151: void putchar_manchester (char c) 
                                    991 ;	-----------------------------------------
                                    992 ;	 function putchar_manchester
                                    993 ;	-----------------------------------------
      00003E                        994 _putchar_manchester:
                                    995 ;	src/main.c:153: gu8UART = 1;
                                    996 ;	src/main.c:154: putchar(conv_nibble2manchester(c));
      00003E AF 82            [24]  997 	mov	r7,dpl
      000040 75*01 01         [24]  998 	mov	_gu8UART,#0x01
      000043 C0 07            [24]  999 	push	ar7
      000045 12r00r17         [24] 1000 	lcall	_conv_nibble2manchester
      000048 7D 00            [12] 1001 	mov	r5,#0x00
      00004A 8D 83            [24] 1002 	mov	dph,r5
      00004C 12r00r00         [24] 1003 	lcall	_putchar
      00004F D0 07            [24] 1004 	pop	ar7
                                   1005 ;	src/main.c:155: putchar(conv_nibble2manchester(c>>4));
      000051 EF               [12] 1006 	mov	a,r7
      000052 C4               [12] 1007 	swap	a
      000053 54 0F            [12] 1008 	anl	a,#0x0f
      000055 F5 82            [12] 1009 	mov	dpl,a
      000057 12r00r17         [24] 1010 	lcall	_conv_nibble2manchester
      00005A 7E 00            [12] 1011 	mov	r6,#0x00
      00005C 8E 83            [24] 1012 	mov	dph,r6
                                   1013 ;	src/main.c:156: return;
                                   1014 ;	src/main.c:157: }
      00005E 02r00r00         [24] 1015 	ljmp	_putchar
                                   1016 ;------------------------------------------------------------
                                   1017 ;Allocation info for local variables in function 'preamble'
                                   1018 ;------------------------------------------------------------
                                   1019 ;	src/main.c:159: void preamble() 
                                   1020 ;	-----------------------------------------
                                   1021 ;	 function preamble
                                   1022 ;	-----------------------------------------
      000061                       1023 _preamble:
                                   1024 ;	src/main.c:161: gu8UART = 1;
      000061 75*01 01         [24] 1025 	mov	_gu8UART,#0x01
                                   1026 ;	src/main.c:162: putchar(0xF0);
      000064 90 00 F0         [24] 1027 	mov	dptr,#0x00f0
      000067 12r00r00         [24] 1028 	lcall	_putchar
                                   1029 ;	src/main.c:163: putchar(0xF0);
      00006A 90 00 F0         [24] 1030 	mov	dptr,#0x00f0
      00006D 12r00r00         [24] 1031 	lcall	_putchar
                                   1032 ;	src/main.c:164: putchar(0xF0);
      000070 90 00 F0         [24] 1033 	mov	dptr,#0x00f0
      000073 12r00r00         [24] 1034 	lcall	_putchar
                                   1035 ;	src/main.c:165: putchar(0xF0);
      000076 90 00 F0         [24] 1036 	mov	dptr,#0x00f0
                                   1037 ;	src/main.c:166: }
      000079 02r00r00         [24] 1038 	ljmp	_putchar
                                   1039 ;------------------------------------------------------------
                                   1040 ;Allocation info for local variables in function 'print_esc'
                                   1041 ;------------------------------------------------------------
                                   1042 ;au8State                  Allocated to registers r7 
                                   1043 ;------------------------------------------------------------
                                   1044 ;	src/main.c:200: void print_esc(UINT8 au8State)
                                   1045 ;	-----------------------------------------
                                   1046 ;	 function print_esc
                                   1047 ;	-----------------------------------------
      00007C                       1048 _print_esc:
      00007C AF 82            [24] 1049 	mov	r7,dpl
                                   1050 ;	src/main.c:202: printf_fast_f("\n\r");
      00007E C0 07            [24] 1051 	push	ar7
      000080 74r00            [12] 1052 	mov	a,#___str_0
      000082 C0 E0            [24] 1053 	push	acc
      000084 74s00            [12] 1054 	mov	a,#(___str_0 >> 8)
      000086 C0 E0            [24] 1055 	push	acc
      000088 12r00r00         [24] 1056 	lcall	_printf_fast_f
      00008B 15 81            [12] 1057 	dec	sp
      00008D 15 81            [12] 1058 	dec	sp
      00008F D0 07            [24] 1059 	pop	ar7
                                   1060 ;	src/main.c:203: switch(au8State) {
      000091 BF 00 02         [24] 1061 	cjne	r7,#0x00,00119$
      000094 80 0A            [24] 1062 	sjmp	00101$
      000096                       1063 00119$:
      000096 BF 01 02         [24] 1064 	cjne	r7,#0x01,00120$
      000099 80 16            [24] 1065 	sjmp	00102$
      00009B                       1066 00120$:
                                   1067 ;	src/main.c:204: case STATE_SELF :
      00009B BF 02 33         [24] 1068 	cjne	r7,#0x02,00104$
      00009E 80 22            [24] 1069 	sjmp	00103$
      0000A0                       1070 00101$:
                                   1071 ;	src/main.c:205: printf_fast_f("self ");
      0000A0 74r03            [12] 1072 	mov	a,#___str_1
      0000A2 C0 E0            [24] 1073 	push	acc
      0000A4 74s00            [12] 1074 	mov	a,#(___str_1 >> 8)
      0000A6 C0 E0            [24] 1075 	push	acc
      0000A8 12r00r00         [24] 1076 	lcall	_printf_fast_f
      0000AB 15 81            [12] 1077 	dec	sp
      0000AD 15 81            [12] 1078 	dec	sp
                                   1079 ;	src/main.c:206: break;
                                   1080 ;	src/main.c:207: case STATE_CROSS :
      0000AF 80 20            [24] 1081 	sjmp	00104$
      0000B1                       1082 00102$:
                                   1083 ;	src/main.c:208: printf_fast_f("cross");
      0000B1 74r09            [12] 1084 	mov	a,#___str_2
      0000B3 C0 E0            [24] 1085 	push	acc
      0000B5 74s00            [12] 1086 	mov	a,#(___str_2 >> 8)
      0000B7 C0 E0            [24] 1087 	push	acc
      0000B9 12r00r00         [24] 1088 	lcall	_printf_fast_f
      0000BC 15 81            [12] 1089 	dec	sp
      0000BE 15 81            [12] 1090 	dec	sp
                                   1091 ;	src/main.c:209: break;
                                   1092 ;	src/main.c:210: case STATE_BOTH :
      0000C0 80 0F            [24] 1093 	sjmp	00104$
      0000C2                       1094 00103$:
                                   1095 ;	src/main.c:211: printf_fast_f("both ");
      0000C2 74r0F            [12] 1096 	mov	a,#___str_3
      0000C4 C0 E0            [24] 1097 	push	acc
      0000C6 74s00            [12] 1098 	mov	a,#(___str_3 >> 8)
      0000C8 C0 E0            [24] 1099 	push	acc
      0000CA 12r00r00         [24] 1100 	lcall	_printf_fast_f
      0000CD 15 81            [12] 1101 	dec	sp
      0000CF 15 81            [12] 1102 	dec	sp
                                   1103 ;	src/main.c:213: }
      0000D1                       1104 00104$:
                                   1105 ;	src/main.c:214: printf_fast_f(" output:This is UART%d\n\r", gu8UART);
      0000D1 AE*01            [24] 1106 	mov	r6,_gu8UART
      0000D3 7F 00            [12] 1107 	mov	r7,#0x00
      0000D5 C0 06            [24] 1108 	push	ar6
      0000D7 C0 07            [24] 1109 	push	ar7
      0000D9 74r15            [12] 1110 	mov	a,#___str_4
      0000DB C0 E0            [24] 1111 	push	acc
      0000DD 74s00            [12] 1112 	mov	a,#(___str_4 >> 8)
      0000DF C0 E0            [24] 1113 	push	acc
      0000E1 12r00r00         [24] 1114 	lcall	_printf_fast_f
      0000E4 E5 81            [12] 1115 	mov	a,sp
      0000E6 24 FC            [12] 1116 	add	a,#0xfc
      0000E8 F5 81            [12] 1117 	mov	sp,a
                                   1118 ;	src/main.c:215: }
      0000EA 22               [24] 1119 	ret
                                   1120 ;------------------------------------------------------------
                                   1121 ;Allocation info for local variables in function 'print_char'
                                   1122 ;------------------------------------------------------------
                                   1123 ;au8Data                   Allocated to registers r7 
                                   1124 ;------------------------------------------------------------
                                   1125 ;	src/main.c:217: void print_char(char au8Data)
                                   1126 ;	-----------------------------------------
                                   1127 ;	 function print_char
                                   1128 ;	-----------------------------------------
      0000EB                       1129 _print_char:
      0000EB AF 82            [24] 1130 	mov	r7,dpl
                                   1131 ;	src/main.c:219: switch(au8Data) {
      0000ED BF 0D 02         [24] 1132 	cjne	r7,#0x0d,00115$
      0000F0 80 04            [24] 1133 	sjmp	00102$
      0000F2                       1134 00115$:
      0000F2 BF 1B 11         [24] 1135 	cjne	r7,#0x1b,00103$
                                   1136 ;	src/main.c:221: break;
                                   1137 ;	src/main.c:222: case '\r' :
      0000F5 22               [24] 1138 	ret
      0000F6                       1139 00102$:
                                   1140 ;	src/main.c:223: printf_fast_f("\r\n");
      0000F6 74r2E            [12] 1141 	mov	a,#___str_5
      0000F8 C0 E0            [24] 1142 	push	acc
      0000FA 74s00            [12] 1143 	mov	a,#(___str_5 >> 8)
      0000FC C0 E0            [24] 1144 	push	acc
      0000FE 12r00r00         [24] 1145 	lcall	_printf_fast_f
      000101 15 81            [12] 1146 	dec	sp
      000103 15 81            [12] 1147 	dec	sp
                                   1148 ;	src/main.c:224: break;
                                   1149 ;	src/main.c:225: default :
      000105 22               [24] 1150 	ret
      000106                       1151 00103$:
                                   1152 ;	src/main.c:226: printf_fast_f("%c",au8Data);
      000106 7E 00            [12] 1153 	mov	r6,#0x00
      000108 C0 07            [24] 1154 	push	ar7
      00010A C0 06            [24] 1155 	push	ar6
      00010C 74r31            [12] 1156 	mov	a,#___str_6
      00010E C0 E0            [24] 1157 	push	acc
      000110 74s00            [12] 1158 	mov	a,#(___str_6 >> 8)
      000112 C0 E0            [24] 1159 	push	acc
      000114 12r00r00         [24] 1160 	lcall	_printf_fast_f
      000117 E5 81            [12] 1161 	mov	a,sp
      000119 24 FC            [12] 1162 	add	a,#0xfc
      00011B F5 81            [12] 1163 	mov	sp,a
                                   1164 ;	src/main.c:227: }
                                   1165 ;	src/main.c:228: }
      00011D 22               [24] 1166 	ret
                                   1167 ;------------------------------------------------------------
                                   1168 ;Allocation info for local variables in function 'state_machine'
                                   1169 ;------------------------------------------------------------
                                   1170 ;au8RxUART                 Allocated with name '_state_machine_PARM_2'
                                   1171 ;au8SelfID                 Allocated with name '_state_machine_PARM_3'
                                   1172 ;au8OtherID                Allocated with name '_state_machine_PARM_4'
                                   1173 ;au8State                  Allocated to registers r7 
                                   1174 ;------------------------------------------------------------
                                   1175 ;	src/main.c:230: UINT8 state_machine(UINT8 au8State, UINT8 au8RxUART, UINT8 au8SelfID, UINT8 au8OtherID)
                                   1176 ;	-----------------------------------------
                                   1177 ;	 function state_machine
                                   1178 ;	-----------------------------------------
      00011E                       1179 _state_machine:
      00011E AF 82            [24] 1180 	mov	r7,dpl
                                   1181 ;	src/main.c:232: if(au8RxUART == KEY_ESC) {
      000120 74 1B            [12] 1182 	mov	a,#0x1b
      000122 B5*04 02         [24] 1183 	cjne	a,_state_machine_PARM_2,00142$
      000125 80 02            [24] 1184 	sjmp	00143$
      000127                       1185 00142$:
      000127 80 79            [24] 1186 	sjmp	00110$
      000129                       1187 00143$:
                                   1188 ;	src/main.c:233: gu8UART = au8SelfID;
      000129 AE*05            [24] 1189 	mov	r6,_state_machine_PARM_3
      00012B 8E*01            [24] 1190 	mov	_gu8UART,r6
                                   1191 ;	src/main.c:234: printf_fast_f("\r\ninput:This is UART%d", gu8UART);
      00012D AC*01            [24] 1192 	mov	r4,_gu8UART
      00012F 7D 00            [12] 1193 	mov	r5,#0x00
      000131 C0 07            [24] 1194 	push	ar7
      000133 C0 06            [24] 1195 	push	ar6
      000135 C0 04            [24] 1196 	push	ar4
      000137 C0 05            [24] 1197 	push	ar5
      000139 74r34            [12] 1198 	mov	a,#___str_7
      00013B C0 E0            [24] 1199 	push	acc
      00013D 74s00            [12] 1200 	mov	a,#(___str_7 >> 8)
      00013F C0 E0            [24] 1201 	push	acc
      000141 12r00r00         [24] 1202 	lcall	_printf_fast_f
      000144 E5 81            [12] 1203 	mov	a,sp
      000146 24 FC            [12] 1204 	add	a,#0xfc
      000148 F5 81            [12] 1205 	mov	sp,a
      00014A D0 06            [24] 1206 	pop	ar6
      00014C D0 07            [24] 1207 	pop	ar7
                                   1208 ;	src/main.c:235: switch(au8State) {
      00014E BF 00 02         [24] 1209 	cjne	r7,#0x00,00144$
      000151 80 0D            [24] 1210 	sjmp	00101$
      000153                       1211 00144$:
      000153 BF 01 02         [24] 1212 	cjne	r7,#0x01,00145$
      000156 80 21            [24] 1213 	sjmp	00102$
      000158                       1214 00145$:
      000158 BF 02 02         [24] 1215 	cjne	r7,#0x02,00146$
      00015B 80 35            [24] 1216 	sjmp	00103$
      00015D                       1217 00146$:
      00015D 02r01rE5         [24] 1218 	ljmp	00111$
                                   1219 ;	src/main.c:236: case STATE_SELF :
      000160                       1220 00101$:
                                   1221 ;	src/main.c:237: au8State = STATE_CROSS;
      000160 7F 01            [12] 1222 	mov	r7,#0x01
                                   1223 ;	src/main.c:238: gu8UART = au8SelfID;
      000162 8E*01            [24] 1224 	mov	_gu8UART,r6
                                   1225 ;	src/main.c:239: print_esc(au8State);
      000164 75 82 01         [24] 1226 	mov	dpl,#0x01
      000167 C0 07            [24] 1227 	push	ar7
      000169 12r00r7C         [24] 1228 	lcall	_print_esc
                                   1229 ;	src/main.c:240: gu8UART = au8OtherID;
      00016C 85*06*01         [24] 1230 	mov	_gu8UART,_state_machine_PARM_4
                                   1231 ;	src/main.c:241: print_esc(au8State);
      00016F 75 82 01         [24] 1232 	mov	dpl,#0x01
      000172 12r00r7C         [24] 1233 	lcall	_print_esc
      000175 D0 07            [24] 1234 	pop	ar7
                                   1235 ;	src/main.c:242: break;
                                   1236 ;	src/main.c:243: case STATE_CROSS :
      000177 80 6C            [24] 1237 	sjmp	00111$
      000179                       1238 00102$:
                                   1239 ;	src/main.c:244: au8State = STATE_BOTH;
      000179 7F 02            [12] 1240 	mov	r7,#0x02
                                   1241 ;	src/main.c:245: gu8UART = au8SelfID;
      00017B 8E*01            [24] 1242 	mov	_gu8UART,r6
                                   1243 ;	src/main.c:246: print_esc(au8State);
      00017D 75 82 02         [24] 1244 	mov	dpl,#0x02
      000180 C0 07            [24] 1245 	push	ar7
      000182 12r00r7C         [24] 1246 	lcall	_print_esc
                                   1247 ;	src/main.c:247: gu8UART = au8OtherID;
      000185 85*06*01         [24] 1248 	mov	_gu8UART,_state_machine_PARM_4
                                   1249 ;	src/main.c:248: print_esc(au8State);
      000188 75 82 02         [24] 1250 	mov	dpl,#0x02
      00018B 12r00r7C         [24] 1251 	lcall	_print_esc
      00018E D0 07            [24] 1252 	pop	ar7
                                   1253 ;	src/main.c:249: break;
                                   1254 ;	src/main.c:250: case STATE_BOTH :
      000190 80 53            [24] 1255 	sjmp	00111$
      000192                       1256 00103$:
                                   1257 ;	src/main.c:251: au8State = STATE_SELF;
      000192 7F 00            [12] 1258 	mov	r7,#0x00
                                   1259 ;	src/main.c:252: gu8UART = au8SelfID;
      000194 8E*01            [24] 1260 	mov	_gu8UART,r6
                                   1261 ;	src/main.c:253: print_esc(au8State);
      000196 75 82 00         [24] 1262 	mov	dpl,#0x00
      000199 C0 07            [24] 1263 	push	ar7
      00019B 12r00r7C         [24] 1264 	lcall	_print_esc
      00019E D0 07            [24] 1265 	pop	ar7
                                   1266 ;	src/main.c:255: }
      0001A0 80 43            [24] 1267 	sjmp	00111$
      0001A2                       1268 00110$:
                                   1269 ;	src/main.c:258: switch(au8State) {
      0001A2 BF 00 02         [24] 1270 	cjne	r7,#0x00,00147$
      0001A5 80 0A            [24] 1271 	sjmp	00105$
      0001A7                       1272 00147$:
      0001A7 BF 01 02         [24] 1273 	cjne	r7,#0x01,00148$
      0001AA 80 14            [24] 1274 	sjmp	00106$
      0001AC                       1275 00148$:
                                   1276 ;	src/main.c:259: case STATE_SELF :
      0001AC BF 02 36         [24] 1277 	cjne	r7,#0x02,00111$
      0001AF 80 1E            [24] 1278 	sjmp	00107$
      0001B1                       1279 00105$:
                                   1280 ;	src/main.c:260: gu8UART = au8SelfID;
      0001B1 85*05*01         [24] 1281 	mov	_gu8UART,_state_machine_PARM_3
                                   1282 ;	src/main.c:261: print_char(au8RxUART);
      0001B4 85*04 82         [24] 1283 	mov	dpl,_state_machine_PARM_2
      0001B7 C0 07            [24] 1284 	push	ar7
      0001B9 12r00rEB         [24] 1285 	lcall	_print_char
      0001BC D0 07            [24] 1286 	pop	ar7
                                   1287 ;	src/main.c:262: break;
                                   1288 ;	src/main.c:263: case STATE_CROSS :
      0001BE 80 25            [24] 1289 	sjmp	00111$
      0001C0                       1290 00106$:
                                   1291 ;	src/main.c:264: gu8UART = au8OtherID;
      0001C0 85*06*01         [24] 1292 	mov	_gu8UART,_state_machine_PARM_4
                                   1293 ;	src/main.c:265: print_char(au8RxUART);
      0001C3 85*04 82         [24] 1294 	mov	dpl,_state_machine_PARM_2
      0001C6 C0 07            [24] 1295 	push	ar7
      0001C8 12r00rEB         [24] 1296 	lcall	_print_char
      0001CB D0 07            [24] 1297 	pop	ar7
                                   1298 ;	src/main.c:266: break;
                                   1299 ;	src/main.c:267: case STATE_BOTH :
      0001CD 80 16            [24] 1300 	sjmp	00111$
      0001CF                       1301 00107$:
                                   1302 ;	src/main.c:268: gu8UART = au8SelfID;
      0001CF 85*05*01         [24] 1303 	mov	_gu8UART,_state_machine_PARM_3
                                   1304 ;	src/main.c:269: print_char(au8RxUART);
      0001D2 85*04 82         [24] 1305 	mov	dpl,_state_machine_PARM_2
      0001D5 C0 07            [24] 1306 	push	ar7
      0001D7 12r00rEB         [24] 1307 	lcall	_print_char
                                   1308 ;	src/main.c:270: gu8UART = au8OtherID;
      0001DA 85*06*01         [24] 1309 	mov	_gu8UART,_state_machine_PARM_4
                                   1310 ;	src/main.c:271: print_char(au8RxUART);
      0001DD 85*04 82         [24] 1311 	mov	dpl,_state_machine_PARM_2
      0001E0 12r00rEB         [24] 1312 	lcall	_print_char
      0001E3 D0 07            [24] 1313 	pop	ar7
                                   1314 ;	src/main.c:273: }
      0001E5                       1315 00111$:
                                   1316 ;	src/main.c:275: return au8State;
      0001E5 8F 82            [24] 1317 	mov	dpl,r7
                                   1318 ;	src/main.c:276: }
      0001E7 22               [24] 1319 	ret
                                   1320 ;------------------------------------------------------------
                                   1321 ;Allocation info for local variables in function 'Timer0_ISR'
                                   1322 ;------------------------------------------------------------
                                   1323 ;	src/main.c:278: void Timer0_ISR (void) interrupt(1)  //interrupt address is 0x000B
                                   1324 ;	-----------------------------------------
                                   1325 ;	 function Timer0_ISR
                                   1326 ;	-----------------------------------------
      0001E8                       1327 _Timer0_ISR:
                           00000F  1328 	ar7 = 0x0f
                           00000E  1329 	ar6 = 0x0e
                           00000D  1330 	ar5 = 0x0d
                           00000C  1331 	ar4 = 0x0c
                           00000B  1332 	ar3 = 0x0b
                           00000A  1333 	ar2 = 0x0a
                           000009  1334 	ar1 = 0x09
                           000008  1335 	ar0 = 0x08
      0001E8 C0 E0            [24] 1336 	push	acc
      0001EA C0 D0            [24] 1337 	push	psw
                                   1338 ;	src/main.c:280: TH0 = TH0_INIT;
      0001EC 75 8C FF         [24] 1339 	mov	_TH0,#0xff
                                   1340 ;	src/main.c:281: TL0 = TL0_INIT;
      0001EF 75 8A F3         [24] 1341 	mov	_TL0,#0xf3
                                   1342 ;	src/main.c:282: gu16TimeCnt++;
      0001F2 05*02            [12] 1343 	inc	_gu16TimeCnt
      0001F4 E4               [12] 1344 	clr	a
      0001F5 B5*02 02         [24] 1345 	cjne	a,_gu16TimeCnt,00103$
      0001F8 05*03            [12] 1346 	inc	(_gu16TimeCnt + 1)
      0001FA                       1347 00103$:
                                   1348 ;	src/main.c:291: } //void Timer0_ISR (void) __interrupt 1  //interrupt address is 0x000B
      0001FA D0 D0            [24] 1349 	pop	psw
      0001FC D0 E0            [24] 1350 	pop	acc
      0001FE 32               [24] 1351 	reti
                                   1352 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                   1353 ;	eliminated unneeded push/pop dpl
                                   1354 ;	eliminated unneeded push/pop dph
                                   1355 ;	eliminated unneeded push/pop b
                                   1356 ;------------------------------------------------------------
                                   1357 ;Allocation info for local variables in function 'pin_interrupt_isr'
                                   1358 ;------------------------------------------------------------
                                   1359 ;	src/main.c:293: void pin_interrupt_isr(void) interrupt(7)
                                   1360 ;	-----------------------------------------
                                   1361 ;	 function pin_interrupt_isr
                                   1362 ;	-----------------------------------------
      0001FF                       1363 _pin_interrupt_isr:
      0001FF C0 E0            [24] 1364 	push	acc
                                   1365 ;	src/main.c:295: if (PIF == 0x10) {
      000201 E5 EC            [12] 1366 	mov	a,_PIF
                                   1367 ;	src/main.c:297: PIF = 0;
      000203 75 EC 00         [24] 1368 	mov	_PIF,#0x00
                                   1369 ;	src/main.c:298: }// void pin_interrupt_isr (void) interrupt(7)
      000206 D0 E0            [24] 1370 	pop	acc
      000208 32               [24] 1371 	reti
                                   1372 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                   1373 ;	eliminated unneeded push/pop psw
                                   1374 ;	eliminated unneeded push/pop dpl
                                   1375 ;	eliminated unneeded push/pop dph
                                   1376 ;	eliminated unneeded push/pop b
                                   1377 ;------------------------------------------------------------
                                   1378 ;Allocation info for local variables in function 'chk_manchester'
                                   1379 ;------------------------------------------------------------
                                   1380 ;c                         Allocated to registers r7 
                                   1381 ;i                         Allocated to registers r6 
                                   1382 ;------------------------------------------------------------
                                   1383 ;	src/main.c:301: UINT8 chk_manchester(UINT8 c)
                                   1384 ;	-----------------------------------------
                                   1385 ;	 function chk_manchester
                                   1386 ;	-----------------------------------------
      000209                       1387 _chk_manchester:
                           000007  1388 	ar7 = 0x07
                           000006  1389 	ar6 = 0x06
                           000005  1390 	ar5 = 0x05
                           000004  1391 	ar4 = 0x04
                           000003  1392 	ar3 = 0x03
                           000002  1393 	ar2 = 0x02
                           000001  1394 	ar1 = 0x01
                           000000  1395 	ar0 = 0x00
      000209 AF 82            [24] 1396 	mov	r7,dpl
                                   1397 ;	src/main.c:304: for (i=0;i<4;i++) {
      00020B 7E 00            [12] 1398 	mov	r6,#0x00
      00020D                       1399 00104$:
                                   1400 ;	src/main.c:305: if (((c>>(2*i)) & 1) == ((c>>((2*i+1)))&1)) {
      00020D EE               [12] 1401 	mov	a,r6
      00020E 2E               [12] 1402 	add	a,r6
      00020F FD               [12] 1403 	mov	r5,a
      000210 8D F0            [24] 1404 	mov	b,r5
      000212 05 F0            [12] 1405 	inc	b
      000214 EF               [12] 1406 	mov	a,r7
      000215 80 02            [24] 1407 	sjmp	00121$
      000217                       1408 00120$:
      000217 C3               [12] 1409 	clr	c
      000218 13               [12] 1410 	rrc	a
      000219                       1411 00121$:
      000219 D5 F0 FB         [24] 1412 	djnz	b,00120$
      00021C FC               [12] 1413 	mov	r4,a
      00021D 53 04 01         [24] 1414 	anl	ar4,#0x01
      000220 7B 00            [12] 1415 	mov	r3,#0x00
      000222 ED               [12] 1416 	mov	a,r5
      000223 04               [12] 1417 	inc	a
      000224 F5 F0            [12] 1418 	mov	b,a
      000226 05 F0            [12] 1419 	inc	b
      000228 EF               [12] 1420 	mov	a,r7
      000229 80 02            [24] 1421 	sjmp	00123$
      00022B                       1422 00122$:
      00022B C3               [12] 1423 	clr	c
      00022C 13               [12] 1424 	rrc	a
      00022D                       1425 00123$:
      00022D D5 F0 FB         [24] 1426 	djnz	b,00122$
      000230 FD               [12] 1427 	mov	r5,a
      000231 53 05 01         [24] 1428 	anl	ar5,#0x01
      000234 7A 00            [12] 1429 	mov	r2,#0x00
      000236 EC               [12] 1430 	mov	a,r4
      000237 B5 05 08         [24] 1431 	cjne	a,ar5,00105$
      00023A EB               [12] 1432 	mov	a,r3
      00023B B5 02 04         [24] 1433 	cjne	a,ar2,00105$
                                   1434 ;	src/main.c:307: return 0;
      00023E 75 82 00         [24] 1435 	mov	dpl,#0x00
      000241 22               [24] 1436 	ret
      000242                       1437 00105$:
                                   1438 ;	src/main.c:304: for (i=0;i<4;i++) {
      000242 0E               [12] 1439 	inc	r6
      000243 BE 04 00         [24] 1440 	cjne	r6,#0x04,00126$
      000246                       1441 00126$:
      000246 40 C5            [24] 1442 	jc	00104$
                                   1443 ;	src/main.c:310: return 1;
      000248 75 82 01         [24] 1444 	mov	dpl,#0x01
                                   1445 ;	src/main.c:311: }
      00024B 22               [24] 1446 	ret
                                   1447 ;------------------------------------------------------------
                                   1448 ;Allocation info for local variables in function 'conv_manchester2nibble'
                                   1449 ;------------------------------------------------------------
                                   1450 ;c                         Allocated to registers r7 
                                   1451 ;i                         Allocated to registers r5 
                                   1452 ;u8Nibble                  Allocated to registers r6 
                                   1453 ;------------------------------------------------------------
                                   1454 ;	src/main.c:313: UINT8 conv_manchester2nibble(UINT8 c)
                                   1455 ;	-----------------------------------------
                                   1456 ;	 function conv_manchester2nibble
                                   1457 ;	-----------------------------------------
      00024C                       1458 _conv_manchester2nibble:
      00024C AF 82            [24] 1459 	mov	r7,dpl
                                   1460 ;	src/main.c:316: UINT8 u8Nibble = 0;
      00024E 7E 00            [12] 1461 	mov	r6,#0x00
                                   1462 ;	src/main.c:317: for (i=0;i<4;i++) {
      000250 7D 04            [12] 1463 	mov	r5,#0x04
      000252                       1464 00106$:
                                   1465 ;	src/main.c:318: if (c & 1) {
      000252 EF               [12] 1466 	mov	a,r7
      000253 30 E0 03         [24] 1467 	jnb	acc.0,00102$
                                   1468 ;	src/main.c:319: u8Nibble |= 0x80;
      000256 43 06 80         [24] 1469 	orl	ar6,#0x80
      000259                       1470 00102$:
                                   1471 ;	src/main.c:321: c >>= 2;
      000259 EF               [12] 1472 	mov	a,r7
      00025A 03               [12] 1473 	rr	a
      00025B 03               [12] 1474 	rr	a
      00025C 54 3F            [12] 1475 	anl	a,#0x3f
      00025E FF               [12] 1476 	mov	r7,a
                                   1477 ;	src/main.c:322: u8Nibble >>= 1;
      00025F EE               [12] 1478 	mov	a,r6
      000260 C3               [12] 1479 	clr	c
      000261 13               [12] 1480 	rrc	a
      000262 FE               [12] 1481 	mov	r6,a
      000263 ED               [12] 1482 	mov	a,r5
      000264 14               [12] 1483 	dec	a
                                   1484 ;	src/main.c:317: for (i=0;i<4;i++) {
      000265 FD               [12] 1485 	mov	r5,a
      000266 70 EA            [24] 1486 	jnz	00106$
                                   1487 ;	src/main.c:324: return u8Nibble;
      000268 8E 82            [24] 1488 	mov	dpl,r6
                                   1489 ;	src/main.c:325: }
      00026A 22               [24] 1490 	ret
                                   1491 ;------------------------------------------------------------
                                   1492 ;Allocation info for local variables in function 'conv_manchester2highnibble'
                                   1493 ;------------------------------------------------------------
                                   1494 ;c                         Allocated to registers r7 
                                   1495 ;i                         Allocated to registers r5 
                                   1496 ;u8Nibble                  Allocated to registers r6 
                                   1497 ;------------------------------------------------------------
                                   1498 ;	src/main.c:327: UINT8 conv_manchester2highnibble(UINT8 c)
                                   1499 ;	-----------------------------------------
                                   1500 ;	 function conv_manchester2highnibble
                                   1501 ;	-----------------------------------------
      00026B                       1502 _conv_manchester2highnibble:
      00026B AF 82            [24] 1503 	mov	r7,dpl
                                   1504 ;	src/main.c:330: UINT8 u8Nibble = 0;
      00026D 7E 00            [12] 1505 	mov	r6,#0x00
                                   1506 ;	src/main.c:331: for (i=0;i<4;i++) {
      00026F 7D 04            [12] 1507 	mov	r5,#0x04
      000271                       1508 00106$:
                                   1509 ;	src/main.c:332: u8Nibble >>= 1;
      000271 EE               [12] 1510 	mov	a,r6
      000272 C3               [12] 1511 	clr	c
      000273 13               [12] 1512 	rrc	a
      000274 FE               [12] 1513 	mov	r6,a
                                   1514 ;	src/main.c:333: if (c & 1) {
      000275 EF               [12] 1515 	mov	a,r7
      000276 30 E0 03         [24] 1516 	jnb	acc.0,00102$
                                   1517 ;	src/main.c:334: u8Nibble |= 0x80;
      000279 43 06 80         [24] 1518 	orl	ar6,#0x80
      00027C                       1519 00102$:
                                   1520 ;	src/main.c:336: c >>= 2;
      00027C EF               [12] 1521 	mov	a,r7
      00027D 03               [12] 1522 	rr	a
      00027E 03               [12] 1523 	rr	a
      00027F 54 3F            [12] 1524 	anl	a,#0x3f
      000281 FF               [12] 1525 	mov	r7,a
      000282 ED               [12] 1526 	mov	a,r5
      000283 14               [12] 1527 	dec	a
                                   1528 ;	src/main.c:331: for (i=0;i<4;i++) {
      000284 FD               [12] 1529 	mov	r5,a
      000285 70 EA            [24] 1530 	jnz	00106$
                                   1531 ;	src/main.c:338: return u8Nibble;
      000287 8E 82            [24] 1532 	mov	dpl,r6
                                   1533 ;	src/main.c:339: }
      000289 22               [24] 1534 	ret
                                   1535 ;------------------------------------------------------------
                                   1536 ;Allocation info for local variables in function 'MODIFY_HIRC_166'
                                   1537 ;------------------------------------------------------------
                                   1538 ;hircmap0                  Allocated to registers r7 
                                   1539 ;hircmap1                  Allocated to registers r6 
                                   1540 ;trimvalue16bit            Allocated to registers r7 r5 
                                   1541 ;------------------------------------------------------------
                                   1542 ;	src/main.c:341: void MODIFY_HIRC_166(void)
                                   1543 ;	-----------------------------------------
                                   1544 ;	 function MODIFY_HIRC_166
                                   1545 ;	-----------------------------------------
      00028A                       1546 _MODIFY_HIRC_166:
                                   1547 ;	src/main.c:346: if ((PCON&SET_BIT4)==SET_BIT4) {
      00028A AE 87            [24] 1548 	mov	r6,_PCON
      00028C 53 06 10         [24] 1549 	anl	ar6,#0x10
      00028F 7F 00            [12] 1550 	mov	r7,#0x00
      000291 BE 10 41         [24] 1551 	cjne	r6,#0x10,00103$
      000294 BF 00 3E         [24] 1552 	cjne	r7,#0x00,00103$
                                   1553 ;	src/main.c:347: hircmap0 = RCTRIM0;
      000297 AF 84            [24] 1554 	mov	r7,_RCTRIM0
                                   1555 ;	src/main.c:348: hircmap1 = RCTRIM1;
      000299 AE 85            [24] 1556 	mov	r6,_RCTRIM1
                                   1557 ;	src/main.c:349: trimvalue16bit = ((hircmap0<<1)+(hircmap1&0x01));
      00029B 7D 00            [12] 1558 	mov	r5,#0x00
      00029D EF               [12] 1559 	mov	a,r7
      00029E 2F               [12] 1560 	add	a,r7
      00029F FF               [12] 1561 	mov	r7,a
      0002A0 ED               [12] 1562 	mov	a,r5
      0002A1 33               [12] 1563 	rlc	a
      0002A2 FD               [12] 1564 	mov	r5,a
      0002A3 53 06 01         [24] 1565 	anl	ar6,#0x01
      0002A6 7C 00            [12] 1566 	mov	r4,#0x00
      0002A8 EE               [12] 1567 	mov	a,r6
      0002A9 2F               [12] 1568 	add	a,r7
      0002AA FF               [12] 1569 	mov	r7,a
      0002AB EC               [12] 1570 	mov	a,r4
      0002AC 3D               [12] 1571 	addc	a,r5
      0002AD FD               [12] 1572 	mov	r5,a
                                   1573 ;	src/main.c:350: trimvalue16bit = trimvalue16bit - 15;
      0002AE EF               [12] 1574 	mov	a,r7
      0002AF 24 F1            [12] 1575 	add	a,#0xf1
      0002B1 FF               [12] 1576 	mov	r7,a
      0002B2 ED               [12] 1577 	mov	a,r5
      0002B3 34 FF            [12] 1578 	addc	a,#0xff
      0002B5 FD               [12] 1579 	mov	r5,a
                                   1580 ;	src/main.c:351: hircmap1 = trimvalue16bit&0x01;
      0002B6 8F 06            [24] 1581 	mov	ar6,r7
      0002B8 53 06 01         [24] 1582 	anl	ar6,#0x01
                                   1583 ;	src/main.c:352: hircmap0 = trimvalue16bit>>1;
      0002BB ED               [12] 1584 	mov	a,r5
      0002BC C3               [12] 1585 	clr	c
      0002BD 13               [12] 1586 	rrc	a
      0002BE CF               [12] 1587 	xch	a,r7
      0002BF 13               [12] 1588 	rrc	a
      0002C0 CF               [12] 1589 	xch	a,r7
      0002C1 FD               [12] 1590 	mov	r5,a
                                   1591 ;	src/main.c:353: TA=0XAA;
      0002C2 75 C7 AA         [24] 1592 	mov	_TA,#0xaa
                                   1593 ;	src/main.c:354: TA=0X55;
      0002C5 75 C7 55         [24] 1594 	mov	_TA,#0x55
                                   1595 ;	src/main.c:355: RCTRIM0 = hircmap0;
      0002C8 8F 84            [24] 1596 	mov	_RCTRIM0,r7
                                   1597 ;	src/main.c:356: TA=0XAA;
      0002CA 75 C7 AA         [24] 1598 	mov	_TA,#0xaa
                                   1599 ;	src/main.c:357: TA=0X55;
      0002CD 75 C7 55         [24] 1600 	mov	_TA,#0x55
                                   1601 ;	src/main.c:358: RCTRIM1 = hircmap1;
      0002D0 8E 85            [24] 1602 	mov	_RCTRIM1,r6
                                   1603 ;	src/main.c:360: PCON &= CLR_BIT4;
      0002D2 53 87 EF         [24] 1604 	anl	_PCON,#0xef
      0002D5                       1605 00103$:
                                   1606 ;	src/main.c:362: }
      0002D5 22               [24] 1607 	ret
                                   1608 ;------------------------------------------------------------
                                   1609 ;Allocation info for local variables in function 'disp_help'
                                   1610 ;------------------------------------------------------------
                                   1611 ;au8Code                   Allocated to registers r7 
                                   1612 ;------------------------------------------------------------
                                   1613 ;	src/main.c:363: void disp_help(UINT8 au8Code)
                                   1614 ;	-----------------------------------------
                                   1615 ;	 function disp_help
                                   1616 ;	-----------------------------------------
      0002D6                       1617 _disp_help:
      0002D6 AF 82            [24] 1618 	mov	r7,dpl
                                   1619 ;	src/main.c:365: gu8UART = 1;
      0002D8 75*01 01         [24] 1620 	mov	_gu8UART,#0x01
                                   1621 ;	src/main.c:366: switch(au8Code) {
      0002DB BF 31 01         [24] 1622 	cjne	r7,#0x31,00165$
      0002DE 22               [24] 1623 	ret
      0002DF                       1624 00165$:
      0002DF BF 32 01         [24] 1625 	cjne	r7,#0x32,00166$
      0002E2 22               [24] 1626 	ret
      0002E3                       1627 00166$:
      0002E3 BF 33 02         [24] 1628 	cjne	r7,#0x33,00167$
      0002E6 80 32            [24] 1629 	sjmp	00103$
      0002E8                       1630 00167$:
      0002E8 BF 34 01         [24] 1631 	cjne	r7,#0x34,00168$
      0002EB 22               [24] 1632 	ret
      0002EC                       1633 00168$:
      0002EC BF 50 02         [24] 1634 	cjne	r7,#0x50,00169$
      0002EF 80 49            [24] 1635 	sjmp	00106$
      0002F1                       1636 00169$:
      0002F1 BF 53 03         [24] 1637 	cjne	r7,#0x53,00170$
      0002F4 02r03r7A         [24] 1638 	ljmp	00110$
      0002F7                       1639 00170$:
      0002F7 BF 54 02         [24] 1640 	cjne	r7,#0x54,00171$
      0002FA 80 5E            [24] 1641 	sjmp	00108$
      0002FC                       1642 00171$:
      0002FC BF 56 03         [24] 1643 	cjne	r7,#0x56,00172$
      0002FF 02r03r8A         [24] 1644 	ljmp	00112$
      000302                       1645 00172$:
      000302 BF 70 02         [24] 1646 	cjne	r7,#0x70,00173$
      000305 80 23            [24] 1647 	sjmp	00105$
      000307                       1648 00173$:
      000307 BF 73 02         [24] 1649 	cjne	r7,#0x73,00174$
      00030A 80 5E            [24] 1650 	sjmp	00109$
      00030C                       1651 00174$:
      00030C BF 74 02         [24] 1652 	cjne	r7,#0x74,00175$
      00030F 80 39            [24] 1653 	sjmp	00107$
      000311                       1654 00175$:
      000311 BF 76 03         [24] 1655 	cjne	r7,#0x76,00176$
      000314 02r03r8A         [24] 1656 	ljmp	00112$
      000317                       1657 00176$:
      000317 02r03r9A         [24] 1658 	ljmp	00113$
                                   1659 ;	src/main.c:371: case '3' :
      00031A                       1660 00103$:
                                   1661 ;	src/main.c:372: printf_fast_f("Idle preamble on/off\r\n");
      00031A 74r4B            [12] 1662 	mov	a,#___str_8
      00031C C0 E0            [24] 1663 	push	acc
      00031E 74s00            [12] 1664 	mov	a,#(___str_8 >> 8)
      000320 C0 E0            [24] 1665 	push	acc
      000322 12r00r00         [24] 1666 	lcall	_printf_fast_f
      000325 15 81            [12] 1667 	dec	sp
      000327 15 81            [12] 1668 	dec	sp
                                   1669 ;	src/main.c:373: break;
      000329 22               [24] 1670 	ret
                                   1671 ;	src/main.c:376: case 'p' :
      00032A                       1672 00105$:
                                   1673 ;	src/main.c:377: printf_fast_f("LineFi Power Off\r\n");
      00032A 74r62            [12] 1674 	mov	a,#___str_9
      00032C C0 E0            [24] 1675 	push	acc
      00032E 74s00            [12] 1676 	mov	a,#(___str_9 >> 8)
      000330 C0 E0            [24] 1677 	push	acc
      000332 12r00r00         [24] 1678 	lcall	_printf_fast_f
      000335 15 81            [12] 1679 	dec	sp
      000337 15 81            [12] 1680 	dec	sp
                                   1681 ;	src/main.c:378: break;
      000339 22               [24] 1682 	ret
                                   1683 ;	src/main.c:379: case 'P' :
      00033A                       1684 00106$:
                                   1685 ;	src/main.c:380: printf_fast_f("LineFi Power On\r\n");
      00033A 74r75            [12] 1686 	mov	a,#___str_10
      00033C C0 E0            [24] 1687 	push	acc
      00033E 74s00            [12] 1688 	mov	a,#(___str_10 >> 8)
      000340 C0 E0            [24] 1689 	push	acc
      000342 12r00r00         [24] 1690 	lcall	_printf_fast_f
      000345 15 81            [12] 1691 	dec	sp
      000347 15 81            [12] 1692 	dec	sp
                                   1693 ;	src/main.c:381: break;
      000349 22               [24] 1694 	ret
                                   1695 ;	src/main.c:382: case 't' :
      00034A                       1696 00107$:
                                   1697 ;	src/main.c:383: printf_fast_f("LineFi Uart Tx Low\r\n");
      00034A 74r87            [12] 1698 	mov	a,#___str_11
      00034C C0 E0            [24] 1699 	push	acc
      00034E 74s00            [12] 1700 	mov	a,#(___str_11 >> 8)
      000350 C0 E0            [24] 1701 	push	acc
      000352 12r00r00         [24] 1702 	lcall	_printf_fast_f
      000355 15 81            [12] 1703 	dec	sp
      000357 15 81            [12] 1704 	dec	sp
                                   1705 ;	src/main.c:384: break;
      000359 22               [24] 1706 	ret
                                   1707 ;	src/main.c:385: case 'T' :
      00035A                       1708 00108$:
                                   1709 ;	src/main.c:386: printf_fast_f("LineFi Uart Tx High\r\n");
      00035A 74r9C            [12] 1710 	mov	a,#___str_12
      00035C C0 E0            [24] 1711 	push	acc
      00035E 74s00            [12] 1712 	mov	a,#(___str_12 >> 8)
      000360 C0 E0            [24] 1713 	push	acc
      000362 12r00r00         [24] 1714 	lcall	_printf_fast_f
      000365 15 81            [12] 1715 	dec	sp
      000367 15 81            [12] 1716 	dec	sp
                                   1717 ;	src/main.c:387: break;
      000369 22               [24] 1718 	ret
                                   1719 ;	src/main.c:388: case 's' :
      00036A                       1720 00109$:
                                   1721 ;	src/main.c:389: printf_fast_f("LineFi CSC rx FSM Off\r\n");
      00036A 74rB2            [12] 1722 	mov	a,#___str_13
      00036C C0 E0            [24] 1723 	push	acc
      00036E 74s00            [12] 1724 	mov	a,#(___str_13 >> 8)
      000370 C0 E0            [24] 1725 	push	acc
      000372 12r00r00         [24] 1726 	lcall	_printf_fast_f
      000375 15 81            [12] 1727 	dec	sp
      000377 15 81            [12] 1728 	dec	sp
                                   1729 ;	src/main.c:390: break;
      000379 22               [24] 1730 	ret
                                   1731 ;	src/main.c:391: case 'S' :
      00037A                       1732 00110$:
                                   1733 ;	src/main.c:392: printf_fast_f("LineFi CSC rx FSM ON\r\n");
      00037A 74rCA            [12] 1734 	mov	a,#___str_14
      00037C C0 E0            [24] 1735 	push	acc
      00037E 74s00            [12] 1736 	mov	a,#(___str_14 >> 8)
      000380 C0 E0            [24] 1737 	push	acc
      000382 12r00r00         [24] 1738 	lcall	_printf_fast_f
      000385 15 81            [12] 1739 	dec	sp
      000387 15 81            [12] 1740 	dec	sp
                                   1741 ;	src/main.c:393: break;
                                   1742 ;	src/main.c:394: case 'v' : case 'V' :
      000389 22               [24] 1743 	ret
      00038A                       1744 00112$:
                                   1745 ;	src/main.c:395: printf_fast_f(__VERSION__);
      00038A 74rE1            [12] 1746 	mov	a,#___str_15
      00038C C0 E0            [24] 1747 	push	acc
      00038E 74s00            [12] 1748 	mov	a,#(___str_15 >> 8)
      000390 C0 E0            [24] 1749 	push	acc
      000392 12r00r00         [24] 1750 	lcall	_printf_fast_f
      000395 15 81            [12] 1751 	dec	sp
      000397 15 81            [12] 1752 	dec	sp
                                   1753 ;	src/main.c:396: break;
                                   1754 ;	src/main.c:397: default :
      000399 22               [24] 1755 	ret
      00039A                       1756 00113$:
                                   1757 ;	src/main.c:398: printf_fast_f("1: downlink packet 1\r\n");
      00039A 74rFB            [12] 1758 	mov	a,#___str_16
      00039C C0 E0            [24] 1759 	push	acc
      00039E 74s00            [12] 1760 	mov	a,#(___str_16 >> 8)
      0003A0 C0 E0            [24] 1761 	push	acc
      0003A2 12r00r00         [24] 1762 	lcall	_printf_fast_f
      0003A5 15 81            [12] 1763 	dec	sp
      0003A7 15 81            [12] 1764 	dec	sp
                                   1765 ;	src/main.c:399: printf_fast_f("2: downlink packet 2\r\n");
      0003A9 74r12            [12] 1766 	mov	a,#___str_17
      0003AB C0 E0            [24] 1767 	push	acc
      0003AD 74s01            [12] 1768 	mov	a,#(___str_17 >> 8)
      0003AF C0 E0            [24] 1769 	push	acc
      0003B1 12r00r00         [24] 1770 	lcall	_printf_fast_f
      0003B4 15 81            [12] 1771 	dec	sp
      0003B6 15 81            [12] 1772 	dec	sp
                                   1773 ;	src/main.c:400: printf_fast_f("3: uplink idle preamble on/off\r\n");
      0003B8 74r29            [12] 1774 	mov	a,#___str_18
      0003BA C0 E0            [24] 1775 	push	acc
      0003BC 74s01            [12] 1776 	mov	a,#(___str_18 >> 8)
      0003BE C0 E0            [24] 1777 	push	acc
      0003C0 12r00r00         [24] 1778 	lcall	_printf_fast_f
      0003C3 15 81            [12] 1779 	dec	sp
      0003C5 15 81            [12] 1780 	dec	sp
                                   1781 ;	src/main.c:401: printf_fast_f("p/P: LineFi Power off/on\r\n");
      0003C7 74r4A            [12] 1782 	mov	a,#___str_19
      0003C9 C0 E0            [24] 1783 	push	acc
      0003CB 74s01            [12] 1784 	mov	a,#(___str_19 >> 8)
      0003CD C0 E0            [24] 1785 	push	acc
      0003CF 12r00r00         [24] 1786 	lcall	_printf_fast_f
      0003D2 15 81            [12] 1787 	dec	sp
      0003D4 15 81            [12] 1788 	dec	sp
                                   1789 ;	src/main.c:402: printf_fast_f("t/T: LineFi Uart Tx Low/High\r\n");
      0003D6 74r65            [12] 1790 	mov	a,#___str_20
      0003D8 C0 E0            [24] 1791 	push	acc
      0003DA 74s01            [12] 1792 	mov	a,#(___str_20 >> 8)
      0003DC C0 E0            [24] 1793 	push	acc
      0003DE 12r00r00         [24] 1794 	lcall	_printf_fast_f
      0003E1 15 81            [12] 1795 	dec	sp
      0003E3 15 81            [12] 1796 	dec	sp
                                   1797 ;	src/main.c:403: printf_fast_f("s/S: LineFie CSC Rx FSM off/on\r\n");
      0003E5 74r84            [12] 1798 	mov	a,#___str_21
      0003E7 C0 E0            [24] 1799 	push	acc
      0003E9 74s01            [12] 1800 	mov	a,#(___str_21 >> 8)
      0003EB C0 E0            [24] 1801 	push	acc
      0003ED 12r00r00         [24] 1802 	lcall	_printf_fast_f
      0003F0 15 81            [12] 1803 	dec	sp
      0003F2 15 81            [12] 1804 	dec	sp
                                   1805 ;	src/main.c:404: printf_fast_f("test procedure: p -> P -> T -> S -> 1 or 2\r\n");
      0003F4 74rA5            [12] 1806 	mov	a,#___str_22
      0003F6 C0 E0            [24] 1807 	push	acc
      0003F8 74s01            [12] 1808 	mov	a,#(___str_22 >> 8)
      0003FA C0 E0            [24] 1809 	push	acc
      0003FC 12r00r00         [24] 1810 	lcall	_printf_fast_f
      0003FF 15 81            [12] 1811 	dec	sp
      000401 15 81            [12] 1812 	dec	sp
                                   1813 ;	src/main.c:406: }
                                   1814 ;	src/main.c:407: }
      000403 22               [24] 1815 	ret
                                   1816 ;------------------------------------------------------------
                                   1817 ;Allocation info for local variables in function 'gpio_setup'
                                   1818 ;------------------------------------------------------------
                                   1819 ;	src/main.c:409: void gpio_setup()
                                   1820 ;	-----------------------------------------
                                   1821 ;	 function gpio_setup
                                   1822 ;	-----------------------------------------
      000404                       1823 _gpio_setup:
                                   1824 ;	src/main.c:428: Set_All_GPIO_Quasi_Mode;
      000404 75 B1 00         [24] 1825 	mov	_P0M1,#0x00
      000407 75 B2 00         [24] 1826 	mov	_P0M2,#0x00
      00040A 75 B3 00         [24] 1827 	mov	_P1M1,#0x00
      00040D 75 B4 00         [24] 1828 	mov	_P1M2,#0x00
      000410 75 AC 00         [24] 1829 	mov	_P3M1,#0x00
      000413 75 AD 00         [24] 1830 	mov	_P3M2,#0x00
                                   1831 ;	src/main.c:430: P15_Input_Mode;
      000416 43 B3 20         [24] 1832 	orl	_P1M1,#0x20
      000419 53 B4 DF         [24] 1833 	anl	_P1M2,#0xdf
                                   1834 ;	src/main.c:431: P02_Input_Mode;
      00041C 43 B1 04         [24] 1835 	orl	_P0M1,#0x04
      00041F 53 B2 FB         [24] 1836 	anl	_P0M2,#0xfb
                                   1837 ;	src/main.c:432: P07_Input_Mode;
      000422 43 B1 80         [24] 1838 	orl	_P0M1,#0x80
      000425 53 B2 7F         [24] 1839 	anl	_P0M2,#0x7f
                                   1840 ;	src/main.c:434: P16_PushPull_Mode;
      000428 53 B3 BF         [24] 1841 	anl	_P1M1,#0xbf
      00042B 43 B4 40         [24] 1842 	orl	_P1M2,#0x40
                                   1843 ;	src/main.c:435: P13_PushPull_Mode;
      00042E 53 B3 F7         [24] 1844 	anl	_P1M1,#0xf7
      000431 43 B4 08         [24] 1845 	orl	_P1M2,#0x08
                                   1846 ;	src/main.c:436: P14_PushPull_Mode;
      000434 53 B3 EF         [24] 1847 	anl	_P1M1,#0xef
      000437 43 B4 10         [24] 1848 	orl	_P1M2,#0x10
                                   1849 ;	src/main.c:437: P12_PushPull_Mode;
      00043A 53 B3 FB         [24] 1850 	anl	_P1M1,#0xfb
      00043D 43 B4 04         [24] 1851 	orl	_P1M2,#0x04
                                   1852 ;	src/main.c:438: P11_PushPull_Mode;
      000440 53 B3 FD         [24] 1853 	anl	_P1M1,#0xfd
      000443 43 B4 02         [24] 1854 	orl	_P1M2,#0x02
                                   1855 ;	src/main.c:439: P10_PushPull_Mode;
      000446 53 B3 FE         [24] 1856 	anl	_P1M1,#0xfe
      000449 43 B4 01         [24] 1857 	orl	_P1M2,#0x01
                                   1858 ;	src/main.c:440: P00_PushPull_Mode;
      00044C 53 B1 FE         [24] 1859 	anl	_P0M1,#0xfe
      00044F 43 B2 01         [24] 1860 	orl	_P0M2,#0x01
                                   1861 ;	src/main.c:441: P01_PushPull_Mode;
      000452 53 B1 FD         [24] 1862 	anl	_P0M1,#0xfd
      000455 43 B2 02         [24] 1863 	orl	_P0M2,#0x02
                                   1864 ;	src/main.c:442: P04_PushPull_Mode;
      000458 53 B1 EF         [24] 1865 	anl	_P0M1,#0xef
      00045B 43 B2 10         [24] 1866 	orl	_P0M2,#0x10
                                   1867 ;	src/main.c:443: P03_PushPull_Mode;
      00045E 53 B1 F7         [24] 1868 	anl	_P0M1,#0xf7
      000461 43 B2 08         [24] 1869 	orl	_P0M2,#0x08
                                   1870 ;	src/main.c:445: UART_TX = 0;
                                   1871 ;	assignBit
      000464 C2 96            [12] 1872 	clr	_P16
                                   1873 ;	src/main.c:446: LED_B = 1;
                                   1874 ;	assignBit
      000466 D2 92            [12] 1875 	setb	_P12
                                   1876 ;	src/main.c:447: LED_G = 1;
                                   1877 ;	assignBit
      000468 D2 93            [12] 1878 	setb	_P13
                                   1879 ;	src/main.c:448: LED_R = 1;
                                   1880 ;	assignBit
      00046A D2 94            [12] 1881 	setb	_P14
                                   1882 ;	src/main.c:450: MOTOR_CW = 0;
                                   1883 ;	assignBit
      00046C C2 80            [12] 1884 	clr	_P00
                                   1885 ;	src/main.c:451: MOTOR_CCW = 0;
                                   1886 ;	assignBit
      00046E C2 81            [12] 1887 	clr	_P01
                                   1888 ;	src/main.c:452: SEL_RX_POL = 0;
                                   1889 ;	assignBit
      000470 C2 84            [12] 1890 	clr	_P04
                                   1891 ;	src/main.c:453: PWR_OUT = 0;
                                   1892 ;	assignBit
      000472 C2 83            [12] 1893 	clr	_P03
                                   1894 ;	src/main.c:454: }
      000474 22               [24] 1895 	ret
                                   1896 ;------------------------------------------------------------
                                   1897 ;Allocation info for local variables in function 'state_switches'
                                   1898 ;------------------------------------------------------------
                                   1899 ;su8PrevSW                 Allocated with name '_state_switches_su8PrevSW_65536_96'
                                   1900 ;apu8SwNum                 Allocated with name '_state_switches_PARM_2'
                                   1901 ;au8SW                     Allocated to registers r7 
                                   1902 ;i                         Allocated to registers r2 
                                   1903 ;u8Result                  Allocated to registers r6 
                                   1904 ;------------------------------------------------------------
                                   1905 ;	src/main.c:472: UINT8 state_switches(UINT8 au8SW, UINT8 *apu8SwNum)
                                   1906 ;	-----------------------------------------
                                   1907 ;	 function state_switches
                                   1908 ;	-----------------------------------------
      000475                       1909 _state_switches:
      000475 AF 82            [24] 1910 	mov	r7,dpl
                                   1911 ;	src/main.c:477: UINT8 u8Result = SW_NONE;
      000477 7E 04            [12] 1912 	mov	r6,#0x04
                                   1913 ;	src/main.c:478: if (su8PrevSW == au8SW) {
      000479 EF               [12] 1914 	mov	a,r7
      00047A B5*07 14         [24] 1915 	cjne	a,_state_switches_su8PrevSW_65536_96,00102$
                                   1916 ;	src/main.c:479: *apu8SwNum = 0;
      00047D AB*00            [24] 1917 	mov	r3,_state_switches_PARM_2
      00047F AC*01            [24] 1918 	mov	r4,(_state_switches_PARM_2 + 1)
      000481 AD*02            [24] 1919 	mov	r5,(_state_switches_PARM_2 + 2)
      000483 8B 82            [24] 1920 	mov	dpl,r3
      000485 8C 83            [24] 1921 	mov	dph,r4
      000487 8D F0            [24] 1922 	mov	b,r5
      000489 E4               [12] 1923 	clr	a
      00048A 12r00r00         [24] 1924 	lcall	__gptrput
                                   1925 ;	src/main.c:480: return SW_NONE;
      00048D 75 82 04         [24] 1926 	mov	dpl,#0x04
      000490 22               [24] 1927 	ret
      000491                       1928 00102$:
                                   1929 ;	src/main.c:488: *apu8SwNum = 0;
      000491 AB*00            [24] 1930 	mov	r3,_state_switches_PARM_2
      000493 AC*01            [24] 1931 	mov	r4,(_state_switches_PARM_2 + 1)
      000495 AD*02            [24] 1932 	mov	r5,(_state_switches_PARM_2 + 2)
      000497 8B 82            [24] 1933 	mov	dpl,r3
      000499 8C 83            [24] 1934 	mov	dph,r4
      00049B 8D F0            [24] 1935 	mov	b,r5
      00049D E4               [12] 1936 	clr	a
      00049E 12r00r00         [24] 1937 	lcall	__gptrput
                                   1938 ;	src/main.c:490: for (i=0;i<5;i++) {
      0004A1 7A 00            [12] 1939 	mov	r2,#0x00
      0004A3                       1940 00113$:
                                   1941 ;	src/main.c:491: switch((su8PrevSW>>i)&1) {
      0004A3 8A F0            [24] 1942 	mov	b,r2
      0004A5 05 F0            [12] 1943 	inc	b
      0004A7 E5*07            [12] 1944 	mov	a,_state_switches_su8PrevSW_65536_96
      0004A9 80 02            [24] 1945 	sjmp	00153$
      0004AB                       1946 00152$:
      0004AB C3               [12] 1947 	clr	c
      0004AC 13               [12] 1948 	rrc	a
      0004AD                       1949 00153$:
      0004AD D5 F0 FB         [24] 1950 	djnz	b,00152$
      0004B0 F8               [12] 1951 	mov	r0,a
      0004B1 53 00 01         [24] 1952 	anl	ar0,#0x01
      0004B4 79 00            [12] 1953 	mov	r1,#0x00
      0004B6 B8 00 05         [24] 1954 	cjne	r0,#0x00,00154$
      0004B9 B9 00 02         [24] 1955 	cjne	r1,#0x00,00154$
      0004BC 80 55            [24] 1956 	sjmp	00107$
      0004BE                       1957 00154$:
      0004BE B8 01 05         [24] 1958 	cjne	r0,#0x01,00155$
      0004C1 B9 00 02         [24] 1959 	cjne	r1,#0x00,00155$
      0004C4 80 03            [24] 1960 	sjmp	00156$
      0004C6                       1961 00155$:
      0004C6 02r05r5E         [24] 1962 	ljmp	00114$
      0004C9                       1963 00156$:
                                   1964 ;	src/main.c:493: switch((au8SW>>i)&1) {
      0004C9 8A F0            [24] 1965 	mov	b,r2
      0004CB 05 F0            [12] 1966 	inc	b
      0004CD EF               [12] 1967 	mov	a,r7
      0004CE 80 02            [24] 1968 	sjmp	00158$
      0004D0                       1969 00157$:
      0004D0 C3               [12] 1970 	clr	c
      0004D1 13               [12] 1971 	rrc	a
      0004D2                       1972 00158$:
      0004D2 D5 F0 FB         [24] 1973 	djnz	b,00157$
      0004D5 F8               [12] 1974 	mov	r0,a
      0004D6 53 00 01         [24] 1975 	anl	ar0,#0x01
      0004D9 79 00            [12] 1976 	mov	r1,#0x00
      0004DB B8 00 05         [24] 1977 	cjne	r0,#0x00,00159$
      0004DE B9 00 02         [24] 1978 	cjne	r1,#0x00,00159$
      0004E1 80 03            [24] 1979 	sjmp	00160$
      0004E3                       1980 00159$:
      0004E3 02r05r5E         [24] 1981 	ljmp	00114$
      0004E6                       1982 00160$:
                                   1983 ;	src/main.c:497: su8PrevSW = au8SW;
      0004E6 8F*07            [24] 1984 	mov	_state_switches_su8PrevSW_65536_96,r7
                                   1985 ;	src/main.c:498: *apu8SwNum |= 1<<i;
      0004E8 8B 82            [24] 1986 	mov	dpl,r3
      0004EA 8C 83            [24] 1987 	mov	dph,r4
      0004EC 8D F0            [24] 1988 	mov	b,r5
      0004EE 12r00r00         [24] 1989 	lcall	__gptrget
      0004F1 F9               [12] 1990 	mov	r1,a
      0004F2 8A 00            [24] 1991 	mov	ar0,r2
      0004F4 88 F0            [24] 1992 	mov	b,r0
      0004F6 05 F0            [12] 1993 	inc	b
      0004F8 74 01            [12] 1994 	mov	a,#0x01
      0004FA 80 02            [24] 1995 	sjmp	00163$
      0004FC                       1996 00161$:
      0004FC 25 E0            [12] 1997 	add	a,acc
      0004FE                       1998 00163$:
      0004FE D5 F0 FB         [24] 1999 	djnz	b,00161$
      000501 F8               [12] 2000 	mov	r0,a
      000502 E9               [12] 2001 	mov	a,r1
      000503 42 00            [12] 2002 	orl	ar0,a
      000505 8B 82            [24] 2003 	mov	dpl,r3
      000507 8C 83            [24] 2004 	mov	dph,r4
      000509 8D F0            [24] 2005 	mov	b,r5
      00050B E8               [12] 2006 	mov	a,r0
      00050C 12r00r00         [24] 2007 	lcall	__gptrput
                                   2008 ;	src/main.c:499: u8Result = SW_OFF;
      00050F 7E 00            [12] 2009 	mov	r6,#0x00
                                   2010 ;	src/main.c:503: break;
                                   2011 ;	src/main.c:504: case SW_OFF :
      000511 80 4B            [24] 2012 	sjmp	00114$
      000513                       2013 00107$:
                                   2014 ;	src/main.c:505: switch((au8SW>>i)&1) {
      000513 8A F0            [24] 2015 	mov	b,r2
      000515 05 F0            [12] 2016 	inc	b
      000517 EF               [12] 2017 	mov	a,r7
      000518 80 02            [24] 2018 	sjmp	00165$
      00051A                       2019 00164$:
      00051A C3               [12] 2020 	clr	c
      00051B 13               [12] 2021 	rrc	a
      00051C                       2022 00165$:
      00051C D5 F0 FB         [24] 2023 	djnz	b,00164$
      00051F F8               [12] 2024 	mov	r0,a
      000520 53 00 01         [24] 2025 	anl	ar0,#0x01
      000523 79 00            [12] 2026 	mov	r1,#0x00
      000525 B8 00 05         [24] 2027 	cjne	r0,#0x00,00166$
      000528 B9 00 02         [24] 2028 	cjne	r1,#0x00,00166$
      00052B 80 31            [24] 2029 	sjmp	00114$
      00052D                       2030 00166$:
      00052D B8 01 2E         [24] 2031 	cjne	r0,#0x01,00114$
      000530 B9 00 2B         [24] 2032 	cjne	r1,#0x00,00114$
                                   2033 ;	src/main.c:507: su8PrevSW = au8SW;
      000533 8F*07            [24] 2034 	mov	_state_switches_su8PrevSW_65536_96,r7
                                   2035 ;	src/main.c:508: *apu8SwNum |= 1<<i;
      000535 8B 82            [24] 2036 	mov	dpl,r3
      000537 8C 83            [24] 2037 	mov	dph,r4
      000539 8D F0            [24] 2038 	mov	b,r5
      00053B 12r00r00         [24] 2039 	lcall	__gptrget
      00053E F9               [12] 2040 	mov	r1,a
      00053F 8A 00            [24] 2041 	mov	ar0,r2
      000541 88 F0            [24] 2042 	mov	b,r0
      000543 05 F0            [12] 2043 	inc	b
      000545 74 01            [12] 2044 	mov	a,#0x01
      000547 80 02            [24] 2045 	sjmp	00171$
      000549                       2046 00169$:
      000549 25 E0            [12] 2047 	add	a,acc
      00054B                       2048 00171$:
      00054B D5 F0 FB         [24] 2049 	djnz	b,00169$
      00054E F8               [12] 2050 	mov	r0,a
      00054F E9               [12] 2051 	mov	a,r1
      000550 42 00            [12] 2052 	orl	ar0,a
      000552 8B 82            [24] 2053 	mov	dpl,r3
      000554 8C 83            [24] 2054 	mov	dph,r4
      000556 8D F0            [24] 2055 	mov	b,r5
      000558 E8               [12] 2056 	mov	a,r0
      000559 12r00r00         [24] 2057 	lcall	__gptrput
                                   2058 ;	src/main.c:509: u8Result = SW_ON;
      00055C 7E 01            [12] 2059 	mov	r6,#0x01
                                   2060 ;	src/main.c:517: }
      00055E                       2061 00114$:
                                   2062 ;	src/main.c:490: for (i=0;i<5;i++) {
      00055E 0A               [12] 2063 	inc	r2
      00055F BA 05 00         [24] 2064 	cjne	r2,#0x05,00172$
      000562                       2065 00172$:
      000562 50 03            [24] 2066 	jnc	00173$
      000564 02r04rA3         [24] 2067 	ljmp	00113$
      000567                       2068 00173$:
                                   2069 ;	src/main.c:521: return u8Result;
      000567 8E 82            [24] 2070 	mov	dpl,r6
                                   2071 ;	src/main.c:609: }
      000569 22               [24] 2072 	ret
                                   2073 ;------------------------------------------------------------
                                   2074 ;Allocation info for local variables in function 'ctrl_rgbled_motor'
                                   2075 ;------------------------------------------------------------
                                   2076 ;u8RxUART                  Allocated to registers r7 
                                   2077 ;------------------------------------------------------------
                                   2078 ;	src/main.c:611: void ctrl_rgbled_motor(UINT8 u8RxUART)
                                   2079 ;	-----------------------------------------
                                   2080 ;	 function ctrl_rgbled_motor
                                   2081 ;	-----------------------------------------
      00056A                       2082 _ctrl_rgbled_motor:
                                   2083 ;	src/main.c:615: if (u8RxUART) {
      00056A E5 82            [12] 2084 	mov	a,dpl
      00056C FF               [12] 2085 	mov	r7,a
      00056D 60 54            [24] 2086 	jz	00117$
                                   2087 ;	src/main.c:616: if (u8RxUART&(1<<0)) {
      00056F EF               [12] 2088 	mov	a,r7
      000570 30 E0 02         [24] 2089 	jnb	acc.0,00102$
                                   2090 ;	src/main.c:617: TOGGLE(LED_R);
      000573 B2 94            [12] 2091 	cpl	_P14
      000575                       2092 00102$:
                                   2093 ;	src/main.c:620: if (u8RxUART&(1<<1)) {
      000575 EF               [12] 2094 	mov	a,r7
      000576 30 E1 02         [24] 2095 	jnb	acc.1,00104$
                                   2096 ;	src/main.c:621: TOGGLE(LED_G);
      000579 B2 93            [12] 2097 	cpl	_P13
      00057B                       2098 00104$:
                                   2099 ;	src/main.c:624: if (u8RxUART&(1<<2)) {
      00057B EF               [12] 2100 	mov	a,r7
      00057C 30 E2 02         [24] 2101 	jnb	acc.2,00106$
                                   2102 ;	src/main.c:625: TOGGLE(LED_B);
      00057F B2 92            [12] 2103 	cpl	_P12
      000581                       2104 00106$:
                                   2105 ;	src/main.c:628: if (u8RxUART&(1<<3)) {
      000581 EF               [12] 2106 	mov	a,r7
      000582 30 E3 48         [24] 2107 	jnb	acc.3,00119$
                                   2108 ;	src/main.c:629: switch(gu8MotorState) {
      000585 90r00r14         [24] 2109 	mov	dptr,#_gu8MotorState
      000588 E0               [24] 2110 	movx	a,@dptr
      000589 FF               [12] 2111 	mov  r7,a
      00058A 24 FC            [12] 2112 	add	a,#0xff - 0x03
      00058C 40 24            [24] 2113 	jc	00111$
      00058E EF               [12] 2114 	mov	a,r7
      00058F 2F               [12] 2115 	add	a,r7
                                   2116 ;	src/main.c:630: case 0 :
      000590 90r05r94         [24] 2117 	mov	dptr,#00155$
      000593 73               [24] 2118 	jmp	@a+dptr
      000594                       2119 00155$:
      000594 80 06            [24] 2120 	sjmp	00107$
      000596 80 0A            [24] 2121 	sjmp	00108$
      000598 80 0E            [24] 2122 	sjmp	00109$
      00059A 80 12            [24] 2123 	sjmp	00110$
      00059C                       2124 00107$:
                                   2125 ;	src/main.c:631: MOTOR_CCW = 0;
                                   2126 ;	assignBit
      00059C C2 81            [12] 2127 	clr	_P01
                                   2128 ;	src/main.c:632: MOTOR_CW = 0 ;
                                   2129 ;	assignBit
      00059E C2 80            [12] 2130 	clr	_P00
                                   2131 ;	src/main.c:633: break;
                                   2132 ;	src/main.c:634: case 1 :
      0005A0 80 10            [24] 2133 	sjmp	00111$
      0005A2                       2134 00108$:
                                   2135 ;	src/main.c:635: MOTOR_CCW = 1;
                                   2136 ;	assignBit
      0005A2 D2 81            [12] 2137 	setb	_P01
                                   2138 ;	src/main.c:636: MOTOR_CW = 0 ;
                                   2139 ;	assignBit
      0005A4 C2 80            [12] 2140 	clr	_P00
                                   2141 ;	src/main.c:637: break;
                                   2142 ;	src/main.c:638: case 2 :
      0005A6 80 0A            [24] 2143 	sjmp	00111$
      0005A8                       2144 00109$:
                                   2145 ;	src/main.c:639: MOTOR_CCW = 1;
                                   2146 ;	assignBit
      0005A8 D2 81            [12] 2147 	setb	_P01
                                   2148 ;	src/main.c:640: MOTOR_CW = 1 ;
                                   2149 ;	assignBit
      0005AA D2 80            [12] 2150 	setb	_P00
                                   2151 ;	src/main.c:641: break;
                                   2152 ;	src/main.c:642: case 3 :
      0005AC 80 04            [24] 2153 	sjmp	00111$
      0005AE                       2154 00110$:
                                   2155 ;	src/main.c:643: MOTOR_CCW = 0;
                                   2156 ;	assignBit
      0005AE C2 81            [12] 2157 	clr	_P01
                                   2158 ;	src/main.c:644: MOTOR_CW = 1 ;
                                   2159 ;	assignBit
      0005B0 D2 80            [12] 2160 	setb	_P00
                                   2161 ;	src/main.c:646: }
      0005B2                       2162 00111$:
                                   2163 ;	src/main.c:647: gu8MotorState ++;
      0005B2 90r00r14         [24] 2164 	mov	dptr,#_gu8MotorState
      0005B5 EF               [12] 2165 	mov	a,r7
      0005B6 04               [12] 2166 	inc	a
      0005B7 F0               [24] 2167 	movx	@dptr,a
                                   2168 ;	src/main.c:648: if (gu8MotorState == 4) {
      0005B8 E0               [24] 2169 	movx	a,@dptr
      0005B9 FF               [12] 2170 	mov	r7,a
      0005BA BF 04 10         [24] 2171 	cjne	r7,#0x04,00119$
                                   2172 ;	src/main.c:649: gu8MotorState = 0;
      0005BD 90r00r14         [24] 2173 	mov	dptr,#_gu8MotorState
      0005C0 E4               [12] 2174 	clr	a
      0005C1 F0               [24] 2175 	movx	@dptr,a
      0005C2 22               [24] 2176 	ret
      0005C3                       2177 00117$:
                                   2178 ;	src/main.c:654: LED_R = LED_OFF;
                                   2179 ;	assignBit
      0005C3 D2 94            [12] 2180 	setb	_P14
                                   2181 ;	src/main.c:655: LED_G = LED_OFF;
                                   2182 ;	assignBit
      0005C5 D2 93            [12] 2183 	setb	_P13
                                   2184 ;	src/main.c:656: LED_B = LED_OFF;
                                   2185 ;	assignBit
      0005C7 D2 92            [12] 2186 	setb	_P12
                                   2187 ;	src/main.c:657: MOTOR_CCW = 0;
                                   2188 ;	assignBit
      0005C9 C2 81            [12] 2189 	clr	_P01
                                   2190 ;	src/main.c:658: MOTOR_CW = 0 ;
                                   2191 ;	assignBit
      0005CB C2 80            [12] 2192 	clr	_P00
      0005CD                       2193 00119$:
                                   2194 ;	src/main.c:660: }
      0005CD 22               [24] 2195 	ret
                                   2196 ;------------------------------------------------------------
                                   2197 ;Allocation info for local variables in function 'chk_my_addr'
                                   2198 ;------------------------------------------------------------
                                   2199 ;au8RxData                 Allocated with name '_chk_my_addr_PARM_2'
                                   2200 ;au8MyAddr                 Allocated to registers r7 
                                   2201 ;------------------------------------------------------------
                                   2202 ;	src/main.c:662: UINT8 chk_my_addr(UINT8 au8MyAddr, UINT8 au8RxData)
                                   2203 ;	-----------------------------------------
                                   2204 ;	 function chk_my_addr
                                   2205 ;	-----------------------------------------
      0005CE                       2206 _chk_my_addr:
      0005CE AF 82            [24] 2207 	mov	r7,dpl
                                   2208 ;	src/main.c:664: if ( (au8RxData>>4) == (au8MyAddr&0x0F)) {
      0005D0 E5*00            [12] 2209 	mov	a,_chk_my_addr_PARM_2
      0005D2 C4               [12] 2210 	swap	a
      0005D3 54 0F            [12] 2211 	anl	a,#0x0f
      0005D5 FE               [12] 2212 	mov	r6,a
      0005D6 53 07 0F         [24] 2213 	anl	ar7,#0x0f
      0005D9 E4               [12] 2214 	clr	a
      0005DA FD               [12] 2215 	mov	r5,a
      0005DB FC               [12] 2216 	mov	r4,a
      0005DC EE               [12] 2217 	mov	a,r6
      0005DD B5 07 08         [24] 2218 	cjne	a,ar7,00102$
      0005E0 EC               [12] 2219 	mov	a,r4
      0005E1 B5 05 04         [24] 2220 	cjne	a,ar5,00102$
                                   2221 ;	src/main.c:665: return 1;
      0005E4 75 82 01         [24] 2222 	mov	dpl,#0x01
      0005E7 22               [24] 2223 	ret
      0005E8                       2224 00102$:
                                   2225 ;	src/main.c:667: return 0;
      0005E8 75 82 00         [24] 2226 	mov	dpl,#0x00
                                   2227 ;	src/main.c:668: }
      0005EB 22               [24] 2228 	ret
                                   2229 ;------------------------------------------------------------
                                   2230 ;Allocation info for local variables in function 'process_my_packet'
                                   2231 ;------------------------------------------------------------
                                   2232 ;apstLineFiPkt             Allocated to registers r5 r6 r7 
                                   2233 ;sloc0                     Allocated with name '_process_my_packet_sloc0_1_0'
                                   2234 ;------------------------------------------------------------
                                   2235 ;	src/main.c:670: void process_my_packet(linefi_packet_t * apstLineFiPkt)
                                   2236 ;	-----------------------------------------
                                   2237 ;	 function process_my_packet
                                   2238 ;	-----------------------------------------
      0005EC                       2239 _process_my_packet:
      0005EC AD 82            [24] 2240 	mov	r5,dpl
      0005EE AE 83            [24] 2241 	mov	r6,dph
      0005F0 AF F0            [24] 2242 	mov	r7,b
                                   2243 ;	src/main.c:672: switch(apstLineFiPkt->u8Type) {
      0005F2 74 01            [12] 2244 	mov	a,#0x01
      0005F4 2D               [12] 2245 	add	a,r5
      0005F5 FA               [12] 2246 	mov	r2,a
      0005F6 E4               [12] 2247 	clr	a
      0005F7 3E               [12] 2248 	addc	a,r6
      0005F8 FB               [12] 2249 	mov	r3,a
      0005F9 8F 04            [24] 2250 	mov	ar4,r7
      0005FB 8A 82            [24] 2251 	mov	dpl,r2
      0005FD 8B 83            [24] 2252 	mov	dph,r3
      0005FF 8C F0            [24] 2253 	mov	b,r4
      000601 12r00r00         [24] 2254 	lcall	__gptrget
      000604 FC               [12] 2255 	mov  r4,a
      000605 24 F9            [12] 2256 	add	a,#0xff - 0x06
      000607 50 01            [24] 2257 	jnc	00116$
      000609 22               [24] 2258 	ret
      00060A                       2259 00116$:
      00060A EC               [12] 2260 	mov	a,r4
      00060B 2C               [12] 2261 	add	a,r4
      00060C 2C               [12] 2262 	add	a,r4
      00060D 90r06r11         [24] 2263 	mov	dptr,#00117$
      000610 73               [24] 2264 	jmp	@a+dptr
      000611                       2265 00117$:
      000611 02r07r19         [24] 2266 	ljmp	00109$
      000614 02r07r19         [24] 2267 	ljmp	00109$
      000617 02r07r19         [24] 2268 	ljmp	00109$
      00061A 02r07r19         [24] 2269 	ljmp	00109$
      00061D 02r06r26         [24] 2270 	ljmp	00105$
      000620 02r06rAA         [24] 2271 	ljmp	00106$
      000623 02r07r00         [24] 2272 	ljmp	00107$
                                   2273 ;	src/main.c:681: case Type_SetLED :
      000626                       2274 00105$:
                                   2275 ;	src/main.c:682: LED_R = apstLineFiPkt->pu8Data[0];
      000626 74 05            [12] 2276 	mov	a,#0x05
      000628 2D               [12] 2277 	add	a,r5
      000629 F5*08            [12] 2278 	mov	_process_my_packet_sloc0_1_0,a
      00062B E4               [12] 2279 	clr	a
      00062C 3E               [12] 2280 	addc	a,r6
      00062D F5*09            [12] 2281 	mov	(_process_my_packet_sloc0_1_0 + 1),a
      00062F 8F*0A            [24] 2282 	mov	(_process_my_packet_sloc0_1_0 + 2),r7
      000631 85*08 82         [24] 2283 	mov	dpl,_process_my_packet_sloc0_1_0
      000634 85*09 83         [24] 2284 	mov	dph,(_process_my_packet_sloc0_1_0 + 1)
      000637 85*0A F0         [24] 2285 	mov	b,(_process_my_packet_sloc0_1_0 + 2)
      00063A 12r00r00         [24] 2286 	lcall	__gptrget
      00063D F8               [12] 2287 	mov	r0,a
      00063E A3               [24] 2288 	inc	dptr
      00063F 12r00r00         [24] 2289 	lcall	__gptrget
      000642 F9               [12] 2290 	mov	r1,a
      000643 A3               [24] 2291 	inc	dptr
      000644 12r00r00         [24] 2292 	lcall	__gptrget
      000647 FC               [12] 2293 	mov	r4,a
      000648 88 82            [24] 2294 	mov	dpl,r0
      00064A 89 83            [24] 2295 	mov	dph,r1
      00064C 8C F0            [24] 2296 	mov	b,r4
      00064E 12r00r00         [24] 2297 	lcall	__gptrget
                                   2298 ;	assignBit
      000651 24 FF            [12] 2299 	add	a,#0xff
      000653 92 94            [24] 2300 	mov	_P14,c
                                   2301 ;	src/main.c:683: LED_G = apstLineFiPkt->pu8Data[1];
      000655 85*08 82         [24] 2302 	mov	dpl,_process_my_packet_sloc0_1_0
      000658 85*09 83         [24] 2303 	mov	dph,(_process_my_packet_sloc0_1_0 + 1)
      00065B 85*0A F0         [24] 2304 	mov	b,(_process_my_packet_sloc0_1_0 + 2)
      00065E 12r00r00         [24] 2305 	lcall	__gptrget
      000661 FA               [12] 2306 	mov	r2,a
      000662 A3               [24] 2307 	inc	dptr
      000663 12r00r00         [24] 2308 	lcall	__gptrget
      000666 FB               [12] 2309 	mov	r3,a
      000667 A3               [24] 2310 	inc	dptr
      000668 12r00r00         [24] 2311 	lcall	__gptrget
      00066B FC               [12] 2312 	mov	r4,a
      00066C 0A               [12] 2313 	inc	r2
      00066D BA 00 01         [24] 2314 	cjne	r2,#0x00,00118$
      000670 0B               [12] 2315 	inc	r3
      000671                       2316 00118$:
      000671 8A 82            [24] 2317 	mov	dpl,r2
      000673 8B 83            [24] 2318 	mov	dph,r3
      000675 8C F0            [24] 2319 	mov	b,r4
      000677 12r00r00         [24] 2320 	lcall	__gptrget
                                   2321 ;	assignBit
      00067A 24 FF            [12] 2322 	add	a,#0xff
      00067C 92 93            [24] 2323 	mov	_P13,c
                                   2324 ;	src/main.c:684: LED_B = apstLineFiPkt->pu8Data[2];
      00067E 85*08 82         [24] 2325 	mov	dpl,_process_my_packet_sloc0_1_0
      000681 85*09 83         [24] 2326 	mov	dph,(_process_my_packet_sloc0_1_0 + 1)
      000684 85*0A F0         [24] 2327 	mov	b,(_process_my_packet_sloc0_1_0 + 2)
      000687 12r00r00         [24] 2328 	lcall	__gptrget
      00068A FA               [12] 2329 	mov	r2,a
      00068B A3               [24] 2330 	inc	dptr
      00068C 12r00r00         [24] 2331 	lcall	__gptrget
      00068F FB               [12] 2332 	mov	r3,a
      000690 A3               [24] 2333 	inc	dptr
      000691 12r00r00         [24] 2334 	lcall	__gptrget
      000694 FC               [12] 2335 	mov	r4,a
      000695 74 02            [12] 2336 	mov	a,#0x02
      000697 2A               [12] 2337 	add	a,r2
      000698 FA               [12] 2338 	mov	r2,a
      000699 E4               [12] 2339 	clr	a
      00069A 3B               [12] 2340 	addc	a,r3
      00069B FB               [12] 2341 	mov	r3,a
      00069C 8A 82            [24] 2342 	mov	dpl,r2
      00069E 8B 83            [24] 2343 	mov	dph,r3
      0006A0 8C F0            [24] 2344 	mov	b,r4
      0006A2 12r00r00         [24] 2345 	lcall	__gptrget
                                   2346 ;	assignBit
      0006A5 24 FF            [12] 2347 	add	a,#0xff
      0006A7 92 92            [24] 2348 	mov	_P12,c
                                   2349 ;	src/main.c:685: break;
                                   2350 ;	src/main.c:686: case Type_CtrlMotor :
      0006A9 22               [24] 2351 	ret
      0006AA                       2352 00106$:
                                   2353 ;	src/main.c:688: MOTOR_CW = apstLineFiPkt->pu8Data[1];
      0006AA 74 05            [12] 2354 	mov	a,#0x05
      0006AC 2D               [12] 2355 	add	a,r5
      0006AD FD               [12] 2356 	mov	r5,a
      0006AE E4               [12] 2357 	clr	a
      0006AF 3E               [12] 2358 	addc	a,r6
      0006B0 FE               [12] 2359 	mov	r6,a
      0006B1 8D 82            [24] 2360 	mov	dpl,r5
      0006B3 8E 83            [24] 2361 	mov	dph,r6
      0006B5 8F F0            [24] 2362 	mov	b,r7
      0006B7 12r00r00         [24] 2363 	lcall	__gptrget
      0006BA FA               [12] 2364 	mov	r2,a
      0006BB A3               [24] 2365 	inc	dptr
      0006BC 12r00r00         [24] 2366 	lcall	__gptrget
      0006BF FB               [12] 2367 	mov	r3,a
      0006C0 A3               [24] 2368 	inc	dptr
      0006C1 12r00r00         [24] 2369 	lcall	__gptrget
      0006C4 FC               [12] 2370 	mov	r4,a
      0006C5 0A               [12] 2371 	inc	r2
      0006C6 BA 00 01         [24] 2372 	cjne	r2,#0x00,00119$
      0006C9 0B               [12] 2373 	inc	r3
      0006CA                       2374 00119$:
      0006CA 8A 82            [24] 2375 	mov	dpl,r2
      0006CC 8B 83            [24] 2376 	mov	dph,r3
      0006CE 8C F0            [24] 2377 	mov	b,r4
      0006D0 12r00r00         [24] 2378 	lcall	__gptrget
                                   2379 ;	assignBit
      0006D3 24 FF            [12] 2380 	add	a,#0xff
      0006D5 92 80            [24] 2381 	mov	_P00,c
                                   2382 ;	src/main.c:689: MOTOR_CCW = apstLineFiPkt->pu8Data[2];
      0006D7 8D 82            [24] 2383 	mov	dpl,r5
      0006D9 8E 83            [24] 2384 	mov	dph,r6
      0006DB 8F F0            [24] 2385 	mov	b,r7
      0006DD 12r00r00         [24] 2386 	lcall	__gptrget
      0006E0 FD               [12] 2387 	mov	r5,a
      0006E1 A3               [24] 2388 	inc	dptr
      0006E2 12r00r00         [24] 2389 	lcall	__gptrget
      0006E5 FE               [12] 2390 	mov	r6,a
      0006E6 A3               [24] 2391 	inc	dptr
      0006E7 12r00r00         [24] 2392 	lcall	__gptrget
      0006EA FF               [12] 2393 	mov	r7,a
      0006EB 74 02            [12] 2394 	mov	a,#0x02
      0006ED 2D               [12] 2395 	add	a,r5
      0006EE FD               [12] 2396 	mov	r5,a
      0006EF E4               [12] 2397 	clr	a
      0006F0 3E               [12] 2398 	addc	a,r6
      0006F1 FE               [12] 2399 	mov	r6,a
      0006F2 8D 82            [24] 2400 	mov	dpl,r5
      0006F4 8E 83            [24] 2401 	mov	dph,r6
      0006F6 8F F0            [24] 2402 	mov	b,r7
      0006F8 12r00r00         [24] 2403 	lcall	__gptrget
                                   2404 ;	assignBit
      0006FB 24 FF            [12] 2405 	add	a,#0xff
      0006FD 92 81            [24] 2406 	mov	_P01,c
                                   2407 ;	src/main.c:690: break;
                                   2408 ;	src/main.c:691: case Type_ReadAddr :
      0006FF 22               [24] 2409 	ret
      000700                       2410 00107$:
                                   2411 ;	src/main.c:692: printf_fast_f("My address is 0x%x\r\n", gu8MyAddr);
      000700 AE*00            [24] 2412 	mov	r6,_gu8MyAddr
      000702 7F 00            [12] 2413 	mov	r7,#0x00
      000704 C0 06            [24] 2414 	push	ar6
      000706 C0 07            [24] 2415 	push	ar7
      000708 74rD2            [12] 2416 	mov	a,#___str_23
      00070A C0 E0            [24] 2417 	push	acc
      00070C 74s01            [12] 2418 	mov	a,#(___str_23 >> 8)
      00070E C0 E0            [24] 2419 	push	acc
      000710 12r00r00         [24] 2420 	lcall	_printf_fast_f
      000713 E5 81            [12] 2421 	mov	a,sp
      000715 24 FC            [12] 2422 	add	a,#0xfc
      000717 F5 81            [12] 2423 	mov	sp,a
                                   2424 ;	src/main.c:694: }
      000719                       2425 00109$:
                                   2426 ;	src/main.c:695: }
      000719 22               [24] 2427 	ret
                                   2428 ;------------------------------------------------------------
                                   2429 ;Allocation info for local variables in function 'process_all_packet'
                                   2430 ;------------------------------------------------------------
                                   2431 ;apstLineFiPkt             Allocated to registers r5 r6 r7 
                                   2432 ;------------------------------------------------------------
                                   2433 ;	src/main.c:697: void process_all_packet(linefi_packet_t * apstLineFiPkt)
                                   2434 ;	-----------------------------------------
                                   2435 ;	 function process_all_packet
                                   2436 ;	-----------------------------------------
      00071A                       2437 _process_all_packet:
      00071A AD 82            [24] 2438 	mov	r5,dpl
      00071C AE 83            [24] 2439 	mov	r6,dph
      00071E AF F0            [24] 2440 	mov	r7,b
                                   2441 ;	src/main.c:699: switch(apstLineFiPkt->u8Type) {
      000720 74 01            [12] 2442 	mov	a,#0x01
      000722 2D               [12] 2443 	add	a,r5
      000723 FA               [12] 2444 	mov	r2,a
      000724 E4               [12] 2445 	clr	a
      000725 3E               [12] 2446 	addc	a,r6
      000726 FB               [12] 2447 	mov	r3,a
      000727 8F 04            [24] 2448 	mov	ar4,r7
      000729 8A 82            [24] 2449 	mov	dpl,r2
      00072B 8B 83            [24] 2450 	mov	dph,r3
      00072D 8C F0            [24] 2451 	mov	b,r4
      00072F 12r00r00         [24] 2452 	lcall	__gptrget
      000732 FC               [12] 2453 	mov  r4,a
      000733 24 F9            [12] 2454 	add	a,#0xff - 0x06
      000735 50 03            [24] 2455 	jnc	00132$
      000737 02r07rE3         [24] 2456 	ljmp	00110$
      00073A                       2457 00132$:
      00073A EC               [12] 2458 	mov	a,r4
      00073B 2C               [12] 2459 	add	a,r4
      00073C 2C               [12] 2460 	add	a,r4
      00073D 90r07r41         [24] 2461 	mov	dptr,#00133$
      000740 73               [24] 2462 	jmp	@a+dptr
      000741                       2463 00133$:
      000741 02r08r02         [24] 2464 	ljmp	00114$
      000744 02r07rAA         [24] 2465 	ljmp	00106$
      000747 02r08r02         [24] 2466 	ljmp	00114$
      00074A 02r07r56         [24] 2467 	ljmp	00101$
      00074D 02r07rE3         [24] 2468 	ljmp	00110$
      000750 02r07rE3         [24] 2469 	ljmp	00110$
      000753 02r07rC9         [24] 2470 	ljmp	00109$
                                   2471 ;	src/main.c:700: case Type_SetAddr :
      000756                       2472 00101$:
                                   2473 ;	src/main.c:701: if (SWITCH == SW_ON) {
      000756 20 95 01         [24] 2474 	jb	_P15,00134$
      000759 22               [24] 2475 	ret
      00075A                       2476 00134$:
                                   2477 ;	src/main.c:702: printf_fast_f("set address as %d\r\n", apstLineFiPkt->u8Addr);
      00075A 74 02            [12] 2478 	mov	a,#0x02
      00075C 2D               [12] 2479 	add	a,r5
      00075D FA               [12] 2480 	mov	r2,a
      00075E E4               [12] 2481 	clr	a
      00075F 3E               [12] 2482 	addc	a,r6
      000760 FB               [12] 2483 	mov	r3,a
      000761 8F 04            [24] 2484 	mov	ar4,r7
      000763 8A 82            [24] 2485 	mov	dpl,r2
      000765 8B 83            [24] 2486 	mov	dph,r3
      000767 8C F0            [24] 2487 	mov	b,r4
      000769 12r00r00         [24] 2488 	lcall	__gptrget
      00076C F8               [12] 2489 	mov	r0,a
      00076D 79 00            [12] 2490 	mov	r1,#0x00
      00076F C0 04            [24] 2491 	push	ar4
      000771 C0 03            [24] 2492 	push	ar3
      000773 C0 02            [24] 2493 	push	ar2
      000775 C0 00            [24] 2494 	push	ar0
      000777 C0 01            [24] 2495 	push	ar1
      000779 74rE7            [12] 2496 	mov	a,#___str_24
      00077B C0 E0            [24] 2497 	push	acc
      00077D 74s01            [12] 2498 	mov	a,#(___str_24 >> 8)
      00077F C0 E0            [24] 2499 	push	acc
      000781 12r00r00         [24] 2500 	lcall	_printf_fast_f
      000784 E5 81            [12] 2501 	mov	a,sp
      000786 24 FC            [12] 2502 	add	a,#0xfc
      000788 F5 81            [12] 2503 	mov	sp,a
      00078A D0 02            [24] 2504 	pop	ar2
      00078C D0 03            [24] 2505 	pop	ar3
      00078E D0 04            [24] 2506 	pop	ar4
                                   2507 ;	src/main.c:703: gu8MyAddr = apstLineFiPkt->u8Addr;
      000790 8A 82            [24] 2508 	mov	dpl,r2
      000792 8B 83            [24] 2509 	mov	dph,r3
      000794 8C F0            [24] 2510 	mov	b,r4
      000796 12r00r00         [24] 2511 	lcall	__gptrget
      000799 F5*00            [12] 2512 	mov	_gu8MyAddr,a
                                   2513 ;	src/main.c:704: Erase_APROM_Page(BASE_ADDRESS);
      00079B 90 37 00         [24] 2514 	mov	dptr,#0x3700
      00079E 12r00r00         [24] 2515 	lcall	_Erase_APROM_Page
                                   2516 ;	src/main.c:705: Write_APROM_BYTE(BASE_ADDRESS+0, gu8MyAddr);
      0007A1 85*00*00         [24] 2517 	mov	_Write_APROM_BYTE_PARM_2,_gu8MyAddr
      0007A4 90 37 00         [24] 2518 	mov	dptr,#0x3700
                                   2519 ;	src/main.c:707: break;
                                   2520 ;	src/main.c:712: case Type_Ucast :
      0007A7 02r00r00         [24] 2521 	ljmp	_Write_APROM_BYTE
      0007AA                       2522 00106$:
                                   2523 ;	src/main.c:713: if (gu8MyAddr == apstLineFiPkt->u8Addr) {
      0007AA 74 02            [12] 2524 	mov	a,#0x02
      0007AC 2D               [12] 2525 	add	a,r5
      0007AD FA               [12] 2526 	mov	r2,a
      0007AE E4               [12] 2527 	clr	a
      0007AF 3E               [12] 2528 	addc	a,r6
      0007B0 FB               [12] 2529 	mov	r3,a
      0007B1 8F 04            [24] 2530 	mov	ar4,r7
      0007B3 8A 82            [24] 2531 	mov	dpl,r2
      0007B5 8B 83            [24] 2532 	mov	dph,r3
      0007B7 8C F0            [24] 2533 	mov	b,r4
      0007B9 12r00r00         [24] 2534 	lcall	__gptrget
      0007BC FA               [12] 2535 	mov	r2,a
      0007BD B5*00 42         [24] 2536 	cjne	a,_gu8MyAddr,00114$
                                   2537 ;	src/main.c:714: process_my_packet(apstLineFiPkt);
      0007C0 8D 82            [24] 2538 	mov	dpl,r5
      0007C2 8E 83            [24] 2539 	mov	dph,r6
      0007C4 8F F0            [24] 2540 	mov	b,r7
                                   2541 ;	src/main.c:716: break;
                                   2542 ;	src/main.c:717: case Type_ReadAddr :
      0007C6 02r05rEC         [24] 2543 	ljmp	_process_my_packet
      0007C9                       2544 00109$:
                                   2545 ;	src/main.c:718: printf_fast_f("My address is %d\r\n", gu8MyAddr);
      0007C9 AB*00            [24] 2546 	mov	r3,_gu8MyAddr
      0007CB 7C 00            [12] 2547 	mov	r4,#0x00
      0007CD C0 03            [24] 2548 	push	ar3
      0007CF C0 04            [24] 2549 	push	ar4
      0007D1 74rFB            [12] 2550 	mov	a,#___str_25
      0007D3 C0 E0            [24] 2551 	push	acc
      0007D5 74s01            [12] 2552 	mov	a,#(___str_25 >> 8)
      0007D7 C0 E0            [24] 2553 	push	acc
      0007D9 12r00r00         [24] 2554 	lcall	_printf_fast_f
      0007DC E5 81            [12] 2555 	mov	a,sp
      0007DE 24 FC            [12] 2556 	add	a,#0xfc
      0007E0 F5 81            [12] 2557 	mov	sp,a
                                   2558 ;	src/main.c:719: break;
                                   2559 ;	src/main.c:720: default :
      0007E2 22               [24] 2560 	ret
      0007E3                       2561 00110$:
                                   2562 ;	src/main.c:721: if (gu8MyAddr == apstLineFiPkt->u8Addr) {
      0007E3 74 02            [12] 2563 	mov	a,#0x02
      0007E5 2D               [12] 2564 	add	a,r5
      0007E6 FA               [12] 2565 	mov	r2,a
      0007E7 E4               [12] 2566 	clr	a
      0007E8 3E               [12] 2567 	addc	a,r6
      0007E9 FB               [12] 2568 	mov	r3,a
      0007EA 8F 04            [24] 2569 	mov	ar4,r7
      0007EC 8A 82            [24] 2570 	mov	dpl,r2
      0007EE 8B 83            [24] 2571 	mov	dph,r3
      0007F0 8C F0            [24] 2572 	mov	b,r4
      0007F2 12r00r00         [24] 2573 	lcall	__gptrget
      0007F5 FA               [12] 2574 	mov	r2,a
      0007F6 B5*00 09         [24] 2575 	cjne	a,_gu8MyAddr,00114$
                                   2576 ;	src/main.c:722: process_my_packet(apstLineFiPkt);
      0007F9 8D 82            [24] 2577 	mov	dpl,r5
      0007FB 8E 83            [24] 2578 	mov	dph,r6
      0007FD 8F F0            [24] 2579 	mov	b,r7
                                   2580 ;	src/main.c:725: }
                                   2581 ;	src/main.c:726: }
      0007FF 02r05rEC         [24] 2582 	ljmp	_process_my_packet
      000802                       2583 00114$:
      000802 22               [24] 2584 	ret
                                   2585 ;------------------------------------------------------------
                                   2586 ;Allocation info for local variables in function 'print_one_octet_linefi'
                                   2587 ;------------------------------------------------------------
                                   2588 ;au8Data                   Allocated to registers r7 
                                   2589 ;------------------------------------------------------------
                                   2590 ;	src/main.c:728: void print_one_octet_linefi(UINT8 au8Data)
                                   2591 ;	-----------------------------------------
                                   2592 ;	 function print_one_octet_linefi
                                   2593 ;	-----------------------------------------
      000803                       2594 _print_one_octet_linefi:
                                   2595 ;	src/main.c:730: printf_fast_f("address:%u\r\n", au8Data>>4);
      000803 E5 82            [12] 2596 	mov	a,dpl
      000805 FF               [12] 2597 	mov	r7,a
      000806 C4               [12] 2598 	swap	a
      000807 54 0F            [12] 2599 	anl	a,#0x0f
      000809 FE               [12] 2600 	mov	r6,a
      00080A 7D 00            [12] 2601 	mov	r5,#0x00
      00080C C0 07            [24] 2602 	push	ar7
      00080E C0 06            [24] 2603 	push	ar6
      000810 C0 05            [24] 2604 	push	ar5
      000812 74r0E            [12] 2605 	mov	a,#___str_26
      000814 C0 E0            [24] 2606 	push	acc
      000816 74s02            [12] 2607 	mov	a,#(___str_26 >> 8)
      000818 C0 E0            [24] 2608 	push	acc
      00081A 12r00r00         [24] 2609 	lcall	_printf_fast_f
      00081D E5 81            [12] 2610 	mov	a,sp
      00081F 24 FC            [12] 2611 	add	a,#0xfc
      000821 F5 81            [12] 2612 	mov	sp,a
      000823 D0 07            [24] 2613 	pop	ar7
                                   2614 ;	src/main.c:731: printf_fast_f("command:%u\r\n", au8Data&0xF);
      000825 53 07 0F         [24] 2615 	anl	ar7,#0x0f
      000828 7E 00            [12] 2616 	mov	r6,#0x00
      00082A C0 07            [24] 2617 	push	ar7
      00082C C0 06            [24] 2618 	push	ar6
      00082E 74r1B            [12] 2619 	mov	a,#___str_27
      000830 C0 E0            [24] 2620 	push	acc
      000832 74s02            [12] 2621 	mov	a,#(___str_27 >> 8)
      000834 C0 E0            [24] 2622 	push	acc
      000836 12r00r00         [24] 2623 	lcall	_printf_fast_f
      000839 E5 81            [12] 2624 	mov	a,sp
      00083B 24 FC            [12] 2625 	add	a,#0xfc
      00083D F5 81            [12] 2626 	mov	sp,a
                                   2627 ;	src/main.c:732: }
      00083F 22               [24] 2628 	ret
                                   2629 ;------------------------------------------------------------
                                   2630 ;Allocation info for local variables in function 'main'
                                   2631 ;------------------------------------------------------------
                                   2632 ;su8Cnt                    Allocated with name '_main_su8Cnt_262145_138'
                                   2633 ;u8PrevSwitch              Allocated to registers r4 
                                   2634 ;u8UartRx                  Allocated to registers 
                                   2635 ;u8RotSense                Allocated to registers 
                                   2636 ;u8RxUART                  Allocated with name '_main_u8RxUART_65536_128'
                                   2637 ;u16Cnt                    Allocated with name '_main_u16Cnt_65536_128'
                                   2638 ;u8OutputState             Allocated to registers 
                                   2639 ;u8StateRxCSC              Allocated to registers 
                                   2640 ;u8LineFiAddr              Allocated to registers 
                                   2641 ;u8LineFiSpeed             Allocated to registers 
                                   2642 ;u8Data                    Allocated to registers 
                                   2643 ;u8LineFiCmd               Allocated to registers 
                                   2644 ;u8PwrOnFirstFlag          Allocated to registers 
                                   2645 ;u8StateRxPkt              Allocated to registers r7 
                                   2646 ;pu8RxUART                 Allocated with name '_main_pu8RxUART_65536_128'
                                   2647 ;stLineFiPkt               Allocated with name '_main_stLineFiPkt_65536_128'
                                   2648 ;u8MotorState              Allocated to registers 
                                   2649 ;u8RxBufIdx                Allocated with name '_main_u8RxBufIdx_65536_128'
                                   2650 ;u8RxLineFiLen             Allocated to registers r5 
                                   2651 ;pu8LineFiRx               Allocated with name '_main_pu8LineFiRx_65536_128'
                                   2652 ;u8LineFiRxIdx             Allocated to registers 
                                   2653 ;u8Count2                  Allocated to registers 
                                   2654 ;u8RxPktCnt                Allocated to registers 
                                   2655 ;u8PreambleCnt             Allocated to registers 
                                   2656 ;i                         Allocated to registers r3 
                                   2657 ;------------------------------------------------------------
                                   2658 ;	src/main.c:737: void main (void)
                                   2659 ;	-----------------------------------------
                                   2660 ;	 function main
                                   2661 ;	-----------------------------------------
      000840                       2662 _main:
                                   2663 ;	src/main.c:758: UINT8 u8StateRxPkt = STATE_RxPKT_INIT;
      000840 7F 00            [12] 2664 	mov	r7,#0x00
                                   2665 ;	src/main.c:762: linefi_packet_t stLineFiPkt = {
      000842 75*2D 01         [24] 2666 	mov	_main_stLineFiPkt_65536_128,#0x01
      000845 75*2E 02         [24] 2667 	mov	(_main_stLineFiPkt_65536_128 + 0x0001),#0x02
      000848 75*2F 03         [24] 2668 	mov	(_main_stLineFiPkt_65536_128 + 0x0002),#0x03
      00084B 75*30 04         [24] 2669 	mov	(_main_stLineFiPkt_65536_128 + 0x0003),#0x04
      00084E 75*31 05         [24] 2670 	mov	(_main_stLineFiPkt_65536_128 + 0x0004),#0x05
      000851 75*32r00         [24] 2671 	mov	((_main_stLineFiPkt_65536_128 + 0x0005) + 0),#_gpu8Data
      000854 75*33s00         [24] 2672 	mov	((_main_stLineFiPkt_65536_128 + 0x0005) + 1),#(_gpu8Data >> 8)
                                   2673 ;	1-genFromRTrack replaced	mov	((_main_stLineFiPkt_65536_128 + 0x0005) + 2),#0x00
      000857 8F*34            [24] 2674 	mov	((_main_stLineFiPkt_65536_128 + 0x0005) + 2),r7
                                   2675 ;	src/main.c:774: UINT8 u8RxBufIdx = 0;
                                   2676 ;	1-genFromRTrack replaced	mov	_main_u8RxBufIdx_65536_128,#0x00
      000859 8F*35            [24] 2677 	mov	_main_u8RxBufIdx_65536_128,r7
                                   2678 ;	src/main.c:775: UINT8 u8RxLineFiLen = 0;
      00085B 7D 00            [12] 2679 	mov	r5,#0x00
                                   2680 ;	src/main.c:780: gpio_setup();
      00085D C0 07            [24] 2681 	push	ar7
      00085F C0 05            [24] 2682 	push	ar5
      000861 12r04r04         [24] 2683 	lcall	_gpio_setup
                                   2684 ;	src/main.c:781: uart_setup();
      000864 12r00r00         [24] 2685 	lcall	_uart_setup
                                   2686 ;	src/main.c:782: InitialUART1_Timer3(57600);
      000867 90 E1 00         [24] 2687 	mov	dptr,#0xe100
      00086A E4               [12] 2688 	clr	a
      00086B F5 F0            [12] 2689 	mov	b,a
      00086D 12r00r00         [24] 2690 	lcall	_InitialUART1_Timer3
                                   2691 ;	src/main.c:784: MODIFY_HIRC_166();
      000870 12r02r8A         [24] 2692 	lcall	_MODIFY_HIRC_166
                                   2693 ;	src/main.c:786: clr_T0M;// 16/12 MHz
      000873 53 8E F7         [24] 2694 	anl	_CKCON,#0xf7
                                   2695 ;	src/main.c:789: set_ET0;                                    //enable Timer0 interrupt
                                   2696 ;	assignBit
      000876 D2 A9            [12] 2697 	setb	_ET0
                                   2698 ;	src/main.c:790: set_TR0;                                    //Timer0 run
                                   2699 ;	assignBit
      000878 D2 8C            [12] 2700 	setb	_TR0
                                   2701 ;	src/main.c:792: gu8UART = 0;
      00087A 75*01 00         [24] 2702 	mov	_gu8UART,#0x00
                                   2703 ;	src/main.c:793: printf_fast_f("This is UART0\n\r");
      00087D 74r28            [12] 2704 	mov	a,#___str_28
      00087F C0 E0            [24] 2705 	push	acc
      000881 74s02            [12] 2706 	mov	a,#(___str_28 >> 8)
      000883 C0 E0            [24] 2707 	push	acc
      000885 12r00r00         [24] 2708 	lcall	_printf_fast_f
      000888 15 81            [12] 2709 	dec	sp
      00088A 15 81            [12] 2710 	dec	sp
                                   2711 ;	src/main.c:794: printf_fast_f("LineFi Slave Monitor\n\r");
      00088C 74r38            [12] 2712 	mov	a,#___str_29
      00088E C0 E0            [24] 2713 	push	acc
      000890 74s02            [12] 2714 	mov	a,#(___str_29 >> 8)
      000892 C0 E0            [24] 2715 	push	acc
      000894 12r00r00         [24] 2716 	lcall	_printf_fast_f
      000897 15 81            [12] 2717 	dec	sp
      000899 15 81            [12] 2718 	dec	sp
                                   2719 ;	src/main.c:795: gu8UART = 1;
      00089B 75*01 01         [24] 2720 	mov	_gu8UART,#0x01
                                   2721 ;	src/main.c:796: printf_fast_f("This is UART1\n\r"); //라인파이
      00089E 74r4F            [12] 2722 	mov	a,#___str_30
      0008A0 C0 E0            [24] 2723 	push	acc
      0008A2 74s02            [12] 2724 	mov	a,#(___str_30 >> 8)
      0008A4 C0 E0            [24] 2725 	push	acc
      0008A6 12r00r00         [24] 2726 	lcall	_printf_fast_f
      0008A9 15 81            [12] 2727 	dec	sp
      0008AB 15 81            [12] 2728 	dec	sp
      0008AD D0 05            [24] 2729 	pop	ar5
      0008AF D0 07            [24] 2730 	pop	ar7
                                   2731 ;	src/main.c:801: for (u16Cnt = 0 ; u16Cnt < 30000; u16Cnt++) {
      0008B1 75*0D 30         [24] 2732 	mov	_main_u16Cnt_65536_128,#0x30
      0008B4 75*0E 75         [24] 2733 	mov	(_main_u16Cnt_65536_128 + 1),#0x75
      0008B7                       2734 00148$:
                                   2735 ;	src/main.c:802: nop; nop; nop; nop; nop;
      0008B7 00               [12] 2736 	NOP
      0008B8 00               [12] 2737 	NOP
      0008B9 00               [12] 2738 	NOP
      0008BA 00               [12] 2739 	NOP
      0008BB 00               [12] 2740 	NOP
      0008BC E5*0D            [12] 2741 	mov	a,_main_u16Cnt_65536_128
      0008BE 24 FF            [12] 2742 	add	a,#0xff
      0008C0 FA               [12] 2743 	mov	r2,a
      0008C1 E5*0E            [12] 2744 	mov	a,(_main_u16Cnt_65536_128 + 1)
      0008C3 34 FF            [12] 2745 	addc	a,#0xff
      0008C5 FC               [12] 2746 	mov	r4,a
      0008C6 8A*0D            [24] 2747 	mov	_main_u16Cnt_65536_128,r2
      0008C8 8C*0E            [24] 2748 	mov	(_main_u16Cnt_65536_128 + 1),r4
                                   2749 ;	src/main.c:801: for (u16Cnt = 0 ; u16Cnt < 30000; u16Cnt++) {
      0008CA EA               [12] 2750 	mov	a,r2
      0008CB 4C               [12] 2751 	orl	a,r4
                                   2752 ;	src/main.c:804: gu8UART = 0;
      0008CC 70 E9            [24] 2753 	jnz	00148$
      0008CE F5*01            [12] 2754 	mov	_gu8UART,a
                                   2755 ;	src/main.c:806: u8UartRx = UART_RX;
      0008D0 A2 82            [12] 2756 	mov	c,_P02
                                   2757 ;	src/main.c:807: u8PrevSwitch = SWITCH;
      0008D2 A2 95            [12] 2758 	mov	c,_P15
      0008D4 E4               [12] 2759 	clr	a
      0008D5 33               [12] 2760 	rlc	a
      0008D6 FC               [12] 2761 	mov	r4,a
                                   2762 ;	src/main.c:809: set_EPI;
      0008D7 43 9B 02         [24] 2763 	orl	_EIE,#0x02
                                   2764 ;	src/main.c:810: set_EA;
                                   2765 ;	assignBit
      0008DA D2 AF            [12] 2766 	setb	_EA
                                   2767 ;	src/main.c:812: if (UART_RX == 0) {
      0008DC 20 82 02         [24] 2768 	jb	_P02,00103$
                                   2769 ;	src/main.c:813: SEL_RX_POL = 1;
                                   2770 ;	assignBit
      0008DF D2 84            [12] 2771 	setb	_P04
      0008E1                       2772 00103$:
                                   2773 ;	src/main.c:817: gu8MyAddr = gpcEEPROM[0]; // 0x00이면 펌웨어 쓴 직후
      0008E1 90r37r00         [24] 2774 	mov	dptr,#_gpcEEPROM
      0008E4 E4               [12] 2775 	clr	a
      0008E5 93               [24] 2776 	movc	a,@a+dptr
      0008E6 F5*00            [12] 2777 	mov	_gu8MyAddr,a
                                   2778 ;	src/main.c:819: while(1) {
      0008E8                       2779 00144$:
                                   2780 ;	src/main.c:822: if (Receive_Data_From_UART0_nb(&u8RxUART)) {
      0008E8 90r00r0C         [24] 2781 	mov	dptr,#_main_u8RxUART_65536_128
      0008EB 75 F0 40         [24] 2782 	mov	b,#0x40
      0008EE C0 07            [24] 2783 	push	ar7
      0008F0 C0 05            [24] 2784 	push	ar5
      0008F2 C0 04            [24] 2785 	push	ar4
      0008F4 12r00r00         [24] 2786 	lcall	_Receive_Data_From_UART0_nb
      0008F7 E5 82            [12] 2787 	mov	a,dpl
      0008F9 D0 04            [24] 2788 	pop	ar4
      0008FB D0 05            [24] 2789 	pop	ar5
      0008FD D0 07            [24] 2790 	pop	ar7
      0008FF 70 03            [24] 2791 	jnz	00269$
      000901 02r0Br33         [24] 2792 	ljmp	00115$
      000904                       2793 00269$:
                                   2794 ;	src/main.c:823: switch(u8RxUART) {
      000904 74 31            [12] 2795 	mov	a,#0x31
      000906 B5*0C 02         [24] 2796 	cjne	a,_main_u8RxUART_65536_128,00270$
      000909 80 42            [24] 2797 	sjmp	00104$
      00090B                       2798 00270$:
      00090B 74 32            [12] 2799 	mov	a,#0x32
      00090D B5*0C 02         [24] 2800 	cjne	a,_main_u8RxUART_65536_128,00271$
      000910 80 77            [24] 2801 	sjmp	00105$
      000912                       2802 00271$:
      000912 74 33            [12] 2803 	mov	a,#0x33
      000914 B5*0C 03         [24] 2804 	cjne	a,_main_u8RxUART_65536_128,00272$
      000917 02r09rC5         [24] 2805 	ljmp	00106$
      00091A                       2806 00272$:
      00091A 74 34            [12] 2807 	mov	a,#0x34
      00091C B5*0C 03         [24] 2808 	cjne	a,_main_u8RxUART_65536_128,00273$
      00091F 02r0Ar01         [24] 2809 	ljmp	00107$
      000922                       2810 00273$:
      000922 74 35            [12] 2811 	mov	a,#0x35
      000924 B5*0C 03         [24] 2812 	cjne	a,_main_u8RxUART_65536_128,00274$
      000927 02r0Ar3D         [24] 2813 	ljmp	00108$
      00092A                       2814 00274$:
      00092A 74 36            [12] 2815 	mov	a,#0x36
      00092C B5*0C 03         [24] 2816 	cjne	a,_main_u8RxUART_65536_128,00275$
      00092F 02r0Ar5B         [24] 2817 	ljmp	00109$
      000932                       2818 00275$:
      000932 74 37            [12] 2819 	mov	a,#0x37
      000934 B5*0C 03         [24] 2820 	cjne	a,_main_u8RxUART_65536_128,00276$
      000937 02r0Ar97         [24] 2821 	ljmp	00110$
      00093A                       2822 00276$:
      00093A 74 38            [12] 2823 	mov	a,#0x38
      00093C B5*0C 03         [24] 2824 	cjne	a,_main_u8RxUART_65536_128,00277$
      00093F 02r0ArD2         [24] 2825 	ljmp	00111$
      000942                       2826 00277$:
      000942 74 74            [12] 2827 	mov	a,#0x74
      000944 B5*0C 03         [24] 2828 	cjne	a,_main_u8RxUART_65536_128,00278$
      000947 02r0Br0D         [24] 2829 	ljmp	00112$
      00094A                       2830 00278$:
      00094A 02r0Br33         [24] 2831 	ljmp	00115$
                                   2832 ;	src/main.c:824: case '1' :
      00094D                       2833 00104$:
                                   2834 ;	src/main.c:825: TOGGLE(UART_TX);
      00094D B2 96            [12] 2835 	cpl	_P16
                                   2836 ;	src/main.c:826: printf_fast_f("UART_TX=");
      00094F C0 07            [24] 2837 	push	ar7
      000951 C0 05            [24] 2838 	push	ar5
      000953 C0 04            [24] 2839 	push	ar4
      000955 74r5F            [12] 2840 	mov	a,#___str_31
      000957 C0 E0            [24] 2841 	push	acc
      000959 74s02            [12] 2842 	mov	a,#(___str_31 >> 8)
      00095B C0 E0            [24] 2843 	push	acc
      00095D 12r00r00         [24] 2844 	lcall	_printf_fast_f
      000960 15 81            [12] 2845 	dec	sp
      000962 15 81            [12] 2846 	dec	sp
                                   2847 ;	src/main.c:827: printf_fast_f("%d\n\r", UART_TX);
      000964 A2 96            [12] 2848 	mov	c,_P16
      000966 E4               [12] 2849 	clr	a
      000967 33               [12] 2850 	rlc	a
      000968 FA               [12] 2851 	mov	r2,a
      000969 7B 00            [12] 2852 	mov	r3,#0x00
      00096B C0 02            [24] 2853 	push	ar2
      00096D C0 03            [24] 2854 	push	ar3
      00096F 74r68            [12] 2855 	mov	a,#___str_32
      000971 C0 E0            [24] 2856 	push	acc
      000973 74s02            [12] 2857 	mov	a,#(___str_32 >> 8)
      000975 C0 E0            [24] 2858 	push	acc
      000977 12r00r00         [24] 2859 	lcall	_printf_fast_f
      00097A E5 81            [12] 2860 	mov	a,sp
      00097C 24 FC            [12] 2861 	add	a,#0xfc
      00097E F5 81            [12] 2862 	mov	sp,a
      000980 D0 04            [24] 2863 	pop	ar4
      000982 D0 05            [24] 2864 	pop	ar5
      000984 D0 07            [24] 2865 	pop	ar7
                                   2866 ;	src/main.c:828: break;
      000986 02r0Br33         [24] 2867 	ljmp	00115$
                                   2868 ;	src/main.c:829: case '2' :
      000989                       2869 00105$:
                                   2870 ;	src/main.c:830: TOGGLE(LED_R);
      000989 B2 94            [12] 2871 	cpl	_P14
                                   2872 ;	src/main.c:831: printf_fast_f("LED_R=");
      00098B C0 07            [24] 2873 	push	ar7
      00098D C0 05            [24] 2874 	push	ar5
      00098F C0 04            [24] 2875 	push	ar4
      000991 74r6D            [12] 2876 	mov	a,#___str_33
      000993 C0 E0            [24] 2877 	push	acc
      000995 74s02            [12] 2878 	mov	a,#(___str_33 >> 8)
      000997 C0 E0            [24] 2879 	push	acc
      000999 12r00r00         [24] 2880 	lcall	_printf_fast_f
      00099C 15 81            [12] 2881 	dec	sp
      00099E 15 81            [12] 2882 	dec	sp
                                   2883 ;	src/main.c:832: printf_fast_f("%d\n\r", LED_R);
      0009A0 A2 94            [12] 2884 	mov	c,_P14
      0009A2 E4               [12] 2885 	clr	a
      0009A3 33               [12] 2886 	rlc	a
      0009A4 FA               [12] 2887 	mov	r2,a
      0009A5 7B 00            [12] 2888 	mov	r3,#0x00
      0009A7 C0 02            [24] 2889 	push	ar2
      0009A9 C0 03            [24] 2890 	push	ar3
      0009AB 74r68            [12] 2891 	mov	a,#___str_32
      0009AD C0 E0            [24] 2892 	push	acc
      0009AF 74s02            [12] 2893 	mov	a,#(___str_32 >> 8)
      0009B1 C0 E0            [24] 2894 	push	acc
      0009B3 12r00r00         [24] 2895 	lcall	_printf_fast_f
      0009B6 E5 81            [12] 2896 	mov	a,sp
      0009B8 24 FC            [12] 2897 	add	a,#0xfc
      0009BA F5 81            [12] 2898 	mov	sp,a
      0009BC D0 04            [24] 2899 	pop	ar4
      0009BE D0 05            [24] 2900 	pop	ar5
      0009C0 D0 07            [24] 2901 	pop	ar7
                                   2902 ;	src/main.c:833: break;
      0009C2 02r0Br33         [24] 2903 	ljmp	00115$
                                   2904 ;	src/main.c:834: case '3' :
      0009C5                       2905 00106$:
                                   2906 ;	src/main.c:835: TOGGLE(LED_G);
      0009C5 B2 93            [12] 2907 	cpl	_P13
                                   2908 ;	src/main.c:836: printf_fast_f("LED_G=");
      0009C7 C0 07            [24] 2909 	push	ar7
      0009C9 C0 05            [24] 2910 	push	ar5
      0009CB C0 04            [24] 2911 	push	ar4
      0009CD 74r74            [12] 2912 	mov	a,#___str_34
      0009CF C0 E0            [24] 2913 	push	acc
      0009D1 74s02            [12] 2914 	mov	a,#(___str_34 >> 8)
      0009D3 C0 E0            [24] 2915 	push	acc
      0009D5 12r00r00         [24] 2916 	lcall	_printf_fast_f
      0009D8 15 81            [12] 2917 	dec	sp
      0009DA 15 81            [12] 2918 	dec	sp
                                   2919 ;	src/main.c:837: printf_fast_f("%d\n\r", LED_G);
      0009DC A2 93            [12] 2920 	mov	c,_P13
      0009DE E4               [12] 2921 	clr	a
      0009DF 33               [12] 2922 	rlc	a
      0009E0 FA               [12] 2923 	mov	r2,a
      0009E1 7B 00            [12] 2924 	mov	r3,#0x00
      0009E3 C0 02            [24] 2925 	push	ar2
      0009E5 C0 03            [24] 2926 	push	ar3
      0009E7 74r68            [12] 2927 	mov	a,#___str_32
      0009E9 C0 E0            [24] 2928 	push	acc
      0009EB 74s02            [12] 2929 	mov	a,#(___str_32 >> 8)
      0009ED C0 E0            [24] 2930 	push	acc
      0009EF 12r00r00         [24] 2931 	lcall	_printf_fast_f
      0009F2 E5 81            [12] 2932 	mov	a,sp
      0009F4 24 FC            [12] 2933 	add	a,#0xfc
      0009F6 F5 81            [12] 2934 	mov	sp,a
      0009F8 D0 04            [24] 2935 	pop	ar4
      0009FA D0 05            [24] 2936 	pop	ar5
      0009FC D0 07            [24] 2937 	pop	ar7
                                   2938 ;	src/main.c:838: break;
      0009FE 02r0Br33         [24] 2939 	ljmp	00115$
                                   2940 ;	src/main.c:839: case '4' :
      000A01                       2941 00107$:
                                   2942 ;	src/main.c:840: TOGGLE(LED_B);
      000A01 B2 92            [12] 2943 	cpl	_P12
                                   2944 ;	src/main.c:841: printf_fast_f("LED_B=");
      000A03 C0 07            [24] 2945 	push	ar7
      000A05 C0 05            [24] 2946 	push	ar5
      000A07 C0 04            [24] 2947 	push	ar4
      000A09 74r7B            [12] 2948 	mov	a,#___str_35
      000A0B C0 E0            [24] 2949 	push	acc
      000A0D 74s02            [12] 2950 	mov	a,#(___str_35 >> 8)
      000A0F C0 E0            [24] 2951 	push	acc
      000A11 12r00r00         [24] 2952 	lcall	_printf_fast_f
      000A14 15 81            [12] 2953 	dec	sp
      000A16 15 81            [12] 2954 	dec	sp
                                   2955 ;	src/main.c:842: printf_fast_f("%d\n\r", LED_B);
      000A18 A2 92            [12] 2956 	mov	c,_P12
      000A1A E4               [12] 2957 	clr	a
      000A1B 33               [12] 2958 	rlc	a
      000A1C FA               [12] 2959 	mov	r2,a
      000A1D 7B 00            [12] 2960 	mov	r3,#0x00
      000A1F C0 02            [24] 2961 	push	ar2
      000A21 C0 03            [24] 2962 	push	ar3
      000A23 74r68            [12] 2963 	mov	a,#___str_32
      000A25 C0 E0            [24] 2964 	push	acc
      000A27 74s02            [12] 2965 	mov	a,#(___str_32 >> 8)
      000A29 C0 E0            [24] 2966 	push	acc
      000A2B 12r00r00         [24] 2967 	lcall	_printf_fast_f
      000A2E E5 81            [12] 2968 	mov	a,sp
      000A30 24 FC            [12] 2969 	add	a,#0xfc
      000A32 F5 81            [12] 2970 	mov	sp,a
      000A34 D0 04            [24] 2971 	pop	ar4
      000A36 D0 05            [24] 2972 	pop	ar5
      000A38 D0 07            [24] 2973 	pop	ar7
                                   2974 ;	src/main.c:843: break;
      000A3A 02r0Br33         [24] 2975 	ljmp	00115$
                                   2976 ;	src/main.c:844: case '5' :
      000A3D                       2977 00108$:
                                   2978 ;	src/main.c:848: printf_fast_f("no MOTOR_EN\r\n");
      000A3D C0 07            [24] 2979 	push	ar7
      000A3F C0 05            [24] 2980 	push	ar5
      000A41 C0 04            [24] 2981 	push	ar4
      000A43 74r82            [12] 2982 	mov	a,#___str_36
      000A45 C0 E0            [24] 2983 	push	acc
      000A47 74s02            [12] 2984 	mov	a,#(___str_36 >> 8)
      000A49 C0 E0            [24] 2985 	push	acc
      000A4B 12r00r00         [24] 2986 	lcall	_printf_fast_f
      000A4E 15 81            [12] 2987 	dec	sp
      000A50 15 81            [12] 2988 	dec	sp
      000A52 D0 04            [24] 2989 	pop	ar4
      000A54 D0 05            [24] 2990 	pop	ar5
      000A56 D0 07            [24] 2991 	pop	ar7
                                   2992 ;	src/main.c:849: break;
      000A58 02r0Br33         [24] 2993 	ljmp	00115$
                                   2994 ;	src/main.c:850: case '6' :
      000A5B                       2995 00109$:
                                   2996 ;	src/main.c:851: TOGGLE(MOTOR_CW);
      000A5B B2 80            [12] 2997 	cpl	_P00
                                   2998 ;	src/main.c:852: printf_fast_f("MOTOR_CW=");
      000A5D C0 07            [24] 2999 	push	ar7
      000A5F C0 05            [24] 3000 	push	ar5
      000A61 C0 04            [24] 3001 	push	ar4
      000A63 74r90            [12] 3002 	mov	a,#___str_37
      000A65 C0 E0            [24] 3003 	push	acc
      000A67 74s02            [12] 3004 	mov	a,#(___str_37 >> 8)
      000A69 C0 E0            [24] 3005 	push	acc
      000A6B 12r00r00         [24] 3006 	lcall	_printf_fast_f
      000A6E 15 81            [12] 3007 	dec	sp
      000A70 15 81            [12] 3008 	dec	sp
                                   3009 ;	src/main.c:853: printf_fast_f("%d\n\r", MOTOR_CW);
      000A72 A2 80            [12] 3010 	mov	c,_P00
      000A74 E4               [12] 3011 	clr	a
      000A75 33               [12] 3012 	rlc	a
      000A76 FA               [12] 3013 	mov	r2,a
      000A77 7B 00            [12] 3014 	mov	r3,#0x00
      000A79 C0 02            [24] 3015 	push	ar2
      000A7B C0 03            [24] 3016 	push	ar3
      000A7D 74r68            [12] 3017 	mov	a,#___str_32
      000A7F C0 E0            [24] 3018 	push	acc
      000A81 74s02            [12] 3019 	mov	a,#(___str_32 >> 8)
      000A83 C0 E0            [24] 3020 	push	acc
      000A85 12r00r00         [24] 3021 	lcall	_printf_fast_f
      000A88 E5 81            [12] 3022 	mov	a,sp
      000A8A 24 FC            [12] 3023 	add	a,#0xfc
      000A8C F5 81            [12] 3024 	mov	sp,a
      000A8E D0 04            [24] 3025 	pop	ar4
      000A90 D0 05            [24] 3026 	pop	ar5
      000A92 D0 07            [24] 3027 	pop	ar7
                                   3028 ;	src/main.c:854: break;
      000A94 02r0Br33         [24] 3029 	ljmp	00115$
                                   3030 ;	src/main.c:855: case '7' :
      000A97                       3031 00110$:
                                   3032 ;	src/main.c:856: TOGGLE(MOTOR_CCW);
      000A97 B2 81            [12] 3033 	cpl	_P01
                                   3034 ;	src/main.c:857: printf_fast_f("MOTOR_CCW=");
      000A99 C0 07            [24] 3035 	push	ar7
      000A9B C0 05            [24] 3036 	push	ar5
      000A9D C0 04            [24] 3037 	push	ar4
      000A9F 74r9A            [12] 3038 	mov	a,#___str_38
      000AA1 C0 E0            [24] 3039 	push	acc
      000AA3 74s02            [12] 3040 	mov	a,#(___str_38 >> 8)
      000AA5 C0 E0            [24] 3041 	push	acc
      000AA7 12r00r00         [24] 3042 	lcall	_printf_fast_f
      000AAA 15 81            [12] 3043 	dec	sp
      000AAC 15 81            [12] 3044 	dec	sp
                                   3045 ;	src/main.c:858: printf_fast_f("%d\n\r", MOTOR_CCW);
      000AAE A2 81            [12] 3046 	mov	c,_P01
      000AB0 E4               [12] 3047 	clr	a
      000AB1 33               [12] 3048 	rlc	a
      000AB2 FA               [12] 3049 	mov	r2,a
      000AB3 7B 00            [12] 3050 	mov	r3,#0x00
      000AB5 C0 02            [24] 3051 	push	ar2
      000AB7 C0 03            [24] 3052 	push	ar3
      000AB9 74r68            [12] 3053 	mov	a,#___str_32
      000ABB C0 E0            [24] 3054 	push	acc
      000ABD 74s02            [12] 3055 	mov	a,#(___str_32 >> 8)
      000ABF C0 E0            [24] 3056 	push	acc
      000AC1 12r00r00         [24] 3057 	lcall	_printf_fast_f
      000AC4 E5 81            [12] 3058 	mov	a,sp
      000AC6 24 FC            [12] 3059 	add	a,#0xfc
      000AC8 F5 81            [12] 3060 	mov	sp,a
      000ACA D0 04            [24] 3061 	pop	ar4
      000ACC D0 05            [24] 3062 	pop	ar5
      000ACE D0 07            [24] 3063 	pop	ar7
                                   3064 ;	src/main.c:859: break;
                                   3065 ;	src/main.c:860: case '8' :
      000AD0 80 61            [24] 3066 	sjmp	00115$
      000AD2                       3067 00111$:
                                   3068 ;	src/main.c:861: TOGGLE(SEL_RX_POL);
      000AD2 B2 84            [12] 3069 	cpl	_P04
                                   3070 ;	src/main.c:862: printf_fast_f("SEL_RX_POL=");
      000AD4 C0 07            [24] 3071 	push	ar7
      000AD6 C0 05            [24] 3072 	push	ar5
      000AD8 C0 04            [24] 3073 	push	ar4
      000ADA 74rA5            [12] 3074 	mov	a,#___str_39
      000ADC C0 E0            [24] 3075 	push	acc
      000ADE 74s02            [12] 3076 	mov	a,#(___str_39 >> 8)
      000AE0 C0 E0            [24] 3077 	push	acc
      000AE2 12r00r00         [24] 3078 	lcall	_printf_fast_f
      000AE5 15 81            [12] 3079 	dec	sp
      000AE7 15 81            [12] 3080 	dec	sp
                                   3081 ;	src/main.c:863: printf_fast_f("%d\n\r", SEL_RX_POL);
      000AE9 A2 84            [12] 3082 	mov	c,_P04
      000AEB E4               [12] 3083 	clr	a
      000AEC 33               [12] 3084 	rlc	a
      000AED FA               [12] 3085 	mov	r2,a
      000AEE 7B 00            [12] 3086 	mov	r3,#0x00
      000AF0 C0 02            [24] 3087 	push	ar2
      000AF2 C0 03            [24] 3088 	push	ar3
      000AF4 74r68            [12] 3089 	mov	a,#___str_32
      000AF6 C0 E0            [24] 3090 	push	acc
      000AF8 74s02            [12] 3091 	mov	a,#(___str_32 >> 8)
      000AFA C0 E0            [24] 3092 	push	acc
      000AFC 12r00r00         [24] 3093 	lcall	_printf_fast_f
      000AFF E5 81            [12] 3094 	mov	a,sp
      000B01 24 FC            [12] 3095 	add	a,#0xfc
      000B03 F5 81            [12] 3096 	mov	sp,a
      000B05 D0 04            [24] 3097 	pop	ar4
      000B07 D0 05            [24] 3098 	pop	ar5
      000B09 D0 07            [24] 3099 	pop	ar7
                                   3100 ;	src/main.c:864: break;
                                   3101 ;	src/main.c:865: case 't' :
      000B0B 80 26            [24] 3102 	sjmp	00115$
      000B0D                       3103 00112$:
                                   3104 ;	src/main.c:866: printf_fast_f("count:%d\r\n", gu16TimeCnt);
      000B0D C0 07            [24] 3105 	push	ar7
      000B0F C0 05            [24] 3106 	push	ar5
      000B11 C0 04            [24] 3107 	push	ar4
      000B13 C0*02            [24] 3108 	push	_gu16TimeCnt
      000B15 C0*03            [24] 3109 	push	(_gu16TimeCnt + 1)
      000B17 74rB1            [12] 3110 	mov	a,#___str_40
      000B19 C0 E0            [24] 3111 	push	acc
      000B1B 74s02            [12] 3112 	mov	a,#(___str_40 >> 8)
      000B1D C0 E0            [24] 3113 	push	acc
      000B1F 12r00r00         [24] 3114 	lcall	_printf_fast_f
      000B22 E5 81            [12] 3115 	mov	a,sp
      000B24 24 FC            [12] 3116 	add	a,#0xfc
      000B26 F5 81            [12] 3117 	mov	sp,a
      000B28 D0 04            [24] 3118 	pop	ar4
      000B2A D0 05            [24] 3119 	pop	ar5
      000B2C D0 07            [24] 3120 	pop	ar7
                                   3121 ;	src/main.c:867: gu16TimeCnt = 0;
      000B2E E4               [12] 3122 	clr	a
      000B2F F5*02            [12] 3123 	mov	_gu16TimeCnt,a
      000B31 F5*03            [12] 3124 	mov	(_gu16TimeCnt + 1),a
                                   3125 ;	src/main.c:869: }
      000B33                       3126 00115$:
                                   3127 ;	src/main.c:872: if (u8PrevSwitch != SWITCH) { // 스위치 스테이트가 변하면..
      000B33 8C 03            [24] 3128 	mov	ar3,r4
      000B35 A2 95            [12] 3129 	mov	c,_P15
      000B37 E4               [12] 3130 	clr	a
      000B38 33               [12] 3131 	rlc	a
      000B39 FA               [12] 3132 	mov	r2,a
      000B3A EB               [12] 3133 	mov	a,r3
      000B3B B5 02 02         [24] 3134 	cjne	a,ar2,00279$
      000B3E 80 55            [24] 3135 	sjmp	00120$
      000B40                       3136 00279$:
                                   3137 ;	src/main.c:873: printf_fast_f("SWITCH:%d\n\r", SWITCH);
      000B40 A2 95            [12] 3138 	mov	c,_P15
      000B42 E4               [12] 3139 	clr	a
      000B43 33               [12] 3140 	rlc	a
      000B44 FA               [12] 3141 	mov	r2,a
      000B45 7B 00            [12] 3142 	mov	r3,#0x00
      000B47 C0 07            [24] 3143 	push	ar7
      000B49 C0 05            [24] 3144 	push	ar5
      000B4B C0 02            [24] 3145 	push	ar2
      000B4D C0 03            [24] 3146 	push	ar3
      000B4F 74rBC            [12] 3147 	mov	a,#___str_41
      000B51 C0 E0            [24] 3148 	push	acc
      000B53 74s02            [12] 3149 	mov	a,#(___str_41 >> 8)
      000B55 C0 E0            [24] 3150 	push	acc
      000B57 12r00r00         [24] 3151 	lcall	_printf_fast_f
      000B5A E5 81            [12] 3152 	mov	a,sp
      000B5C 24 FC            [12] 3153 	add	a,#0xfc
      000B5E F5 81            [12] 3154 	mov	sp,a
      000B60 D0 05            [24] 3155 	pop	ar5
      000B62 D0 07            [24] 3156 	pop	ar7
                                   3157 ;	src/main.c:874: if (SWITCH) { //눌렸을 때
      000B64 20 95 29         [24] 3158 	jb	_P15,00118$
                                   3159 ;	src/main.c:878: su8Cnt++;
      000B67 05*0B            [12] 3160 	inc	_main_su8Cnt_262145_138
                                   3161 ;	src/main.c:879: LED_R = su8Cnt&1;
      000B69 E5*0B            [12] 3162 	mov	a,_main_su8Cnt_262145_138
      000B6B 54 01            [12] 3163 	anl	a,#0x01
      000B6D 24 FF            [12] 3164 	add	a,#0xff
      000B6F 92 94            [24] 3165 	mov	_P14,c
                                   3166 ;	src/main.c:880: LED_G = (su8Cnt>>1)&1;
      000B71 E5*0B            [12] 3167 	mov	a,_main_su8Cnt_262145_138
      000B73 03               [12] 3168 	rr	a
      000B74 54 01            [12] 3169 	anl	a,#0x01
                                   3170 ;	assignBit
      000B76 FB               [12] 3171 	mov	r3,a
      000B77 24 FF            [12] 3172 	add	a,#0xff
      000B79 92 93            [24] 3173 	mov	_P13,c
                                   3174 ;	src/main.c:881: LED_B = (su8Cnt>>2)&1;
      000B7B E5*0B            [12] 3175 	mov	a,_main_su8Cnt_262145_138
      000B7D 03               [12] 3176 	rr	a
      000B7E 03               [12] 3177 	rr	a
      000B7F 54 01            [12] 3178 	anl	a,#0x01
                                   3179 ;	assignBit
      000B81 FA               [12] 3180 	mov	r2,a
      000B82 24 FF            [12] 3181 	add	a,#0xff
      000B84 92 92            [24] 3182 	mov	_P12,c
                                   3183 ;	src/main.c:884: MOTOR_CW = (su8Cnt>>1)&1;
                                   3184 ;	assignBit
      000B86 EB               [12] 3185 	mov	a,r3
      000B87 24 FF            [12] 3186 	add	a,#0xff
      000B89 92 80            [24] 3187 	mov	_P00,c
                                   3188 ;	src/main.c:885: MOTOR_CCW = (su8Cnt>>2)&1;
                                   3189 ;	assignBit
      000B8B EA               [12] 3190 	mov	a,r2
      000B8C 24 FF            [12] 3191 	add	a,#0xff
      000B8E 92 81            [24] 3192 	mov	_P01,c
      000B90                       3193 00118$:
                                   3194 ;	src/main.c:888: u8PrevSwitch = SWITCH;
      000B90 A2 95            [12] 3195 	mov	c,_P15
      000B92 E4               [12] 3196 	clr	a
      000B93 33               [12] 3197 	rlc	a
      000B94 FC               [12] 3198 	mov	r4,a
      000B95                       3199 00120$:
                                   3200 ;	src/main.c:891: if (SWITCH) {
      000B95 A2 95            [12] 3201 	mov	c,_P15
                                   3202 ;	src/main.c:894: if (u8UartRx != UART_RX) {
      000B97 A2 82            [12] 3203 	mov	c,_P02
                                   3204 ;	src/main.c:899: switch(u8StateRxPkt) {
      000B99 BF 00 02         [24] 3205 	cjne	r7,#0x00,00281$
      000B9C 80 0D            [24] 3206 	sjmp	00121$
      000B9E                       3207 00281$:
      000B9E BF 01 02         [24] 3208 	cjne	r7,#0x01,00282$
      000BA1 80 34            [24] 3209 	sjmp	00124$
      000BA3                       3210 00282$:
      000BA3 BF 02 02         [24] 3211 	cjne	r7,#0x02,00283$
      000BA6 80 6F            [24] 3212 	sjmp	00130$
      000BA8                       3213 00283$:
      000BA8 02r08rE8         [24] 3214 	ljmp	00144$
                                   3215 ;	src/main.c:900: case STATE_RxPKT_INIT :
      000BAB                       3216 00121$:
                                   3217 ;	src/main.c:901: if (get_octet_from_linefi(&u8RxUART)) {
      000BAB 90r00r0C         [24] 3218 	mov	dptr,#_main_u8RxUART_65536_128
      000BAE 75 F0 40         [24] 3219 	mov	b,#0x40
      000BB1 C0 07            [24] 3220 	push	ar7
      000BB3 C0 05            [24] 3221 	push	ar5
      000BB5 C0 04            [24] 3222 	push	ar4
      000BB7 12r00r00         [24] 3223 	lcall	_get_octet_from_linefi
      000BBA E5 82            [12] 3224 	mov	a,dpl
      000BBC D0 04            [24] 3225 	pop	ar4
      000BBE D0 05            [24] 3226 	pop	ar5
      000BC0 D0 07            [24] 3227 	pop	ar7
      000BC2 70 03            [24] 3228 	jnz	00284$
      000BC4 02r08rE8         [24] 3229 	ljmp	00144$
      000BC7                       3230 00284$:
                                   3231 ;	src/main.c:902: gu16TimeCnt = 0;
      000BC7 E4               [12] 3232 	clr	a
      000BC8 F5*02            [12] 3233 	mov	_gu16TimeCnt,a
      000BCA F5*03            [12] 3234 	mov	(_gu16TimeCnt + 1),a
                                   3235 ;	src/main.c:904: pu8RxUART[u8RxBufIdx++] = u8RxUART;
      000BCC 75*35 01         [24] 3236 	mov	_main_u8RxBufIdx_65536_128,#0x01
      000BCF 85*0C*0F         [24] 3237 	mov	_main_pu8RxUART_65536_128,_main_u8RxUART_65536_128
                                   3238 ;	src/main.c:905: u8StateRxPkt = STATE_RxPKT_START;
      000BD2 7F 01            [12] 3239 	mov	r7,#0x01
                                   3240 ;	src/main.c:907: break;
      000BD4 02r08rE8         [24] 3241 	ljmp	00144$
                                   3242 ;	src/main.c:908: case STATE_RxPKT_START :
      000BD7                       3243 00124$:
                                   3244 ;	src/main.c:909: if (get_octet_from_linefi(&u8RxUART)) {
      000BD7 90r00r0C         [24] 3245 	mov	dptr,#_main_u8RxUART_65536_128
      000BDA 75 F0 40         [24] 3246 	mov	b,#0x40
      000BDD C0 07            [24] 3247 	push	ar7
      000BDF C0 05            [24] 3248 	push	ar5
      000BE1 C0 04            [24] 3249 	push	ar4
      000BE3 12r00r00         [24] 3250 	lcall	_get_octet_from_linefi
      000BE6 E5 82            [12] 3251 	mov	a,dpl
      000BE8 D0 04            [24] 3252 	pop	ar4
      000BEA D0 05            [24] 3253 	pop	ar5
      000BEC D0 07            [24] 3254 	pop	ar7
      000BEE 60 12            [24] 3255 	jz	00128$
                                   3256 ;	src/main.c:910: gu16TimeCnt = 0;
      000BF0 E4               [12] 3257 	clr	a
      000BF1 F5*02            [12] 3258 	mov	_gu16TimeCnt,a
      000BF3 F5*03            [12] 3259 	mov	(_gu16TimeCnt + 1),a
                                   3260 ;	src/main.c:911: pu8RxUART[u8RxBufIdx++] = u8RxUART;
      000BF5 AB*35            [24] 3261 	mov	r3,_main_u8RxBufIdx_65536_128
      000BF7 05*35            [12] 3262 	inc	_main_u8RxBufIdx_65536_128
      000BF9 EB               [12] 3263 	mov	a,r3
      000BFA 24r0F            [12] 3264 	add	a,#_main_pu8RxUART_65536_128
      000BFC F8               [12] 3265 	mov	r0,a
      000BFD A6*0C            [24] 3266 	mov	@r0,_main_u8RxUART_65536_128
      000BFF 02r08rE8         [24] 3267 	ljmp	00144$
      000C02                       3268 00128$:
                                   3269 ;	src/main.c:913: else if (gu16TimeCnt > 1000) { // 1msec넘으면
      000C02 C3               [12] 3270 	clr	c
      000C03 74 E8            [12] 3271 	mov	a,#0xe8
      000C05 95*02            [12] 3272 	subb	a,_gu16TimeCnt
      000C07 74 03            [12] 3273 	mov	a,#0x03
      000C09 95*03            [12] 3274 	subb	a,(_gu16TimeCnt + 1)
      000C0B 40 03            [24] 3275 	jc	00286$
      000C0D 02r08rE8         [24] 3276 	ljmp	00144$
      000C10                       3277 00286$:
                                   3278 ;	src/main.c:914: u8RxLineFiLen = u8RxBufIdx;
      000C10 AD*35            [24] 3279 	mov	r5,_main_u8RxBufIdx_65536_128
                                   3280 ;	src/main.c:915: u8StateRxPkt = STATE_RxPKT_END;
      000C12 7F 02            [12] 3281 	mov	r7,#0x02
                                   3282 ;	src/main.c:917: break;
      000C14 02r08rE8         [24] 3283 	ljmp	00144$
                                   3284 ;	src/main.c:919: case STATE_RxPKT_END :
      000C17                       3285 00130$:
                                   3286 ;	src/main.c:920: switch(u8RxLineFiLen) {
      000C17 BD 01 47         [24] 3287 	cjne	r5,#0x01,00134$
                                   3288 ;	src/main.c:922: if (chk_my_addr(MY_ADDR, pu8RxUART[0])) {
      000C1A 85*0F*00         [24] 3289 	mov	_chk_my_addr_PARM_2,_main_pu8RxUART_65536_128
      000C1D 75 82 03         [24] 3290 	mov	dpl,#0x03
      000C20 C0 05            [24] 3291 	push	ar5
      000C22 C0 04            [24] 3292 	push	ar4
      000C24 12r05rCE         [24] 3293 	lcall	_chk_my_addr
      000C27 E5 82            [12] 3294 	mov	a,dpl
      000C29 D0 04            [24] 3295 	pop	ar4
      000C2B D0 05            [24] 3296 	pop	ar5
      000C2D 60 2D            [24] 3297 	jz	00133$
                                   3298 ;	src/main.c:924: printf_fast_f("Rx:%d\n\r", pu8RxUART[0]);
      000C2F AA*0F            [24] 3299 	mov	r2,_main_pu8RxUART_65536_128
      000C31 7B 00            [12] 3300 	mov	r3,#0x00
      000C33 C0 05            [24] 3301 	push	ar5
      000C35 C0 04            [24] 3302 	push	ar4
      000C37 C0 02            [24] 3303 	push	ar2
      000C39 C0 03            [24] 3304 	push	ar3
      000C3B 74rC8            [12] 3305 	mov	a,#___str_42
      000C3D C0 E0            [24] 3306 	push	acc
      000C3F 74s02            [12] 3307 	mov	a,#(___str_42 >> 8)
      000C41 C0 E0            [24] 3308 	push	acc
      000C43 12r00r00         [24] 3309 	lcall	_printf_fast_f
      000C46 E5 81            [12] 3310 	mov	a,sp
      000C48 24 FC            [12] 3311 	add	a,#0xfc
      000C4A F5 81            [12] 3312 	mov	sp,a
                                   3313 ;	src/main.c:925: print_one_octet_linefi(pu8RxUART[0]);
      000C4C 85*0F 82         [24] 3314 	mov	dpl,_main_pu8RxUART_65536_128
      000C4F 12r08r03         [24] 3315 	lcall	_print_one_octet_linefi
                                   3316 ;	src/main.c:926: ctrl_rgbled_motor(u8RxUART);
      000C52 85*0C 82         [24] 3317 	mov	dpl,_main_u8RxUART_65536_128
      000C55 12r05r6A         [24] 3318 	lcall	_ctrl_rgbled_motor
      000C58 D0 04            [24] 3319 	pop	ar4
      000C5A D0 05            [24] 3320 	pop	ar5
      000C5C                       3321 00133$:
                                   3322 ;	src/main.c:928: u8StateRxPkt = STATE_RxPKT_INIT;
      000C5C 7F 00            [12] 3323 	mov	r7,#0x00
                                   3324 ;	src/main.c:929: break;
      000C5E 02r08rE8         [24] 3325 	ljmp	00144$
                                   3326 ;	src/main.c:930: default : // 가변 옥텟(8  이상) 길이의  라이인파이 패킷 수신
      000C61                       3327 00134$:
                                   3328 ;	src/main.c:931: if ( u8RxLineFiLen < 8) { // 
      000C61 BD 08 00         [24] 3329 	cjne	r5,#0x08,00290$
      000C64                       3330 00290$:
      000C64 50 6D            [24] 3331 	jnc	00139$
                                   3332 ;	src/main.c:933: printf_fast_f("Rx size:%d\n\r", u8RxLineFiLen);
      000C66 8D 02            [24] 3333 	mov	ar2,r5
      000C68 7B 00            [12] 3334 	mov	r3,#0x00
      000C6A C0 05            [24] 3335 	push	ar5
      000C6C C0 04            [24] 3336 	push	ar4
      000C6E C0 02            [24] 3337 	push	ar2
      000C70 C0 03            [24] 3338 	push	ar3
      000C72 74rD0            [12] 3339 	mov	a,#___str_43
      000C74 C0 E0            [24] 3340 	push	acc
      000C76 74s02            [12] 3341 	mov	a,#(___str_43 >> 8)
      000C78 C0 E0            [24] 3342 	push	acc
      000C7A 12r00r00         [24] 3343 	lcall	_printf_fast_f
      000C7D E5 81            [12] 3344 	mov	a,sp
      000C7F 24 FC            [12] 3345 	add	a,#0xfc
      000C81 F5 81            [12] 3346 	mov	sp,a
      000C83 D0 04            [24] 3347 	pop	ar4
      000C85 D0 05            [24] 3348 	pop	ar5
                                   3349 ;	src/main.c:934: for (i=0; i<u8RxLineFiLen;i++) {
      000C87 7B 00            [12] 3350 	mov	r3,#0x00
      000C89                       3351 00150$:
      000C89 C3               [12] 3352 	clr	c
      000C8A EB               [12] 3353 	mov	a,r3
      000C8B 9D               [12] 3354 	subb	a,r5
      000C8C 50 2C            [24] 3355 	jnc	00135$
                                   3356 ;	src/main.c:935: printf_fast_f("0x%x ", pu8RxUART[i]);
      000C8E EB               [12] 3357 	mov	a,r3
      000C8F 24r0F            [12] 3358 	add	a,#_main_pu8RxUART_65536_128
      000C91 F9               [12] 3359 	mov	r1,a
      000C92 87 02            [24] 3360 	mov	ar2,@r1
      000C94 7E 00            [12] 3361 	mov	r6,#0x00
      000C96 C0 05            [24] 3362 	push	ar5
      000C98 C0 04            [24] 3363 	push	ar4
      000C9A C0 03            [24] 3364 	push	ar3
      000C9C C0 02            [24] 3365 	push	ar2
      000C9E C0 06            [24] 3366 	push	ar6
      000CA0 74rDD            [12] 3367 	mov	a,#___str_44
      000CA2 C0 E0            [24] 3368 	push	acc
      000CA4 74s02            [12] 3369 	mov	a,#(___str_44 >> 8)
      000CA6 C0 E0            [24] 3370 	push	acc
      000CA8 12r00r00         [24] 3371 	lcall	_printf_fast_f
      000CAB E5 81            [12] 3372 	mov	a,sp
      000CAD 24 FC            [12] 3373 	add	a,#0xfc
      000CAF F5 81            [12] 3374 	mov	sp,a
      000CB1 D0 03            [24] 3375 	pop	ar3
      000CB3 D0 04            [24] 3376 	pop	ar4
      000CB5 D0 05            [24] 3377 	pop	ar5
                                   3378 ;	src/main.c:934: for (i=0; i<u8RxLineFiLen;i++) {
      000CB7 0B               [12] 3379 	inc	r3
      000CB8 80 CF            [24] 3380 	sjmp	00150$
      000CBA                       3381 00135$:
                                   3382 ;	src/main.c:937: printf_fast_f("\n\r");
      000CBA C0 05            [24] 3383 	push	ar5
      000CBC C0 04            [24] 3384 	push	ar4
      000CBE 74r00            [12] 3385 	mov	a,#___str_0
      000CC0 C0 E0            [24] 3386 	push	acc
      000CC2 74s00            [12] 3387 	mov	a,#(___str_0 >> 8)
      000CC4 C0 E0            [24] 3388 	push	acc
      000CC6 12r00r00         [24] 3389 	lcall	_printf_fast_f
      000CC9 15 81            [12] 3390 	dec	sp
      000CCB 15 81            [12] 3391 	dec	sp
      000CCD D0 04            [24] 3392 	pop	ar4
      000CCF D0 05            [24] 3393 	pop	ar5
      000CD1 80 3E            [24] 3394 	sjmp	00140$
      000CD3                       3395 00139$:
                                   3396 ;	src/main.c:940: cp_buf2linefipacket(u8RxLineFiLen, pu8RxUART, &stLineFiPkt);
      000CD3 75*00r0F         [24] 3397 	mov	_cp_buf2linefipacket_PARM_2,#_main_pu8RxUART_65536_128
      000CD6 75*01 00         [24] 3398 	mov	(_cp_buf2linefipacket_PARM_2 + 1),#0x00
      000CD9 75*02 40         [24] 3399 	mov	(_cp_buf2linefipacket_PARM_2 + 2),#0x40
      000CDC 75*00r2D         [24] 3400 	mov	_cp_buf2linefipacket_PARM_3,#_main_stLineFiPkt_65536_128
      000CDF 75*01 00         [24] 3401 	mov	(_cp_buf2linefipacket_PARM_3 + 1),#0x00
      000CE2 75*02 40         [24] 3402 	mov	(_cp_buf2linefipacket_PARM_3 + 2),#0x40
      000CE5 8D 82            [24] 3403 	mov	dpl,r5
      000CE7 C0 05            [24] 3404 	push	ar5
      000CE9 C0 04            [24] 3405 	push	ar4
      000CEB 12r00r00         [24] 3406 	lcall	_cp_buf2linefipacket
                                   3407 ;	src/main.c:941: process_all_packet(&stLineFiPkt);
      000CEE 90r00r2D         [24] 3408 	mov	dptr,#_main_stLineFiPkt_65536_128
      000CF1 75 F0 40         [24] 3409 	mov	b,#0x40
      000CF4 12r07r1A         [24] 3410 	lcall	_process_all_packet
      000CF7 D0 04            [24] 3411 	pop	ar4
      000CF9 D0 05            [24] 3412 	pop	ar5
                                   3413 ;	src/main.c:943: if (gu8MyAddr == stLineFiPkt.u8Addr) {
      000CFB E5*2F            [12] 3414 	mov	a,(_main_stLineFiPkt_65536_128 + 0x0002)
      000CFD B5*00 11         [24] 3415 	cjne	a,_gu8MyAddr,00140$
                                   3416 ;	src/main.c:944: process_my_packet(&stLineFiPkt);
      000D00 90r00r2D         [24] 3417 	mov	dptr,#_main_stLineFiPkt_65536_128
      000D03 75 F0 40         [24] 3418 	mov	b,#0x40
      000D06 C0 05            [24] 3419 	push	ar5
      000D08 C0 04            [24] 3420 	push	ar4
      000D0A 12r05rEC         [24] 3421 	lcall	_process_my_packet
      000D0D D0 04            [24] 3422 	pop	ar4
      000D0F D0 05            [24] 3423 	pop	ar5
      000D11                       3424 00140$:
                                   3425 ;	src/main.c:948: u8StateRxPkt = STATE_RxPKT_INIT;
      000D11 7F 00            [12] 3426 	mov	r7,#0x00
                                   3427 ;	src/main.c:953: } //switch(u8StateRxPkt)
                                   3428 ;	src/main.c:955: }
      000D13 02r08rE8         [24] 3429 	ljmp	00144$
                                   3430 	.area CSEG    (CODE)
                                   3431 	.area CONST   (CODE)
                                   3432 	.area CONST   (CODE)
      000000                       3433 ___str_0:
      000000 0A                    3434 	.db 0x0a
      000001 0D                    3435 	.db 0x0d
      000002 00                    3436 	.db 0x00
                                   3437 	.area CSEG    (CODE)
                                   3438 	.area CONST   (CODE)
      000003                       3439 ___str_1:
      000003 73 65 6C 66 20        3440 	.ascii "self "
      000008 00                    3441 	.db 0x00
                                   3442 	.area CSEG    (CODE)
                                   3443 	.area CONST   (CODE)
      000009                       3444 ___str_2:
      000009 63 72 6F 73 73        3445 	.ascii "cross"
      00000E 00                    3446 	.db 0x00
                                   3447 	.area CSEG    (CODE)
                                   3448 	.area CONST   (CODE)
      00000F                       3449 ___str_3:
      00000F 62 6F 74 68 20        3450 	.ascii "both "
      000014 00                    3451 	.db 0x00
                                   3452 	.area CSEG    (CODE)
                                   3453 	.area CONST   (CODE)
      000015                       3454 ___str_4:
      000015 20 6F 75 74 70 75 74  3455 	.ascii " output:This is UART%d"
             3A 54 68 69 73 20 69
             73 20 55 41 52 54 25
             64
      00002B 0A                    3456 	.db 0x0a
      00002C 0D                    3457 	.db 0x0d
      00002D 00                    3458 	.db 0x00
                                   3459 	.area CSEG    (CODE)
                                   3460 	.area CONST   (CODE)
      00002E                       3461 ___str_5:
      00002E 0D                    3462 	.db 0x0d
      00002F 0A                    3463 	.db 0x0a
      000030 00                    3464 	.db 0x00
                                   3465 	.area CSEG    (CODE)
                                   3466 	.area CONST   (CODE)
      000031                       3467 ___str_6:
      000031 25 63                 3468 	.ascii "%c"
      000033 00                    3469 	.db 0x00
                                   3470 	.area CSEG    (CODE)
                                   3471 	.area CONST   (CODE)
      000034                       3472 ___str_7:
      000034 0D                    3473 	.db 0x0d
      000035 0A                    3474 	.db 0x0a
      000036 69 6E 70 75 74 3A 54  3475 	.ascii "input:This is UART%d"
             68 69 73 20 69 73 20
             55 41 52 54 25 64
      00004A 00                    3476 	.db 0x00
                                   3477 	.area CSEG    (CODE)
                                   3478 	.area CONST   (CODE)
      00004B                       3479 ___str_8:
      00004B 49 64 6C 65 20 70 72  3480 	.ascii "Idle preamble on/off"
             65 61 6D 62 6C 65 20
             6F 6E 2F 6F 66 66
      00005F 0D                    3481 	.db 0x0d
      000060 0A                    3482 	.db 0x0a
      000061 00                    3483 	.db 0x00
                                   3484 	.area CSEG    (CODE)
                                   3485 	.area CONST   (CODE)
      000062                       3486 ___str_9:
      000062 4C 69 6E 65 46 69 20  3487 	.ascii "LineFi Power Off"
             50 6F 77 65 72 20 4F
             66 66
      000072 0D                    3488 	.db 0x0d
      000073 0A                    3489 	.db 0x0a
      000074 00                    3490 	.db 0x00
                                   3491 	.area CSEG    (CODE)
                                   3492 	.area CONST   (CODE)
      000075                       3493 ___str_10:
      000075 4C 69 6E 65 46 69 20  3494 	.ascii "LineFi Power On"
             50 6F 77 65 72 20 4F
             6E
      000084 0D                    3495 	.db 0x0d
      000085 0A                    3496 	.db 0x0a
      000086 00                    3497 	.db 0x00
                                   3498 	.area CSEG    (CODE)
                                   3499 	.area CONST   (CODE)
      000087                       3500 ___str_11:
      000087 4C 69 6E 65 46 69 20  3501 	.ascii "LineFi Uart Tx Low"
             55 61 72 74 20 54 78
             20 4C 6F 77
      000099 0D                    3502 	.db 0x0d
      00009A 0A                    3503 	.db 0x0a
      00009B 00                    3504 	.db 0x00
                                   3505 	.area CSEG    (CODE)
                                   3506 	.area CONST   (CODE)
      00009C                       3507 ___str_12:
      00009C 4C 69 6E 65 46 69 20  3508 	.ascii "LineFi Uart Tx High"
             55 61 72 74 20 54 78
             20 48 69 67 68
      0000AF 0D                    3509 	.db 0x0d
      0000B0 0A                    3510 	.db 0x0a
      0000B1 00                    3511 	.db 0x00
                                   3512 	.area CSEG    (CODE)
                                   3513 	.area CONST   (CODE)
      0000B2                       3514 ___str_13:
      0000B2 4C 69 6E 65 46 69 20  3515 	.ascii "LineFi CSC rx FSM Off"
             43 53 43 20 72 78 20
             46 53 4D 20 4F 66 66
      0000C7 0D                    3516 	.db 0x0d
      0000C8 0A                    3517 	.db 0x0a
      0000C9 00                    3518 	.db 0x00
                                   3519 	.area CSEG    (CODE)
                                   3520 	.area CONST   (CODE)
      0000CA                       3521 ___str_14:
      0000CA 4C 69 6E 65 46 69 20  3522 	.ascii "LineFi CSC rx FSM ON"
             43 53 43 20 72 78 20
             46 53 4D 20 4F 4E
      0000DE 0D                    3523 	.db 0x0d
      0000DF 0A                    3524 	.db 0x0a
      0000E0 00                    3525 	.db 0x00
                                   3526 	.area CSEG    (CODE)
                                   3527 	.area CONST   (CODE)
      0000E1                       3528 ___str_15:
      0000E1 56 65 72 73 69 6F 6E  3529 	.ascii "Version 1.4 on 20231026"
             20 31 2E 34 20 6F 6E
             20 32 30 32 33 31 30
             32 36
      0000F8 0D                    3530 	.db 0x0d
      0000F9 0A                    3531 	.db 0x0a
      0000FA 00                    3532 	.db 0x00
                                   3533 	.area CSEG    (CODE)
                                   3534 	.area CONST   (CODE)
      0000FB                       3535 ___str_16:
      0000FB 31 3A 20 64 6F 77 6E  3536 	.ascii "1: downlink packet 1"
             6C 69 6E 6B 20 70 61
             63 6B 65 74 20 31
      00010F 0D                    3537 	.db 0x0d
      000110 0A                    3538 	.db 0x0a
      000111 00                    3539 	.db 0x00
                                   3540 	.area CSEG    (CODE)
                                   3541 	.area CONST   (CODE)
      000112                       3542 ___str_17:
      000112 32 3A 20 64 6F 77 6E  3543 	.ascii "2: downlink packet 2"
             6C 69 6E 6B 20 70 61
             63 6B 65 74 20 32
      000126 0D                    3544 	.db 0x0d
      000127 0A                    3545 	.db 0x0a
      000128 00                    3546 	.db 0x00
                                   3547 	.area CSEG    (CODE)
                                   3548 	.area CONST   (CODE)
      000129                       3549 ___str_18:
      000129 33 3A 20 75 70 6C 69  3550 	.ascii "3: uplink idle preamble on/off"
             6E 6B 20 69 64 6C 65
             20 70 72 65 61 6D 62
             6C 65 20 6F 6E 2F 6F
             66 66
      000147 0D                    3551 	.db 0x0d
      000148 0A                    3552 	.db 0x0a
      000149 00                    3553 	.db 0x00
                                   3554 	.area CSEG    (CODE)
                                   3555 	.area CONST   (CODE)
      00014A                       3556 ___str_19:
      00014A 70 2F 50 3A 20 4C 69  3557 	.ascii "p/P: LineFi Power off/on"
             6E 65 46 69 20 50 6F
             77 65 72 20 6F 66 66
             2F 6F 6E
      000162 0D                    3558 	.db 0x0d
      000163 0A                    3559 	.db 0x0a
      000164 00                    3560 	.db 0x00
                                   3561 	.area CSEG    (CODE)
                                   3562 	.area CONST   (CODE)
      000165                       3563 ___str_20:
      000165 74 2F 54 3A 20 4C 69  3564 	.ascii "t/T: LineFi Uart Tx Low/High"
             6E 65 46 69 20 55 61
             72 74 20 54 78 20 4C
             6F 77 2F 48 69 67 68
      000181 0D                    3565 	.db 0x0d
      000182 0A                    3566 	.db 0x0a
      000183 00                    3567 	.db 0x00
                                   3568 	.area CSEG    (CODE)
                                   3569 	.area CONST   (CODE)
      000184                       3570 ___str_21:
      000184 73 2F 53 3A 20 4C 69  3571 	.ascii "s/S: LineFie CSC Rx FSM off/on"
             6E 65 46 69 65 20 43
             53 43 20 52 78 20 46
             53 4D 20 6F 66 66 2F
             6F 6E
      0001A2 0D                    3572 	.db 0x0d
      0001A3 0A                    3573 	.db 0x0a
      0001A4 00                    3574 	.db 0x00
                                   3575 	.area CSEG    (CODE)
                                   3576 	.area CONST   (CODE)
      0001A5                       3577 ___str_22:
      0001A5 74 65 73 74 20 70 72  3578 	.ascii "test procedure: p -> P -> T -> S -> 1 or 2"
             6F 63 65 64 75 72 65
             3A 20 70 20 2D 3E 20
             50 20 2D 3E 20 54 20
             2D 3E 20 53 20 2D 3E
             20 31 20 6F 72 20 32
      0001CF 0D                    3579 	.db 0x0d
      0001D0 0A                    3580 	.db 0x0a
      0001D1 00                    3581 	.db 0x00
                                   3582 	.area CSEG    (CODE)
                                   3583 	.area CONST   (CODE)
      0001D2                       3584 ___str_23:
      0001D2 4D 79 20 61 64 64 72  3585 	.ascii "My address is 0x%x"
             65 73 73 20 69 73 20
             30 78 25 78
      0001E4 0D                    3586 	.db 0x0d
      0001E5 0A                    3587 	.db 0x0a
      0001E6 00                    3588 	.db 0x00
                                   3589 	.area CSEG    (CODE)
                                   3590 	.area CONST   (CODE)
      0001E7                       3591 ___str_24:
      0001E7 73 65 74 20 61 64 64  3592 	.ascii "set address as %d"
             72 65 73 73 20 61 73
             20 25 64
      0001F8 0D                    3593 	.db 0x0d
      0001F9 0A                    3594 	.db 0x0a
      0001FA 00                    3595 	.db 0x00
                                   3596 	.area CSEG    (CODE)
                                   3597 	.area CONST   (CODE)
      0001FB                       3598 ___str_25:
      0001FB 4D 79 20 61 64 64 72  3599 	.ascii "My address is %d"
             65 73 73 20 69 73 20
             25 64
      00020B 0D                    3600 	.db 0x0d
      00020C 0A                    3601 	.db 0x0a
      00020D 00                    3602 	.db 0x00
                                   3603 	.area CSEG    (CODE)
                                   3604 	.area CONST   (CODE)
      00020E                       3605 ___str_26:
      00020E 61 64 64 72 65 73 73  3606 	.ascii "address:%u"
             3A 25 75
      000218 0D                    3607 	.db 0x0d
      000219 0A                    3608 	.db 0x0a
      00021A 00                    3609 	.db 0x00
                                   3610 	.area CSEG    (CODE)
                                   3611 	.area CONST   (CODE)
      00021B                       3612 ___str_27:
      00021B 63 6F 6D 6D 61 6E 64  3613 	.ascii "command:%u"
             3A 25 75
      000225 0D                    3614 	.db 0x0d
      000226 0A                    3615 	.db 0x0a
      000227 00                    3616 	.db 0x00
                                   3617 	.area CSEG    (CODE)
                                   3618 	.area CONST   (CODE)
      000228                       3619 ___str_28:
      000228 54 68 69 73 20 69 73  3620 	.ascii "This is UART0"
             20 55 41 52 54 30
      000235 0A                    3621 	.db 0x0a
      000236 0D                    3622 	.db 0x0d
      000237 00                    3623 	.db 0x00
                                   3624 	.area CSEG    (CODE)
                                   3625 	.area CONST   (CODE)
      000238                       3626 ___str_29:
      000238 4C 69 6E 65 46 69 20  3627 	.ascii "LineFi Slave Monitor"
             53 6C 61 76 65 20 4D
             6F 6E 69 74 6F 72
      00024C 0A                    3628 	.db 0x0a
      00024D 0D                    3629 	.db 0x0d
      00024E 00                    3630 	.db 0x00
                                   3631 	.area CSEG    (CODE)
                                   3632 	.area CONST   (CODE)
      00024F                       3633 ___str_30:
      00024F 54 68 69 73 20 69 73  3634 	.ascii "This is UART1"
             20 55 41 52 54 31
      00025C 0A                    3635 	.db 0x0a
      00025D 0D                    3636 	.db 0x0d
      00025E 00                    3637 	.db 0x00
                                   3638 	.area CSEG    (CODE)
                                   3639 	.area CONST   (CODE)
      00025F                       3640 ___str_31:
      00025F 55 41 52 54 5F 54 58  3641 	.ascii "UART_TX="
             3D
      000267 00                    3642 	.db 0x00
                                   3643 	.area CSEG    (CODE)
                                   3644 	.area CONST   (CODE)
      000268                       3645 ___str_32:
      000268 25 64                 3646 	.ascii "%d"
      00026A 0A                    3647 	.db 0x0a
      00026B 0D                    3648 	.db 0x0d
      00026C 00                    3649 	.db 0x00
                                   3650 	.area CSEG    (CODE)
                                   3651 	.area CONST   (CODE)
      00026D                       3652 ___str_33:
      00026D 4C 45 44 5F 52 3D     3653 	.ascii "LED_R="
      000273 00                    3654 	.db 0x00
                                   3655 	.area CSEG    (CODE)
                                   3656 	.area CONST   (CODE)
      000274                       3657 ___str_34:
      000274 4C 45 44 5F 47 3D     3658 	.ascii "LED_G="
      00027A 00                    3659 	.db 0x00
                                   3660 	.area CSEG    (CODE)
                                   3661 	.area CONST   (CODE)
      00027B                       3662 ___str_35:
      00027B 4C 45 44 5F 42 3D     3663 	.ascii "LED_B="
      000281 00                    3664 	.db 0x00
                                   3665 	.area CSEG    (CODE)
                                   3666 	.area CONST   (CODE)
      000282                       3667 ___str_36:
      000282 6E 6F 20 4D 4F 54 4F  3668 	.ascii "no MOTOR_EN"
             52 5F 45 4E
      00028D 0D                    3669 	.db 0x0d
      00028E 0A                    3670 	.db 0x0a
      00028F 00                    3671 	.db 0x00
                                   3672 	.area CSEG    (CODE)
                                   3673 	.area CONST   (CODE)
      000290                       3674 ___str_37:
      000290 4D 4F 54 4F 52 5F 43  3675 	.ascii "MOTOR_CW="
             57 3D
      000299 00                    3676 	.db 0x00
                                   3677 	.area CSEG    (CODE)
                                   3678 	.area CONST   (CODE)
      00029A                       3679 ___str_38:
      00029A 4D 4F 54 4F 52 5F 43  3680 	.ascii "MOTOR_CCW="
             43 57 3D
      0002A4 00                    3681 	.db 0x00
                                   3682 	.area CSEG    (CODE)
                                   3683 	.area CONST   (CODE)
      0002A5                       3684 ___str_39:
      0002A5 53 45 4C 5F 52 58 5F  3685 	.ascii "SEL_RX_POL="
             50 4F 4C 3D
      0002B0 00                    3686 	.db 0x00
                                   3687 	.area CSEG    (CODE)
                                   3688 	.area CONST   (CODE)
      0002B1                       3689 ___str_40:
      0002B1 63 6F 75 6E 74 3A 25  3690 	.ascii "count:%d"
             64
      0002B9 0D                    3691 	.db 0x0d
      0002BA 0A                    3692 	.db 0x0a
      0002BB 00                    3693 	.db 0x00
                                   3694 	.area CSEG    (CODE)
                                   3695 	.area CONST   (CODE)
      0002BC                       3696 ___str_41:
      0002BC 53 57 49 54 43 48 3A  3697 	.ascii "SWITCH:%d"
             25 64
      0002C5 0A                    3698 	.db 0x0a
      0002C6 0D                    3699 	.db 0x0d
      0002C7 00                    3700 	.db 0x00
                                   3701 	.area CSEG    (CODE)
                                   3702 	.area CONST   (CODE)
      0002C8                       3703 ___str_42:
      0002C8 52 78 3A 25 64        3704 	.ascii "Rx:%d"
      0002CD 0A                    3705 	.db 0x0a
      0002CE 0D                    3706 	.db 0x0d
      0002CF 00                    3707 	.db 0x00
                                   3708 	.area CSEG    (CODE)
                                   3709 	.area CONST   (CODE)
      0002D0                       3710 ___str_43:
      0002D0 52 78 20 73 69 7A 65  3711 	.ascii "Rx size:%d"
             3A 25 64
      0002DA 0A                    3712 	.db 0x0a
      0002DB 0D                    3713 	.db 0x0d
      0002DC 00                    3714 	.db 0x00
                                   3715 	.area CSEG    (CODE)
                                   3716 	.area CONST   (CODE)
      0002DD                       3717 ___str_44:
      0002DD 30 78 25 78 20        3718 	.ascii "0x%x "
      0002E2 00                    3719 	.db 0x00
                                   3720 	.area CSEG    (CODE)
                                   3721 	.area CABS    (ABS,CODE)
      003700                       3722 	.org 0x3700
      003700                       3723 _gpcEEPROM:
      003700 00                    3724 	.db 0x00
      003701 00                    3725 	.db 0x00
      003702 00                    3726 	.db 0x00
      003703 00                    3727 	.db 0x00
      003704 00                    3728 	.db 0x00
      003705 00                    3729 	.db 0x00
      003706 00                    3730 	.db 0x00
      003707 00                    3731 	.db 0x00
      003708 00                    3732 	.db 0x00
      003709 00                    3733 	.db 0x00
      00370A 00                    3734 	.db 0x00
      00370B 00                    3735 	.db 0x00
      00370C 00                    3736 	.db 0x00
      00370D 00                    3737 	.db 0x00
      00370E 00                    3738 	.db 0x00
      00370F 00                    3739 	.db 0x00
      003710 00                    3740 	.db 0x00
      003711 00                    3741 	.db 0x00
      003712 00                    3742 	.db 0x00
      003713 00                    3743 	.db 0x00
      003714 00                    3744 	.db 0x00
      003715 00                    3745 	.db 0x00
      003716 00                    3746 	.db 0x00
      003717 00                    3747 	.db 0x00
      003718 00                    3748 	.db 0x00
      003719 00                    3749 	.db 0x00
      00371A 00                    3750 	.db 0x00
      00371B 00                    3751 	.db 0x00
      00371C 00                    3752 	.db 0x00
      00371D 00                    3753 	.db 0x00
      00371E 00                    3754 	.db 0x00
      00371F 00                    3755 	.db 0x00
      003720 00                    3756 	.db 0x00
      003721 00                    3757 	.db 0x00
      003722 00                    3758 	.db 0x00
      003723 00                    3759 	.db 0x00
      003724 00                    3760 	.db 0x00
      003725 00                    3761 	.db 0x00
      003726 00                    3762 	.db 0x00
      003727 00                    3763 	.db 0x00
      003728 00                    3764 	.db 0x00
      003729 00                    3765 	.db 0x00
      00372A 00                    3766 	.db 0x00
      00372B 00                    3767 	.db 0x00
      00372C 00                    3768 	.db 0x00
      00372D 00                    3769 	.db 0x00
      00372E 00                    3770 	.db 0x00
      00372F 00                    3771 	.db 0x00
      003730 00                    3772 	.db 0x00
      003731 00                    3773 	.db 0x00
      003732 00                    3774 	.db 0x00
      003733 00                    3775 	.db 0x00
      003734 00                    3776 	.db 0x00
      003735 00                    3777 	.db 0x00
      003736 00                    3778 	.db 0x00
      003737 00                    3779 	.db 0x00
      003738 00                    3780 	.db 0x00
      003739 00                    3781 	.db 0x00
      00373A 00                    3782 	.db 0x00
      00373B 00                    3783 	.db 0x00
      00373C 00                    3784 	.db 0x00
      00373D 00                    3785 	.db 0x00
      00373E 00                    3786 	.db 0x00
      00373F 00                    3787 	.db 0x00
      003740 00                    3788 	.db 0x00
      003741 00                    3789 	.db 0x00
      003742 00                    3790 	.db 0x00
      003743 00                    3791 	.db 0x00
      003744 00                    3792 	.db 0x00
      003745 00                    3793 	.db 0x00
      003746 00                    3794 	.db 0x00
      003747 00                    3795 	.db 0x00
      003748 00                    3796 	.db 0x00
      003749 00                    3797 	.db 0x00
      00374A 00                    3798 	.db 0x00
      00374B 00                    3799 	.db 0x00
      00374C 00                    3800 	.db 0x00
      00374D 00                    3801 	.db 0x00
      00374E 00                    3802 	.db 0x00
      00374F 00                    3803 	.db 0x00
      003750 00                    3804 	.db 0x00
      003751 00                    3805 	.db 0x00
      003752 00                    3806 	.db 0x00
      003753 00                    3807 	.db 0x00
      003754 00                    3808 	.db 0x00
      003755 00                    3809 	.db 0x00
      003756 00                    3810 	.db 0x00
      003757 00                    3811 	.db 0x00
      003758 00                    3812 	.db 0x00
      003759 00                    3813 	.db 0x00
      00375A 00                    3814 	.db 0x00
      00375B 00                    3815 	.db 0x00
      00375C 00                    3816 	.db 0x00
      00375D 00                    3817 	.db 0x00
      00375E 00                    3818 	.db 0x00
      00375F 00                    3819 	.db 0x00
      003760 00                    3820 	.db 0x00
      003761 00                    3821 	.db 0x00
      003762 00                    3822 	.db 0x00
      003763 00                    3823 	.db 0x00
      003764 00                    3824 	.db 0x00
      003765 00                    3825 	.db 0x00
      003766 00                    3826 	.db 0x00
      003767 00                    3827 	.db 0x00
      003768 00                    3828 	.db 0x00
      003769 00                    3829 	.db 0x00
      00376A 00                    3830 	.db 0x00
      00376B 00                    3831 	.db 0x00
      00376C 00                    3832 	.db 0x00
      00376D 00                    3833 	.db 0x00
      00376E 00                    3834 	.db 0x00
      00376F 00                    3835 	.db 0x00
      003770 00                    3836 	.db 0x00
      003771 00                    3837 	.db 0x00
      003772 00                    3838 	.db 0x00
      003773 00                    3839 	.db 0x00
      003774 00                    3840 	.db 0x00
      003775 00                    3841 	.db 0x00
      003776 00                    3842 	.db 0x00
      003777 00                    3843 	.db 0x00
      003778 00                    3844 	.db 0x00
      003779 00                    3845 	.db 0x00
      00377A 00                    3846 	.db 0x00
      00377B 00                    3847 	.db 0x00
      00377C 00                    3848 	.db 0x00
      00377D 00                    3849 	.db 0x00
      00377E 00                    3850 	.db 0x00
      00377F 00                    3851 	.db 0x00
